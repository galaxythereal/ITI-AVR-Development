
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000243e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000243e  000024b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002514  00000000  00000000  000024cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001096  00000000  00000000  000049e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000796f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000885a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000099f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a1c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 80 11 	call	0x2300	; 0x2300 <main>
      7a:	0c 94 1d 12 	jmp	0x243a	; 0x243a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MUART_voidInit>:





void MUART_voidInit(){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62

	UCSRB = 0b00011000;
     b3e:	ea e2       	ldi	r30, 0x2A	; 42
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	80 83       	st	Z, r24

	UCSRC = 0b10000110;
     b46:	e0 e4       	ldi	r30, 0x40	; 64
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	86 e8       	ldi	r24, 0x86	; 134
     b4c:	80 83       	st	Z, r24

	/*Select Baud Rate 9600*/
	UBRRL = 51;
     b4e:	e9 e2       	ldi	r30, 0x29	; 41
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	83 e3       	ldi	r24, 0x33	; 51
     b54:	80 83       	st	Z, r24
}
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <MUART_voidTransmit>:

void MUART_voidTransmit(u8 A_u8Data){
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	0f 92       	push	r0
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	89 83       	std	Y+1, r24	; 0x01

	/*Wait Till Transmit Buffer Is empty*/
	while(GET_BIT(UCSRA, 5) == 0);
     b68:	eb e2       	ldi	r30, 0x2B	; 43
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	82 95       	swap	r24
     b70:	86 95       	lsr	r24
     b72:	87 70       	andi	r24, 0x07	; 7
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	81 70       	andi	r24, 0x01	; 1
     b7a:	90 70       	andi	r25, 0x00	; 0
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	a1 f3       	breq	.-24     	; 0xb68 <MUART_voidTransmit+0xc>
	UDR = A_u8Data;
     b80:	ec e2       	ldi	r30, 0x2C	; 44
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	80 83       	st	Z, r24

}
     b88:	0f 90       	pop	r0
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <MUART_u8Recieve>:

u8 MUART_u8Recieve(){
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
	/*Wait Till Recieve Buffer Is complete*/
	while(GET_BIT(UCSRA, 7) == 0);
     b98:	eb e2       	ldi	r30, 0x2B	; 43
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	88 23       	and	r24, r24
     ba0:	dc f7       	brge	.-10     	; 0xb98 <MUART_u8Recieve+0x8>
	return UDR;
     ba2:	ec e2       	ldi	r30, 0x2C	; 44
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
}
     ba8:	cf 91       	pop	r28
     baa:	df 91       	pop	r29
     bac:	08 95       	ret

00000bae <MTimer_voidTimerInit>:
 *
 * */



void MTimer_voidTimerInit(u8 A_u8TimerMode){
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	0f 92       	push	r0
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	89 83       	std	Y+1, r24	; 0x01

	if(A_u8TimerMode == 0){
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	88 23       	and	r24, r24
     bbe:	b1 f4       	brne	.+44     	; 0xbec <MTimer_voidTimerInit+0x3e>
		/*Normal Mode*/
		CLR_BIT(TCCR0, 6);
     bc0:	a3 e5       	ldi	r26, 0x53	; 83
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e3 e5       	ldi	r30, 0x53	; 83
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8f 7b       	andi	r24, 0xBF	; 191
     bcc:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);
     bce:	a3 e5       	ldi	r26, 0x53	; 83
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e3 e5       	ldi	r30, 0x53	; 83
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	87 7f       	andi	r24, 0xF7	; 247
     bda:	8c 93       	st	X, r24

		/*Set Timer Interrupt Enable*/
		SET_BIT(TIMSK, 0);
     bdc:	a9 e5       	ldi	r26, 0x59	; 89
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e9 e5       	ldi	r30, 0x59	; 89
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	81 60       	ori	r24, 0x01	; 1
     be8:	8c 93       	st	X, r24
     bea:	38 c0       	rjmp	.+112    	; 0xc5c <MTimer_voidTimerInit+0xae>
	}
	else if(A_u8TimerMode == 1){
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	b1 f4       	brne	.+44     	; 0xc1e <MTimer_voidTimerInit+0x70>
		/*CTC Mode*/
		SET_BIT(TCCR0,3);
     bf2:	a3 e5       	ldi	r26, 0x53	; 83
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e3 e5       	ldi	r30, 0x53	; 83
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	88 60       	ori	r24, 0x08	; 8
     bfe:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
     c00:	a3 e5       	ldi	r26, 0x53	; 83
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e3 e5       	ldi	r30, 0x53	; 83
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8f 7b       	andi	r24, 0xBF	; 191
     c0c:	8c 93       	st	X, r24

		/*SET CTC Interrupt Enable*/
		SET_BIT(TIMSK,1);
     c0e:	a9 e5       	ldi	r26, 0x59	; 89
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e9 e5       	ldi	r30, 0x59	; 89
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	82 60       	ori	r24, 0x02	; 2
     c1a:	8c 93       	st	X, r24
     c1c:	1f c0       	rjmp	.+62     	; 0xc5c <MTimer_voidTimerInit+0xae>
	}else if(A_u8TimerMode == 2){
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	e1 f4       	brne	.+56     	; 0xc5c <MTimer_voidTimerInit+0xae>
		SET_BIT(TCCR0, 3);
     c24:	a3 e5       	ldi	r26, 0x53	; 83
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e3 e5       	ldi	r30, 0x53	; 83
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	88 60       	ori	r24, 0x08	; 8
     c30:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
     c32:	a3 e5       	ldi	r26, 0x53	; 83
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e3 e5       	ldi	r30, 0x53	; 83
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	80 64       	ori	r24, 0x40	; 64
     c3e:	8c 93       	st	X, r24

		/*Clear on compare set On Top*/
		SET_BIT(TCCR0,5);
     c40:	a3 e5       	ldi	r26, 0x53	; 83
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e3 e5       	ldi	r30, 0x53	; 83
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	80 62       	ori	r24, 0x20	; 32
     c4c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 4);
     c4e:	a3 e5       	ldi	r26, 0x53	; 83
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e3 e5       	ldi	r30, 0x53	; 83
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8f 7e       	andi	r24, 0xEF	; 239
     c5a:	8c 93       	st	X, r24

	}
}
     c5c:	0f 90       	pop	r0
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <MTimer_voidStart>:


void MTimer_voidStart(){
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Choose Prescaller 8
	 * */
	CLR_BIT(TCCR0, 0);
     c6c:	a3 e5       	ldi	r26, 0x53	; 83
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e3 e5       	ldi	r30, 0x53	; 83
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	8e 7f       	andi	r24, 0xFE	; 254
     c78:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 1);
     c7a:	a3 e5       	ldi	r26, 0x53	; 83
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e3 e5       	ldi	r30, 0x53	; 83
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	82 60       	ori	r24, 0x02	; 2
     c86:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 2);
     c88:	a3 e5       	ldi	r26, 0x53	; 83
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e3 e5       	ldi	r30, 0x53	; 83
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	8b 7f       	andi	r24, 0xFB	; 251
     c94:	8c 93       	st	X, r24

}
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <MTimer_voidStop>:

void MTimer_voidStop(){
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, 0);
     ca4:	a3 e5       	ldi	r26, 0x53	; 83
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e3 e5       	ldi	r30, 0x53	; 83
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8e 7f       	andi	r24, 0xFE	; 254
     cb0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 1);
     cb2:	a3 e5       	ldi	r26, 0x53	; 83
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e3 e5       	ldi	r30, 0x53	; 83
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8d 7f       	andi	r24, 0xFD	; 253
     cbe:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 2);
     cc0:	a3 e5       	ldi	r26, 0x53	; 83
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e3 e5       	ldi	r30, 0x53	; 83
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8b 7f       	andi	r24, 0xFB	; 251
     ccc:	8c 93       	st	X, r24
}
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <MTimer_voidSetPreloadValue>:

void MTimer_voidSetPreloadValue(u8 A_u8TimerMode, u8 A_u8PreloadValue){
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <MTimer_voidSetPreloadValue+0x6>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8TimerMode == 0){
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	88 23       	and	r24, r24
     ce6:	29 f4       	brne	.+10     	; 0xcf2 <MTimer_voidSetPreloadValue+0x1e>
		TCNT0 = A_u8PreloadValue;
     ce8:	e2 e5       	ldi	r30, 0x52	; 82
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	80 83       	st	Z, r24
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <MTimer_voidSetPreloadValue+0x26>

	}else{
		OCR0 = A_u8PreloadValue;
     cf2:	ec e5       	ldi	r30, 0x5C	; 92
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	80 83       	st	Z, r24
	}
}
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <MTimer1_voidInit>:


/////////////////////////////////Timer1///////////////////////


void MTimer1_voidInit(){
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,0);
     d0c:	ae e4       	ldi	r26, 0x4E	; 78
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ee e4       	ldi	r30, 0x4E	; 78
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	8e 7f       	andi	r24, 0xFE	; 254
     d18:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
     d1a:	ae e4       	ldi	r26, 0x4E	; 78
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ee e4       	ldi	r30, 0x4E	; 78
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	82 60       	ori	r24, 0x02	; 2
     d26:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
     d28:	ae e4       	ldi	r26, 0x4E	; 78
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ee e4       	ldi	r30, 0x4E	; 78
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8b 7f       	andi	r24, 0xFB	; 251
     d34:	8c 93       	st	X, r24
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <MTimer1_voidSetTimer1Value>:


void MTimer1_voidSetTimer1Value(u16 A_u16Value){
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	00 d0       	rcall	.+0      	; 0xd42 <MTimer1_voidSetTimer1Value+0x6>
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	9a 83       	std	Y+2, r25	; 0x02
     d48:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = A_u16Value;
     d4a:	ec e4       	ldi	r30, 0x4C	; 76
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	91 83       	std	Z+1, r25	; 0x01
     d54:	80 83       	st	Z, r24
}
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <MTimer1_u16ReadTimer1Value>:

u16 MTimer1_u16ReadTimer1Value(){
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
     d68:	ec e4       	ldi	r30, 0x4C	; 76
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
}
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <MGIE_voidEnable>:
#include"GIE_Interface.h"




void MGIE_voidEnable(){
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
     d7e:	af e5       	ldi	r26, 0x5F	; 95
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	ef e5       	ldi	r30, 0x5F	; 95
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	80 68       	ori	r24, 0x80	; 128
     d8a:	8c 93       	st	X, r24
}
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <MGIE_voidDisable>:

void MGIE_voidDisable(){
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
     d9a:	af e5       	ldi	r26, 0x5F	; 95
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ef e5       	ldi	r30, 0x5F	; 95
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8f 77       	andi	r24, 0x7F	; 127
     da6:	8c 93       	st	X, r24
}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <MEXTI_voidSenseControl>:
 * 3--------> Rising
 *
 * */


void MEXTI_voidSenseControl(u8 A_u8ExtiNumber, u8 A_u8State){
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	2a 97       	sbiw	r28, 0x0a	; 10
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	89 83       	std	Y+1, r24	; 0x01
     dc4:	6a 83       	std	Y+2, r22	; 0x02


	switch(A_u8ExtiNumber){
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3a 87       	std	Y+10, r19	; 0x0a
     dce:	29 87       	std	Y+9, r18	; 0x09
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	91 05       	cpc	r25, r1
     dd8:	09 f4       	brne	.+2      	; 0xddc <MEXTI_voidSenseControl+0x2e>
     dda:	66 c0       	rjmp	.+204    	; 0xea8 <MEXTI_voidSenseControl+0xfa>
     ddc:	29 85       	ldd	r18, Y+9	; 0x09
     dde:	3a 85       	ldd	r19, Y+10	; 0x0a
     de0:	22 30       	cpi	r18, 0x02	; 2
     de2:	31 05       	cpc	r19, r1
     de4:	09 f4       	brne	.+2      	; 0xde8 <MEXTI_voidSenseControl+0x3a>
     de6:	bb c0       	rjmp	.+374    	; 0xf5e <MEXTI_voidSenseControl+0x1b0>
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	09 f0       	breq	.+2      	; 0xdf2 <MEXTI_voidSenseControl+0x44>
     df0:	d5 c0       	rjmp	.+426    	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
		/*EXTI INT0*/
		case 0:
			switch(A_u8State){
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	38 87       	std	Y+8, r19	; 0x08
     dfa:	2f 83       	std	Y+7, r18	; 0x07
     dfc:	8f 81       	ldd	r24, Y+7	; 0x07
     dfe:	98 85       	ldd	r25, Y+8	; 0x08
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	91 05       	cpc	r25, r1
     e04:	21 f1       	breq	.+72     	; 0xe4e <MEXTI_voidSenseControl+0xa0>
     e06:	2f 81       	ldd	r18, Y+7	; 0x07
     e08:	38 85       	ldd	r19, Y+8	; 0x08
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	2c f4       	brge	.+10     	; 0xe1a <MEXTI_voidSenseControl+0x6c>
     e10:	8f 81       	ldd	r24, Y+7	; 0x07
     e12:	98 85       	ldd	r25, Y+8	; 0x08
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	61 f0       	breq	.+24     	; 0xe30 <MEXTI_voidSenseControl+0x82>
     e18:	c1 c0       	rjmp	.+386    	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
     e1a:	2f 81       	ldd	r18, Y+7	; 0x07
     e1c:	38 85       	ldd	r19, Y+8	; 0x08
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	21 f1       	breq	.+72     	; 0xe6c <MEXTI_voidSenseControl+0xbe>
     e24:	8f 81       	ldd	r24, Y+7	; 0x07
     e26:	98 85       	ldd	r25, Y+8	; 0x08
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	91 05       	cpc	r25, r1
     e2c:	71 f1       	breq	.+92     	; 0xe8a <MEXTI_voidSenseControl+0xdc>
     e2e:	b6 c0       	rjmp	.+364    	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
				case 0:
					CLR_BIT(MCUCR,0);
     e30:	a5 e5       	ldi	r26, 0x55	; 85
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e5 e5       	ldi	r30, 0x55	; 85
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8e 7f       	andi	r24, 0xFE	; 254
     e3c:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
     e3e:	a5 e5       	ldi	r26, 0x55	; 85
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e5       	ldi	r30, 0x55	; 85
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	8d 7f       	andi	r24, 0xFD	; 253
     e4a:	8c 93       	st	X, r24
     e4c:	a7 c0       	rjmp	.+334    	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 0);
     e4e:	a5 e5       	ldi	r26, 0x55	; 85
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e5 e5       	ldi	r30, 0x55	; 85
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	81 60       	ori	r24, 0x01	; 1
     e5a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 1);
     e5c:	a5 e5       	ldi	r26, 0x55	; 85
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e5 e5       	ldi	r30, 0x55	; 85
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	8d 7f       	andi	r24, 0xFD	; 253
     e68:	8c 93       	st	X, r24
     e6a:	98 c0       	rjmp	.+304    	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 0);
     e6c:	a5 e5       	ldi	r26, 0x55	; 85
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e5 e5       	ldi	r30, 0x55	; 85
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8e 7f       	andi	r24, 0xFE	; 254
     e78:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
     e7a:	a5 e5       	ldi	r26, 0x55	; 85
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e5 e5       	ldi	r30, 0x55	; 85
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	82 60       	ori	r24, 0x02	; 2
     e86:	8c 93       	st	X, r24
     e88:	89 c0       	rjmp	.+274    	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 0);
     e8a:	a5 e5       	ldi	r26, 0x55	; 85
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e5 e5       	ldi	r30, 0x55	; 85
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	81 60       	ori	r24, 0x01	; 1
     e96:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
     e98:	a5 e5       	ldi	r26, 0x55	; 85
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e5 e5       	ldi	r30, 0x55	; 85
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	8c 93       	st	X, r24
     ea6:	7a c0       	rjmp	.+244    	; 0xf9c <MEXTI_voidSenseControl+0x1ee>

			}
		break;
		/*EXTI INT1*/
		case 1:
			switch(A_u8State){
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	3e 83       	std	Y+6, r19	; 0x06
     eb0:	2d 83       	std	Y+5, r18	; 0x05
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	91 05       	cpc	r25, r1
     eba:	21 f1       	breq	.+72     	; 0xf04 <MEXTI_voidSenseControl+0x156>
     ebc:	2d 81       	ldd	r18, Y+5	; 0x05
     ebe:	3e 81       	ldd	r19, Y+6	; 0x06
     ec0:	22 30       	cpi	r18, 0x02	; 2
     ec2:	31 05       	cpc	r19, r1
     ec4:	2c f4       	brge	.+10     	; 0xed0 <MEXTI_voidSenseControl+0x122>
     ec6:	8d 81       	ldd	r24, Y+5	; 0x05
     ec8:	9e 81       	ldd	r25, Y+6	; 0x06
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	61 f0       	breq	.+24     	; 0xee6 <MEXTI_voidSenseControl+0x138>
     ece:	66 c0       	rjmp	.+204    	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
     ed0:	2d 81       	ldd	r18, Y+5	; 0x05
     ed2:	3e 81       	ldd	r19, Y+6	; 0x06
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	21 f1       	breq	.+72     	; 0xf22 <MEXTI_voidSenseControl+0x174>
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	91 05       	cpc	r25, r1
     ee2:	71 f1       	breq	.+92     	; 0xf40 <MEXTI_voidSenseControl+0x192>
     ee4:	5b c0       	rjmp	.+182    	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
				case 0:
					CLR_BIT(MCUCR,2);
     ee6:	a5 e5       	ldi	r26, 0x55	; 85
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e5 e5       	ldi	r30, 0x55	; 85
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8b 7f       	andi	r24, 0xFB	; 251
     ef2:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
     ef4:	a5 e5       	ldi	r26, 0x55	; 85
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e5 e5       	ldi	r30, 0x55	; 85
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	87 7f       	andi	r24, 0xF7	; 247
     f00:	8c 93       	st	X, r24
     f02:	4c c0       	rjmp	.+152    	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 2);
     f04:	a5 e5       	ldi	r26, 0x55	; 85
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e5 e5       	ldi	r30, 0x55	; 85
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	84 60       	ori	r24, 0x04	; 4
     f10:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 3);
     f12:	a5 e5       	ldi	r26, 0x55	; 85
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e5 e5       	ldi	r30, 0x55	; 85
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	87 7f       	andi	r24, 0xF7	; 247
     f1e:	8c 93       	st	X, r24
     f20:	3d c0       	rjmp	.+122    	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 2);
     f22:	a5 e5       	ldi	r26, 0x55	; 85
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e5 e5       	ldi	r30, 0x55	; 85
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8b 7f       	andi	r24, 0xFB	; 251
     f2e:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
     f30:	a5 e5       	ldi	r26, 0x55	; 85
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e5 e5       	ldi	r30, 0x55	; 85
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	88 60       	ori	r24, 0x08	; 8
     f3c:	8c 93       	st	X, r24
     f3e:	2e c0       	rjmp	.+92     	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 2);
     f40:	a5 e5       	ldi	r26, 0x55	; 85
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e5 e5       	ldi	r30, 0x55	; 85
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	84 60       	ori	r24, 0x04	; 4
     f4c:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
     f4e:	a5 e5       	ldi	r26, 0x55	; 85
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e5 e5       	ldi	r30, 0x55	; 85
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	88 60       	ori	r24, 0x08	; 8
     f5a:	8c 93       	st	X, r24
     f5c:	1f c0       	rjmp	.+62     	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
			}
		break;

		/*EXTI INT2*/
		case 2:
			switch(A_u8State){
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3c 83       	std	Y+4, r19	; 0x04
     f66:	2b 83       	std	Y+3, r18	; 0x03
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	91 05       	cpc	r25, r1
     f70:	31 f0       	breq	.+12     	; 0xf7e <MEXTI_voidSenseControl+0x1d0>
     f72:	2b 81       	ldd	r18, Y+3	; 0x03
     f74:	3c 81       	ldd	r19, Y+4	; 0x04
     f76:	23 30       	cpi	r18, 0x03	; 3
     f78:	31 05       	cpc	r19, r1
     f7a:	49 f0       	breq	.+18     	; 0xf8e <MEXTI_voidSenseControl+0x1e0>
     f7c:	0f c0       	rjmp	.+30     	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
			case 2: CLR_BIT(MCUCSR, 6);break;
     f7e:	a4 e5       	ldi	r26, 0x54	; 84
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e4 e5       	ldi	r30, 0x54	; 84
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 7b       	andi	r24, 0xBF	; 191
     f8a:	8c 93       	st	X, r24
     f8c:	07 c0       	rjmp	.+14     	; 0xf9c <MEXTI_voidSenseControl+0x1ee>
			case 3: SET_BIT(MCUCSR, 6);break;
     f8e:	a4 e5       	ldi	r26, 0x54	; 84
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e4 e5       	ldi	r30, 0x54	; 84
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	80 64       	ori	r24, 0x40	; 64
     f9a:	8c 93       	st	X, r24
			}
		break;

	}
}
     f9c:	2a 96       	adiw	r28, 0x0a	; 10
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <MEXTI_voidEnable>:


void MEXTI_voidEnable(u8 A_u8ExtiNumber){
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <MEXTI_voidEnable+0x6>
     fb4:	0f 92       	push	r0
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiNumber){
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	3b 83       	std	Y+3, r19	; 0x03
     fc4:	2a 83       	std	Y+2, r18	; 0x02
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	9b 81       	ldd	r25, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	91 05       	cpc	r25, r1
     fce:	89 f0       	breq	.+34     	; 0xff2 <MEXTI_voidEnable+0x44>
     fd0:	2a 81       	ldd	r18, Y+2	; 0x02
     fd2:	3b 81       	ldd	r19, Y+3	; 0x03
     fd4:	22 30       	cpi	r18, 0x02	; 2
     fd6:	31 05       	cpc	r19, r1
     fd8:	a1 f0       	breq	.+40     	; 0x1002 <MEXTI_voidEnable+0x54>
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	9b 81       	ldd	r25, Y+3	; 0x03
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	b9 f4       	brne	.+46     	; 0x1010 <MEXTI_voidEnable+0x62>
		case 0: SET_BIT( GICR, 6); break;
     fe2:	ab e5       	ldi	r26, 0x5B	; 91
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	eb e5       	ldi	r30, 0x5B	; 91
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	80 64       	ori	r24, 0x40	; 64
     fee:	8c 93       	st	X, r24
     ff0:	0f c0       	rjmp	.+30     	; 0x1010 <MEXTI_voidEnable+0x62>
		case 1: SET_BIT( GICR, 7); break;
     ff2:	ab e5       	ldi	r26, 0x5B	; 91
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	eb e5       	ldi	r30, 0x5B	; 91
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 68       	ori	r24, 0x80	; 128
     ffe:	8c 93       	st	X, r24
    1000:	07 c0       	rjmp	.+14     	; 0x1010 <MEXTI_voidEnable+0x62>
		case 2: SET_BIT(GICR, 5); break;
    1002:	ab e5       	ldi	r26, 0x5B	; 91
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	eb e5       	ldi	r30, 0x5B	; 91
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	80 62       	ori	r24, 0x20	; 32
    100e:	8c 93       	st	X, r24
	}

}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <MEXTI_voidDisable>:

void MEXTI_voidDisable(u8 A_u8ExtiNumber){
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	00 d0       	rcall	.+0      	; 0x1022 <MEXTI_voidDisable+0x6>
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiNumber){
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	3b 83       	std	Y+3, r19	; 0x03
    1032:	2a 83       	std	Y+2, r18	; 0x02
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	9b 81       	ldd	r25, Y+3	; 0x03
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	91 05       	cpc	r25, r1
    103c:	89 f0       	breq	.+34     	; 0x1060 <MEXTI_voidDisable+0x44>
    103e:	2a 81       	ldd	r18, Y+2	; 0x02
    1040:	3b 81       	ldd	r19, Y+3	; 0x03
    1042:	22 30       	cpi	r18, 0x02	; 2
    1044:	31 05       	cpc	r19, r1
    1046:	a1 f0       	breq	.+40     	; 0x1070 <MEXTI_voidDisable+0x54>
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	9b 81       	ldd	r25, Y+3	; 0x03
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	b9 f4       	brne	.+46     	; 0x107e <MEXTI_voidDisable+0x62>
		case 0: CLR_BIT( GICR, 6); break;
    1050:	ab e5       	ldi	r26, 0x5B	; 91
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	eb e5       	ldi	r30, 0x5B	; 91
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8f 7b       	andi	r24, 0xBF	; 191
    105c:	8c 93       	st	X, r24
    105e:	0f c0       	rjmp	.+30     	; 0x107e <MEXTI_voidDisable+0x62>
		case 1: CLR_BIT( GICR, 7); break;
    1060:	ab e5       	ldi	r26, 0x5B	; 91
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	eb e5       	ldi	r30, 0x5B	; 91
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8f 77       	andi	r24, 0x7F	; 127
    106c:	8c 93       	st	X, r24
    106e:	07 c0       	rjmp	.+14     	; 0x107e <MEXTI_voidDisable+0x62>
		case 2: CLR_BIT(GICR, 5); break;
    1070:	ab e5       	ldi	r26, 0x5B	; 91
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	eb e5       	ldi	r30, 0x5B	; 91
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8f 7d       	andi	r24, 0xDF	; 223
    107c:	8c 93       	st	X, r24
	}
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <MDIO_voidSetPinDirection>:
#include<avr/io.h>
#include"DIO_Interface.h"



void  MDIO_voidSetPinDirection(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Dir){
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	2d 97       	sbiw	r28, 0x0d	; 13
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	6a 83       	std	Y+2, r22	; 0x02
    10a2:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortNumber){
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3d 87       	std	Y+13, r19	; 0x0d
    10ac:	2c 87       	std	Y+12, r18	; 0x0c
    10ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    10b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b2:	82 34       	cpi	r24, 0x42	; 66
    10b4:	91 05       	cpc	r25, r1
    10b6:	09 f4       	brne	.+2      	; 0x10ba <MDIO_voidSetPinDirection+0x30>
    10b8:	50 c0       	rjmp	.+160    	; 0x115a <MDIO_voidSetPinDirection+0xd0>
    10ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    10bc:	3d 85       	ldd	r19, Y+13	; 0x0d
    10be:	23 34       	cpi	r18, 0x43	; 67
    10c0:	31 05       	cpc	r19, r1
    10c2:	34 f4       	brge	.+12     	; 0x10d0 <MDIO_voidSetPinDirection+0x46>
    10c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    10c8:	81 34       	cpi	r24, 0x41	; 65
    10ca:	91 05       	cpc	r25, r1
    10cc:	71 f0       	breq	.+28     	; 0x10ea <MDIO_voidSetPinDirection+0x60>
    10ce:	ec c0       	rjmp	.+472    	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
    10d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    10d2:	3d 85       	ldd	r19, Y+13	; 0x0d
    10d4:	23 34       	cpi	r18, 0x43	; 67
    10d6:	31 05       	cpc	r19, r1
    10d8:	09 f4       	brne	.+2      	; 0x10dc <MDIO_voidSetPinDirection+0x52>
    10da:	77 c0       	rjmp	.+238    	; 0x11ca <MDIO_voidSetPinDirection+0x140>
    10dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    10de:	9d 85       	ldd	r25, Y+13	; 0x0d
    10e0:	84 34       	cpi	r24, 0x44	; 68
    10e2:	91 05       	cpc	r25, r1
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <MDIO_voidSetPinDirection+0x5e>
    10e6:	a9 c0       	rjmp	.+338    	; 0x123a <MDIO_voidSetPinDirection+0x1b0>
    10e8:	df c0       	rjmp	.+446    	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
		case 'A':
			switch(A_u8Dir){
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3b 87       	std	Y+11, r19	; 0x0b
    10f2:	2a 87       	std	Y+10, r18	; 0x0a
    10f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    10f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	31 f0       	breq	.+12     	; 0x1108 <MDIO_voidSetPinDirection+0x7e>
    10fc:	2a 85       	ldd	r18, Y+10	; 0x0a
    10fe:	3b 85       	ldd	r19, Y+11	; 0x0b
    1100:	21 30       	cpi	r18, 0x01	; 1
    1102:	31 05       	cpc	r19, r1
    1104:	b1 f0       	breq	.+44     	; 0x1132 <MDIO_voidSetPinDirection+0xa8>
    1106:	d0 c0       	rjmp	.+416    	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRA , A_u8PinNumber);break;
    1108:	aa e3       	ldi	r26, 0x3A	; 58
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	ea e3       	ldi	r30, 0x3A	; 58
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <MDIO_voidSetPinDirection+0x9c>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <MDIO_voidSetPinDirection+0x98>
    112a:	80 95       	com	r24
    112c:	84 23       	and	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	bb c0       	rjmp	.+374    	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRA, A_u8PinNumber); break;
    1132:	aa e3       	ldi	r26, 0x3A	; 58
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ea e3       	ldi	r30, 0x3A	; 58
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 2e       	mov	r0, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <MDIO_voidSetPinDirection+0xc6>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <MDIO_voidSetPinDirection+0xc2>
    1154:	84 2b       	or	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	a7 c0       	rjmp	.+334    	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'B':
			switch(A_u8Dir){
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	39 87       	std	Y+9, r19	; 0x09
    1162:	28 87       	std	Y+8, r18	; 0x08
    1164:	88 85       	ldd	r24, Y+8	; 0x08
    1166:	99 85       	ldd	r25, Y+9	; 0x09
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	31 f0       	breq	.+12     	; 0x1178 <MDIO_voidSetPinDirection+0xee>
    116c:	28 85       	ldd	r18, Y+8	; 0x08
    116e:	39 85       	ldd	r19, Y+9	; 0x09
    1170:	21 30       	cpi	r18, 0x01	; 1
    1172:	31 05       	cpc	r19, r1
    1174:	b1 f0       	breq	.+44     	; 0x11a2 <MDIO_voidSetPinDirection+0x118>
    1176:	98 c0       	rjmp	.+304    	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRB , A_u8PinNumber);break;
    1178:	a7 e3       	ldi	r26, 0x37	; 55
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e7 e3       	ldi	r30, 0x37	; 55
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <MDIO_voidSetPinDirection+0x10c>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <MDIO_voidSetPinDirection+0x108>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	83 c0       	rjmp	.+262    	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRB, A_u8PinNumber); break;
    11a2:	a7 e3       	ldi	r26, 0x37	; 55
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e7 e3       	ldi	r30, 0x37	; 55
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <MDIO_voidSetPinDirection+0x136>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <MDIO_voidSetPinDirection+0x132>
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	6f c0       	rjmp	.+222    	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'C':
			switch(A_u8Dir){
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3f 83       	std	Y+7, r19	; 0x07
    11d2:	2e 83       	std	Y+6, r18	; 0x06
    11d4:	8e 81       	ldd	r24, Y+6	; 0x06
    11d6:	9f 81       	ldd	r25, Y+7	; 0x07
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	31 f0       	breq	.+12     	; 0x11e8 <MDIO_voidSetPinDirection+0x15e>
    11dc:	2e 81       	ldd	r18, Y+6	; 0x06
    11de:	3f 81       	ldd	r19, Y+7	; 0x07
    11e0:	21 30       	cpi	r18, 0x01	; 1
    11e2:	31 05       	cpc	r19, r1
    11e4:	b1 f0       	breq	.+44     	; 0x1212 <MDIO_voidSetPinDirection+0x188>
    11e6:	60 c0       	rjmp	.+192    	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRC , A_u8PinNumber);break;
    11e8:	a4 e3       	ldi	r26, 0x34	; 52
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e4 e3       	ldi	r30, 0x34	; 52
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <MDIO_voidSetPinDirection+0x17c>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <MDIO_voidSetPinDirection+0x178>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	4b c0       	rjmp	.+150    	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRC, A_u8PinNumber); break;
    1212:	a4 e3       	ldi	r26, 0x34	; 52
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e4 e3       	ldi	r30, 0x34	; 52
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <MDIO_voidSetPinDirection+0x1a6>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <MDIO_voidSetPinDirection+0x1a2>
    1234:	84 2b       	or	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	37 c0       	rjmp	.+110    	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'D':
			switch(A_u8Dir){
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	3d 83       	std	Y+5, r19	; 0x05
    1242:	2c 83       	std	Y+4, r18	; 0x04
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	9d 81       	ldd	r25, Y+5	; 0x05
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	31 f0       	breq	.+12     	; 0x1258 <MDIO_voidSetPinDirection+0x1ce>
    124c:	2c 81       	ldd	r18, Y+4	; 0x04
    124e:	3d 81       	ldd	r19, Y+5	; 0x05
    1250:	21 30       	cpi	r18, 0x01	; 1
    1252:	31 05       	cpc	r19, r1
    1254:	b1 f0       	breq	.+44     	; 0x1282 <MDIO_voidSetPinDirection+0x1f8>
    1256:	28 c0       	rjmp	.+80     	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRD , A_u8PinNumber);break;
    1258:	a1 e3       	ldi	r26, 0x31	; 49
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e1 e3       	ldi	r30, 0x31	; 49
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <MDIO_voidSetPinDirection+0x1ec>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <MDIO_voidSetPinDirection+0x1e8>
    127a:	80 95       	com	r24
    127c:	84 23       	and	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	13 c0       	rjmp	.+38     	; 0x12a8 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRD, A_u8PinNumber); break;
    1282:	a1 e3       	ldi	r26, 0x31	; 49
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e1 e3       	ldi	r30, 0x31	; 49
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <MDIO_voidSetPinDirection+0x216>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <MDIO_voidSetPinDirection+0x212>
    12a4:	84 2b       	or	r24, r20
    12a6:	8c 93       	st	X, r24
			}
		break;
	}

}
    12a8:	2d 96       	adiw	r28, 0x0d	; 13
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8PinValue){
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	2d 97       	sbiw	r28, 0x0d	; 13
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	6a 83       	std	Y+2, r22	; 0x02
    12d2:	4b 83       	std	Y+3, r20	; 0x03

	switch(A_u8PortNumber){
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	3d 87       	std	Y+13, r19	; 0x0d
    12dc:	2c 87       	std	Y+12, r18	; 0x0c
    12de:	8c 85       	ldd	r24, Y+12	; 0x0c
    12e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    12e2:	82 34       	cpi	r24, 0x42	; 66
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <MDIO_voidSetPinValue+0x30>
    12e8:	50 c0       	rjmp	.+160    	; 0x138a <MDIO_voidSetPinValue+0xd0>
    12ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    12ee:	23 34       	cpi	r18, 0x43	; 67
    12f0:	31 05       	cpc	r19, r1
    12f2:	34 f4       	brge	.+12     	; 0x1300 <MDIO_voidSetPinValue+0x46>
    12f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    12f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    12f8:	81 34       	cpi	r24, 0x41	; 65
    12fa:	91 05       	cpc	r25, r1
    12fc:	71 f0       	breq	.+28     	; 0x131a <MDIO_voidSetPinValue+0x60>
    12fe:	ec c0       	rjmp	.+472    	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
    1300:	2c 85       	ldd	r18, Y+12	; 0x0c
    1302:	3d 85       	ldd	r19, Y+13	; 0x0d
    1304:	23 34       	cpi	r18, 0x43	; 67
    1306:	31 05       	cpc	r19, r1
    1308:	09 f4       	brne	.+2      	; 0x130c <MDIO_voidSetPinValue+0x52>
    130a:	77 c0       	rjmp	.+238    	; 0x13fa <MDIO_voidSetPinValue+0x140>
    130c:	8c 85       	ldd	r24, Y+12	; 0x0c
    130e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1310:	84 34       	cpi	r24, 0x44	; 68
    1312:	91 05       	cpc	r25, r1
    1314:	09 f4       	brne	.+2      	; 0x1318 <MDIO_voidSetPinValue+0x5e>
    1316:	a9 c0       	rjmp	.+338    	; 0x146a <MDIO_voidSetPinValue+0x1b0>
    1318:	df c0       	rjmp	.+446    	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
		case 'A':
			switch(A_u8PinValue){
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	3b 87       	std	Y+11, r19	; 0x0b
    1322:	2a 87       	std	Y+10, r18	; 0x0a
    1324:	8a 85       	ldd	r24, Y+10	; 0x0a
    1326:	9b 85       	ldd	r25, Y+11	; 0x0b
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	31 f0       	breq	.+12     	; 0x1338 <MDIO_voidSetPinValue+0x7e>
    132c:	2a 85       	ldd	r18, Y+10	; 0x0a
    132e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1330:	21 30       	cpi	r18, 0x01	; 1
    1332:	31 05       	cpc	r19, r1
    1334:	b1 f0       	breq	.+44     	; 0x1362 <MDIO_voidSetPinValue+0xa8>
    1336:	d0 c0       	rjmp	.+416    	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTA , A_u8PinNumber); break;
    1338:	ab e3       	ldi	r26, 0x3B	; 59
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	eb e3       	ldi	r30, 0x3B	; 59
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <MDIO_voidSetPinValue+0x9c>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <MDIO_voidSetPinValue+0x98>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	bb c0       	rjmp	.+374    	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTA, A_u8PinNumber); break;
    1362:	ab e3       	ldi	r26, 0x3B	; 59
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	eb e3       	ldi	r30, 0x3B	; 59
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <MDIO_voidSetPinValue+0xc6>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <MDIO_voidSetPinValue+0xc2>
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	a7 c0       	rjmp	.+334    	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'B':
			switch(A_u8PinValue){
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	39 87       	std	Y+9, r19	; 0x09
    1392:	28 87       	std	Y+8, r18	; 0x08
    1394:	88 85       	ldd	r24, Y+8	; 0x08
    1396:	99 85       	ldd	r25, Y+9	; 0x09
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	31 f0       	breq	.+12     	; 0x13a8 <MDIO_voidSetPinValue+0xee>
    139c:	28 85       	ldd	r18, Y+8	; 0x08
    139e:	39 85       	ldd	r19, Y+9	; 0x09
    13a0:	21 30       	cpi	r18, 0x01	; 1
    13a2:	31 05       	cpc	r19, r1
    13a4:	b1 f0       	breq	.+44     	; 0x13d2 <MDIO_voidSetPinValue+0x118>
    13a6:	98 c0       	rjmp	.+304    	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTB , A_u8PinNumber); break;
    13a8:	a8 e3       	ldi	r26, 0x38	; 56
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e8 e3       	ldi	r30, 0x38	; 56
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <MDIO_voidSetPinValue+0x10c>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <MDIO_voidSetPinValue+0x108>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	83 c0       	rjmp	.+262    	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTB, A_u8PinNumber); break;
    13d2:	a8 e3       	ldi	r26, 0x38	; 56
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e8 e3       	ldi	r30, 0x38	; 56
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <MDIO_voidSetPinValue+0x136>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <MDIO_voidSetPinValue+0x132>
    13f4:	84 2b       	or	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	6f c0       	rjmp	.+222    	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
			}

		break;

		case 'C':
			switch(A_u8PinValue){
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3f 83       	std	Y+7, r19	; 0x07
    1402:	2e 83       	std	Y+6, r18	; 0x06
    1404:	8e 81       	ldd	r24, Y+6	; 0x06
    1406:	9f 81       	ldd	r25, Y+7	; 0x07
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	31 f0       	breq	.+12     	; 0x1418 <MDIO_voidSetPinValue+0x15e>
    140c:	2e 81       	ldd	r18, Y+6	; 0x06
    140e:	3f 81       	ldd	r19, Y+7	; 0x07
    1410:	21 30       	cpi	r18, 0x01	; 1
    1412:	31 05       	cpc	r19, r1
    1414:	b1 f0       	breq	.+44     	; 0x1442 <MDIO_voidSetPinValue+0x188>
    1416:	60 c0       	rjmp	.+192    	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTC , A_u8PinNumber); break;
    1418:	a5 e3       	ldi	r26, 0x35	; 53
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e5 e3       	ldi	r30, 0x35	; 53
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <MDIO_voidSetPinValue+0x17c>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <MDIO_voidSetPinValue+0x178>
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	4b c0       	rjmp	.+150    	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTC, A_u8PinNumber); break;
    1442:	a5 e3       	ldi	r26, 0x35	; 53
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e3       	ldi	r30, 0x35	; 53
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <MDIO_voidSetPinValue+0x1a6>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <MDIO_voidSetPinValue+0x1a2>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	37 c0       	rjmp	.+110    	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'D':
			switch(A_u8PinValue){
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3d 83       	std	Y+5, r19	; 0x05
    1472:	2c 83       	std	Y+4, r18	; 0x04
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	31 f0       	breq	.+12     	; 0x1488 <MDIO_voidSetPinValue+0x1ce>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	21 30       	cpi	r18, 0x01	; 1
    1482:	31 05       	cpc	r19, r1
    1484:	b1 f0       	breq	.+44     	; 0x14b2 <MDIO_voidSetPinValue+0x1f8>
    1486:	28 c0       	rjmp	.+80     	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTD , A_u8PinNumber); break;
    1488:	a2 e3       	ldi	r26, 0x32	; 50
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e2 e3       	ldi	r30, 0x32	; 50
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <MDIO_voidSetPinValue+0x1ec>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <MDIO_voidSetPinValue+0x1e8>
    14aa:	80 95       	com	r24
    14ac:	84 23       	and	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	13 c0       	rjmp	.+38     	; 0x14d8 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTD, A_u8PinNumber); break;
    14b2:	a2 e3       	ldi	r26, 0x32	; 50
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e2 e3       	ldi	r30, 0x32	; 50
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <MDIO_voidSetPinValue+0x216>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <MDIO_voidSetPinValue+0x212>
    14d4:	84 2b       	or	r24, r20
    14d6:	8c 93       	st	X, r24
			}
		break;
	}
}
    14d8:	2d 96       	adiw	r28, 0x0d	; 13
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <MDIO_voidSetPortDirection>:



void MDIO_voidSetPortDirection(u8 A_u8PortNumber, u8 A_u8PortDir){
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <MDIO_voidSetPortDirection+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <MDIO_voidSetPortDirection+0x8>
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	3c 83       	std	Y+4, r19	; 0x04
    1502:	2b 83       	std	Y+3, r18	; 0x03
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	82 34       	cpi	r24, 0x42	; 66
    150a:	91 05       	cpc	r25, r1
    150c:	d9 f0       	breq	.+54     	; 0x1544 <MDIO_voidSetPortDirection+0x5a>
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	23 34       	cpi	r18, 0x43	; 67
    1514:	31 05       	cpc	r19, r1
    1516:	34 f4       	brge	.+12     	; 0x1524 <MDIO_voidSetPortDirection+0x3a>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	81 34       	cpi	r24, 0x41	; 65
    151e:	91 05       	cpc	r25, r1
    1520:	61 f0       	breq	.+24     	; 0x153a <MDIO_voidSetPortDirection+0x50>
    1522:	1e c0       	rjmp	.+60     	; 0x1560 <MDIO_voidSetPortDirection+0x76>
    1524:	2b 81       	ldd	r18, Y+3	; 0x03
    1526:	3c 81       	ldd	r19, Y+4	; 0x04
    1528:	23 34       	cpi	r18, 0x43	; 67
    152a:	31 05       	cpc	r19, r1
    152c:	81 f0       	breq	.+32     	; 0x154e <MDIO_voidSetPortDirection+0x64>
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	84 34       	cpi	r24, 0x44	; 68
    1534:	91 05       	cpc	r25, r1
    1536:	81 f0       	breq	.+32     	; 0x1558 <MDIO_voidSetPortDirection+0x6e>
    1538:	13 c0       	rjmp	.+38     	; 0x1560 <MDIO_voidSetPortDirection+0x76>
		case 'A': DDRA = A_u8PortDir; break;
    153a:	ea e3       	ldi	r30, 0x3A	; 58
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	80 83       	st	Z, r24
    1542:	0e c0       	rjmp	.+28     	; 0x1560 <MDIO_voidSetPortDirection+0x76>
		case 'B': DDRB = A_u8PortDir; break;
    1544:	e7 e3       	ldi	r30, 0x37	; 55
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	80 83       	st	Z, r24
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <MDIO_voidSetPortDirection+0x76>
		case 'C': DDRC = A_u8PortDir; break;
    154e:	e4 e3       	ldi	r30, 0x34	; 52
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	80 83       	st	Z, r24
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <MDIO_voidSetPortDirection+0x76>
		case 'D': DDRD = A_u8PortDir; break;
    1558:	e1 e3       	ldi	r30, 0x31	; 49
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	80 83       	st	Z, r24
	}
}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortNumber, u8 A_u8PortValue){
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	00 d0       	rcall	.+0      	; 0x1574 <MDIO_voidSetPortValue+0x6>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <MDIO_voidSetPortValue+0x8>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3c 83       	std	Y+4, r19	; 0x04
    1586:	2b 83       	std	Y+3, r18	; 0x03
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	82 34       	cpi	r24, 0x42	; 66
    158e:	91 05       	cpc	r25, r1
    1590:	d9 f0       	breq	.+54     	; 0x15c8 <MDIO_voidSetPortValue+0x5a>
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	23 34       	cpi	r18, 0x43	; 67
    1598:	31 05       	cpc	r19, r1
    159a:	34 f4       	brge	.+12     	; 0x15a8 <MDIO_voidSetPortValue+0x3a>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	81 34       	cpi	r24, 0x41	; 65
    15a2:	91 05       	cpc	r25, r1
    15a4:	61 f0       	breq	.+24     	; 0x15be <MDIO_voidSetPortValue+0x50>
    15a6:	1e c0       	rjmp	.+60     	; 0x15e4 <MDIO_voidSetPortValue+0x76>
    15a8:	2b 81       	ldd	r18, Y+3	; 0x03
    15aa:	3c 81       	ldd	r19, Y+4	; 0x04
    15ac:	23 34       	cpi	r18, 0x43	; 67
    15ae:	31 05       	cpc	r19, r1
    15b0:	81 f0       	breq	.+32     	; 0x15d2 <MDIO_voidSetPortValue+0x64>
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	84 34       	cpi	r24, 0x44	; 68
    15b8:	91 05       	cpc	r25, r1
    15ba:	81 f0       	breq	.+32     	; 0x15dc <MDIO_voidSetPortValue+0x6e>
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <MDIO_voidSetPortValue+0x76>
		case 'A':PORTA = A_u8PortValue; break;
    15be:	eb e3       	ldi	r30, 0x3B	; 59
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 83       	st	Z, r24
    15c6:	0e c0       	rjmp	.+28     	; 0x15e4 <MDIO_voidSetPortValue+0x76>
		case 'B':PORTB = A_u8PortValue; break;
    15c8:	e8 e3       	ldi	r30, 0x38	; 56
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	80 83       	st	Z, r24
    15d0:	09 c0       	rjmp	.+18     	; 0x15e4 <MDIO_voidSetPortValue+0x76>
		case 'C':PORTC = A_u8PortValue; break;
    15d2:	e5 e3       	ldi	r30, 0x35	; 53
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	80 83       	st	Z, r24
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <MDIO_voidSetPortValue+0x76>
		case 'D':PORTD = A_u8PortValue; break;
    15dc:	e2 e3       	ldi	r30, 0x32	; 50
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	80 83       	st	Z, r24
	}
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <MDIO_u8GetPinValue>:
 * MDIO_u8GetPinValue -----> 255 ----> there is an error
 *
 *
 * */

u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber){
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <MDIO_u8GetPinValue+0x6>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <MDIO_u8GetPinValue+0x8>
    15fa:	0f 92       	push	r0
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	8a 83       	std	Y+2, r24	; 0x02
    1602:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Result;

	if(A_u8PinNumber < 8){
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	88 30       	cpi	r24, 0x08	; 8
    1608:	08 f0       	brcs	.+2      	; 0x160c <MDIO_u8GetPinValue+0x1a>
    160a:	68 c0       	rjmp	.+208    	; 0x16dc <MDIO_u8GetPinValue+0xea>
		switch(A_u8PortNumber){
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	3d 83       	std	Y+5, r19	; 0x05
    1614:	2c 83       	std	Y+4, r18	; 0x04
    1616:	4c 81       	ldd	r20, Y+4	; 0x04
    1618:	5d 81       	ldd	r21, Y+5	; 0x05
    161a:	42 34       	cpi	r20, 0x42	; 66
    161c:	51 05       	cpc	r21, r1
    161e:	41 f1       	breq	.+80     	; 0x1670 <MDIO_u8GetPinValue+0x7e>
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	9d 81       	ldd	r25, Y+5	; 0x05
    1624:	83 34       	cpi	r24, 0x43	; 67
    1626:	91 05       	cpc	r25, r1
    1628:	34 f4       	brge	.+12     	; 0x1636 <MDIO_u8GetPinValue+0x44>
    162a:	2c 81       	ldd	r18, Y+4	; 0x04
    162c:	3d 81       	ldd	r19, Y+5	; 0x05
    162e:	21 34       	cpi	r18, 0x41	; 65
    1630:	31 05       	cpc	r19, r1
    1632:	61 f0       	breq	.+24     	; 0x164c <MDIO_u8GetPinValue+0x5a>
    1634:	55 c0       	rjmp	.+170    	; 0x16e0 <MDIO_u8GetPinValue+0xee>
    1636:	4c 81       	ldd	r20, Y+4	; 0x04
    1638:	5d 81       	ldd	r21, Y+5	; 0x05
    163a:	43 34       	cpi	r20, 0x43	; 67
    163c:	51 05       	cpc	r21, r1
    163e:	51 f1       	breq	.+84     	; 0x1694 <MDIO_u8GetPinValue+0xa2>
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
    1642:	9d 81       	ldd	r25, Y+5	; 0x05
    1644:	84 34       	cpi	r24, 0x44	; 68
    1646:	91 05       	cpc	r25, r1
    1648:	b9 f1       	breq	.+110    	; 0x16b8 <MDIO_u8GetPinValue+0xc6>
    164a:	4a c0       	rjmp	.+148    	; 0x16e0 <MDIO_u8GetPinValue+0xee>
			case 'A':Local_u8Result =  GET_BIT(PINA, A_u8PinNumber);break;
    164c:	e9 e3       	ldi	r30, 0x39	; 57
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a9 01       	movw	r20, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <MDIO_u8GetPinValue+0x72>
    1660:	55 95       	asr	r21
    1662:	47 95       	ror	r20
    1664:	8a 95       	dec	r24
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <MDIO_u8GetPinValue+0x6e>
    1668:	ca 01       	movw	r24, r20
    166a:	81 70       	andi	r24, 0x01	; 1
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	38 c0       	rjmp	.+112    	; 0x16e0 <MDIO_u8GetPinValue+0xee>
			case 'B':Local_u8Result =  GET_BIT(PINB, A_u8PinNumber); break;
    1670:	e6 e3       	ldi	r30, 0x36	; 54
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a9 01       	movw	r20, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <MDIO_u8GetPinValue+0x96>
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	8a 95       	dec	r24
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <MDIO_u8GetPinValue+0x92>
    168c:	ca 01       	movw	r24, r20
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	26 c0       	rjmp	.+76     	; 0x16e0 <MDIO_u8GetPinValue+0xee>
			case 'C':Local_u8Result =  GET_BIT(PINC, A_u8PinNumber); break;
    1694:	e3 e3       	ldi	r30, 0x33	; 51
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	a9 01       	movw	r20, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <MDIO_u8GetPinValue+0xba>
    16a8:	55 95       	asr	r21
    16aa:	47 95       	ror	r20
    16ac:	8a 95       	dec	r24
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <MDIO_u8GetPinValue+0xb6>
    16b0:	ca 01       	movw	r24, r20
    16b2:	81 70       	andi	r24, 0x01	; 1
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	14 c0       	rjmp	.+40     	; 0x16e0 <MDIO_u8GetPinValue+0xee>
			case 'D':Local_u8Result =  GET_BIT(PIND, A_u8PinNumber); break;
    16b8:	e0 e3       	ldi	r30, 0x30	; 48
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	88 2f       	mov	r24, r24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	a9 01       	movw	r20, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <MDIO_u8GetPinValue+0xde>
    16cc:	55 95       	asr	r21
    16ce:	47 95       	ror	r20
    16d0:	8a 95       	dec	r24
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <MDIO_u8GetPinValue+0xda>
    16d4:	ca 01       	movw	r24, r20
    16d6:	81 70       	andi	r24, 0x01	; 1
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <MDIO_u8GetPinValue+0xee>
		}
	}
	else {
		Local_u8Result = 255;
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <MADC_voidInit>:
 * Internal     2
 *
 * */


void MADC_voidInit(u8 A_u8Vref){
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <MADC_voidInit+0x6>
    16f8:	0f 92       	push	r0
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	89 83       	std	Y+1, r24	; 0x01

	switch(A_u8Vref){
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	3b 83       	std	Y+3, r19	; 0x03
    1708:	2a 83       	std	Y+2, r18	; 0x02
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	9b 81       	ldd	r25, Y+3	; 0x03
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	91 05       	cpc	r25, r1
    1712:	c1 f0       	breq	.+48     	; 0x1744 <MADC_voidInit+0x52>
    1714:	2a 81       	ldd	r18, Y+2	; 0x02
    1716:	3b 81       	ldd	r19, Y+3	; 0x03
    1718:	22 30       	cpi	r18, 0x02	; 2
    171a:	31 05       	cpc	r19, r1
    171c:	11 f1       	breq	.+68     	; 0x1762 <MADC_voidInit+0x70>
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	9b 81       	ldd	r25, Y+3	; 0x03
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	61 f5       	brne	.+88     	; 0x177e <MADC_voidInit+0x8c>
		case 0:
			CLR_BIT(ADMUX, 6);
    1726:	a7 e2       	ldi	r26, 0x27	; 39
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e7 e2       	ldi	r30, 0x27	; 39
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	8f 7b       	andi	r24, 0xBF	; 191
    1732:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, 7);
    1734:	a7 e2       	ldi	r26, 0x27	; 39
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e7 e2       	ldi	r30, 0x27	; 39
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8f 77       	andi	r24, 0x7F	; 127
    1740:	8c 93       	st	X, r24
    1742:	1d c0       	rjmp	.+58     	; 0x177e <MADC_voidInit+0x8c>
		break;

		case 1:
			SET_BIT(ADMUX, 6);
    1744:	a7 e2       	ldi	r26, 0x27	; 39
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e7 e2       	ldi	r30, 0x27	; 39
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	80 64       	ori	r24, 0x40	; 64
    1750:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, 7);
    1752:	a7 e2       	ldi	r26, 0x27	; 39
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e7 e2       	ldi	r30, 0x27	; 39
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	8f 77       	andi	r24, 0x7F	; 127
    175e:	8c 93       	st	X, r24
    1760:	0e c0       	rjmp	.+28     	; 0x177e <MADC_voidInit+0x8c>
		break;

		case 2:
			SET_BIT(ADMUX, 6);
    1762:	a7 e2       	ldi	r26, 0x27	; 39
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e7 e2       	ldi	r30, 0x27	; 39
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 64       	ori	r24, 0x40	; 64
    176e:	8c 93       	st	X, r24
			SET_BIT(ADMUX, 7);
    1770:	a7 e2       	ldi	r26, 0x27	; 39
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e7 e2       	ldi	r30, 0x27	; 39
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	80 68       	ori	r24, 0x80	; 128
    177c:	8c 93       	st	X, r24
		break;
	}
	/*Left|Right Adjust*/
	SET_BIT(ADMUX, 5);
    177e:	a7 e2       	ldi	r26, 0x27	; 39
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e7 e2       	ldi	r30, 0x27	; 39
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	80 62       	ori	r24, 0x20	; 32
    178a:	8c 93       	st	X, r24

	/*128 Prescaller*/
	SET_BIT(ADCSRA, 0);
    178c:	a6 e2       	ldi	r26, 0x26	; 38
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e6 e2       	ldi	r30, 0x26	; 38
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	81 60       	ori	r24, 0x01	; 1
    1798:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
    179a:	a6 e2       	ldi	r26, 0x26	; 38
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e6 e2       	ldi	r30, 0x26	; 38
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	82 60       	ori	r24, 0x02	; 2
    17a6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 2);
    17a8:	a6 e2       	ldi	r26, 0x26	; 38
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e6 e2       	ldi	r30, 0x26	; 38
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	84 60       	ori	r24, 0x04	; 4
    17b4:	8c 93       	st	X, r24

	/*ADC Enable*/
	SET_BIT(ADCSRA, 7);
    17b6:	a6 e2       	ldi	r26, 0x26	; 38
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e6 e2       	ldi	r30, 0x26	; 38
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	80 68       	ori	r24, 0x80	; 128
    17c2:	8c 93       	st	X, r24
}
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <MADC_u8GetChannelReading>:


u8 MADC_u8GetChannelReading(u8 A_u8Channel){
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	0f 92       	push	r0
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = ADMUX & 0b11100000;
    17dc:	a7 e2       	ldi	r26, 0x27	; 39
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e7 e2       	ldi	r30, 0x27	; 39
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 7e       	andi	r24, 0xE0	; 224
    17e8:	8c 93       	st	X, r24
	ADMUX = ADMUX|A_u8Channel;
    17ea:	a7 e2       	ldi	r26, 0x27	; 39
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e7 e2       	ldi	r30, 0x27	; 39
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	90 81       	ld	r25, Z
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	89 2b       	or	r24, r25
    17f8:	8c 93       	st	X, r24

	/*Start Conversion*/
	SET_BIT(ADCSRA, 6);
    17fa:	a6 e2       	ldi	r26, 0x26	; 38
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e6 e2       	ldi	r30, 0x26	; 38
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 64       	ori	r24, 0x40	; 64
    1806:	8c 93       	st	X, r24

	/*Wait Till Adc Flag Is Fired (1) */
	while(GET_BIT(ADCSRA, 4) == 0);
    1808:	e6 e2       	ldi	r30, 0x26	; 38
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	82 95       	swap	r24
    1810:	8f 70       	andi	r24, 0x0F	; 15
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	81 70       	andi	r24, 0x01	; 1
    1818:	90 70       	andi	r25, 0x00	; 0
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	a9 f3       	breq	.-22     	; 0x1808 <MADC_u8GetChannelReading+0x38>
	/*Clear ADC FLAG*/
	SET_BIT(ADCSRA, 4);
    181e:	a6 e2       	ldi	r26, 0x26	; 38
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e6 e2       	ldi	r30, 0x26	; 38
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	80 61       	ori	r24, 0x10	; 16
    182a:	8c 93       	st	X, r24

	return ADCH;
    182c:	e5 e2       	ldi	r30, 0x25	; 37
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z

}
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <HLCD_voidSendCommand>:
#include<avr/delay.h>




void HLCD_voidSendCommand(u8 A_u8Cmd){
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	6d 97       	sbiw	r28, 0x1d	; 29
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Intailize control Pins Rs/ RW*/
	MDIO_voidSetPinValue('A', 0, 0);
    1850:	81 e4       	ldi	r24, 0x41	; 65
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	0e 94 5d 09 	call	0x12ba	; 0x12ba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('A', 1, 0);
    185a:	81 e4       	ldi	r24, 0x41	; 65
    185c:	61 e0       	ldi	r22, 0x01	; 1
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	0e 94 5d 09 	call	0x12ba	; 0x12ba <MDIO_voidSetPinValue>

	/*Write Command on data Pins*/
	MDIO_voidSetPortValue('C', A_u8Cmd);
    1864:	83 e4       	ldi	r24, 0x43	; 67
    1866:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1868:	0e 94 b7 0a 	call	0x156e	; 0x156e <MDIO_voidSetPortValue>

	/*Pulse On Enable Pin*/
	MDIO_voidSetPinValue('A', 2, 1);
    186c:	81 e4       	ldi	r24, 0x41	; 65
    186e:	62 e0       	ldi	r22, 0x02	; 2
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 5d 09 	call	0x12ba	; 0x12ba <MDIO_voidSetPinValue>
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a0 e8       	ldi	r26, 0x80	; 128
    187c:	bf e3       	ldi	r27, 0x3F	; 63
    187e:	89 8f       	std	Y+25, r24	; 0x19
    1880:	9a 8f       	std	Y+26, r25	; 0x1a
    1882:	ab 8f       	std	Y+27, r26	; 0x1b
    1884:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1886:	69 8d       	ldd	r22, Y+25	; 0x19
    1888:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    188c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	4a ef       	ldi	r20, 0xFA	; 250
    1894:	54 e4       	ldi	r21, 0x44	; 68
    1896:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	8d 8b       	std	Y+21, r24	; 0x15
    18a0:	9e 8b       	std	Y+22, r25	; 0x16
    18a2:	af 8b       	std	Y+23, r26	; 0x17
    18a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18a6:	6d 89       	ldd	r22, Y+21	; 0x15
    18a8:	7e 89       	ldd	r23, Y+22	; 0x16
    18aa:	8f 89       	ldd	r24, Y+23	; 0x17
    18ac:	98 8d       	ldd	r25, Y+24	; 0x18
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e8       	ldi	r20, 0x80	; 128
    18b4:	5f e3       	ldi	r21, 0x3F	; 63
    18b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ba:	88 23       	and	r24, r24
    18bc:	2c f4       	brge	.+10     	; 0x18c8 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9c 8b       	std	Y+20, r25	; 0x14
    18c4:	8b 8b       	std	Y+19, r24	; 0x13
    18c6:	3f c0       	rjmp	.+126    	; 0x1946 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    18c8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ca:	7e 89       	ldd	r23, Y+22	; 0x16
    18cc:	8f 89       	ldd	r24, Y+23	; 0x17
    18ce:	98 8d       	ldd	r25, Y+24	; 0x18
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	3f ef       	ldi	r19, 0xFF	; 255
    18d4:	4f e7       	ldi	r20, 0x7F	; 127
    18d6:	57 e4       	ldi	r21, 0x47	; 71
    18d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18dc:	18 16       	cp	r1, r24
    18de:	4c f5       	brge	.+82     	; 0x1932 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e0:	69 8d       	ldd	r22, Y+25	; 0x19
    18e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e2       	ldi	r20, 0x20	; 32
    18ee:	51 e4       	ldi	r21, 0x41	; 65
    18f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	bc 01       	movw	r22, r24
    18fa:	cd 01       	movw	r24, r26
    18fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	9c 8b       	std	Y+20, r25	; 0x14
    1906:	8b 8b       	std	Y+19, r24	; 0x13
    1908:	0f c0       	rjmp	.+30     	; 0x1928 <HLCD_voidSendCommand+0xee>
    190a:	88 ec       	ldi	r24, 0xC8	; 200
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9a 8b       	std	Y+18, r25	; 0x12
    1910:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1912:	89 89       	ldd	r24, Y+17	; 0x11
    1914:	9a 89       	ldd	r25, Y+18	; 0x12
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <HLCD_voidSendCommand+0xdc>
    191a:	9a 8b       	std	Y+18, r25	; 0x12
    191c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191e:	8b 89       	ldd	r24, Y+19	; 0x13
    1920:	9c 89       	ldd	r25, Y+20	; 0x14
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	9c 8b       	std	Y+20, r25	; 0x14
    1926:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1928:	8b 89       	ldd	r24, Y+19	; 0x13
    192a:	9c 89       	ldd	r25, Y+20	; 0x14
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	69 f7       	brne	.-38     	; 0x190a <HLCD_voidSendCommand+0xd0>
    1930:	14 c0       	rjmp	.+40     	; 0x195a <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1932:	6d 89       	ldd	r22, Y+21	; 0x15
    1934:	7e 89       	ldd	r23, Y+22	; 0x16
    1936:	8f 89       	ldd	r24, Y+23	; 0x17
    1938:	98 8d       	ldd	r25, Y+24	; 0x18
    193a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9c 8b       	std	Y+20, r25	; 0x14
    1944:	8b 8b       	std	Y+19, r24	; 0x13
    1946:	8b 89       	ldd	r24, Y+19	; 0x13
    1948:	9c 89       	ldd	r25, Y+20	; 0x14
    194a:	98 8b       	std	Y+16, r25	; 0x10
    194c:	8f 87       	std	Y+15, r24	; 0x0f
    194e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1950:	98 89       	ldd	r25, Y+16	; 0x10
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <HLCD_voidSendCommand+0x118>
    1956:	98 8b       	std	Y+16, r25	; 0x10
    1958:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue('A', 2, 0);
    195a:	81 e4       	ldi	r24, 0x41	; 65
    195c:	62 e0       	ldi	r22, 0x02	; 2
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	0e 94 5d 09 	call	0x12ba	; 0x12ba <MDIO_voidSetPinValue>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a0 e8       	ldi	r26, 0x80	; 128
    196a:	bf e3       	ldi	r27, 0x3F	; 63
    196c:	8b 87       	std	Y+11, r24	; 0x0b
    196e:	9c 87       	std	Y+12, r25	; 0x0c
    1970:	ad 87       	std	Y+13, r26	; 0x0d
    1972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1974:	6b 85       	ldd	r22, Y+11	; 0x0b
    1976:	7c 85       	ldd	r23, Y+12	; 0x0c
    1978:	8d 85       	ldd	r24, Y+13	; 0x0d
    197a:	9e 85       	ldd	r25, Y+14	; 0x0e
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a ef       	ldi	r20, 0xFA	; 250
    1982:	54 e4       	ldi	r21, 0x44	; 68
    1984:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8f 83       	std	Y+7, r24	; 0x07
    198e:	98 87       	std	Y+8, r25	; 0x08
    1990:	a9 87       	std	Y+9, r26	; 0x09
    1992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1994:	6f 81       	ldd	r22, Y+7	; 0x07
    1996:	78 85       	ldd	r23, Y+8	; 0x08
    1998:	89 85       	ldd	r24, Y+9	; 0x09
    199a:	9a 85       	ldd	r25, Y+10	; 0x0a
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	5f e3       	ldi	r21, 0x3F	; 63
    19a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19a8:	88 23       	and	r24, r24
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	8d 83       	std	Y+5, r24	; 0x05
    19b4:	3f c0       	rjmp	.+126    	; 0x1a34 <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    19b6:	6f 81       	ldd	r22, Y+7	; 0x07
    19b8:	78 85       	ldd	r23, Y+8	; 0x08
    19ba:	89 85       	ldd	r24, Y+9	; 0x09
    19bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	57 e4       	ldi	r21, 0x47	; 71
    19c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	4c f5       	brge	.+82     	; 0x1a20 <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e2       	ldi	r20, 0x20	; 32
    19dc:	51 e4       	ldi	r21, 0x41	; 65
    19de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	cd 01       	movw	r24, r26
    19ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <HLCD_voidSendCommand+0x1dc>
    19f8:	88 ec       	ldi	r24, 0xC8	; 200
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9c 83       	std	Y+4, r25	; 0x04
    19fe:	8b 83       	std	Y+3, r24	; 0x03
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <HLCD_voidSendCommand+0x1ca>
    1a08:	9c 83       	std	Y+4, r25	; 0x04
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	69 f7       	brne	.-38     	; 0x19f8 <HLCD_voidSendCommand+0x1be>
    1a1e:	14 c0       	rjmp	.+40     	; 0x1a48 <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <HLCD_voidSendCommand+0x206>
    1a44:	9a 83       	std	Y+2, r25	; 0x02
    1a46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1a48:	6d 96       	adiw	r28, 0x1d	; 29
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data){
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	6d 97       	sbiw	r28, 0x1d	; 29
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Intailize control Pins Rs/ RW*/
	MDIO_voidSetPinValue('A', 0, 1);
    1a70:	81 e4       	ldi	r24, 0x41	; 65
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 5d 09 	call	0x12ba	; 0x12ba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('A', 1, 0);
    1a7a:	81 e4       	ldi	r24, 0x41	; 65
    1a7c:	61 e0       	ldi	r22, 0x01	; 1
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	0e 94 5d 09 	call	0x12ba	; 0x12ba <MDIO_voidSetPinValue>

	/*Write Command on data Pins*/
	MDIO_voidSetPortValue('C', A_u8Data);
    1a84:	83 e4       	ldi	r24, 0x43	; 67
    1a86:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a88:	0e 94 b7 0a 	call	0x156e	; 0x156e <MDIO_voidSetPortValue>

	/*Pulse On Enable Pin*/
	MDIO_voidSetPinValue('A', 2, 1);
    1a8c:	81 e4       	ldi	r24, 0x41	; 65
    1a8e:	62 e0       	ldi	r22, 0x02	; 2
    1a90:	41 e0       	ldi	r20, 0x01	; 1
    1a92:	0e 94 5d 09 	call	0x12ba	; 0x12ba <MDIO_voidSetPinValue>
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a0 e8       	ldi	r26, 0x80	; 128
    1a9c:	bf e3       	ldi	r27, 0x3F	; 63
    1a9e:	89 8f       	std	Y+25, r24	; 0x19
    1aa0:	9a 8f       	std	Y+26, r25	; 0x1a
    1aa2:	ab 8f       	std	Y+27, r26	; 0x1b
    1aa4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa6:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	4a ef       	ldi	r20, 0xFA	; 250
    1ab4:	54 e4       	ldi	r21, 0x44	; 68
    1ab6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	8d 8b       	std	Y+21, r24	; 0x15
    1ac0:	9e 8b       	std	Y+22, r25	; 0x16
    1ac2:	af 8b       	std	Y+23, r26	; 0x17
    1ac4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aca:	8f 89       	ldd	r24, Y+23	; 0x17
    1acc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9c 8b       	std	Y+20, r25	; 0x14
    1ae4:	8b 8b       	std	Y+19, r24	; 0x13
    1ae6:	3f c0       	rjmp	.+126    	; 0x1b66 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aea:	7e 89       	ldd	r23, Y+22	; 0x16
    1aec:	8f 89       	ldd	r24, Y+23	; 0x17
    1aee:	98 8d       	ldd	r25, Y+24	; 0x18
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	57 e4       	ldi	r21, 0x47	; 71
    1af8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1afc:	18 16       	cp	r1, r24
    1afe:	4c f5       	brge	.+82     	; 0x1b52 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b00:	69 8d       	ldd	r22, Y+25	; 0x19
    1b02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9c 8b       	std	Y+20, r25	; 0x14
    1b26:	8b 8b       	std	Y+19, r24	; 0x13
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <HLCD_voidSendData+0xee>
    1b2a:	88 ec       	ldi	r24, 0xC8	; 200
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9a 8b       	std	Y+18, r25	; 0x12
    1b30:	89 8b       	std	Y+17, r24	; 0x11
    1b32:	89 89       	ldd	r24, Y+17	; 0x11
    1b34:	9a 89       	ldd	r25, Y+18	; 0x12
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <HLCD_voidSendData+0xdc>
    1b3a:	9a 8b       	std	Y+18, r25	; 0x12
    1b3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b40:	9c 89       	ldd	r25, Y+20	; 0x14
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	9c 8b       	std	Y+20, r25	; 0x14
    1b46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b48:	8b 89       	ldd	r24, Y+19	; 0x13
    1b4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	69 f7       	brne	.-38     	; 0x1b2a <HLCD_voidSendData+0xd0>
    1b50:	14 c0       	rjmp	.+40     	; 0x1b7a <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b52:	6d 89       	ldd	r22, Y+21	; 0x15
    1b54:	7e 89       	ldd	r23, Y+22	; 0x16
    1b56:	8f 89       	ldd	r24, Y+23	; 0x17
    1b58:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9c 8b       	std	Y+20, r25	; 0x14
    1b64:	8b 8b       	std	Y+19, r24	; 0x13
    1b66:	8b 89       	ldd	r24, Y+19	; 0x13
    1b68:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6a:	98 8b       	std	Y+16, r25	; 0x10
    1b6c:	8f 87       	std	Y+15, r24	; 0x0f
    1b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b70:	98 89       	ldd	r25, Y+16	; 0x10
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <HLCD_voidSendData+0x118>
    1b76:	98 8b       	std	Y+16, r25	; 0x10
    1b78:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue('A', 2, 0);
    1b7a:	81 e4       	ldi	r24, 0x41	; 65
    1b7c:	62 e0       	ldi	r22, 0x02	; 2
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	0e 94 5d 09 	call	0x12ba	; 0x12ba <MDIO_voidSetPinValue>
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e8       	ldi	r26, 0x80	; 128
    1b8a:	bf e3       	ldi	r27, 0x3F	; 63
    1b8c:	8b 87       	std	Y+11, r24	; 0x0b
    1b8e:	9c 87       	std	Y+12, r25	; 0x0c
    1b90:	ad 87       	std	Y+13, r26	; 0x0d
    1b92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4a ef       	ldi	r20, 0xFA	; 250
    1ba2:	54 e4       	ldi	r21, 0x44	; 68
    1ba4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8f 83       	std	Y+7, r24	; 0x07
    1bae:	98 87       	std	Y+8, r25	; 0x08
    1bb0:	a9 87       	std	Y+9, r26	; 0x09
    1bb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb6:	78 85       	ldd	r23, Y+8	; 0x08
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bc8:	88 23       	and	r24, r24
    1bca:	2c f4       	brge	.+10     	; 0x1bd6 <HLCD_voidSendData+0x17c>
		__ticks = 1;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	3f c0       	rjmp	.+126    	; 0x1c54 <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	57 e4       	ldi	r21, 0x47	; 71
    1be6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bea:	18 16       	cp	r1, r24
    1bec:	4c f5       	brge	.+82     	; 0x1c40 <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e2       	ldi	r20, 0x20	; 32
    1bfc:	51 e4       	ldi	r21, 0x41	; 65
    1bfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	9e 83       	std	Y+6, r25	; 0x06
    1c14:	8d 83       	std	Y+5, r24	; 0x05
    1c16:	0f c0       	rjmp	.+30     	; 0x1c36 <HLCD_voidSendData+0x1dc>
    1c18:	88 ec       	ldi	r24, 0xC8	; 200
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9c 83       	std	Y+4, r25	; 0x04
    1c1e:	8b 83       	std	Y+3, r24	; 0x03
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <HLCD_voidSendData+0x1ca>
    1c28:	9c 83       	std	Y+4, r25	; 0x04
    1c2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	69 f7       	brne	.-38     	; 0x1c18 <HLCD_voidSendData+0x1be>
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	9e 83       	std	Y+6, r25	; 0x06
    1c52:	8d 83       	std	Y+5, r24	; 0x05
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	9e 81       	ldd	r25, Y+6	; 0x06
    1c58:	9a 83       	std	Y+2, r25	; 0x02
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <HLCD_voidSendData+0x206>
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1c68:	6d 96       	adiw	r28, 0x1d	; 29
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <HLCD_voidInit>:
void HLCD_voidInit(){
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	e8 97       	sbiw	r28, 0x38	; 56
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 ef       	ldi	r26, 0xF0	; 240
    1c94:	b1 e4       	ldi	r27, 0x41	; 65
    1c96:	8d ab       	std	Y+53, r24	; 0x35
    1c98:	9e ab       	std	Y+54, r25	; 0x36
    1c9a:	af ab       	std	Y+55, r26	; 0x37
    1c9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1ca0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ca2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a ef       	ldi	r20, 0xFA	; 250
    1cac:	54 e4       	ldi	r21, 0x44	; 68
    1cae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	89 ab       	std	Y+49, r24	; 0x31
    1cb8:	9a ab       	std	Y+50, r25	; 0x32
    1cba:	ab ab       	std	Y+51, r26	; 0x33
    1cbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <HLCD_voidInit+0x66>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	98 ab       	std	Y+48, r25	; 0x30
    1cdc:	8f a7       	std	Y+47, r24	; 0x2f
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1ce0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cfa:	7e a9       	ldd	r23, Y+54	; 0x36
    1cfc:	8f a9       	ldd	r24, Y+55	; 0x37
    1cfe:	98 ad       	ldd	r25, Y+56	; 0x38
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	98 ab       	std	Y+48, r25	; 0x30
    1d1e:	8f a7       	std	Y+47, r24	; 0x2f
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <HLCD_voidInit+0xc6>
    1d22:	88 ec       	ldi	r24, 0xC8	; 200
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9e a7       	std	Y+46, r25	; 0x2e
    1d28:	8d a7       	std	Y+45, r24	; 0x2d
    1d2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <HLCD_voidInit+0xb4>
    1d32:	9e a7       	std	Y+46, r25	; 0x2e
    1d34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d38:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	98 ab       	std	Y+48, r25	; 0x30
    1d3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d42:	98 a9       	ldd	r25, Y+48	; 0x30
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <HLCD_voidInit+0xa8>
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d50:	9c a9       	ldd	r25, Y+52	; 0x34
    1d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	98 ab       	std	Y+48, r25	; 0x30
    1d5c:	8f a7       	std	Y+47, r24	; 0x2f
    1d5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d60:	98 a9       	ldd	r25, Y+48	; 0x30
    1d62:	9c a7       	std	Y+44, r25	; 0x2c
    1d64:	8b a7       	std	Y+43, r24	; 0x2b
    1d66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d68:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <HLCD_voidInit+0xf0>
    1d6e:	9c a7       	std	Y+44, r25	; 0x2c
    1d70:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);

	/*Function set 0b00111100
	 *
	 * */
	HLCD_voidSendCommand(0b00111000);
    1d72:	88 e3       	ldi	r24, 0x38	; 56
    1d74:	0e 94 1d 0c 	call	0x183a	; 0x183a <HLCD_voidSendCommand>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a0 e8       	ldi	r26, 0x80	; 128
    1d7e:	bf e3       	ldi	r27, 0x3F	; 63
    1d80:	8f a3       	std	Y+39, r24	; 0x27
    1d82:	98 a7       	std	Y+40, r25	; 0x28
    1d84:	a9 a7       	std	Y+41, r26	; 0x29
    1d86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	6f a1       	ldd	r22, Y+39	; 0x27
    1d8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4a ef       	ldi	r20, 0xFA	; 250
    1d96:	54 e4       	ldi	r21, 0x44	; 68
    1d98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	8b a3       	std	Y+35, r24	; 0x23
    1da2:	9c a3       	std	Y+36, r25	; 0x24
    1da4:	ad a3       	std	Y+37, r26	; 0x25
    1da6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1da8:	6b a1       	ldd	r22, Y+35	; 0x23
    1daa:	7c a1       	ldd	r23, Y+36	; 0x24
    1dac:	8d a1       	ldd	r24, Y+37	; 0x25
    1dae:	9e a1       	ldd	r25, Y+38	; 0x26
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <HLCD_voidInit+0x150>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9a a3       	std	Y+34, r25	; 0x22
    1dc6:	89 a3       	std	Y+33, r24	; 0x21
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <HLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    1dca:	6b a1       	ldd	r22, Y+35	; 0x23
    1dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dce:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	4c f5       	brge	.+82     	; 0x1e34 <HLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de2:	6f a1       	ldd	r22, Y+39	; 0x27
    1de4:	78 a5       	ldd	r23, Y+40	; 0x28
    1de6:	89 a5       	ldd	r24, Y+41	; 0x29
    1de8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9a a3       	std	Y+34, r25	; 0x22
    1e08:	89 a3       	std	Y+33, r24	; 0x21
    1e0a:	0f c0       	rjmp	.+30     	; 0x1e2a <HLCD_voidInit+0x1b0>
    1e0c:	88 ec       	ldi	r24, 0xC8	; 200
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	98 a3       	std	Y+32, r25	; 0x20
    1e12:	8f 8f       	std	Y+31, r24	; 0x1f
    1e14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e16:	98 a1       	ldd	r25, Y+32	; 0x20
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <HLCD_voidInit+0x19e>
    1e1c:	98 a3       	std	Y+32, r25	; 0x20
    1e1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e20:	89 a1       	ldd	r24, Y+33	; 0x21
    1e22:	9a a1       	ldd	r25, Y+34	; 0x22
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	9a a3       	std	Y+34, r25	; 0x22
    1e28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	69 f7       	brne	.-38     	; 0x1e0c <HLCD_voidInit+0x192>
    1e32:	14 c0       	rjmp	.+40     	; 0x1e5c <HLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	6b a1       	ldd	r22, Y+35	; 0x23
    1e36:	7c a1       	ldd	r23, Y+36	; 0x24
    1e38:	8d a1       	ldd	r24, Y+37	; 0x25
    1e3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	9a a3       	std	Y+34, r25	; 0x22
    1e46:	89 a3       	std	Y+33, r24	; 0x21
    1e48:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <HLCD_voidInit+0x1da>
    1e58:	9e 8f       	std	Y+30, r25	; 0x1e
    1e5a:	8d 8f       	std	Y+29, r24	; 0x1d

	/*Display on/off
	 * 0b00001111
	 *
	 * */
	HLCD_voidSendCommand(0b00001111);
    1e5c:	8f e0       	ldi	r24, 0x0F	; 15
    1e5e:	0e 94 1d 0c 	call	0x183a	; 0x183a <HLCD_voidSendCommand>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e8       	ldi	r26, 0x80	; 128
    1e68:	bf e3       	ldi	r27, 0x3F	; 63
    1e6a:	89 8f       	std	Y+25, r24	; 0x19
    1e6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	69 8d       	ldd	r22, Y+25	; 0x19
    1e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a ef       	ldi	r20, 0xFA	; 250
    1e80:	54 e4       	ldi	r21, 0x44	; 68
    1e82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8d 8b       	std	Y+21, r24	; 0x15
    1e8c:	9e 8b       	std	Y+22, r25	; 0x16
    1e8e:	af 8b       	std	Y+23, r26	; 0x17
    1e90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <HLCD_voidInit+0x23a>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 8b       	std	Y+20, r25	; 0x14
    1eb0:	8b 8b       	std	Y+19, r24	; 0x13
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <HLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    1eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eba:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <HLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9c 8b       	std	Y+20, r25	; 0x14
    1ef2:	8b 8b       	std	Y+19, r24	; 0x13
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <HLCD_voidInit+0x29a>
    1ef6:	88 ec       	ldi	r24, 0xC8	; 200
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9a 8b       	std	Y+18, r25	; 0x12
    1efc:	89 8b       	std	Y+17, r24	; 0x11
    1efe:	89 89       	ldd	r24, Y+17	; 0x11
    1f00:	9a 89       	ldd	r25, Y+18	; 0x12
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <HLCD_voidInit+0x288>
    1f06:	9a 8b       	std	Y+18, r25	; 0x12
    1f08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9c 8b       	std	Y+20, r25	; 0x14
    1f12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <HLCD_voidInit+0x27c>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <HLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f20:	7e 89       	ldd	r23, Y+22	; 0x16
    1f22:	8f 89       	ldd	r24, Y+23	; 0x17
    1f24:	98 8d       	ldd	r25, Y+24	; 0x18
    1f26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c 8b       	std	Y+20, r25	; 0x14
    1f30:	8b 8b       	std	Y+19, r24	; 0x13
    1f32:	8b 89       	ldd	r24, Y+19	; 0x13
    1f34:	9c 89       	ldd	r25, Y+20	; 0x14
    1f36:	98 8b       	std	Y+16, r25	; 0x10
    1f38:	8f 87       	std	Y+15, r24	; 0x0f
    1f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3c:	98 89       	ldd	r25, Y+16	; 0x10
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <HLCD_voidInit+0x2c4>
    1f42:	98 8b       	std	Y+16, r25	; 0x10
    1f44:	8f 87       	std	Y+15, r24	; 0x0f
	/*Wait for 39 Micro sec*/
	_delay_ms(1);
	/*
	 * Display Clear 0b 0000 0001
	 * */
	HLCD_voidSendCommand(0b00000001);
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	0e 94 1d 0c 	call	0x183a	; 0x183a <HLCD_voidSendCommand>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e0       	ldi	r26, 0x00	; 0
    1f52:	b0 e4       	ldi	r27, 0x40	; 64
    1f54:	8b 87       	std	Y+11, r24	; 0x0b
    1f56:	9c 87       	std	Y+12, r25	; 0x0c
    1f58:	ad 87       	std	Y+13, r26	; 0x0d
    1f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a ef       	ldi	r20, 0xFA	; 250
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8f 83       	std	Y+7, r24	; 0x07
    1f76:	98 87       	std	Y+8, r25	; 0x08
    1f78:	a9 87       	std	Y+9, r26	; 0x09
    1f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7e:	78 85       	ldd	r23, Y+8	; 0x08
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <HLCD_voidInit+0x324>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <HLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    1f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa0:	78 85       	ldd	r23, Y+8	; 0x08
    1fa2:	89 85       	ldd	r24, Y+9	; 0x09
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <HLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <HLCD_voidInit+0x384>
    1fe0:	88 ec       	ldi	r24, 0xC8	; 200
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <HLCD_voidInit+0x372>
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <HLCD_voidInit+0x366>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <HLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <HLCD_voidInit+0x3ae>
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01

	/*Entry Set Mode
	 *
	 * 0b00000110
	 * */
	HLCD_voidSendCommand(0b00000110);
    2030:	86 e0       	ldi	r24, 0x06	; 6
    2032:	0e 94 1d 0c 	call	0x183a	; 0x183a <HLCD_voidSendCommand>


}
    2036:	e8 96       	adiw	r28, 0x38	; 56
    2038:	0f b6       	in	r0, 0x3f	; 63
    203a:	f8 94       	cli
    203c:	de bf       	out	0x3e, r29	; 62
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	cd bf       	out	0x3d, r28	; 61
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <HLCD_voidSendString>:




void HLCD_voidSendString(u8 *String){
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <HLCD_voidSendString+0x6>
    204e:	0f 92       	push	r0
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	9b 83       	std	Y+3, r25	; 0x03
    2056:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
    2058:	19 82       	std	Y+1, r1	; 0x01
    205a:	0e c0       	rjmp	.+28     	; 0x2078 <HLCD_voidSendString+0x30>
	while(String[i] != '\0'){
		HLCD_voidSendData(String[i]);
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	9b 81       	ldd	r25, Y+3	; 0x03
    2066:	fc 01       	movw	r30, r24
    2068:	e2 0f       	add	r30, r18
    206a:	f3 1f       	adc	r31, r19
    206c:	80 81       	ld	r24, Z
    206e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <HLCD_voidSendData>
		i++;
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	8f 5f       	subi	r24, 0xFF	; 255
    2076:	89 83       	std	Y+1, r24	; 0x01



void HLCD_voidSendString(u8 *String){
	u8 i =0;
	while(String[i] != '\0'){
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	9b 81       	ldd	r25, Y+3	; 0x03
    2082:	fc 01       	movw	r30, r24
    2084:	e2 0f       	add	r30, r18
    2086:	f3 1f       	adc	r31, r19
    2088:	80 81       	ld	r24, Z
    208a:	88 23       	and	r24, r24
    208c:	39 f7       	brne	.-50     	; 0x205c <HLCD_voidSendString+0x14>
		HLCD_voidSendData(String[i]);
		i++;
	}
}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <HLCD_voidGoto>:

void HLCD_voidGoto(u8 A_u8Row, u8 A_u8Col){
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <HLCD_voidGoto+0x6>
    20a0:	0f 92       	push	r0
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	8a 83       	std	Y+2, r24	; 0x02
    20a8:	6b 83       	std	Y+3, r22	; 0x03

	u8 L_u8DdramAddress=0;
    20aa:	19 82       	std	Y+1, r1	; 0x01

	if(A_u8Row < 2 && A_u8Col < 16){
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	82 30       	cpi	r24, 0x02	; 2
    20b0:	90 f4       	brcc	.+36     	; 0x20d6 <HLCD_voidGoto+0x3c>
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	80 31       	cpi	r24, 0x10	; 16
    20b6:	78 f4       	brcc	.+30     	; 0x20d6 <HLCD_voidGoto+0x3c>

		if(A_u8Row == 0){
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	88 23       	and	r24, r24
    20bc:	19 f4       	brne	.+6      	; 0x20c4 <HLCD_voidGoto+0x2a>
			L_u8DdramAddress = 0x00+A_u8Col;
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	03 c0       	rjmp	.+6      	; 0x20ca <HLCD_voidGoto+0x30>
		}
		else{
			L_u8DdramAddress = 0x40+A_u8Col;
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	80 5c       	subi	r24, 0xC0	; 192
    20c8:	89 83       	std	Y+1, r24	; 0x01
		}

		SET_BIT(L_u8DdramAddress, 7);
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	80 68       	ori	r24, 0x80	; 128
    20ce:	89 83       	std	Y+1, r24	; 0x01
		HLCD_voidSendCommand(L_u8DdramAddress);
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	0e 94 1d 0c 	call	0x183a	; 0x183a <HLCD_voidSendCommand>
	}
}
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(s32 A_s32Number)
{
    20e2:	ef 92       	push	r14
    20e4:	ff 92       	push	r15
    20e6:	0f 93       	push	r16
    20e8:	1f 93       	push	r17
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	28 97       	sbiw	r28, 0x08	; 8
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	f8 94       	cli
    20f8:	de bf       	out	0x3e, r29	; 62
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	6d 83       	std	Y+5, r22	; 0x05
    2100:	7e 83       	std	Y+6, r23	; 0x06
    2102:	8f 83       	std	Y+7, r24	; 0x07
    2104:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Number=1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e0       	ldi	r26, 0x00	; 0
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	ab 83       	std	Y+3, r26	; 0x03
    2114:	bc 83       	std	Y+4, r27	; 0x04
	if (A_s32Number==0)
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	af 81       	ldd	r26, Y+7	; 0x07
    211c:	b8 85       	ldd	r27, Y+8	; 0x08
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	a1 05       	cpc	r26, r1
    2122:	b1 05       	cpc	r27, r1
    2124:	19 f4       	brne	.+6      	; 0x212c <HLCD_voidDisplayNumber+0x4a>
	{
		HLCD_voidSendData('0');
    2126:	80 e3       	ldi	r24, 0x30	; 48
    2128:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <HLCD_voidSendData>
	}
	if (A_s32Number<0)
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	af 81       	ldd	r26, Y+7	; 0x07
    2132:	b8 85       	ldd	r27, Y+8	; 0x08
    2134:	bb 23       	and	r27, r27
    2136:	0c f0       	brlt	.+2      	; 0x213a <HLCD_voidDisplayNumber+0x58>
    2138:	49 c0       	rjmp	.+146    	; 0x21cc <HLCD_voidDisplayNumber+0xea>
	{
		HLCD_voidSendData('-');
    213a:	8d e2       	ldi	r24, 0x2D	; 45
    213c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <HLCD_voidSendData>
		A_s32Number *=-1;
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	9e 81       	ldd	r25, Y+6	; 0x06
    2144:	af 81       	ldd	r26, Y+7	; 0x07
    2146:	b8 85       	ldd	r27, Y+8	; 0x08
    2148:	b0 95       	com	r27
    214a:	a0 95       	com	r26
    214c:	90 95       	com	r25
    214e:	81 95       	neg	r24
    2150:	9f 4f       	sbci	r25, 0xFF	; 255
    2152:	af 4f       	sbci	r26, 0xFF	; 255
    2154:	bf 4f       	sbci	r27, 0xFF	; 255
    2156:	8d 83       	std	Y+5, r24	; 0x05
    2158:	9e 83       	std	Y+6, r25	; 0x06
    215a:	af 83       	std	Y+7, r26	; 0x07
    215c:	b8 87       	std	Y+8, r27	; 0x08
    215e:	36 c0       	rjmp	.+108    	; 0x21cc <HLCD_voidDisplayNumber+0xea>
	}
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	ab 81       	ldd	r26, Y+3	; 0x03
    2166:	bc 81       	ldd	r27, Y+4	; 0x04
    2168:	2a e0       	ldi	r18, 0x0A	; 10
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	50 e0       	ldi	r21, 0x00	; 0
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 8a 11 	call	0x2314	; 0x2314 <__mulsi3>
    2178:	7b 01       	movw	r14, r22
    217a:	8c 01       	movw	r16, r24
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	af 81       	ldd	r26, Y+7	; 0x07
    2182:	b8 85       	ldd	r27, Y+8	; 0x08
    2184:	2a e0       	ldi	r18, 0x0A	; 10
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	0e 94 cb 11 	call	0x2396	; 0x2396 <__divmodsi4>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	8e 0d       	add	r24, r14
    219a:	9f 1d       	adc	r25, r15
    219c:	a0 1f       	adc	r26, r16
    219e:	b1 1f       	adc	r27, r17
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	9a 83       	std	Y+2, r25	; 0x02
    21a4:	ab 83       	std	Y+3, r26	; 0x03
    21a6:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number = A_s32Number /10;
    21a8:	8d 81       	ldd	r24, Y+5	; 0x05
    21aa:	9e 81       	ldd	r25, Y+6	; 0x06
    21ac:	af 81       	ldd	r26, Y+7	; 0x07
    21ae:	b8 85       	ldd	r27, Y+8	; 0x08
    21b0:	2a e0       	ldi	r18, 0x0A	; 10
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 cb 11 	call	0x2396	; 0x2396 <__divmodsi4>
    21c0:	da 01       	movw	r26, r20
    21c2:	c9 01       	movw	r24, r18
    21c4:	8d 83       	std	Y+5, r24	; 0x05
    21c6:	9e 83       	std	Y+6, r25	; 0x06
    21c8:	af 83       	std	Y+7, r26	; 0x07
    21ca:	b8 87       	std	Y+8, r27	; 0x08
	if (A_s32Number<0)
	{
		HLCD_voidSendData('-');
		A_s32Number *=-1;
	}
	while (A_s32Number!=0)
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	af 81       	ldd	r26, Y+7	; 0x07
    21d2:	b8 85       	ldd	r27, Y+8	; 0x08
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	a1 05       	cpc	r26, r1
    21d8:	b1 05       	cpc	r27, r1
    21da:	11 f6       	brne	.-124    	; 0x2160 <HLCD_voidDisplayNumber+0x7e>
    21dc:	23 c0       	rjmp	.+70     	; 0x2224 <HLCD_voidDisplayNumber+0x142>
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
	{
		HLCD_voidSendData((local_u32Number%10)+48);
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	ab 81       	ldd	r26, Y+3	; 0x03
    21e4:	bc 81       	ldd	r27, Y+4	; 0x04
    21e6:	2a e0       	ldi	r18, 0x0A	; 10
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 a9 11 	call	0x2352	; 0x2352 <__udivmodsi4>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	80 5d       	subi	r24, 0xD0	; 208
    21fc:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <HLCD_voidSendData>
		local_u32Number=local_u32Number/10;
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	9a 81       	ldd	r25, Y+2	; 0x02
    2204:	ab 81       	ldd	r26, Y+3	; 0x03
    2206:	bc 81       	ldd	r27, Y+4	; 0x04
    2208:	2a e0       	ldi	r18, 0x0A	; 10
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 a9 11 	call	0x2352	; 0x2352 <__udivmodsi4>
    2218:	da 01       	movw	r26, r20
    221a:	c9 01       	movw	r24, r18
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	9a 83       	std	Y+2, r25	; 0x02
    2220:	ab 83       	std	Y+3, r26	; 0x03
    2222:	bc 83       	std	Y+4, r27	; 0x04
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	ab 81       	ldd	r26, Y+3	; 0x03
    222a:	bc 81       	ldd	r27, Y+4	; 0x04
    222c:	81 30       	cpi	r24, 0x01	; 1
    222e:	91 05       	cpc	r25, r1
    2230:	a1 05       	cpc	r26, r1
    2232:	b1 05       	cpc	r27, r1
    2234:	a1 f6       	brne	.-88     	; 0x21de <HLCD_voidDisplayNumber+0xfc>
	{
		HLCD_voidSendData((local_u32Number%10)+48);
		local_u32Number=local_u32Number/10;
	}
}
    2236:	28 96       	adiw	r28, 0x08	; 8
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	ff 90       	pop	r15
    224c:	ef 90       	pop	r14
    224e:	08 95       	ret

00002250 <HKPD_u8GetPressedKey>:
		{'1', '2', '3', '-'},
		{'#', '0', '=', '+'}
};


u8 HKPD_u8GetPressedKey(){
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <HKPD_u8GetPressedKey+0x6>
    2256:	00 d0       	rcall	.+0      	; 0x2258 <HKPD_u8GetPressedKey+0x8>
    2258:	0f 92       	push	r0
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62

	u8 L_u8PressedKey = 255, Row, Col;
    225e:	8f ef       	ldi	r24, 0xFF	; 255
    2260:	8c 83       	std	Y+4, r24	; 0x04

	for(Col =0; Col<4; Col++){
    2262:	1a 82       	std	Y+2, r1	; 0x02
    2264:	3e c0       	rjmp	.+124    	; 0x22e2 <HKPD_u8GetPressedKey+0x92>
		/*Activate Current Col*/
		MDIO_voidSetPinValue('D', Col, 0);
    2266:	84 e4       	ldi	r24, 0x44	; 68
    2268:	6a 81       	ldd	r22, Y+2	; 0x02
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	0e 94 5d 09 	call	0x12ba	; 0x12ba <MDIO_voidSetPinValue>

		for(Row = 0; Row<4; Row++){
    2270:	1b 82       	std	Y+3, r1	; 0x03
    2272:	2c c0       	rjmp	.+88     	; 0x22cc <HKPD_u8GetPressedKey+0x7c>
			u8 L_u8PinValue = MDIO_u8GetPinValue('D', (Row+4));
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	98 2f       	mov	r25, r24
    2278:	9c 5f       	subi	r25, 0xFC	; 252
    227a:	84 e4       	ldi	r24, 0x44	; 68
    227c:	69 2f       	mov	r22, r25
    227e:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <MDIO_u8GetPinValue>
    2282:	89 83       	std	Y+1, r24	; 0x01

			if(L_u8PinValue == 0){
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	88 23       	and	r24, r24
    2288:	f1 f4       	brne	.+60     	; 0x22c6 <HKPD_u8GetPressedKey+0x76>
				L_u8PressedKey = G_u8KeyPadButtons[Row][Col];
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	48 2f       	mov	r20, r24
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	ca 01       	movw	r24, r20
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	82 0f       	add	r24, r18
    22a2:	93 1f       	adc	r25, r19
    22a4:	fc 01       	movw	r30, r24
    22a6:	e8 59       	subi	r30, 0x98	; 152
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	8c 83       	std	Y+4, r24	; 0x04

				while(MDIO_u8GetPinValue('D', (Row+4)) == 0);
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	98 2f       	mov	r25, r24
    22b2:	9c 5f       	subi	r25, 0xFC	; 252
    22b4:	84 e4       	ldi	r24, 0x44	; 68
    22b6:	69 2f       	mov	r22, r25
    22b8:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <MDIO_u8GetPinValue>
    22bc:	88 23       	and	r24, r24
    22be:	b9 f3       	breq	.-18     	; 0x22ae <HKPD_u8GetPressedKey+0x5e>

				return L_u8PressedKey;
    22c0:	8c 81       	ldd	r24, Y+4	; 0x04
    22c2:	8d 83       	std	Y+5, r24	; 0x05
    22c4:	14 c0       	rjmp	.+40     	; 0x22ee <HKPD_u8GetPressedKey+0x9e>

	for(Col =0; Col<4; Col++){
		/*Activate Current Col*/
		MDIO_voidSetPinValue('D', Col, 0);

		for(Row = 0; Row<4; Row++){
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	8f 5f       	subi	r24, 0xFF	; 255
    22ca:	8b 83       	std	Y+3, r24	; 0x03
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	84 30       	cpi	r24, 0x04	; 4
    22d0:	88 f2       	brcs	.-94     	; 0x2274 <HKPD_u8GetPressedKey+0x24>
				return L_u8PressedKey;
			}

		}
		/*Deactivate Current Col*/
	   MDIO_voidSetPinValue('D', Col, 1);
    22d2:	84 e4       	ldi	r24, 0x44	; 68
    22d4:	6a 81       	ldd	r22, Y+2	; 0x02
    22d6:	41 e0       	ldi	r20, 0x01	; 1
    22d8:	0e 94 5d 09 	call	0x12ba	; 0x12ba <MDIO_voidSetPinValue>

u8 HKPD_u8GetPressedKey(){

	u8 L_u8PressedKey = 255, Row, Col;

	for(Col =0; Col<4; Col++){
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	8f 5f       	subi	r24, 0xFF	; 255
    22e0:	8a 83       	std	Y+2, r24	; 0x02
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	84 30       	cpi	r24, 0x04	; 4
    22e6:	08 f4       	brcc	.+2      	; 0x22ea <HKPD_u8GetPressedKey+0x9a>
    22e8:	be cf       	rjmp	.-132    	; 0x2266 <HKPD_u8GetPressedKey+0x16>
		}
		/*Deactivate Current Col*/
	   MDIO_voidSetPinValue('D', Col, 1);

	}
	return L_u8PressedKey;
    22ea:	8c 81       	ldd	r24, Y+4	; 0x04
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	8d 81       	ldd	r24, Y+5	; 0x05

}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <main>:
#include"../MCAL/Timer/Timer_Interface.h"
#include<avr/interrupt.h>

#include"../MCAL/UART/UART_Interface.h"

int main(){
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62

	/*
	 * UART As A Transmitter
	 * */

	MUART_voidInit();
    2308:	0e 94 9b 05 	call	0xb36	; 0xb36 <MUART_voidInit>
	MUART_voidTransmit('M');
    230c:	8d e4       	ldi	r24, 0x4D	; 77
    230e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <MUART_voidTransmit>
    2312:	ff cf       	rjmp	.-2      	; 0x2312 <main+0x12>

00002314 <__mulsi3>:
    2314:	62 9f       	mul	r22, r18
    2316:	d0 01       	movw	r26, r0
    2318:	73 9f       	mul	r23, r19
    231a:	f0 01       	movw	r30, r0
    231c:	82 9f       	mul	r24, r18
    231e:	e0 0d       	add	r30, r0
    2320:	f1 1d       	adc	r31, r1
    2322:	64 9f       	mul	r22, r20
    2324:	e0 0d       	add	r30, r0
    2326:	f1 1d       	adc	r31, r1
    2328:	92 9f       	mul	r25, r18
    232a:	f0 0d       	add	r31, r0
    232c:	83 9f       	mul	r24, r19
    232e:	f0 0d       	add	r31, r0
    2330:	74 9f       	mul	r23, r20
    2332:	f0 0d       	add	r31, r0
    2334:	65 9f       	mul	r22, r21
    2336:	f0 0d       	add	r31, r0
    2338:	99 27       	eor	r25, r25
    233a:	72 9f       	mul	r23, r18
    233c:	b0 0d       	add	r27, r0
    233e:	e1 1d       	adc	r30, r1
    2340:	f9 1f       	adc	r31, r25
    2342:	63 9f       	mul	r22, r19
    2344:	b0 0d       	add	r27, r0
    2346:	e1 1d       	adc	r30, r1
    2348:	f9 1f       	adc	r31, r25
    234a:	bd 01       	movw	r22, r26
    234c:	cf 01       	movw	r24, r30
    234e:	11 24       	eor	r1, r1
    2350:	08 95       	ret

00002352 <__udivmodsi4>:
    2352:	a1 e2       	ldi	r26, 0x21	; 33
    2354:	1a 2e       	mov	r1, r26
    2356:	aa 1b       	sub	r26, r26
    2358:	bb 1b       	sub	r27, r27
    235a:	fd 01       	movw	r30, r26
    235c:	0d c0       	rjmp	.+26     	; 0x2378 <__udivmodsi4_ep>

0000235e <__udivmodsi4_loop>:
    235e:	aa 1f       	adc	r26, r26
    2360:	bb 1f       	adc	r27, r27
    2362:	ee 1f       	adc	r30, r30
    2364:	ff 1f       	adc	r31, r31
    2366:	a2 17       	cp	r26, r18
    2368:	b3 07       	cpc	r27, r19
    236a:	e4 07       	cpc	r30, r20
    236c:	f5 07       	cpc	r31, r21
    236e:	20 f0       	brcs	.+8      	; 0x2378 <__udivmodsi4_ep>
    2370:	a2 1b       	sub	r26, r18
    2372:	b3 0b       	sbc	r27, r19
    2374:	e4 0b       	sbc	r30, r20
    2376:	f5 0b       	sbc	r31, r21

00002378 <__udivmodsi4_ep>:
    2378:	66 1f       	adc	r22, r22
    237a:	77 1f       	adc	r23, r23
    237c:	88 1f       	adc	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	1a 94       	dec	r1
    2382:	69 f7       	brne	.-38     	; 0x235e <__udivmodsi4_loop>
    2384:	60 95       	com	r22
    2386:	70 95       	com	r23
    2388:	80 95       	com	r24
    238a:	90 95       	com	r25
    238c:	9b 01       	movw	r18, r22
    238e:	ac 01       	movw	r20, r24
    2390:	bd 01       	movw	r22, r26
    2392:	cf 01       	movw	r24, r30
    2394:	08 95       	ret

00002396 <__divmodsi4>:
    2396:	97 fb       	bst	r25, 7
    2398:	09 2e       	mov	r0, r25
    239a:	05 26       	eor	r0, r21
    239c:	0e d0       	rcall	.+28     	; 0x23ba <__divmodsi4_neg1>
    239e:	57 fd       	sbrc	r21, 7
    23a0:	04 d0       	rcall	.+8      	; 0x23aa <__divmodsi4_neg2>
    23a2:	d7 df       	rcall	.-82     	; 0x2352 <__udivmodsi4>
    23a4:	0a d0       	rcall	.+20     	; 0x23ba <__divmodsi4_neg1>
    23a6:	00 1c       	adc	r0, r0
    23a8:	38 f4       	brcc	.+14     	; 0x23b8 <__divmodsi4_exit>

000023aa <__divmodsi4_neg2>:
    23aa:	50 95       	com	r21
    23ac:	40 95       	com	r20
    23ae:	30 95       	com	r19
    23b0:	21 95       	neg	r18
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	4f 4f       	sbci	r20, 0xFF	; 255
    23b6:	5f 4f       	sbci	r21, 0xFF	; 255

000023b8 <__divmodsi4_exit>:
    23b8:	08 95       	ret

000023ba <__divmodsi4_neg1>:
    23ba:	f6 f7       	brtc	.-4      	; 0x23b8 <__divmodsi4_exit>
    23bc:	90 95       	com	r25
    23be:	80 95       	com	r24
    23c0:	70 95       	com	r23
    23c2:	61 95       	neg	r22
    23c4:	7f 4f       	sbci	r23, 0xFF	; 255
    23c6:	8f 4f       	sbci	r24, 0xFF	; 255
    23c8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ca:	08 95       	ret

000023cc <__prologue_saves__>:
    23cc:	2f 92       	push	r2
    23ce:	3f 92       	push	r3
    23d0:	4f 92       	push	r4
    23d2:	5f 92       	push	r5
    23d4:	6f 92       	push	r6
    23d6:	7f 92       	push	r7
    23d8:	8f 92       	push	r8
    23da:	9f 92       	push	r9
    23dc:	af 92       	push	r10
    23de:	bf 92       	push	r11
    23e0:	cf 92       	push	r12
    23e2:	df 92       	push	r13
    23e4:	ef 92       	push	r14
    23e6:	ff 92       	push	r15
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
    23ec:	cf 93       	push	r28
    23ee:	df 93       	push	r29
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	ca 1b       	sub	r28, r26
    23f6:	db 0b       	sbc	r29, r27
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	09 94       	ijmp

00002404 <__epilogue_restores__>:
    2404:	2a 88       	ldd	r2, Y+18	; 0x12
    2406:	39 88       	ldd	r3, Y+17	; 0x11
    2408:	48 88       	ldd	r4, Y+16	; 0x10
    240a:	5f 84       	ldd	r5, Y+15	; 0x0f
    240c:	6e 84       	ldd	r6, Y+14	; 0x0e
    240e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2410:	8c 84       	ldd	r8, Y+12	; 0x0c
    2412:	9b 84       	ldd	r9, Y+11	; 0x0b
    2414:	aa 84       	ldd	r10, Y+10	; 0x0a
    2416:	b9 84       	ldd	r11, Y+9	; 0x09
    2418:	c8 84       	ldd	r12, Y+8	; 0x08
    241a:	df 80       	ldd	r13, Y+7	; 0x07
    241c:	ee 80       	ldd	r14, Y+6	; 0x06
    241e:	fd 80       	ldd	r15, Y+5	; 0x05
    2420:	0c 81       	ldd	r16, Y+4	; 0x04
    2422:	1b 81       	ldd	r17, Y+3	; 0x03
    2424:	aa 81       	ldd	r26, Y+2	; 0x02
    2426:	b9 81       	ldd	r27, Y+1	; 0x01
    2428:	ce 0f       	add	r28, r30
    242a:	d1 1d       	adc	r29, r1
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	ed 01       	movw	r28, r26
    2438:	08 95       	ret

0000243a <_exit>:
    243a:	f8 94       	cli

0000243c <__stop_program>:
    243c:	ff cf       	rjmp	.-2      	; 0x243c <__stop_program>
