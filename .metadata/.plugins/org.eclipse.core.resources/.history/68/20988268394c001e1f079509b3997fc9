

#include"../LIB/STD_TYPES.h"
#include"../LIB/BIT_MATH.h"
#include"../MCAL/DIO/DIO_Interface.h"

#include"../HAL/LCD/LCD.h"
#include<util/delay.h>
#include"../MCAL/EEPROM/EEPROM.h"
#include "../HAL/LCD/LCD.h"
#include "../HAL/KEYPAD/KPD_Interface.h"


#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
#include "I2C_Interface.h"



// Define constants
#define EEPROM_ADDRESS 0xA0
#define PIN_ADDRESS    0x00
#define PIN_LENGTH     4

// Function prototypes
void initialize();
void displayWelcomeMessage();
void enterPIN(char* pinBuffer);
void verifyPIN(char* enteredPIN, char* storedPIN);
void accessGranted();
void accessDenied();

int main() {
    char enteredPIN[PIN_LENGTH + 1]; // +1 for null terminator
    char storedPIN[PIN_LENGTH + 1];  // +1 for null terminator

    initialize();

    while (1) {
        displayWelcomeMessage();
        enterPIN(enteredPIN);
        EEPROM_ReadBlock(PIN_ADDRESS, (uint8_t*)storedPIN, PIN_LENGTH);
        verifyPIN(enteredPIN, storedPIN);
    }

    return 0;
}

void initialize() {
    // Initialize ATmega32 and components
    MTWI_voidMasterInit(); // Initialize I2C
    EEPROM_Init();         // Initialize EEPROM
    LCD_Init();            // Initialize LCD
    Keypad_Init();         // Initialize Keypad
}

void displayWelcomeMessage() {
    LCD_Clear();
    LCD_String("Welcome to Safe");
    _delay_ms(1000);
    LCD_Clear();
}

void enterPIN(char* pinBuffer) {
    LCD_String("Enter PIN: ");
    Keypad_GetString(pinBuffer, PIN_LENGTH);
    LCD_Clear();
}

void verifyPIN(char* enteredPIN, char* storedPIN) {
    if (strcmp(enteredPIN, storedPIN) == 0) {
        accessGranted();
    } else {
        accessDenied();
    }
}

void accessGranted() {
    LCD_String("Access Granted");
    // Implement further actions for granted access
    _delay_ms(2000);
    LCD_Clear();
}

void accessDenied() {
    LCD_String("Access Denied");
    // Implement further actions for denied access
    _delay_ms(2000);
    LCD_Clear();
}
