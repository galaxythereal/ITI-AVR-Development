
GarageDoorOpener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000340c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000340c  000034a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080007a  0080007a  000034ba  2**0
                  ALLOC
  3 .stab         00002e50  00000000  00000000  000034bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001367  00000000  00000000  0000630c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007673  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000077d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007962  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000099a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ba2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bbac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000be6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c6fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 59 18 	call	0x30b2	; 0x30b2 <main>
      8a:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e7       	ldi	r22, 0x72	; 114
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 86 19 	jmp	0x330c	; 0x330c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MTimer_voidTimerInit>:
 * A_u8TimerMode-----> 0 ------> NormalMode
 * A_u8TimerMode-----> 1 ------> Compare
 * A_u8TimerMode-----> 2 ------> Fast PWM
 * */

void MTimer_voidTimerInit(u8 A_u8TimerMode){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	89 83       	std	Y+1, r24	; 0x01
	/*Choose Timer Mode*/
	if(A_u8TimerMode == 0){
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	88 23       	and	r24, r24
     cae:	91 f4       	brne	.+36     	; 0xcd4 <MTimer_voidTimerInit+0x36>
//		CLR_BIT(TCCR0,3);
//
//		/*Set Timer Interrupt Enalbe*/
//		SET_BIT(TIMSK, 0);
    	/* Disable Timer 0 */
    	TCCR0 = 0x00;
     cb0:	e3 e5       	ldi	r30, 0x53	; 83
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	10 82       	st	Z, r1
    	/* Setting pre scaler */
    	TCCR0 = 0x01;
     cb6:	e3 e5       	ldi	r30, 0x53	; 83
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	80 83       	st	Z, r24
    	/* Initializing the timer with zero */
    	TCNT0 = 0x00;
     cbe:	e2 e5       	ldi	r30, 0x52	; 82
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	10 82       	st	Z, r1
		/* Timer overflow interrupt enable*/
		TIMSK |=(1<<TOIE0);
     cc4:	a9 e5       	ldi	r26, 0x59	; 89
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e9 e5       	ldi	r30, 0x59	; 89
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	81 60       	ori	r24, 0x01	; 1
     cd0:	8c 93       	st	X, r24
     cd2:	38 c0       	rjmp	.+112    	; 0xd44 <MTimer_voidTimerInit+0xa6>

	}
	else if (A_u8TimerMode == 1){
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	b1 f4       	brne	.+44     	; 0xd06 <MTimer_voidTimerInit+0x68>

		CLR_BIT(TCCR0,6);
     cda:	a3 e5       	ldi	r26, 0x53	; 83
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e3 e5       	ldi	r30, 0x53	; 83
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	8f 7b       	andi	r24, 0xBF	; 191
     ce6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);
     ce8:	a3 e5       	ldi	r26, 0x53	; 83
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e3 e5       	ldi	r30, 0x53	; 83
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	88 60       	ori	r24, 0x08	; 8
     cf4:	8c 93       	st	X, r24

		/*Set Compare Interrupt Enalbe*/
		 SET_BIT(TIMSK, 1);
     cf6:	a9 e5       	ldi	r26, 0x59	; 89
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e9 e5       	ldi	r30, 0x59	; 89
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	82 60       	ori	r24, 0x02	; 2
     d02:	8c 93       	st	X, r24
     d04:	1f c0       	rjmp	.+62     	; 0xd44 <MTimer_voidTimerInit+0xa6>
	}
	else if(A_u8TimerMode == 2){
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	82 30       	cpi	r24, 0x02	; 2
     d0a:	e1 f4       	brne	.+56     	; 0xd44 <MTimer_voidTimerInit+0xa6>

		SET_BIT(TCCR0, 6);
     d0c:	a3 e5       	ldi	r26, 0x53	; 83
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e3 e5       	ldi	r30, 0x53	; 83
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	80 64       	ori	r24, 0x40	; 64
     d18:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 3);
     d1a:	a3 e5       	ldi	r26, 0x53	; 83
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e3 e5       	ldi	r30, 0x53	; 83
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	88 60       	ori	r24, 0x08	; 8
     d26:	8c 93       	st	X, r24

		/*Set On Top Clear On compare
		 * */
		SET_BIT(TCCR0,5);
     d28:	a3 e5       	ldi	r26, 0x53	; 83
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e3 e5       	ldi	r30, 0x53	; 83
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 62       	ori	r24, 0x20	; 32
     d34:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,4);
     d36:	a3 e5       	ldi	r26, 0x53	; 83
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e3 e5       	ldi	r30, 0x53	; 83
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8f 7e       	andi	r24, 0xEF	; 239
     d42:	8c 93       	st	X, r24
	}


}
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <MTimer_voidSetPreloadValue>:


void MTimer_voidSetPreloadValue(u8 A_u8Preload, u8 A_u8TimerMode){
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <MTimer_voidSetPreloadValue+0x6>
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8TimerMode == 0){
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	88 23       	and	r24, r24
     d5e:	29 f4       	brne	.+10     	; 0xd6a <MTimer_voidSetPreloadValue+0x1e>
		TCNT0 = A_u8Preload;
     d60:	e2 e5       	ldi	r30, 0x52	; 82
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	80 83       	st	Z, r24
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <MTimer_voidSetPreloadValue+0x26>
	}
	else{
		/*Set Compare Reg Value*/
		OCR0 = A_u8Preload;
     d6a:	ec e5       	ldi	r30, 0x5C	; 92
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	80 83       	st	Z, r24
	}
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <MTimer_voidStart>:



void MTimer_voidStart(){
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62

	/*Choose Prescaller 8*/
	CLR_BIT(TCCR0,0);
     d84:	a3 e5       	ldi	r26, 0x53	; 83
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e3 e5       	ldi	r30, 0x53	; 83
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	8e 7f       	andi	r24, 0xFE	; 254
     d90:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
     d92:	a3 e5       	ldi	r26, 0x53	; 83
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e3 e5       	ldi	r30, 0x53	; 83
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	82 60       	ori	r24, 0x02	; 2
     d9e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
     da0:	a3 e5       	ldi	r26, 0x53	; 83
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e3 e5       	ldi	r30, 0x53	; 83
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	8b 7f       	andi	r24, 0xFB	; 251
     dac:	8c 93       	st	X, r24

}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <MTimer_voidStop>:
void MTimer_voidStop(){
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,0);
     dbc:	a3 e5       	ldi	r26, 0x53	; 83
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e3 e5       	ldi	r30, 0x53	; 83
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8e 7f       	andi	r24, 0xFE	; 254
     dc8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
     dca:	a3 e5       	ldi	r26, 0x53	; 83
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e3 e5       	ldi	r30, 0x53	; 83
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	8d 7f       	andi	r24, 0xFD	; 253
     dd6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
     dd8:	a3 e5       	ldi	r26, 0x53	; 83
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e3 e5       	ldi	r30, 0x53	; 83
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	8b 7f       	andi	r24, 0xFB	; 251
     de4:	8c 93       	st	X, r24

}
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <MTimer1_voidInit>:




void MTimer1_voidInit(){
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
	/*Select Ps 8* */
	CLR_BIT(TCCR1B,0);
     df4:	ae e4       	ldi	r26, 0x4E	; 78
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	ee e4       	ldi	r30, 0x4E	; 78
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8e 7f       	andi	r24, 0xFE	; 254
     e00:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
     e02:	ae e4       	ldi	r26, 0x4E	; 78
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	ee e4       	ldi	r30, 0x4E	; 78
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	82 60       	ori	r24, 0x02	; 2
     e0e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
     e10:	ae e4       	ldi	r26, 0x4E	; 78
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ee e4       	ldi	r30, 0x4E	; 78
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	8b 7f       	andi	r24, 0xFB	; 251
     e1c:	8c 93       	st	X, r24
}
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <MTimer1_voidSetValue>:


void MTimer1_voidSetValue(u16 A_u16Value){
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	00 d0       	rcall	.+0      	; 0xe2a <MTimer1_voidSetValue+0x6>
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = A_u16Value;
     e32:	ec e4       	ldi	r30, 0x4C	; 76
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	80 83       	st	Z, r24
}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <MTimer1_u16ReadTimer1Value>:

u16 MTimer1_u16ReadTimer1Value(){
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
     e50:	ec e4       	ldi	r30, 0x4C	; 76
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <MGIE_voidEnable>:

#include "../DIO/DIO_Interface.h"
#include"GIE_Interface.h"

void MGIE_voidEnable()
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     e66:	af e5       	ldi	r26, 0x5F	; 95
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ef e5       	ldi	r30, 0x5F	; 95
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	80 68       	ori	r24, 0x80	; 128
     e72:	8c 93       	st	X, r24


}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <MGIE_voidDisable>:
void MGIE_voidDisable()
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG,7);
     e82:	af e5       	ldi	r26, 0x5F	; 95
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	ef e5       	ldi	r30, 0x5F	; 95
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 77       	andi	r24, 0x7F	; 127
     e8e:	8c 93       	st	X, r24

}
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <MEXTI_voidSenseControl>:
 * 2--------> Falling
 * 3--------> Rising
 */

// Function to configure the sense control of an external interrupt
void MEXTI_voidSenseControl(u8 A_u8ExtiNumber, u8 A_u8State) {
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	2a 97       	sbiw	r28, 0x0a	; 10
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8ExtiNumber) {
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3a 87       	std	Y+10, r19	; 0x0a
     eb6:	29 87       	std	Y+9, r18	; 0x09
     eb8:	89 85       	ldd	r24, Y+9	; 0x09
     eba:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <MEXTI_voidSenseControl+0x2e>
     ec2:	66 c0       	rjmp	.+204    	; 0xf90 <MEXTI_voidSenseControl+0xfa>
     ec4:	29 85       	ldd	r18, Y+9	; 0x09
     ec6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <MEXTI_voidSenseControl+0x3a>
     ece:	bb c0       	rjmp	.+374    	; 0x1046 <MEXTI_voidSenseControl+0x1b0>
     ed0:	89 85       	ldd	r24, Y+9	; 0x09
     ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	09 f0       	breq	.+2      	; 0xeda <MEXTI_voidSenseControl+0x44>
     ed8:	d5 c0       	rjmp	.+426    	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
        /*EXTI INT0*/
        case 0:
            switch (A_u8State) {
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	38 87       	std	Y+8, r19	; 0x08
     ee2:	2f 83       	std	Y+7, r18	; 0x07
     ee4:	8f 81       	ldd	r24, Y+7	; 0x07
     ee6:	98 85       	ldd	r25, Y+8	; 0x08
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	91 05       	cpc	r25, r1
     eec:	21 f1       	breq	.+72     	; 0xf36 <MEXTI_voidSenseControl+0xa0>
     eee:	2f 81       	ldd	r18, Y+7	; 0x07
     ef0:	38 85       	ldd	r19, Y+8	; 0x08
     ef2:	22 30       	cpi	r18, 0x02	; 2
     ef4:	31 05       	cpc	r19, r1
     ef6:	2c f4       	brge	.+10     	; 0xf02 <MEXTI_voidSenseControl+0x6c>
     ef8:	8f 81       	ldd	r24, Y+7	; 0x07
     efa:	98 85       	ldd	r25, Y+8	; 0x08
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	61 f0       	breq	.+24     	; 0xf18 <MEXTI_voidSenseControl+0x82>
     f00:	c1 c0       	rjmp	.+386    	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
     f02:	2f 81       	ldd	r18, Y+7	; 0x07
     f04:	38 85       	ldd	r19, Y+8	; 0x08
     f06:	22 30       	cpi	r18, 0x02	; 2
     f08:	31 05       	cpc	r19, r1
     f0a:	21 f1       	breq	.+72     	; 0xf54 <MEXTI_voidSenseControl+0xbe>
     f0c:	8f 81       	ldd	r24, Y+7	; 0x07
     f0e:	98 85       	ldd	r25, Y+8	; 0x08
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	91 05       	cpc	r25, r1
     f14:	71 f1       	breq	.+92     	; 0xf72 <MEXTI_voidSenseControl+0xdc>
     f16:	b6 c0       	rjmp	.+364    	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
                case 0:
                    CLR_BIT(MCUCR, 0); // Clear ISC00 for low-level trigger
     f18:	a5 e5       	ldi	r26, 0x55	; 85
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e5 e5       	ldi	r30, 0x55	; 85
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8e 7f       	andi	r24, 0xFE	; 254
     f24:	8c 93       	st	X, r24
                    CLR_BIT(MCUCR, 1); // Clear ISC01 for low-level trigger
     f26:	a5 e5       	ldi	r26, 0x55	; 85
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e5 e5       	ldi	r30, 0x55	; 85
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8d 7f       	andi	r24, 0xFD	; 253
     f32:	8c 93       	st	X, r24
     f34:	a7 c0       	rjmp	.+334    	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
                    break;

                case 1:
                    SET_BIT(MCUCR, 0); // Set ISC00 for any logical change trigger
     f36:	a5 e5       	ldi	r26, 0x55	; 85
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e5 e5       	ldi	r30, 0x55	; 85
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	81 60       	ori	r24, 0x01	; 1
     f42:	8c 93       	st	X, r24
                    CLR_BIT(MCUCR, 1); // Clear ISC01 for any logical change trigger
     f44:	a5 e5       	ldi	r26, 0x55	; 85
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e5 e5       	ldi	r30, 0x55	; 85
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8d 7f       	andi	r24, 0xFD	; 253
     f50:	8c 93       	st	X, r24
     f52:	98 c0       	rjmp	.+304    	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
                    break;

                case 2:
                    CLR_BIT(MCUCR, 0); // Clear ISC00 for falling edge trigger
     f54:	a5 e5       	ldi	r26, 0x55	; 85
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e5 e5       	ldi	r30, 0x55	; 85
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8e 7f       	andi	r24, 0xFE	; 254
     f60:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, 1); // Set ISC01 for falling edge trigger
     f62:	a5 e5       	ldi	r26, 0x55	; 85
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e5 e5       	ldi	r30, 0x55	; 85
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	8c 93       	st	X, r24
     f70:	89 c0       	rjmp	.+274    	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
                    break;

                case 3:
                    SET_BIT(MCUCR, 0); // Set ISC00 for rising edge trigger
     f72:	a5 e5       	ldi	r26, 0x55	; 85
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e5 e5       	ldi	r30, 0x55	; 85
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	81 60       	ori	r24, 0x01	; 1
     f7e:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, 1); // Set ISC01 for rising edge trigger
     f80:	a5 e5       	ldi	r26, 0x55	; 85
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e5 e5       	ldi	r30, 0x55	; 85
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	82 60       	ori	r24, 0x02	; 2
     f8c:	8c 93       	st	X, r24
     f8e:	7a c0       	rjmp	.+244    	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
                    break;
            }
            break;
        /*EXTI INT1*/
        case 1:
            switch (A_u8State) {
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	3e 83       	std	Y+6, r19	; 0x06
     f98:	2d 83       	std	Y+5, r18	; 0x05
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	91 05       	cpc	r25, r1
     fa2:	21 f1       	breq	.+72     	; 0xfec <MEXTI_voidSenseControl+0x156>
     fa4:	2d 81       	ldd	r18, Y+5	; 0x05
     fa6:	3e 81       	ldd	r19, Y+6	; 0x06
     fa8:	22 30       	cpi	r18, 0x02	; 2
     faa:	31 05       	cpc	r19, r1
     fac:	2c f4       	brge	.+10     	; 0xfb8 <MEXTI_voidSenseControl+0x122>
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	9e 81       	ldd	r25, Y+6	; 0x06
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	61 f0       	breq	.+24     	; 0xfce <MEXTI_voidSenseControl+0x138>
     fb6:	66 c0       	rjmp	.+204    	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
     fb8:	2d 81       	ldd	r18, Y+5	; 0x05
     fba:	3e 81       	ldd	r19, Y+6	; 0x06
     fbc:	22 30       	cpi	r18, 0x02	; 2
     fbe:	31 05       	cpc	r19, r1
     fc0:	21 f1       	breq	.+72     	; 0x100a <MEXTI_voidSenseControl+0x174>
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	9e 81       	ldd	r25, Y+6	; 0x06
     fc6:	83 30       	cpi	r24, 0x03	; 3
     fc8:	91 05       	cpc	r25, r1
     fca:	71 f1       	breq	.+92     	; 0x1028 <MEXTI_voidSenseControl+0x192>
     fcc:	5b c0       	rjmp	.+182    	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
                case 0:
                    CLR_BIT(MCUCR, 2); // Clear ISC10 for low-level trigger
     fce:	a5 e5       	ldi	r26, 0x55	; 85
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e5 e5       	ldi	r30, 0x55	; 85
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8b 7f       	andi	r24, 0xFB	; 251
     fda:	8c 93       	st	X, r24
                    CLR_BIT(MCUCR, 3); // Clear ISC11 for low-level trigger
     fdc:	a5 e5       	ldi	r26, 0x55	; 85
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e5 e5       	ldi	r30, 0x55	; 85
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	87 7f       	andi	r24, 0xF7	; 247
     fe8:	8c 93       	st	X, r24
     fea:	4c c0       	rjmp	.+152    	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
                    break;

                case 1:
                    SET_BIT(MCUCR, 2); // Set ISC10 for any logical change trigger
     fec:	a5 e5       	ldi	r26, 0x55	; 85
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e5       	ldi	r30, 0x55	; 85
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	84 60       	ori	r24, 0x04	; 4
     ff8:	8c 93       	st	X, r24
                    CLR_BIT(MCUCR, 3); // Clear ISC11 for any logical change trigger
     ffa:	a5 e5       	ldi	r26, 0x55	; 85
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e5       	ldi	r30, 0x55	; 85
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	87 7f       	andi	r24, 0xF7	; 247
    1006:	8c 93       	st	X, r24
    1008:	3d c0       	rjmp	.+122    	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
                    break;

                case 2:
                    CLR_BIT(MCUCR, 2); // Clear ISC10 for falling edge trigger
    100a:	a5 e5       	ldi	r26, 0x55	; 85
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e5 e5       	ldi	r30, 0x55	; 85
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8b 7f       	andi	r24, 0xFB	; 251
    1016:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, 3); // Set ISC11 for falling edge trigger
    1018:	a5 e5       	ldi	r26, 0x55	; 85
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e5 e5       	ldi	r30, 0x55	; 85
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	88 60       	ori	r24, 0x08	; 8
    1024:	8c 93       	st	X, r24
    1026:	2e c0       	rjmp	.+92     	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
                    break;

                case 3:
                    SET_BIT(MCUCR, 2); // Set ISC10 for rising edge trigger
    1028:	a5 e5       	ldi	r26, 0x55	; 85
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e5 e5       	ldi	r30, 0x55	; 85
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	84 60       	ori	r24, 0x04	; 4
    1034:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, 3); // Set ISC11 for rising edge trigger
    1036:	a5 e5       	ldi	r26, 0x55	; 85
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e5       	ldi	r30, 0x55	; 85
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	88 60       	ori	r24, 0x08	; 8
    1042:	8c 93       	st	X, r24
    1044:	1f c0       	rjmp	.+62     	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
                    break;
            }
            break;
        /*EXTI INT2*/
        case 2:
            switch (A_u8State) {
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3c 83       	std	Y+4, r19	; 0x04
    104e:	2b 83       	std	Y+3, r18	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	82 30       	cpi	r24, 0x02	; 2
    1056:	91 05       	cpc	r25, r1
    1058:	31 f0       	breq	.+12     	; 0x1066 <MEXTI_voidSenseControl+0x1d0>
    105a:	2b 81       	ldd	r18, Y+3	; 0x03
    105c:	3c 81       	ldd	r19, Y+4	; 0x04
    105e:	23 30       	cpi	r18, 0x03	; 3
    1060:	31 05       	cpc	r19, r1
    1062:	49 f0       	breq	.+18     	; 0x1076 <MEXTI_voidSenseControl+0x1e0>
    1064:	0f c0       	rjmp	.+30     	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
                case 2:
                    CLR_BIT(MCUCSR, 6); // Clear ISC2 for falling edge trigger
    1066:	a4 e5       	ldi	r26, 0x54	; 84
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e4 e5       	ldi	r30, 0x54	; 84
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 7b       	andi	r24, 0xBF	; 191
    1072:	8c 93       	st	X, r24
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <MEXTI_voidSenseControl+0x1ee>
                    break;
                case 3:
                    SET_BIT(MCUCSR, 6); // Set ISC2 for rising edge trigger
    1076:	a4 e5       	ldi	r26, 0x54	; 84
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e4 e5       	ldi	r30, 0x54	; 84
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	80 64       	ori	r24, 0x40	; 64
    1082:	8c 93       	st	X, r24
                    break;
            }
            break;
    }

}
    1084:	2a 96       	adiw	r28, 0x0a	; 10
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <MEXTI_voidEnable>:

// Function to enable the specified external interrupt
void MEXTI_voidEnable(u8 A_u8ExtiNumber) {
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	00 d0       	rcall	.+0      	; 0x109c <MEXTI_voidEnable+0x6>
    109c:	0f 92       	push	r0
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8ExtiNumber) {
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3b 83       	std	Y+3, r19	; 0x03
    10ac:	2a 83       	std	Y+2, r18	; 0x02
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	9b 81       	ldd	r25, Y+3	; 0x03
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	91 05       	cpc	r25, r1
    10b6:	89 f0       	breq	.+34     	; 0x10da <MEXTI_voidEnable+0x44>
    10b8:	2a 81       	ldd	r18, Y+2	; 0x02
    10ba:	3b 81       	ldd	r19, Y+3	; 0x03
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	a1 f0       	breq	.+40     	; 0x10ea <MEXTI_voidEnable+0x54>
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	b9 f4       	brne	.+46     	; 0x10f8 <MEXTI_voidEnable+0x62>
        case 0:
            SET_BIT(GICR, 6); // Enable INT0
    10ca:	ab e5       	ldi	r26, 0x5B	; 91
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	eb e5       	ldi	r30, 0x5B	; 91
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 64       	ori	r24, 0x40	; 64
    10d6:	8c 93       	st	X, r24
    10d8:	0f c0       	rjmp	.+30     	; 0x10f8 <MEXTI_voidEnable+0x62>
            break;
        case 1:
            SET_BIT(GICR, 7); // Enable INT1
    10da:	ab e5       	ldi	r26, 0x5B	; 91
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	eb e5       	ldi	r30, 0x5B	; 91
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 68       	ori	r24, 0x80	; 128
    10e6:	8c 93       	st	X, r24
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <MEXTI_voidEnable+0x62>
            break;
        case 2:
            SET_BIT(GICR, 5); // Enable INT2
    10ea:	ab e5       	ldi	r26, 0x5B	; 91
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	eb e5       	ldi	r30, 0x5B	; 91
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	80 62       	ori	r24, 0x20	; 32
    10f6:	8c 93       	st	X, r24
            break;
    }
}
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <MEXTI_voidDisable>:

// Function to disable the specified external interrupt
void MEXTI_voidDisable(u8 A_u8ExtiNumber) {
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <MEXTI_voidDisable+0x6>
    110a:	0f 92       	push	r0
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8ExtiNumber) {
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3b 83       	std	Y+3, r19	; 0x03
    111a:	2a 83       	std	Y+2, r18	; 0x02
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	91 05       	cpc	r25, r1
    1124:	89 f0       	breq	.+34     	; 0x1148 <MEXTI_voidDisable+0x44>
    1126:	2a 81       	ldd	r18, Y+2	; 0x02
    1128:	3b 81       	ldd	r19, Y+3	; 0x03
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	a1 f0       	breq	.+40     	; 0x1158 <MEXTI_voidDisable+0x54>
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	9b 81       	ldd	r25, Y+3	; 0x03
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	b9 f4       	brne	.+46     	; 0x1166 <MEXTI_voidDisable+0x62>
        case 0:
            CLR_BIT(GICR, 6); // Disable INT0
    1138:	ab e5       	ldi	r26, 0x5B	; 91
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	eb e5       	ldi	r30, 0x5B	; 91
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	8f 7b       	andi	r24, 0xBF	; 191
    1144:	8c 93       	st	X, r24
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <MEXTI_voidDisable+0x62>
            break;
        case 1:
            CLR_BIT(GICR, 7); // Disable INT1
    1148:	ab e5       	ldi	r26, 0x5B	; 91
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	eb e5       	ldi	r30, 0x5B	; 91
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8f 77       	andi	r24, 0x7F	; 127
    1154:	8c 93       	st	X, r24
    1156:	07 c0       	rjmp	.+14     	; 0x1166 <MEXTI_voidDisable+0x62>
            break;
        case 2:
            CLR_BIT(GICR, 5); // Disable INT2
    1158:	ab e5       	ldi	r26, 0x5B	; 91
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	eb e5       	ldi	r30, 0x5B	; 91
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	8f 7d       	andi	r24, 0xDF	; 223
    1164:	8c 93       	st	X, r24
            break;
    }
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <MDIO_voidSetPinDirection>:
#include<avr/io.h>
#include"DIO_Interface.h"



void  MDIO_voidSetPinDirection(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Dir){
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	2d 97       	sbiw	r28, 0x0d	; 13
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	6a 83       	std	Y+2, r22	; 0x02
    118a:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortNumber){
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3d 87       	std	Y+13, r19	; 0x0d
    1194:	2c 87       	std	Y+12, r18	; 0x0c
    1196:	8c 85       	ldd	r24, Y+12	; 0x0c
    1198:	9d 85       	ldd	r25, Y+13	; 0x0d
    119a:	82 34       	cpi	r24, 0x42	; 66
    119c:	91 05       	cpc	r25, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <MDIO_voidSetPinDirection+0x30>
    11a0:	50 c0       	rjmp	.+160    	; 0x1242 <MDIO_voidSetPinDirection+0xd0>
    11a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    11a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    11a6:	23 34       	cpi	r18, 0x43	; 67
    11a8:	31 05       	cpc	r19, r1
    11aa:	34 f4       	brge	.+12     	; 0x11b8 <MDIO_voidSetPinDirection+0x46>
    11ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    11b0:	81 34       	cpi	r24, 0x41	; 65
    11b2:	91 05       	cpc	r25, r1
    11b4:	71 f0       	breq	.+28     	; 0x11d2 <MDIO_voidSetPinDirection+0x60>
    11b6:	ec c0       	rjmp	.+472    	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
    11b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    11ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    11bc:	23 34       	cpi	r18, 0x43	; 67
    11be:	31 05       	cpc	r19, r1
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <MDIO_voidSetPinDirection+0x52>
    11c2:	77 c0       	rjmp	.+238    	; 0x12b2 <MDIO_voidSetPinDirection+0x140>
    11c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    11c8:	84 34       	cpi	r24, 0x44	; 68
    11ca:	91 05       	cpc	r25, r1
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <MDIO_voidSetPinDirection+0x5e>
    11ce:	a9 c0       	rjmp	.+338    	; 0x1322 <MDIO_voidSetPinDirection+0x1b0>
    11d0:	df c0       	rjmp	.+446    	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
		case 'A':
			switch(A_u8Dir){
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3b 87       	std	Y+11, r19	; 0x0b
    11da:	2a 87       	std	Y+10, r18	; 0x0a
    11dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    11de:	9b 85       	ldd	r25, Y+11	; 0x0b
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	31 f0       	breq	.+12     	; 0x11f0 <MDIO_voidSetPinDirection+0x7e>
    11e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    11e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    11e8:	21 30       	cpi	r18, 0x01	; 1
    11ea:	31 05       	cpc	r19, r1
    11ec:	b1 f0       	breq	.+44     	; 0x121a <MDIO_voidSetPinDirection+0xa8>
    11ee:	d0 c0       	rjmp	.+416    	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRA , A_u8PinNumber);break;
    11f0:	aa e3       	ldi	r26, 0x3A	; 58
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ea e3       	ldi	r30, 0x3A	; 58
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <MDIO_voidSetPinDirection+0x9c>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <MDIO_voidSetPinDirection+0x98>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	bb c0       	rjmp	.+374    	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRA, A_u8PinNumber); break;
    121a:	aa e3       	ldi	r26, 0x3A	; 58
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ea e3       	ldi	r30, 0x3A	; 58
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <MDIO_voidSetPinDirection+0xc6>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <MDIO_voidSetPinDirection+0xc2>
    123c:	84 2b       	or	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	a7 c0       	rjmp	.+334    	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'B':
			switch(A_u8Dir){
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	39 87       	std	Y+9, r19	; 0x09
    124a:	28 87       	std	Y+8, r18	; 0x08
    124c:	88 85       	ldd	r24, Y+8	; 0x08
    124e:	99 85       	ldd	r25, Y+9	; 0x09
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	31 f0       	breq	.+12     	; 0x1260 <MDIO_voidSetPinDirection+0xee>
    1254:	28 85       	ldd	r18, Y+8	; 0x08
    1256:	39 85       	ldd	r19, Y+9	; 0x09
    1258:	21 30       	cpi	r18, 0x01	; 1
    125a:	31 05       	cpc	r19, r1
    125c:	b1 f0       	breq	.+44     	; 0x128a <MDIO_voidSetPinDirection+0x118>
    125e:	98 c0       	rjmp	.+304    	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRB , A_u8PinNumber);break;
    1260:	a7 e3       	ldi	r26, 0x37	; 55
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e7 e3       	ldi	r30, 0x37	; 55
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <MDIO_voidSetPinDirection+0x10c>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <MDIO_voidSetPinDirection+0x108>
    1282:	80 95       	com	r24
    1284:	84 23       	and	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	83 c0       	rjmp	.+262    	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRB, A_u8PinNumber); break;
    128a:	a7 e3       	ldi	r26, 0x37	; 55
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e7 e3       	ldi	r30, 0x37	; 55
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <MDIO_voidSetPinDirection+0x136>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <MDIO_voidSetPinDirection+0x132>
    12ac:	84 2b       	or	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	6f c0       	rjmp	.+222    	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'C':
			switch(A_u8Dir){
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3f 83       	std	Y+7, r19	; 0x07
    12ba:	2e 83       	std	Y+6, r18	; 0x06
    12bc:	8e 81       	ldd	r24, Y+6	; 0x06
    12be:	9f 81       	ldd	r25, Y+7	; 0x07
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	31 f0       	breq	.+12     	; 0x12d0 <MDIO_voidSetPinDirection+0x15e>
    12c4:	2e 81       	ldd	r18, Y+6	; 0x06
    12c6:	3f 81       	ldd	r19, Y+7	; 0x07
    12c8:	21 30       	cpi	r18, 0x01	; 1
    12ca:	31 05       	cpc	r19, r1
    12cc:	b1 f0       	breq	.+44     	; 0x12fa <MDIO_voidSetPinDirection+0x188>
    12ce:	60 c0       	rjmp	.+192    	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRC , A_u8PinNumber);break;
    12d0:	a4 e3       	ldi	r26, 0x34	; 52
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <MDIO_voidSetPinDirection+0x17c>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <MDIO_voidSetPinDirection+0x178>
    12f2:	80 95       	com	r24
    12f4:	84 23       	and	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	4b c0       	rjmp	.+150    	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRC, A_u8PinNumber); break;
    12fa:	a4 e3       	ldi	r26, 0x34	; 52
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e4 e3       	ldi	r30, 0x34	; 52
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <MDIO_voidSetPinDirection+0x1a6>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <MDIO_voidSetPinDirection+0x1a2>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	37 c0       	rjmp	.+110    	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'D':
			switch(A_u8Dir){
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	3d 83       	std	Y+5, r19	; 0x05
    132a:	2c 83       	std	Y+4, r18	; 0x04
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	9d 81       	ldd	r25, Y+5	; 0x05
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	31 f0       	breq	.+12     	; 0x1340 <MDIO_voidSetPinDirection+0x1ce>
    1334:	2c 81       	ldd	r18, Y+4	; 0x04
    1336:	3d 81       	ldd	r19, Y+5	; 0x05
    1338:	21 30       	cpi	r18, 0x01	; 1
    133a:	31 05       	cpc	r19, r1
    133c:	b1 f0       	breq	.+44     	; 0x136a <MDIO_voidSetPinDirection+0x1f8>
    133e:	28 c0       	rjmp	.+80     	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRD , A_u8PinNumber);break;
    1340:	a1 e3       	ldi	r26, 0x31	; 49
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e1 e3       	ldi	r30, 0x31	; 49
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <MDIO_voidSetPinDirection+0x1ec>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <MDIO_voidSetPinDirection+0x1e8>
    1362:	80 95       	com	r24
    1364:	84 23       	and	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	13 c0       	rjmp	.+38     	; 0x1390 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRD, A_u8PinNumber); break;
    136a:	a1 e3       	ldi	r26, 0x31	; 49
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e1 e3       	ldi	r30, 0x31	; 49
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <MDIO_voidSetPinDirection+0x216>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <MDIO_voidSetPinDirection+0x212>
    138c:	84 2b       	or	r24, r20
    138e:	8c 93       	st	X, r24
			}
		break;
	}

}
    1390:	2d 96       	adiw	r28, 0x0d	; 13
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8PinValue){
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	2d 97       	sbiw	r28, 0x0d	; 13
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	6a 83       	std	Y+2, r22	; 0x02
    13ba:	4b 83       	std	Y+3, r20	; 0x03

	switch(A_u8PortNumber){
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	3d 87       	std	Y+13, r19	; 0x0d
    13c4:	2c 87       	std	Y+12, r18	; 0x0c
    13c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    13c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    13ca:	82 34       	cpi	r24, 0x42	; 66
    13cc:	91 05       	cpc	r25, r1
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <MDIO_voidSetPinValue+0x30>
    13d0:	50 c0       	rjmp	.+160    	; 0x1472 <MDIO_voidSetPinValue+0xd0>
    13d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    13d4:	3d 85       	ldd	r19, Y+13	; 0x0d
    13d6:	23 34       	cpi	r18, 0x43	; 67
    13d8:	31 05       	cpc	r19, r1
    13da:	34 f4       	brge	.+12     	; 0x13e8 <MDIO_voidSetPinValue+0x46>
    13dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    13de:	9d 85       	ldd	r25, Y+13	; 0x0d
    13e0:	81 34       	cpi	r24, 0x41	; 65
    13e2:	91 05       	cpc	r25, r1
    13e4:	71 f0       	breq	.+28     	; 0x1402 <MDIO_voidSetPinValue+0x60>
    13e6:	ec c0       	rjmp	.+472    	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
    13e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ea:	3d 85       	ldd	r19, Y+13	; 0x0d
    13ec:	23 34       	cpi	r18, 0x43	; 67
    13ee:	31 05       	cpc	r19, r1
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <MDIO_voidSetPinValue+0x52>
    13f2:	77 c0       	rjmp	.+238    	; 0x14e2 <MDIO_voidSetPinValue+0x140>
    13f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    13f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    13f8:	84 34       	cpi	r24, 0x44	; 68
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <MDIO_voidSetPinValue+0x5e>
    13fe:	a9 c0       	rjmp	.+338    	; 0x1552 <MDIO_voidSetPinValue+0x1b0>
    1400:	df c0       	rjmp	.+446    	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
		case 'A':
			switch(A_u8PinValue){
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	3b 87       	std	Y+11, r19	; 0x0b
    140a:	2a 87       	std	Y+10, r18	; 0x0a
    140c:	8a 85       	ldd	r24, Y+10	; 0x0a
    140e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	31 f0       	breq	.+12     	; 0x1420 <MDIO_voidSetPinValue+0x7e>
    1414:	2a 85       	ldd	r18, Y+10	; 0x0a
    1416:	3b 85       	ldd	r19, Y+11	; 0x0b
    1418:	21 30       	cpi	r18, 0x01	; 1
    141a:	31 05       	cpc	r19, r1
    141c:	b1 f0       	breq	.+44     	; 0x144a <MDIO_voidSetPinValue+0xa8>
    141e:	d0 c0       	rjmp	.+416    	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTA , A_u8PinNumber); break;
    1420:	ab e3       	ldi	r26, 0x3B	; 59
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	eb e3       	ldi	r30, 0x3B	; 59
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <MDIO_voidSetPinValue+0x9c>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <MDIO_voidSetPinValue+0x98>
    1442:	80 95       	com	r24
    1444:	84 23       	and	r24, r20
    1446:	8c 93       	st	X, r24
    1448:	bb c0       	rjmp	.+374    	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTA, A_u8PinNumber); break;
    144a:	ab e3       	ldi	r26, 0x3B	; 59
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	eb e3       	ldi	r30, 0x3B	; 59
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <MDIO_voidSetPinValue+0xc6>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <MDIO_voidSetPinValue+0xc2>
    146c:	84 2b       	or	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	a7 c0       	rjmp	.+334    	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'B':
			switch(A_u8PinValue){
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	39 87       	std	Y+9, r19	; 0x09
    147a:	28 87       	std	Y+8, r18	; 0x08
    147c:	88 85       	ldd	r24, Y+8	; 0x08
    147e:	99 85       	ldd	r25, Y+9	; 0x09
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	31 f0       	breq	.+12     	; 0x1490 <MDIO_voidSetPinValue+0xee>
    1484:	28 85       	ldd	r18, Y+8	; 0x08
    1486:	39 85       	ldd	r19, Y+9	; 0x09
    1488:	21 30       	cpi	r18, 0x01	; 1
    148a:	31 05       	cpc	r19, r1
    148c:	b1 f0       	breq	.+44     	; 0x14ba <MDIO_voidSetPinValue+0x118>
    148e:	98 c0       	rjmp	.+304    	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTB , A_u8PinNumber); break;
    1490:	a8 e3       	ldi	r26, 0x38	; 56
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e8 e3       	ldi	r30, 0x38	; 56
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <MDIO_voidSetPinValue+0x10c>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <MDIO_voidSetPinValue+0x108>
    14b2:	80 95       	com	r24
    14b4:	84 23       	and	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	83 c0       	rjmp	.+262    	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTB, A_u8PinNumber); break;
    14ba:	a8 e3       	ldi	r26, 0x38	; 56
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e8 e3       	ldi	r30, 0x38	; 56
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <MDIO_voidSetPinValue+0x136>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <MDIO_voidSetPinValue+0x132>
    14dc:	84 2b       	or	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	6f c0       	rjmp	.+222    	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
			}

		break;

		case 'C':
			switch(A_u8PinValue){
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	3f 83       	std	Y+7, r19	; 0x07
    14ea:	2e 83       	std	Y+6, r18	; 0x06
    14ec:	8e 81       	ldd	r24, Y+6	; 0x06
    14ee:	9f 81       	ldd	r25, Y+7	; 0x07
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	31 f0       	breq	.+12     	; 0x1500 <MDIO_voidSetPinValue+0x15e>
    14f4:	2e 81       	ldd	r18, Y+6	; 0x06
    14f6:	3f 81       	ldd	r19, Y+7	; 0x07
    14f8:	21 30       	cpi	r18, 0x01	; 1
    14fa:	31 05       	cpc	r19, r1
    14fc:	b1 f0       	breq	.+44     	; 0x152a <MDIO_voidSetPinValue+0x188>
    14fe:	60 c0       	rjmp	.+192    	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTC , A_u8PinNumber); break;
    1500:	a5 e3       	ldi	r26, 0x35	; 53
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e5 e3       	ldi	r30, 0x35	; 53
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 2e       	mov	r0, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <MDIO_voidSetPinValue+0x17c>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	0a 94       	dec	r0
    1520:	e2 f7       	brpl	.-8      	; 0x151a <MDIO_voidSetPinValue+0x178>
    1522:	80 95       	com	r24
    1524:	84 23       	and	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	4b c0       	rjmp	.+150    	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTC, A_u8PinNumber); break;
    152a:	a5 e3       	ldi	r26, 0x35	; 53
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e5 e3       	ldi	r30, 0x35	; 53
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <MDIO_voidSetPinValue+0x1a6>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <MDIO_voidSetPinValue+0x1a2>
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	37 c0       	rjmp	.+110    	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'D':
			switch(A_u8PinValue){
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	3d 83       	std	Y+5, r19	; 0x05
    155a:	2c 83       	std	Y+4, r18	; 0x04
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	9d 81       	ldd	r25, Y+5	; 0x05
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	31 f0       	breq	.+12     	; 0x1570 <MDIO_voidSetPinValue+0x1ce>
    1564:	2c 81       	ldd	r18, Y+4	; 0x04
    1566:	3d 81       	ldd	r19, Y+5	; 0x05
    1568:	21 30       	cpi	r18, 0x01	; 1
    156a:	31 05       	cpc	r19, r1
    156c:	b1 f0       	breq	.+44     	; 0x159a <MDIO_voidSetPinValue+0x1f8>
    156e:	28 c0       	rjmp	.+80     	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTD , A_u8PinNumber); break;
    1570:	a2 e3       	ldi	r26, 0x32	; 50
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e2 e3       	ldi	r30, 0x32	; 50
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <MDIO_voidSetPinValue+0x1ec>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <MDIO_voidSetPinValue+0x1e8>
    1592:	80 95       	com	r24
    1594:	84 23       	and	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	13 c0       	rjmp	.+38     	; 0x15c0 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTD, A_u8PinNumber); break;
    159a:	a2 e3       	ldi	r26, 0x32	; 50
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e2 e3       	ldi	r30, 0x32	; 50
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <MDIO_voidSetPinValue+0x216>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <MDIO_voidSetPinValue+0x212>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
			}
		break;
	}
}
    15c0:	2d 96       	adiw	r28, 0x0d	; 13
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <MDIO_voidSetPortDirection>:



void MDIO_voidSetPortDirection(u8 A_u8PortNumber, u8 A_u8PortDir){
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <MDIO_voidSetPortDirection+0x6>
    15d8:	00 d0       	rcall	.+0      	; 0x15da <MDIO_voidSetPortDirection+0x8>
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	3c 83       	std	Y+4, r19	; 0x04
    15ea:	2b 83       	std	Y+3, r18	; 0x03
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	82 34       	cpi	r24, 0x42	; 66
    15f2:	91 05       	cpc	r25, r1
    15f4:	d9 f0       	breq	.+54     	; 0x162c <MDIO_voidSetPortDirection+0x5a>
    15f6:	2b 81       	ldd	r18, Y+3	; 0x03
    15f8:	3c 81       	ldd	r19, Y+4	; 0x04
    15fa:	23 34       	cpi	r18, 0x43	; 67
    15fc:	31 05       	cpc	r19, r1
    15fe:	34 f4       	brge	.+12     	; 0x160c <MDIO_voidSetPortDirection+0x3a>
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	81 34       	cpi	r24, 0x41	; 65
    1606:	91 05       	cpc	r25, r1
    1608:	61 f0       	breq	.+24     	; 0x1622 <MDIO_voidSetPortDirection+0x50>
    160a:	1e c0       	rjmp	.+60     	; 0x1648 <MDIO_voidSetPortDirection+0x76>
    160c:	2b 81       	ldd	r18, Y+3	; 0x03
    160e:	3c 81       	ldd	r19, Y+4	; 0x04
    1610:	23 34       	cpi	r18, 0x43	; 67
    1612:	31 05       	cpc	r19, r1
    1614:	81 f0       	breq	.+32     	; 0x1636 <MDIO_voidSetPortDirection+0x64>
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	84 34       	cpi	r24, 0x44	; 68
    161c:	91 05       	cpc	r25, r1
    161e:	81 f0       	breq	.+32     	; 0x1640 <MDIO_voidSetPortDirection+0x6e>
    1620:	13 c0       	rjmp	.+38     	; 0x1648 <MDIO_voidSetPortDirection+0x76>
		case 'A': DDRA = A_u8PortDir; break;
    1622:	ea e3       	ldi	r30, 0x3A	; 58
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	80 83       	st	Z, r24
    162a:	0e c0       	rjmp	.+28     	; 0x1648 <MDIO_voidSetPortDirection+0x76>
		case 'B': DDRB = A_u8PortDir; break;
    162c:	e7 e3       	ldi	r30, 0x37	; 55
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	80 83       	st	Z, r24
    1634:	09 c0       	rjmp	.+18     	; 0x1648 <MDIO_voidSetPortDirection+0x76>
		case 'C': DDRC = A_u8PortDir; break;
    1636:	e4 e3       	ldi	r30, 0x34	; 52
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	80 83       	st	Z, r24
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <MDIO_voidSetPortDirection+0x76>
		case 'D': DDRD = A_u8PortDir; break;
    1640:	e1 e3       	ldi	r30, 0x31	; 49
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	80 83       	st	Z, r24
	}
}
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortNumber, u8 A_u8PortValue){
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <MDIO_voidSetPortValue+0x6>
    165c:	00 d0       	rcall	.+0      	; 0x165e <MDIO_voidSetPortValue+0x8>
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3c 83       	std	Y+4, r19	; 0x04
    166e:	2b 83       	std	Y+3, r18	; 0x03
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	82 34       	cpi	r24, 0x42	; 66
    1676:	91 05       	cpc	r25, r1
    1678:	d9 f0       	breq	.+54     	; 0x16b0 <MDIO_voidSetPortValue+0x5a>
    167a:	2b 81       	ldd	r18, Y+3	; 0x03
    167c:	3c 81       	ldd	r19, Y+4	; 0x04
    167e:	23 34       	cpi	r18, 0x43	; 67
    1680:	31 05       	cpc	r19, r1
    1682:	34 f4       	brge	.+12     	; 0x1690 <MDIO_voidSetPortValue+0x3a>
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	81 34       	cpi	r24, 0x41	; 65
    168a:	91 05       	cpc	r25, r1
    168c:	61 f0       	breq	.+24     	; 0x16a6 <MDIO_voidSetPortValue+0x50>
    168e:	1e c0       	rjmp	.+60     	; 0x16cc <MDIO_voidSetPortValue+0x76>
    1690:	2b 81       	ldd	r18, Y+3	; 0x03
    1692:	3c 81       	ldd	r19, Y+4	; 0x04
    1694:	23 34       	cpi	r18, 0x43	; 67
    1696:	31 05       	cpc	r19, r1
    1698:	81 f0       	breq	.+32     	; 0x16ba <MDIO_voidSetPortValue+0x64>
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	84 34       	cpi	r24, 0x44	; 68
    16a0:	91 05       	cpc	r25, r1
    16a2:	81 f0       	breq	.+32     	; 0x16c4 <MDIO_voidSetPortValue+0x6e>
    16a4:	13 c0       	rjmp	.+38     	; 0x16cc <MDIO_voidSetPortValue+0x76>
		case 'A':PORTA = A_u8PortValue; break;
    16a6:	eb e3       	ldi	r30, 0x3B	; 59
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	80 83       	st	Z, r24
    16ae:	0e c0       	rjmp	.+28     	; 0x16cc <MDIO_voidSetPortValue+0x76>
		case 'B':PORTB = A_u8PortValue; break;
    16b0:	e8 e3       	ldi	r30, 0x38	; 56
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	80 83       	st	Z, r24
    16b8:	09 c0       	rjmp	.+18     	; 0x16cc <MDIO_voidSetPortValue+0x76>
		case 'C':PORTC = A_u8PortValue; break;
    16ba:	e5 e3       	ldi	r30, 0x35	; 53
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	80 83       	st	Z, r24
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <MDIO_voidSetPortValue+0x76>
		case 'D':PORTD = A_u8PortValue; break;
    16c4:	e2 e3       	ldi	r30, 0x32	; 50
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	80 83       	st	Z, r24
	}
}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <MDIO_u8GetPinValue>:





u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber){
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <MDIO_u8GetPinValue+0x6>
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <MDIO_u8GetPinValue+0x8>
    16e2:	0f 92       	push	r0
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	8a 83       	std	Y+2, r24	; 0x02
    16ea:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Result;

	if(A_u8PinNumber < 8){
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	88 30       	cpi	r24, 0x08	; 8
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <MDIO_u8GetPinValue+0x1a>
    16f2:	68 c0       	rjmp	.+208    	; 0x17c4 <MDIO_u8GetPinValue+0xea>
		switch(A_u8PortNumber){
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	3d 83       	std	Y+5, r19	; 0x05
    16fc:	2c 83       	std	Y+4, r18	; 0x04
    16fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1700:	5d 81       	ldd	r21, Y+5	; 0x05
    1702:	42 34       	cpi	r20, 0x42	; 66
    1704:	51 05       	cpc	r21, r1
    1706:	41 f1       	breq	.+80     	; 0x1758 <MDIO_u8GetPinValue+0x7e>
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	9d 81       	ldd	r25, Y+5	; 0x05
    170c:	83 34       	cpi	r24, 0x43	; 67
    170e:	91 05       	cpc	r25, r1
    1710:	34 f4       	brge	.+12     	; 0x171e <MDIO_u8GetPinValue+0x44>
    1712:	2c 81       	ldd	r18, Y+4	; 0x04
    1714:	3d 81       	ldd	r19, Y+5	; 0x05
    1716:	21 34       	cpi	r18, 0x41	; 65
    1718:	31 05       	cpc	r19, r1
    171a:	61 f0       	breq	.+24     	; 0x1734 <MDIO_u8GetPinValue+0x5a>
    171c:	55 c0       	rjmp	.+170    	; 0x17c8 <MDIO_u8GetPinValue+0xee>
    171e:	4c 81       	ldd	r20, Y+4	; 0x04
    1720:	5d 81       	ldd	r21, Y+5	; 0x05
    1722:	43 34       	cpi	r20, 0x43	; 67
    1724:	51 05       	cpc	r21, r1
    1726:	51 f1       	breq	.+84     	; 0x177c <MDIO_u8GetPinValue+0xa2>
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	84 34       	cpi	r24, 0x44	; 68
    172e:	91 05       	cpc	r25, r1
    1730:	b9 f1       	breq	.+110    	; 0x17a0 <MDIO_u8GetPinValue+0xc6>
    1732:	4a c0       	rjmp	.+148    	; 0x17c8 <MDIO_u8GetPinValue+0xee>
			case 'A':Local_u8Result =  GET_BIT(PINA, A_u8PinNumber);break;
    1734:	e9 e3       	ldi	r30, 0x39	; 57
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a9 01       	movw	r20, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <MDIO_u8GetPinValue+0x72>
    1748:	55 95       	asr	r21
    174a:	47 95       	ror	r20
    174c:	8a 95       	dec	r24
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <MDIO_u8GetPinValue+0x6e>
    1750:	ca 01       	movw	r24, r20
    1752:	81 70       	andi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	38 c0       	rjmp	.+112    	; 0x17c8 <MDIO_u8GetPinValue+0xee>
			case 'B':Local_u8Result =  GET_BIT(PINB, A_u8PinNumber); break;
    1758:	e6 e3       	ldi	r30, 0x36	; 54
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a9 01       	movw	r20, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <MDIO_u8GetPinValue+0x96>
    176c:	55 95       	asr	r21
    176e:	47 95       	ror	r20
    1770:	8a 95       	dec	r24
    1772:	e2 f7       	brpl	.-8      	; 0x176c <MDIO_u8GetPinValue+0x92>
    1774:	ca 01       	movw	r24, r20
    1776:	81 70       	andi	r24, 0x01	; 1
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	26 c0       	rjmp	.+76     	; 0x17c8 <MDIO_u8GetPinValue+0xee>
			case 'C':Local_u8Result =  GET_BIT(PINC, A_u8PinNumber); break;
    177c:	e3 e3       	ldi	r30, 0x33	; 51
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	88 2f       	mov	r24, r24
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a9 01       	movw	r20, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <MDIO_u8GetPinValue+0xba>
    1790:	55 95       	asr	r21
    1792:	47 95       	ror	r20
    1794:	8a 95       	dec	r24
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <MDIO_u8GetPinValue+0xb6>
    1798:	ca 01       	movw	r24, r20
    179a:	81 70       	andi	r24, 0x01	; 1
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	14 c0       	rjmp	.+40     	; 0x17c8 <MDIO_u8GetPinValue+0xee>
			case 'D':Local_u8Result =  GET_BIT(PIND, A_u8PinNumber); break;
    17a0:	e0 e3       	ldi	r30, 0x30	; 48
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a9 01       	movw	r20, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <MDIO_u8GetPinValue+0xde>
    17b4:	55 95       	asr	r21
    17b6:	47 95       	ror	r20
    17b8:	8a 95       	dec	r24
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <MDIO_u8GetPinValue+0xda>
    17bc:	ca 01       	movw	r24, r20
    17be:	81 70       	andi	r24, 0x01	; 1
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <MDIO_u8GetPinValue+0xee>
		}
	}
	else {
		Local_u8Result = 255;
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <HSNC_voidInit>:
u32 timer_counter = 0;
u32 distance;
u8 distance_str[10];

// Function to initialize the ultrasonic sensor and related components
void HSNC_voidInit(void){
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62

  // Configure the TRIGGER pin as an output
  TRIGGER_DDR |= (1 << TRIGGER);
    17e2:	a1 e3       	ldi	r26, 0x31	; 49
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e1 e3       	ldi	r30, 0x31	; 49
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	81 60       	ori	r24, 0x01	; 1
    17ee:	8c 93       	st	X, r24

  // Configure the ECHO pin as an input with a pull-up resistor
  ECHO_DDR &= ~(1 << ECHO);
    17f0:	a1 e3       	ldi	r26, 0x31	; 49
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e1 e3       	ldi	r30, 0x31	; 49
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	87 7f       	andi	r24, 0xF7	; 247
    17fc:	8c 93       	st	X, r24
  ECHO_PULLUP |= (1 << ECHO);
    17fe:	a2 e3       	ldi	r26, 0x32	; 50
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e2 e3       	ldi	r30, 0x32	; 50
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	88 60       	ori	r24, 0x08	; 8
    180a:	8c 93       	st	X, r24

  // Configure external interrupt (INT1) to trigger on rising edge
  MEXTI_voidSenseControl(1,1);
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	0e 94 4b 07 	call	0xe96	; 0xe96 <MEXTI_voidSenseControl>

  // Enable external interrupt (INT1)
  MEXTI_voidEnable(1);
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	0e 94 4b 08 	call	0x1096	; 0x1096 <MEXTI_voidEnable>

  // Initialize Timer 0 for time measurement (assuming Timer 0 is used)
  MTimer_voidTimerInit(0);
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MTimer_voidTimerInit>

  return;
}
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <HSNC_voidTrigger>:

// Function to trigger the ultrasonic sensor for distance measurement
void HSNC_voidTrigger(void){
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	68 97       	sbiw	r28, 0x18	; 24
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
  if (!sensor_working){
    183a:	80 91 7a 00 	lds	r24, 0x007A
    183e:	88 23       	and	r24, r24
    1840:	09 f0       	breq	.+2      	; 0x1844 <HSNC_voidTrigger+0x1e>
    1842:	cf c0       	rjmp	.+414    	; 0x19e2 <HSNC_voidTrigger+0x1bc>
    // Set the TRIGGER pin high for 15 microseconds
    TRIGGER_PORT |= (1 << TRIGGER);
    1844:	a2 e3       	ldi	r26, 0x32	; 50
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e2 e3       	ldi	r30, 0x32	; 50
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	81 60       	ori	r24, 0x01	; 1
    1850:	8c 93       	st	X, r24
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a0 e7       	ldi	r26, 0x70	; 112
    1858:	b1 e4       	ldi	r27, 0x41	; 65
    185a:	8d 8b       	std	Y+21, r24	; 0x15
    185c:	9e 8b       	std	Y+22, r25	; 0x16
    185e:	af 8b       	std	Y+23, r26	; 0x17
    1860:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1862:	6d 89       	ldd	r22, Y+21	; 0x15
    1864:	7e 89       	ldd	r23, Y+22	; 0x16
    1866:	8f 89       	ldd	r24, Y+23	; 0x17
    1868:	98 8d       	ldd	r25, Y+24	; 0x18
    186a:	2b ea       	ldi	r18, 0xAB	; 171
    186c:	3a ea       	ldi	r19, 0xAA	; 170
    186e:	4a e2       	ldi	r20, 0x2A	; 42
    1870:	50 e4       	ldi	r21, 0x40	; 64
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	89 8b       	std	Y+17, r24	; 0x11
    187c:	9a 8b       	std	Y+18, r25	; 0x12
    187e:	ab 8b       	std	Y+19, r26	; 0x13
    1880:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1882:	69 89       	ldd	r22, Y+17	; 0x11
    1884:	7a 89       	ldd	r23, Y+18	; 0x12
    1886:	8b 89       	ldd	r24, Y+19	; 0x13
    1888:	9c 89       	ldd	r25, Y+20	; 0x14
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	5f e3       	ldi	r21, 0x3F	; 63
    1892:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1896:	88 23       	and	r24, r24
    1898:	1c f4       	brge	.+6      	; 0x18a0 <HSNC_voidTrigger+0x7a>
		__ticks = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	88 8b       	std	Y+16, r24	; 0x10
    189e:	91 c0       	rjmp	.+290    	; 0x19c2 <HSNC_voidTrigger+0x19c>
	else if (__tmp > 255)
    18a0:	69 89       	ldd	r22, Y+17	; 0x11
    18a2:	7a 89       	ldd	r23, Y+18	; 0x12
    18a4:	8b 89       	ldd	r24, Y+19	; 0x13
    18a6:	9c 89       	ldd	r25, Y+20	; 0x14
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	4f e7       	ldi	r20, 0x7F	; 127
    18ae:	53 e4       	ldi	r21, 0x43	; 67
    18b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18b4:	18 16       	cp	r1, r24
    18b6:	0c f0       	brlt	.+2      	; 0x18ba <HSNC_voidTrigger+0x94>
    18b8:	7b c0       	rjmp	.+246    	; 0x19b0 <HSNC_voidTrigger+0x18a>
	{
		_delay_ms(__us / 1000.0);
    18ba:	6d 89       	ldd	r22, Y+21	; 0x15
    18bc:	7e 89       	ldd	r23, Y+22	; 0x16
    18be:	8f 89       	ldd	r24, Y+23	; 0x17
    18c0:	98 8d       	ldd	r25, Y+24	; 0x18
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	4a e7       	ldi	r20, 0x7A	; 122
    18c8:	54 e4       	ldi	r21, 0x44	; 68
    18ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	8c 87       	std	Y+12, r24	; 0x0c
    18d4:	9d 87       	std	Y+13, r25	; 0x0d
    18d6:	ae 87       	std	Y+14, r26	; 0x0e
    18d8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18da:	6c 85       	ldd	r22, Y+12	; 0x0c
    18dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    18de:	8e 85       	ldd	r24, Y+14	; 0x0e
    18e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a ef       	ldi	r20, 0xFA	; 250
    18e8:	54 e4       	ldi	r21, 0x44	; 68
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	88 87       	std	Y+8, r24	; 0x08
    18f4:	99 87       	std	Y+9, r25	; 0x09
    18f6:	aa 87       	std	Y+10, r26	; 0x0a
    18f8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    18fa:	68 85       	ldd	r22, Y+8	; 0x08
    18fc:	79 85       	ldd	r23, Y+9	; 0x09
    18fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1900:	9b 85       	ldd	r25, Y+11	; 0x0b
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	5f e3       	ldi	r21, 0x3F	; 63
    190a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    190e:	88 23       	and	r24, r24
    1910:	2c f4       	brge	.+10     	; 0x191c <HSNC_voidTrigger+0xf6>
		__ticks = 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9f 83       	std	Y+7, r25	; 0x07
    1918:	8e 83       	std	Y+6, r24	; 0x06
    191a:	3f c0       	rjmp	.+126    	; 0x199a <HSNC_voidTrigger+0x174>
	else if (__tmp > 65535)
    191c:	68 85       	ldd	r22, Y+8	; 0x08
    191e:	79 85       	ldd	r23, Y+9	; 0x09
    1920:	8a 85       	ldd	r24, Y+10	; 0x0a
    1922:	9b 85       	ldd	r25, Y+11	; 0x0b
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	4f e7       	ldi	r20, 0x7F	; 127
    192a:	57 e4       	ldi	r21, 0x47	; 71
    192c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1930:	18 16       	cp	r1, r24
    1932:	4c f5       	brge	.+82     	; 0x1986 <HSNC_voidTrigger+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1934:	6c 85       	ldd	r22, Y+12	; 0x0c
    1936:	7d 85       	ldd	r23, Y+13	; 0x0d
    1938:	8e 85       	ldd	r24, Y+14	; 0x0e
    193a:	9f 85       	ldd	r25, Y+15	; 0x0f
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e2       	ldi	r20, 0x20	; 32
    1942:	51 e4       	ldi	r21, 0x41	; 65
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9f 83       	std	Y+7, r25	; 0x07
    195a:	8e 83       	std	Y+6, r24	; 0x06
    195c:	0f c0       	rjmp	.+30     	; 0x197c <HSNC_voidTrigger+0x156>
    195e:	88 ec       	ldi	r24, 0xC8	; 200
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9d 83       	std	Y+5, r25	; 0x05
    1964:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <HSNC_voidTrigger+0x144>
    196e:	9d 83       	std	Y+5, r25	; 0x05
    1970:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1972:	8e 81       	ldd	r24, Y+6	; 0x06
    1974:	9f 81       	ldd	r25, Y+7	; 0x07
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	9f 83       	std	Y+7, r25	; 0x07
    197a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197c:	8e 81       	ldd	r24, Y+6	; 0x06
    197e:	9f 81       	ldd	r25, Y+7	; 0x07
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	69 f7       	brne	.-38     	; 0x195e <HSNC_voidTrigger+0x138>
    1984:	24 c0       	rjmp	.+72     	; 0x19ce <HSNC_voidTrigger+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1986:	68 85       	ldd	r22, Y+8	; 0x08
    1988:	79 85       	ldd	r23, Y+9	; 0x09
    198a:	8a 85       	ldd	r24, Y+10	; 0x0a
    198c:	9b 85       	ldd	r25, Y+11	; 0x0b
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9f 83       	std	Y+7, r25	; 0x07
    1998:	8e 83       	std	Y+6, r24	; 0x06
    199a:	8e 81       	ldd	r24, Y+6	; 0x06
    199c:	9f 81       	ldd	r25, Y+7	; 0x07
    199e:	9b 83       	std	Y+3, r25	; 0x03
    19a0:	8a 83       	std	Y+2, r24	; 0x02
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <HSNC_voidTrigger+0x180>
    19aa:	9b 83       	std	Y+3, r25	; 0x03
    19ac:	8a 83       	std	Y+2, r24	; 0x02
    19ae:	0f c0       	rjmp	.+30     	; 0x19ce <HSNC_voidTrigger+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19b0:	69 89       	ldd	r22, Y+17	; 0x11
    19b2:	7a 89       	ldd	r23, Y+18	; 0x12
    19b4:	8b 89       	ldd	r24, Y+19	; 0x13
    19b6:	9c 89       	ldd	r25, Y+20	; 0x14
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	88 8b       	std	Y+16, r24	; 0x10
    19c2:	88 89       	ldd	r24, Y+16	; 0x10
    19c4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	8a 95       	dec	r24
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <HSNC_voidTrigger+0x1a2>
    19cc:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);
    // Set the TRIGGER pin low again
    TRIGGER_PORT &= ~(1 << TRIGGER);
    19ce:	a2 e3       	ldi	r26, 0x32	; 50
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e2 e3       	ldi	r30, 0x32	; 50
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8e 7f       	andi	r24, 0xFE	; 254
    19da:	8c 93       	st	X, r24
    sensor_working = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	80 93 7a 00 	sts	0x007A, r24
  }
}
    19e2:	68 96       	adiw	r28, 0x18	; 24
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <__vector_2>:

// Interrupt Service Routine (ISR) for external interrupt 1 (INT1)
ISR(INT1_vect){
    19f4:	1f 92       	push	r1
    19f6:	0f 92       	push	r0
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	0f 92       	push	r0
    19fc:	11 24       	eor	r1, r1
    19fe:	2f 93       	push	r18
    1a00:	3f 93       	push	r19
    1a02:	4f 93       	push	r20
    1a04:	5f 93       	push	r21
    1a06:	6f 93       	push	r22
    1a08:	7f 93       	push	r23
    1a0a:	8f 93       	push	r24
    1a0c:	9f 93       	push	r25
    1a0e:	af 93       	push	r26
    1a10:	bf 93       	push	r27
    1a12:	ef 93       	push	r30
    1a14:	ff 93       	push	r31
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	6c 97       	sbiw	r28, 0x1c	; 28
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	cd bf       	out	0x3d, r28	; 61
  if (sensor_working == 1){
    1a24:	80 91 7a 00 	lds	r24, 0x007A
    1a28:	81 30       	cpi	r24, 0x01	; 1
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <__vector_2+0x3a>
    1a2c:	60 c1       	rjmp	.+704    	; 0x1cee <__vector_2+0x2fa>
    if (rising_edge == 0){
    1a2e:	80 91 7b 00 	lds	r24, 0x007B
    1a32:	88 23       	and	r24, r24
    1a34:	79 f4       	brne	.+30     	; 0x1a54 <__vector_2+0x60>
      // On the first rising edge, reset the timer (TCNT0), set the rising edge flag, and reset the timer counter
      TCNT0 = 0x00;
    1a36:	e2 e5       	ldi	r30, 0x52	; 82
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	10 82       	st	Z, r1
      rising_edge = 1;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	80 93 7b 00 	sts	0x007B, r24
      timer_counter = 0;
    1a42:	10 92 7c 00 	sts	0x007C, r1
    1a46:	10 92 7d 00 	sts	0x007D, r1
    1a4a:	10 92 7e 00 	sts	0x007E, r1
    1a4e:	10 92 7f 00 	sts	0x007F, r1
    1a52:	4d c1       	rjmp	.+666    	; 0x1cee <__vector_2+0x2fa>
    }
    else{
      // On the second rising edge, calculate the distance based on timer values
      distance = (timer_counter * 256 + TCNT0) / 466;
    1a54:	80 91 7c 00 	lds	r24, 0x007C
    1a58:	90 91 7d 00 	lds	r25, 0x007D
    1a5c:	a0 91 7e 00 	lds	r26, 0x007E
    1a60:	b0 91 7f 00 	lds	r27, 0x007F
    1a64:	22 27       	eor	r18, r18
    1a66:	38 2f       	mov	r19, r24
    1a68:	49 2f       	mov	r20, r25
    1a6a:	5a 2f       	mov	r21, r26
    1a6c:	e2 e5       	ldi	r30, 0x52	; 82
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	88 2f       	mov	r24, r24
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a0 e0       	ldi	r26, 0x00	; 0
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	82 0f       	add	r24, r18
    1a7c:	93 1f       	adc	r25, r19
    1a7e:	a4 1f       	adc	r26, r20
    1a80:	b5 1f       	adc	r27, r21
    1a82:	22 ed       	ldi	r18, 0xD2	; 210
    1a84:	31 e0       	ldi	r19, 0x01	; 1
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__udivmodsi4>
    1a92:	da 01       	movw	r26, r20
    1a94:	c9 01       	movw	r24, r18
    1a96:	80 93 80 00 	sts	0x0080, r24
    1a9a:	90 93 81 00 	sts	0x0081, r25
    1a9e:	a0 93 82 00 	sts	0x0082, r26
    1aa2:	b0 93 83 00 	sts	0x0083, r27

      // Display the distance on an LCD
      HLCD_voidGoTo(1, 0);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <HLCD_voidGoTo>
      itoa(distance, distance_str, 10);
    1aae:	80 91 80 00 	lds	r24, 0x0080
    1ab2:	90 91 81 00 	lds	r25, 0x0081
    1ab6:	a0 91 82 00 	lds	r26, 0x0082
    1aba:	b0 91 83 00 	lds	r27, 0x0083
    1abe:	24 e8       	ldi	r18, 0x84	; 132
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	b9 01       	movw	r22, r18
    1ac4:	4a e0       	ldi	r20, 0x0A	; 10
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	0e 94 bf 19 	call	0x337e	; 0x337e <itoa>
      strcat(distance_str, " cm ");
    1acc:	84 e8       	ldi	r24, 0x84	; 132
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 b6 19 	call	0x336c	; 0x336c <strlen>
    1ad4:	8c 57       	subi	r24, 0x7C	; 124
    1ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad8:	20 e6       	ldi	r18, 0x60	; 96
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	b9 01       	movw	r22, r18
    1ade:	45 e0       	ldi	r20, 0x05	; 5
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	0e 94 ad 19 	call	0x335a	; 0x335a <memcpy>
      HLCD_voidSendString(distance_str);
    1ae6:	84 e8       	ldi	r24, 0x84	; 132
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 a0 10 	call	0x2140	; 0x2140 <HLCD_voidSendString>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 e2       	ldi	r26, 0x20	; 32
    1af4:	b2 e4       	ldi	r27, 0x42	; 66
    1af6:	89 8f       	std	Y+25, r24	; 0x19
    1af8:	9a 8f       	std	Y+26, r25	; 0x1a
    1afa:	ab 8f       	std	Y+27, r26	; 0x1b
    1afc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afe:	69 8d       	ldd	r22, Y+25	; 0x19
    1b00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4a ef       	ldi	r20, 0xFA	; 250
    1b0c:	54 e4       	ldi	r21, 0x44	; 68
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	8d 8b       	std	Y+21, r24	; 0x15
    1b18:	9e 8b       	std	Y+22, r25	; 0x16
    1b1a:	af 8b       	std	Y+23, r26	; 0x17
    1b1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b20:	7e 89       	ldd	r23, Y+22	; 0x16
    1b22:	8f 89       	ldd	r24, Y+23	; 0x17
    1b24:	98 8d       	ldd	r25, Y+24	; 0x18
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <__vector_2+0x14c>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9c 8b       	std	Y+20, r25	; 0x14
    1b3c:	8b 8b       	std	Y+19, r24	; 0x13
    1b3e:	3f c0       	rjmp	.+126    	; 0x1bbe <__vector_2+0x1ca>
	else if (__tmp > 65535)
    1b40:	6d 89       	ldd	r22, Y+21	; 0x15
    1b42:	7e 89       	ldd	r23, Y+22	; 0x16
    1b44:	8f 89       	ldd	r24, Y+23	; 0x17
    1b46:	98 8d       	ldd	r25, Y+24	; 0x18
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	4c f5       	brge	.+82     	; 0x1baa <__vector_2+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	69 8d       	ldd	r22, Y+25	; 0x19
    1b5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9c 8b       	std	Y+20, r25	; 0x14
    1b7e:	8b 8b       	std	Y+19, r24	; 0x13
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <__vector_2+0x1ac>
    1b82:	88 ec       	ldi	r24, 0xC8	; 200
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9a 8b       	std	Y+18, r25	; 0x12
    1b88:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b8a:	89 89       	ldd	r24, Y+17	; 0x11
    1b8c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <__vector_2+0x19a>
    1b92:	9a 8b       	std	Y+18, r25	; 0x12
    1b94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	8b 89       	ldd	r24, Y+19	; 0x13
    1b98:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	9c 8b       	std	Y+20, r25	; 0x14
    1b9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	69 f7       	brne	.-38     	; 0x1b82 <__vector_2+0x18e>
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <__vector_2+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	6d 89       	ldd	r22, Y+21	; 0x15
    1bac:	7e 89       	ldd	r23, Y+22	; 0x16
    1bae:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9c 8b       	std	Y+20, r25	; 0x14
    1bbc:	8b 8b       	std	Y+19, r24	; 0x13
    1bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc2:	98 8b       	std	Y+16, r25	; 0x10
    1bc4:	8f 87       	std	Y+15, r24	; 0x0f
    1bc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc8:	98 89       	ldd	r25, Y+16	; 0x10
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <__vector_2+0x1d6>
    1bce:	98 8b       	std	Y+16, r25	; 0x10
    1bd0:	8f 87       	std	Y+15, r24	; 0x0f
      _delay_ms(40);

      // Reset timer, rising edge flag, and trigger servo motor rotation if the distance is 200 cm
      timer_counter = 0;
    1bd2:	10 92 7c 00 	sts	0x007C, r1
    1bd6:	10 92 7d 00 	sts	0x007D, r1
    1bda:	10 92 7e 00 	sts	0x007E, r1
    1bde:	10 92 7f 00 	sts	0x007F, r1
      rising_edge = 0;
    1be2:	10 92 7b 00 	sts	0x007B, r1
      if (distance == DESIRED_DISTANCE) {
    1be6:	80 91 80 00 	lds	r24, 0x0080
    1bea:	90 91 81 00 	lds	r25, 0x0081
    1bee:	a0 91 82 00 	lds	r26, 0x0082
    1bf2:	b0 91 83 00 	lds	r27, 0x0083
    1bf6:	88 3c       	cpi	r24, 0xC8	; 200
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	a1 05       	cpc	r26, r1
    1bfc:	b1 05       	cpc	r27, r1
    1bfe:	09 f0       	breq	.+2      	; 0x1c02 <__vector_2+0x20e>
    1c00:	76 c0       	rjmp	.+236    	; 0x1cee <__vector_2+0x2fa>
        HSER_voidInit();
    1c02:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <HSER_voidInit>
        HSER_voidRotate90();
    1c06:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <HSER_voidRotate90>
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	aa e7       	ldi	r26, 0x7A	; 122
    1c10:	b4 e4       	ldi	r27, 0x44	; 68
    1c12:	8b 87       	std	Y+11, r24	; 0x0b
    1c14:	9c 87       	std	Y+12, r25	; 0x0c
    1c16:	ad 87       	std	Y+13, r26	; 0x0d
    1c18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	4a ef       	ldi	r20, 0xFA	; 250
    1c28:	54 e4       	ldi	r21, 0x44	; 68
    1c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	8f 83       	std	Y+7, r24	; 0x07
    1c34:	98 87       	std	Y+8, r25	; 0x08
    1c36:	a9 87       	std	Y+9, r26	; 0x09
    1c38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3c:	78 85       	ldd	r23, Y+8	; 0x08
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e8       	ldi	r20, 0x80	; 128
    1c48:	5f e3       	ldi	r21, 0x3F	; 63
    1c4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c4e:	88 23       	and	r24, r24
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <__vector_2+0x268>
		__ticks = 1;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9e 83       	std	Y+6, r25	; 0x06
    1c58:	8d 83       	std	Y+5, r24	; 0x05
    1c5a:	3f c0       	rjmp	.+126    	; 0x1cda <__vector_2+0x2e6>
	else if (__tmp > 65535)
    1c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5e:	78 85       	ldd	r23, Y+8	; 0x08
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	3f ef       	ldi	r19, 0xFF	; 255
    1c68:	4f e7       	ldi	r20, 0x7F	; 127
    1c6a:	57 e4       	ldi	r21, 0x47	; 71
    1c6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c70:	18 16       	cp	r1, r24
    1c72:	4c f5       	brge	.+82     	; 0x1cc6 <__vector_2+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e2       	ldi	r20, 0x20	; 32
    1c82:	51 e4       	ldi	r21, 0x41	; 65
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	9e 83       	std	Y+6, r25	; 0x06
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <__vector_2+0x2c8>
    1c9e:	88 ec       	ldi	r24, 0xC8	; 200
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9c 83       	std	Y+4, r25	; 0x04
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <__vector_2+0x2b6>
    1cae:	9c 83       	std	Y+4, r25	; 0x04
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	69 f7       	brne	.-38     	; 0x1c9e <__vector_2+0x2aa>
    1cc4:	14 c0       	rjmp	.+40     	; 0x1cee <__vector_2+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <__vector_2+0x2f2>
    1cea:	9a 83       	std	Y+2, r25	; 0x02
    1cec:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms (1000);

      }
    }
  }
}
    1cee:	6c 96       	adiw	r28, 0x1c	; 28
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	ff 91       	pop	r31
    1cfa:	ef 91       	pop	r30
    1cfc:	bf 91       	pop	r27
    1cfe:	af 91       	pop	r26
    1d00:	9f 91       	pop	r25
    1d02:	8f 91       	pop	r24
    1d04:	7f 91       	pop	r23
    1d06:	6f 91       	pop	r22
    1d08:	5f 91       	pop	r21
    1d0a:	4f 91       	pop	r20
    1d0c:	3f 91       	pop	r19
    1d0e:	2f 91       	pop	r18
    1d10:	0f 90       	pop	r0
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	0f 90       	pop	r0
    1d16:	1f 90       	pop	r1
    1d18:	18 95       	reti

00001d1a <__vector_11>:

// Interrupt Service Routine (ISR) for Timer 0 overflow
ISR(TIMER0_OVF_vect){
    1d1a:	1f 92       	push	r1
    1d1c:	0f 92       	push	r0
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	0f 92       	push	r0
    1d22:	11 24       	eor	r1, r1
    1d24:	2f 93       	push	r18
    1d26:	8f 93       	push	r24
    1d28:	9f 93       	push	r25
    1d2a:	af 93       	push	r26
    1d2c:	bf 93       	push	r27
    1d2e:	ef 93       	push	r30
    1d30:	ff 93       	push	r31
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
  timer_counter++;
    1d3a:	80 91 7c 00 	lds	r24, 0x007C
    1d3e:	90 91 7d 00 	lds	r25, 0x007D
    1d42:	a0 91 7e 00 	lds	r26, 0x007E
    1d46:	b0 91 7f 00 	lds	r27, 0x007F
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	a1 1d       	adc	r26, r1
    1d4e:	b1 1d       	adc	r27, r1
    1d50:	80 93 7c 00 	sts	0x007C, r24
    1d54:	90 93 7d 00 	sts	0x007D, r25
    1d58:	a0 93 7e 00 	sts	0x007E, r26
    1d5c:	b0 93 7f 00 	sts	0x007F, r27
  if (timer_counter >730){
    1d60:	80 91 7c 00 	lds	r24, 0x007C
    1d64:	90 91 7d 00 	lds	r25, 0x007D
    1d68:	a0 91 7e 00 	lds	r26, 0x007E
    1d6c:	b0 91 7f 00 	lds	r27, 0x007F
    1d70:	8b 3d       	cpi	r24, 0xDB	; 219
    1d72:	22 e0       	ldi	r18, 0x02	; 2
    1d74:	92 07       	cpc	r25, r18
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	a2 07       	cpc	r26, r18
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	b2 07       	cpc	r27, r18
    1d7e:	78 f0       	brcs	.+30     	; 0x1d9e <__vector_11+0x84>
    TCNT0 = 0x00;
    1d80:	e2 e5       	ldi	r30, 0x52	; 82
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	10 82       	st	Z, r1
    sensor_working = 0;
    1d86:	10 92 7a 00 	sts	0x007A, r1
    rising_edge = 0;
    1d8a:	10 92 7b 00 	sts	0x007B, r1
    timer_counter = 0;
    1d8e:	10 92 7c 00 	sts	0x007C, r1
    1d92:	10 92 7d 00 	sts	0x007D, r1
    1d96:	10 92 7e 00 	sts	0x007E, r1
    1d9a:	10 92 7f 00 	sts	0x007F, r1
  }
}
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	ff 91       	pop	r31
    1da4:	ef 91       	pop	r30
    1da6:	bf 91       	pop	r27
    1da8:	af 91       	pop	r26
    1daa:	9f 91       	pop	r25
    1dac:	8f 91       	pop	r24
    1dae:	2f 91       	pop	r18
    1db0:	0f 90       	pop	r0
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	0f 90       	pop	r0
    1db6:	1f 90       	pop	r1
    1db8:	18 95       	reti

00001dba <HSER_voidInit>:
#include "../../MCAL/EXTI/EXTI_Interface.h"
#include "../../MCAL/GIE/GIE_Interface.h"
#include "../../MCAL/TIMER/Timer_Interface.h"

void HSER_voidInit (void)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62


   TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
    1dc2:	af e4       	ldi	r26, 0x4F	; 79
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	ef e4       	ldi	r30, 0x4F	; 79
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	82 6a       	ori	r24, 0xA2	; 162
    1dce:	8c 93       	st	X, r24
   TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
    1dd0:	ae e4       	ldi	r26, 0x4E	; 78
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	ee e4       	ldi	r30, 0x4E	; 78
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	8b 61       	ori	r24, 0x1B	; 27
    1ddc:	8c 93       	st	X, r24

   ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
    1dde:	e6 e4       	ldi	r30, 0x46	; 70
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	87 e8       	ldi	r24, 0x87	; 135
    1de4:	93 e1       	ldi	r25, 0x13	; 19
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	80 83       	st	Z, r24

   DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Out
    1dea:	a1 e3       	ldi	r26, 0x31	; 49
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e1 e3       	ldi	r30, 0x31	; 49
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	80 63       	ori	r24, 0x30	; 48
    1df6:	8c 93       	st	X, r24
}
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <HSER_voidRotate90>:

void HSER_voidRotate90 (void){
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	2e 97       	sbiw	r28, 0x0e	; 14
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
      OCR1A=97;   //0 degree
    1e12:	ea e4       	ldi	r30, 0x4A	; 74
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	81 e6       	ldi	r24, 0x61	; 97
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	91 83       	std	Z+1, r25	; 0x01
    1e1c:	80 83       	st	Z, r24
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	aa e7       	ldi	r26, 0x7A	; 122
    1e24:	b4 e4       	ldi	r27, 0x44	; 68
    1e26:	8b 87       	std	Y+11, r24	; 0x0b
    1e28:	9c 87       	std	Y+12, r25	; 0x0c
    1e2a:	ad 87       	std	Y+13, r26	; 0x0d
    1e2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	4a ef       	ldi	r20, 0xFA	; 250
    1e3c:	54 e4       	ldi	r21, 0x44	; 68
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	8f 83       	std	Y+7, r24	; 0x07
    1e48:	98 87       	std	Y+8, r25	; 0x08
    1e4a:	a9 87       	std	Y+9, r26	; 0x09
    1e4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e50:	78 85       	ldd	r23, Y+8	; 0x08
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e8       	ldi	r20, 0x80	; 128
    1e5c:	5f e3       	ldi	r21, 0x3F	; 63
    1e5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e62:	88 23       	and	r24, r24
    1e64:	2c f4       	brge	.+10     	; 0x1e70 <HSER_voidRotate90+0x72>
		__ticks = 1;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9e 83       	std	Y+6, r25	; 0x06
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
    1e6e:	3f c0       	rjmp	.+126    	; 0x1eee <HSER_voidRotate90+0xf0>
	else if (__tmp > 65535)
    1e70:	6f 81       	ldd	r22, Y+7	; 0x07
    1e72:	78 85       	ldd	r23, Y+8	; 0x08
    1e74:	89 85       	ldd	r24, Y+9	; 0x09
    1e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	3f ef       	ldi	r19, 0xFF	; 255
    1e7c:	4f e7       	ldi	r20, 0x7F	; 127
    1e7e:	57 e4       	ldi	r21, 0x47	; 71
    1e80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e84:	18 16       	cp	r1, r24
    1e86:	4c f5       	brge	.+82     	; 0x1eda <HSER_voidRotate90+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e2       	ldi	r20, 0x20	; 32
    1e96:	51 e4       	ldi	r21, 0x41	; 65
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	0f c0       	rjmp	.+30     	; 0x1ed0 <HSER_voidRotate90+0xd2>
    1eb2:	88 ec       	ldi	r24, 0xC8	; 200
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	8b 83       	std	Y+3, r24	; 0x03
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	f1 f7       	brne	.-4      	; 0x1ebe <HSER_voidRotate90+0xc0>
    1ec2:	9c 83       	std	Y+4, r25	; 0x04
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	9e 83       	std	Y+6, r25	; 0x06
    1ece:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	69 f7       	brne	.-38     	; 0x1eb2 <HSER_voidRotate90+0xb4>
    1ed8:	14 c0       	rjmp	.+40     	; 0x1f02 <HSER_voidRotate90+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eda:	6f 81       	ldd	r22, Y+7	; 0x07
    1edc:	78 85       	ldd	r23, Y+8	; 0x08
    1ede:	89 85       	ldd	r24, Y+9	; 0x09
    1ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <HSER_voidRotate90+0xfc>
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1000);

//      OCR1A=316;  //90 degree
//      _delay_ms(1000);
}
    1f02:	2e 96       	adiw	r28, 0x0e	; 14
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <HSER_voidRotate135>:
void HSER_voidRotate135 (void){
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	2e 97       	sbiw	r28, 0x0e	; 14
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
      OCR1A=425;  //135 degree
    1f28:	ea e4       	ldi	r30, 0x4A	; 74
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	89 ea       	ldi	r24, 0xA9	; 169
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	aa e7       	ldi	r26, 0x7A	; 122
    1f3a:	b4 e4       	ldi	r27, 0x44	; 68
    1f3c:	8b 87       	std	Y+11, r24	; 0x0b
    1f3e:	9c 87       	std	Y+12, r25	; 0x0c
    1f40:	ad 87       	std	Y+13, r26	; 0x0d
    1f42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	4a ef       	ldi	r20, 0xFA	; 250
    1f52:	54 e4       	ldi	r21, 0x44	; 68
    1f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	8f 83       	std	Y+7, r24	; 0x07
    1f5e:	98 87       	std	Y+8, r25	; 0x08
    1f60:	a9 87       	std	Y+9, r26	; 0x09
    1f62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f64:	6f 81       	ldd	r22, Y+7	; 0x07
    1f66:	78 85       	ldd	r23, Y+8	; 0x08
    1f68:	89 85       	ldd	r24, Y+9	; 0x09
    1f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e8       	ldi	r20, 0x80	; 128
    1f72:	5f e3       	ldi	r21, 0x3F	; 63
    1f74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f78:	88 23       	and	r24, r24
    1f7a:	2c f4       	brge	.+10     	; 0x1f86 <HSER_voidRotate135+0x72>
		__ticks = 1;
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
    1f84:	3f c0       	rjmp	.+126    	; 0x2004 <HSER_voidRotate135+0xf0>
	else if (__tmp > 65535)
    1f86:	6f 81       	ldd	r22, Y+7	; 0x07
    1f88:	78 85       	ldd	r23, Y+8	; 0x08
    1f8a:	89 85       	ldd	r24, Y+9	; 0x09
    1f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	3f ef       	ldi	r19, 0xFF	; 255
    1f92:	4f e7       	ldi	r20, 0x7F	; 127
    1f94:	57 e4       	ldi	r21, 0x47	; 71
    1f96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f9a:	18 16       	cp	r1, r24
    1f9c:	4c f5       	brge	.+82     	; 0x1ff0 <HSER_voidRotate135+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e2       	ldi	r20, 0x20	; 32
    1fac:	51 e4       	ldi	r21, 0x41	; 65
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
    1fc6:	0f c0       	rjmp	.+30     	; 0x1fe6 <HSER_voidRotate135+0xd2>
    1fc8:	88 ec       	ldi	r24, 0xC8	; 200
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9c 83       	std	Y+4, r25	; 0x04
    1fce:	8b 83       	std	Y+3, r24	; 0x03
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <HSER_voidRotate135+0xc0>
    1fd8:	9c 83       	std	Y+4, r25	; 0x04
    1fda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fde:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	69 f7       	brne	.-38     	; 0x1fc8 <HSER_voidRotate135+0xb4>
    1fee:	14 c0       	rjmp	.+40     	; 0x2018 <HSER_voidRotate135+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	9e 83       	std	Y+6, r25	; 0x06
    2002:	8d 83       	std	Y+5, r24	; 0x05
    2004:	8d 81       	ldd	r24, Y+5	; 0x05
    2006:	9e 81       	ldd	r25, Y+6	; 0x06
    2008:	9a 83       	std	Y+2, r25	; 0x02
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <HSER_voidRotate135+0xfc>
    2014:	9a 83       	std	Y+2, r25	; 0x02
    2016:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(1000);
}
    2018:	2e 96       	adiw	r28, 0x0e	; 14
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <HSER_voidRotate180>:
      void HSER_voidRotate180 (void){
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	2e 97       	sbiw	r28, 0x0e	; 14
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
      OCR1A=535;  //180 degree
    203e:	ea e4       	ldi	r30, 0x4A	; 74
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	87 e1       	ldi	r24, 0x17	; 23
    2044:	92 e0       	ldi	r25, 0x02	; 2
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	aa e7       	ldi	r26, 0x7A	; 122
    2050:	b4 e4       	ldi	r27, 0x44	; 68
    2052:	8b 87       	std	Y+11, r24	; 0x0b
    2054:	9c 87       	std	Y+12, r25	; 0x0c
    2056:	ad 87       	std	Y+13, r26	; 0x0d
    2058:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	6b 85       	ldd	r22, Y+11	; 0x0b
    205c:	7c 85       	ldd	r23, Y+12	; 0x0c
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a ef       	ldi	r20, 0xFA	; 250
    2068:	54 e4       	ldi	r21, 0x44	; 68
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8f 83       	std	Y+7, r24	; 0x07
    2074:	98 87       	std	Y+8, r25	; 0x08
    2076:	a9 87       	std	Y+9, r26	; 0x09
    2078:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    207a:	6f 81       	ldd	r22, Y+7	; 0x07
    207c:	78 85       	ldd	r23, Y+8	; 0x08
    207e:	89 85       	ldd	r24, Y+9	; 0x09
    2080:	9a 85       	ldd	r25, Y+10	; 0x0a
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <HSER_voidRotate180+0x72>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
    209a:	3f c0       	rjmp	.+126    	; 0x211a <HSER_voidRotate180+0xf0>
	else if (__tmp > 65535)
    209c:	6f 81       	ldd	r22, Y+7	; 0x07
    209e:	78 85       	ldd	r23, Y+8	; 0x08
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <HSER_voidRotate180+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9e 83       	std	Y+6, r25	; 0x06
    20da:	8d 83       	std	Y+5, r24	; 0x05
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <HSER_voidRotate180+0xd2>
    20de:	88 ec       	ldi	r24, 0xC8	; 200
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9c 83       	std	Y+4, r25	; 0x04
    20e4:	8b 83       	std	Y+3, r24	; 0x03
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <HSER_voidRotate180+0xc0>
    20ee:	9c 83       	std	Y+4, r25	; 0x04
    20f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <HSER_voidRotate180+0xb4>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <HSER_voidRotate180+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	6f 81       	ldd	r22, Y+7	; 0x07
    2108:	78 85       	ldd	r23, Y+8	; 0x08
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <HSER_voidRotate180+0xfc>
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(1000);
      }
    212e:	2e 96       	adiw	r28, 0x0e	; 14
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <HLCD_voidSendString>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "LCD.h"
#include <avr/io.h>
#include <util/delay.h>

void HLCD_voidSendString(uint8_t word[20]) {
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <HLCD_voidSendString+0x6>
    2146:	00 d0       	rcall	.+0      	; 0x2148 <HLCD_voidSendString+0x8>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	9c 83       	std	Y+4, r25	; 0x04
    214e:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    2150:	1a 82       	std	Y+2, r1	; 0x02
    2152:	19 82       	std	Y+1, r1	; 0x01
    2154:	0f c0       	rjmp	.+30     	; 0x2174 <HLCD_voidSendString+0x34>
		while(word[i]!='\0')
		{
			HLCD_voidSendData(word[i]);
    2156:	29 81       	ldd	r18, Y+1	; 0x01
    2158:	3a 81       	ldd	r19, Y+2	; 0x02
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	fc 01       	movw	r30, r24
    2160:	e2 0f       	add	r30, r18
    2162:	f3 1f       	adc	r31, r19
    2164:	80 81       	ld	r24, Z
    2166:	0e 94 db 12 	call	0x25b6	; 0x25b6 <HLCD_voidSendData>
			i++;
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	01 96       	adiw	r24, 0x01	; 1
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
#include <avr/io.h>
#include <util/delay.h>

void HLCD_voidSendString(uint8_t word[20]) {
	int i=0;
		while(word[i]!='\0')
    2174:	29 81       	ldd	r18, Y+1	; 0x01
    2176:	3a 81       	ldd	r19, Y+2	; 0x02
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	fc 01       	movw	r30, r24
    217e:	e2 0f       	add	r30, r18
    2180:	f3 1f       	adc	r31, r19
    2182:	80 81       	ld	r24, Z
    2184:	88 23       	and	r24, r24
    2186:	39 f7       	brne	.-50     	; 0x2156 <HLCD_voidSendString+0x16>
		{
			HLCD_voidSendData(word[i]);
			i++;
		}
}
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <HLCD_voidSendCommand>:


void HLCD_voidSendCommand(u8 A_u8Cmd)

{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	e9 97       	sbiw	r28, 0x39	; 57
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	89 af       	std	Y+57, r24	; 0x39
	DATA_BUS=((A_u8Cmd&0b11110000));
    21ac:	eb e3       	ldi	r30, 0x3B	; 59
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	89 ad       	ldd	r24, Y+57	; 0x39
    21b2:	80 7f       	andi	r24, 0xF0	; 240
    21b4:	80 83       	st	Z, r24
		CTL_BUS &=~(1<<LCD_RS);
    21b6:	a8 e3       	ldi	r26, 0x38	; 56
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e8 e3       	ldi	r30, 0x38	; 56
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	8d 7f       	andi	r24, 0xFD	; 253
    21c2:	8c 93       	st	X, r24
		CTL_BUS |=(1<<LCD_EN);
    21c4:	a8 e3       	ldi	r26, 0x38	; 56
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e8 e3       	ldi	r30, 0x38	; 56
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	88 60       	ori	r24, 0x08	; 8
    21d0:	8c 93       	st	X, r24
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	a0 ea       	ldi	r26, 0xA0	; 160
    21d8:	b0 e4       	ldi	r27, 0x40	; 64
    21da:	8d ab       	std	Y+53, r24	; 0x35
    21dc:	9e ab       	std	Y+54, r25	; 0x36
    21de:	af ab       	std	Y+55, r26	; 0x37
    21e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e2:	6d a9       	ldd	r22, Y+53	; 0x35
    21e4:	7e a9       	ldd	r23, Y+54	; 0x36
    21e6:	8f a9       	ldd	r24, Y+55	; 0x37
    21e8:	98 ad       	ldd	r25, Y+56	; 0x38
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	4a ef       	ldi	r20, 0xFA	; 250
    21f0:	54 e4       	ldi	r21, 0x44	; 68
    21f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	89 ab       	std	Y+49, r24	; 0x31
    21fc:	9a ab       	std	Y+50, r25	; 0x32
    21fe:	ab ab       	std	Y+51, r26	; 0x33
    2200:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2202:	69 a9       	ldd	r22, Y+49	; 0x31
    2204:	7a a9       	ldd	r23, Y+50	; 0x32
    2206:	8b a9       	ldd	r24, Y+51	; 0x33
    2208:	9c a9       	ldd	r25, Y+52	; 0x34
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e8       	ldi	r20, 0x80	; 128
    2210:	5f e3       	ldi	r21, 0x3F	; 63
    2212:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2216:	88 23       	and	r24, r24
    2218:	2c f4       	brge	.+10     	; 0x2224 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	98 ab       	std	Y+48, r25	; 0x30
    2220:	8f a7       	std	Y+47, r24	; 0x2f
    2222:	3f c0       	rjmp	.+126    	; 0x22a2 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2224:	69 a9       	ldd	r22, Y+49	; 0x31
    2226:	7a a9       	ldd	r23, Y+50	; 0x32
    2228:	8b a9       	ldd	r24, Y+51	; 0x33
    222a:	9c a9       	ldd	r25, Y+52	; 0x34
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	3f ef       	ldi	r19, 0xFF	; 255
    2230:	4f e7       	ldi	r20, 0x7F	; 127
    2232:	57 e4       	ldi	r21, 0x47	; 71
    2234:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2238:	18 16       	cp	r1, r24
    223a:	4c f5       	brge	.+82     	; 0x228e <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223c:	6d a9       	ldd	r22, Y+53	; 0x35
    223e:	7e a9       	ldd	r23, Y+54	; 0x36
    2240:	8f a9       	ldd	r24, Y+55	; 0x37
    2242:	98 ad       	ldd	r25, Y+56	; 0x38
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e2       	ldi	r20, 0x20	; 32
    224a:	51 e4       	ldi	r21, 0x41	; 65
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	bc 01       	movw	r22, r24
    2256:	cd 01       	movw	r24, r26
    2258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	98 ab       	std	Y+48, r25	; 0x30
    2262:	8f a7       	std	Y+47, r24	; 0x2f
    2264:	0f c0       	rjmp	.+30     	; 0x2284 <HLCD_voidSendCommand+0xee>
    2266:	88 ec       	ldi	r24, 0xC8	; 200
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	9e a7       	std	Y+46, r25	; 0x2e
    226c:	8d a7       	std	Y+45, r24	; 0x2d
    226e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2270:	9e a5       	ldd	r25, Y+46	; 0x2e
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <HLCD_voidSendCommand+0xdc>
    2276:	9e a7       	std	Y+46, r25	; 0x2e
    2278:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227a:	8f a5       	ldd	r24, Y+47	; 0x2f
    227c:	98 a9       	ldd	r25, Y+48	; 0x30
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	98 ab       	std	Y+48, r25	; 0x30
    2282:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2284:	8f a5       	ldd	r24, Y+47	; 0x2f
    2286:	98 a9       	ldd	r25, Y+48	; 0x30
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	69 f7       	brne	.-38     	; 0x2266 <HLCD_voidSendCommand+0xd0>
    228c:	14 c0       	rjmp	.+40     	; 0x22b6 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228e:	69 a9       	ldd	r22, Y+49	; 0x31
    2290:	7a a9       	ldd	r23, Y+50	; 0x32
    2292:	8b a9       	ldd	r24, Y+51	; 0x33
    2294:	9c a9       	ldd	r25, Y+52	; 0x34
    2296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	98 ab       	std	Y+48, r25	; 0x30
    22a0:	8f a7       	std	Y+47, r24	; 0x2f
    22a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a4:	98 a9       	ldd	r25, Y+48	; 0x30
    22a6:	9c a7       	std	Y+44, r25	; 0x2c
    22a8:	8b a7       	std	Y+43, r24	; 0x2b
    22aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <HLCD_voidSendCommand+0x118>
    22b2:	9c a7       	std	Y+44, r25	; 0x2c
    22b4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);
		CTL_BUS &=~(1<<LCD_EN);
    22b6:	a8 e3       	ldi	r26, 0x38	; 56
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e8 e3       	ldi	r30, 0x38	; 56
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	87 7f       	andi	r24, 0xF7	; 247
    22c2:	8c 93       	st	X, r24
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	a0 ea       	ldi	r26, 0xA0	; 160
    22ca:	b0 e4       	ldi	r27, 0x40	; 64
    22cc:	8f a3       	std	Y+39, r24	; 0x27
    22ce:	98 a7       	std	Y+40, r25	; 0x28
    22d0:	a9 a7       	std	Y+41, r26	; 0x29
    22d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d4:	6f a1       	ldd	r22, Y+39	; 0x27
    22d6:	78 a5       	ldd	r23, Y+40	; 0x28
    22d8:	89 a5       	ldd	r24, Y+41	; 0x29
    22da:	9a a5       	ldd	r25, Y+42	; 0x2a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	4a ef       	ldi	r20, 0xFA	; 250
    22e2:	54 e4       	ldi	r21, 0x44	; 68
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	8b a3       	std	Y+35, r24	; 0x23
    22ee:	9c a3       	std	Y+36, r25	; 0x24
    22f0:	ad a3       	std	Y+37, r26	; 0x25
    22f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22f4:	6b a1       	ldd	r22, Y+35	; 0x23
    22f6:	7c a1       	ldd	r23, Y+36	; 0x24
    22f8:	8d a1       	ldd	r24, Y+37	; 0x25
    22fa:	9e a1       	ldd	r25, Y+38	; 0x26
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e8       	ldi	r20, 0x80	; 128
    2302:	5f e3       	ldi	r21, 0x3F	; 63
    2304:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2308:	88 23       	and	r24, r24
    230a:	2c f4       	brge	.+10     	; 0x2316 <HLCD_voidSendCommand+0x180>
		__ticks = 1;
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	9a a3       	std	Y+34, r25	; 0x22
    2312:	89 a3       	std	Y+33, r24	; 0x21
    2314:	3f c0       	rjmp	.+126    	; 0x2394 <HLCD_voidSendCommand+0x1fe>
	else if (__tmp > 65535)
    2316:	6b a1       	ldd	r22, Y+35	; 0x23
    2318:	7c a1       	ldd	r23, Y+36	; 0x24
    231a:	8d a1       	ldd	r24, Y+37	; 0x25
    231c:	9e a1       	ldd	r25, Y+38	; 0x26
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	3f ef       	ldi	r19, 0xFF	; 255
    2322:	4f e7       	ldi	r20, 0x7F	; 127
    2324:	57 e4       	ldi	r21, 0x47	; 71
    2326:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    232a:	18 16       	cp	r1, r24
    232c:	4c f5       	brge	.+82     	; 0x2380 <HLCD_voidSendCommand+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232e:	6f a1       	ldd	r22, Y+39	; 0x27
    2330:	78 a5       	ldd	r23, Y+40	; 0x28
    2332:	89 a5       	ldd	r24, Y+41	; 0x29
    2334:	9a a5       	ldd	r25, Y+42	; 0x2a
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e2       	ldi	r20, 0x20	; 32
    233c:	51 e4       	ldi	r21, 0x41	; 65
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	bc 01       	movw	r22, r24
    2348:	cd 01       	movw	r24, r26
    234a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	9a a3       	std	Y+34, r25	; 0x22
    2354:	89 a3       	std	Y+33, r24	; 0x21
    2356:	0f c0       	rjmp	.+30     	; 0x2376 <HLCD_voidSendCommand+0x1e0>
    2358:	88 ec       	ldi	r24, 0xC8	; 200
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	98 a3       	std	Y+32, r25	; 0x20
    235e:	8f 8f       	std	Y+31, r24	; 0x1f
    2360:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2362:	98 a1       	ldd	r25, Y+32	; 0x20
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <HLCD_voidSendCommand+0x1ce>
    2368:	98 a3       	std	Y+32, r25	; 0x20
    236a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236c:	89 a1       	ldd	r24, Y+33	; 0x21
    236e:	9a a1       	ldd	r25, Y+34	; 0x22
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	9a a3       	std	Y+34, r25	; 0x22
    2374:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2376:	89 a1       	ldd	r24, Y+33	; 0x21
    2378:	9a a1       	ldd	r25, Y+34	; 0x22
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	69 f7       	brne	.-38     	; 0x2358 <HLCD_voidSendCommand+0x1c2>
    237e:	14 c0       	rjmp	.+40     	; 0x23a8 <HLCD_voidSendCommand+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2380:	6b a1       	ldd	r22, Y+35	; 0x23
    2382:	7c a1       	ldd	r23, Y+36	; 0x24
    2384:	8d a1       	ldd	r24, Y+37	; 0x25
    2386:	9e a1       	ldd	r25, Y+38	; 0x26
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	9a a3       	std	Y+34, r25	; 0x22
    2392:	89 a3       	std	Y+33, r24	; 0x21
    2394:	89 a1       	ldd	r24, Y+33	; 0x21
    2396:	9a a1       	ldd	r25, Y+34	; 0x22
    2398:	9e 8f       	std	Y+30, r25	; 0x1e
    239a:	8d 8f       	std	Y+29, r24	; 0x1d
    239c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    239e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <HLCD_voidSendCommand+0x20a>
    23a4:	9e 8f       	std	Y+30, r25	; 0x1e
    23a6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);
		DATA_BUS=((A_u8Cmd&0b00001111)<<4);
    23a8:	eb e3       	ldi	r30, 0x3B	; 59
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	89 ad       	ldd	r24, Y+57	; 0x39
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	82 95       	swap	r24
    23b4:	92 95       	swap	r25
    23b6:	90 7f       	andi	r25, 0xF0	; 240
    23b8:	98 27       	eor	r25, r24
    23ba:	80 7f       	andi	r24, 0xF0	; 240
    23bc:	98 27       	eor	r25, r24
    23be:	80 83       	st	Z, r24
		CTL_BUS |=(1<<LCD_EN);
    23c0:	a8 e3       	ldi	r26, 0x38	; 56
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e8 e3       	ldi	r30, 0x38	; 56
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	88 60       	ori	r24, 0x08	; 8
    23cc:	8c 93       	st	X, r24
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a0 ea       	ldi	r26, 0xA0	; 160
    23d4:	b0 e4       	ldi	r27, 0x40	; 64
    23d6:	89 8f       	std	Y+25, r24	; 0x19
    23d8:	9a 8f       	std	Y+26, r25	; 0x1a
    23da:	ab 8f       	std	Y+27, r26	; 0x1b
    23dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23de:	69 8d       	ldd	r22, Y+25	; 0x19
    23e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	4a ef       	ldi	r20, 0xFA	; 250
    23ec:	54 e4       	ldi	r21, 0x44	; 68
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	8d 8b       	std	Y+21, r24	; 0x15
    23f8:	9e 8b       	std	Y+22, r25	; 0x16
    23fa:	af 8b       	std	Y+23, r26	; 0x17
    23fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2400:	7e 89       	ldd	r23, Y+22	; 0x16
    2402:	8f 89       	ldd	r24, Y+23	; 0x17
    2404:	98 8d       	ldd	r25, Y+24	; 0x18
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e8       	ldi	r20, 0x80	; 128
    240c:	5f e3       	ldi	r21, 0x3F	; 63
    240e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2412:	88 23       	and	r24, r24
    2414:	2c f4       	brge	.+10     	; 0x2420 <HLCD_voidSendCommand+0x28a>
		__ticks = 1;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9c 8b       	std	Y+20, r25	; 0x14
    241c:	8b 8b       	std	Y+19, r24	; 0x13
    241e:	3f c0       	rjmp	.+126    	; 0x249e <HLCD_voidSendCommand+0x308>
	else if (__tmp > 65535)
    2420:	6d 89       	ldd	r22, Y+21	; 0x15
    2422:	7e 89       	ldd	r23, Y+22	; 0x16
    2424:	8f 89       	ldd	r24, Y+23	; 0x17
    2426:	98 8d       	ldd	r25, Y+24	; 0x18
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	3f ef       	ldi	r19, 0xFF	; 255
    242c:	4f e7       	ldi	r20, 0x7F	; 127
    242e:	57 e4       	ldi	r21, 0x47	; 71
    2430:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2434:	18 16       	cp	r1, r24
    2436:	4c f5       	brge	.+82     	; 0x248a <HLCD_voidSendCommand+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2438:	69 8d       	ldd	r22, Y+25	; 0x19
    243a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    243c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    243e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e2       	ldi	r20, 0x20	; 32
    2446:	51 e4       	ldi	r21, 0x41	; 65
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	9c 8b       	std	Y+20, r25	; 0x14
    245e:	8b 8b       	std	Y+19, r24	; 0x13
    2460:	0f c0       	rjmp	.+30     	; 0x2480 <HLCD_voidSendCommand+0x2ea>
    2462:	88 ec       	ldi	r24, 0xC8	; 200
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9a 8b       	std	Y+18, r25	; 0x12
    2468:	89 8b       	std	Y+17, r24	; 0x11
    246a:	89 89       	ldd	r24, Y+17	; 0x11
    246c:	9a 89       	ldd	r25, Y+18	; 0x12
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <HLCD_voidSendCommand+0x2d8>
    2472:	9a 8b       	std	Y+18, r25	; 0x12
    2474:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2476:	8b 89       	ldd	r24, Y+19	; 0x13
    2478:	9c 89       	ldd	r25, Y+20	; 0x14
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	9c 8b       	std	Y+20, r25	; 0x14
    247e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2480:	8b 89       	ldd	r24, Y+19	; 0x13
    2482:	9c 89       	ldd	r25, Y+20	; 0x14
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	69 f7       	brne	.-38     	; 0x2462 <HLCD_voidSendCommand+0x2cc>
    2488:	14 c0       	rjmp	.+40     	; 0x24b2 <HLCD_voidSendCommand+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248a:	6d 89       	ldd	r22, Y+21	; 0x15
    248c:	7e 89       	ldd	r23, Y+22	; 0x16
    248e:	8f 89       	ldd	r24, Y+23	; 0x17
    2490:	98 8d       	ldd	r25, Y+24	; 0x18
    2492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	9c 8b       	std	Y+20, r25	; 0x14
    249c:	8b 8b       	std	Y+19, r24	; 0x13
    249e:	8b 89       	ldd	r24, Y+19	; 0x13
    24a0:	9c 89       	ldd	r25, Y+20	; 0x14
    24a2:	98 8b       	std	Y+16, r25	; 0x10
    24a4:	8f 87       	std	Y+15, r24	; 0x0f
    24a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a8:	98 89       	ldd	r25, Y+16	; 0x10
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <HLCD_voidSendCommand+0x314>
    24ae:	98 8b       	std	Y+16, r25	; 0x10
    24b0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		CTL_BUS &=~(1<<LCD_EN);
    24b2:	a8 e3       	ldi	r26, 0x38	; 56
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e8 e3       	ldi	r30, 0x38	; 56
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	87 7f       	andi	r24, 0xF7	; 247
    24be:	8c 93       	st	X, r24
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	a0 ea       	ldi	r26, 0xA0	; 160
    24c6:	b0 e4       	ldi	r27, 0x40	; 64
    24c8:	8b 87       	std	Y+11, r24	; 0x0b
    24ca:	9c 87       	std	Y+12, r25	; 0x0c
    24cc:	ad 87       	std	Y+13, r26	; 0x0d
    24ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	4a ef       	ldi	r20, 0xFA	; 250
    24de:	54 e4       	ldi	r21, 0x44	; 68
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	8f 83       	std	Y+7, r24	; 0x07
    24ea:	98 87       	std	Y+8, r25	; 0x08
    24ec:	a9 87       	std	Y+9, r26	; 0x09
    24ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f0:	6f 81       	ldd	r22, Y+7	; 0x07
    24f2:	78 85       	ldd	r23, Y+8	; 0x08
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e8       	ldi	r20, 0x80	; 128
    24fe:	5f e3       	ldi	r21, 0x3F	; 63
    2500:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2504:	88 23       	and	r24, r24
    2506:	2c f4       	brge	.+10     	; 0x2512 <HLCD_voidSendCommand+0x37c>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	3f c0       	rjmp	.+126    	; 0x2590 <HLCD_voidSendCommand+0x3fa>
	else if (__tmp > 65535)
    2512:	6f 81       	ldd	r22, Y+7	; 0x07
    2514:	78 85       	ldd	r23, Y+8	; 0x08
    2516:	89 85       	ldd	r24, Y+9	; 0x09
    2518:	9a 85       	ldd	r25, Y+10	; 0x0a
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	3f ef       	ldi	r19, 0xFF	; 255
    251e:	4f e7       	ldi	r20, 0x7F	; 127
    2520:	57 e4       	ldi	r21, 0x47	; 71
    2522:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2526:	18 16       	cp	r1, r24
    2528:	4c f5       	brge	.+82     	; 0x257c <HLCD_voidSendCommand+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252a:	6b 85       	ldd	r22, Y+11	; 0x0b
    252c:	7c 85       	ldd	r23, Y+12	; 0x0c
    252e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2530:	9e 85       	ldd	r25, Y+14	; 0x0e
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e2       	ldi	r20, 0x20	; 32
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	8d 83       	std	Y+5, r24	; 0x05
    2552:	0f c0       	rjmp	.+30     	; 0x2572 <HLCD_voidSendCommand+0x3dc>
    2554:	88 ec       	ldi	r24, 0xC8	; 200
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9c 83       	std	Y+4, r25	; 0x04
    255a:	8b 83       	std	Y+3, r24	; 0x03
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	9c 81       	ldd	r25, Y+4	; 0x04
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <HLCD_voidSendCommand+0x3ca>
    2564:	9c 83       	std	Y+4, r25	; 0x04
    2566:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	9e 81       	ldd	r25, Y+6	; 0x06
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	9e 83       	std	Y+6, r25	; 0x06
    2570:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	69 f7       	brne	.-38     	; 0x2554 <HLCD_voidSendCommand+0x3be>
    257a:	14 c0       	rjmp	.+40     	; 0x25a4 <HLCD_voidSendCommand+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257c:	6f 81       	ldd	r22, Y+7	; 0x07
    257e:	78 85       	ldd	r23, Y+8	; 0x08
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	9e 83       	std	Y+6, r25	; 0x06
    258e:	8d 83       	std	Y+5, r24	; 0x05
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <HLCD_voidSendCommand+0x406>
    25a0:	9a 83       	std	Y+2, r25	; 0x02
    25a2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
}
    25a4:	e9 96       	adiw	r28, 0x39	; 57
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)

{
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	e9 97       	sbiw	r28, 0x39	; 57
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	89 af       	std	Y+57, r24	; 0x39

	DATA_BUS=(( A_u8Data & 0b11110000));
    25cc:	eb e3       	ldi	r30, 0x3B	; 59
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	89 ad       	ldd	r24, Y+57	; 0x39
    25d2:	80 7f       	andi	r24, 0xF0	; 240
    25d4:	80 83       	st	Z, r24
		CTL_BUS|=(1<<LCD_RS);
    25d6:	a8 e3       	ldi	r26, 0x38	; 56
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e8 e3       	ldi	r30, 0x38	; 56
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	82 60       	ori	r24, 0x02	; 2
    25e2:	8c 93       	st	X, r24
		CTL_BUS |=(1<<LCD_EN);
    25e4:	a8 e3       	ldi	r26, 0x38	; 56
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e8 e3       	ldi	r30, 0x38	; 56
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	88 60       	ori	r24, 0x08	; 8
    25f0:	8c 93       	st	X, r24
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	a0 ea       	ldi	r26, 0xA0	; 160
    25f8:	b0 e4       	ldi	r27, 0x40	; 64
    25fa:	8d ab       	std	Y+53, r24	; 0x35
    25fc:	9e ab       	std	Y+54, r25	; 0x36
    25fe:	af ab       	std	Y+55, r26	; 0x37
    2600:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2602:	6d a9       	ldd	r22, Y+53	; 0x35
    2604:	7e a9       	ldd	r23, Y+54	; 0x36
    2606:	8f a9       	ldd	r24, Y+55	; 0x37
    2608:	98 ad       	ldd	r25, Y+56	; 0x38
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	4a ef       	ldi	r20, 0xFA	; 250
    2610:	54 e4       	ldi	r21, 0x44	; 68
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	89 ab       	std	Y+49, r24	; 0x31
    261c:	9a ab       	std	Y+50, r25	; 0x32
    261e:	ab ab       	std	Y+51, r26	; 0x33
    2620:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2622:	69 a9       	ldd	r22, Y+49	; 0x31
    2624:	7a a9       	ldd	r23, Y+50	; 0x32
    2626:	8b a9       	ldd	r24, Y+51	; 0x33
    2628:	9c a9       	ldd	r25, Y+52	; 0x34
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	2c f4       	brge	.+10     	; 0x2644 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	98 ab       	std	Y+48, r25	; 0x30
    2640:	8f a7       	std	Y+47, r24	; 0x2f
    2642:	3f c0       	rjmp	.+126    	; 0x26c2 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    2644:	69 a9       	ldd	r22, Y+49	; 0x31
    2646:	7a a9       	ldd	r23, Y+50	; 0x32
    2648:	8b a9       	ldd	r24, Y+51	; 0x33
    264a:	9c a9       	ldd	r25, Y+52	; 0x34
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	3f ef       	ldi	r19, 0xFF	; 255
    2650:	4f e7       	ldi	r20, 0x7F	; 127
    2652:	57 e4       	ldi	r21, 0x47	; 71
    2654:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2658:	18 16       	cp	r1, r24
    265a:	4c f5       	brge	.+82     	; 0x26ae <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265c:	6d a9       	ldd	r22, Y+53	; 0x35
    265e:	7e a9       	ldd	r23, Y+54	; 0x36
    2660:	8f a9       	ldd	r24, Y+55	; 0x37
    2662:	98 ad       	ldd	r25, Y+56	; 0x38
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e2       	ldi	r20, 0x20	; 32
    266a:	51 e4       	ldi	r21, 0x41	; 65
    266c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	98 ab       	std	Y+48, r25	; 0x30
    2682:	8f a7       	std	Y+47, r24	; 0x2f
    2684:	0f c0       	rjmp	.+30     	; 0x26a4 <HLCD_voidSendData+0xee>
    2686:	88 ec       	ldi	r24, 0xC8	; 200
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	9e a7       	std	Y+46, r25	; 0x2e
    268c:	8d a7       	std	Y+45, r24	; 0x2d
    268e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2690:	9e a5       	ldd	r25, Y+46	; 0x2e
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <HLCD_voidSendData+0xdc>
    2696:	9e a7       	std	Y+46, r25	; 0x2e
    2698:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8f a5       	ldd	r24, Y+47	; 0x2f
    269c:	98 a9       	ldd	r25, Y+48	; 0x30
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	98 ab       	std	Y+48, r25	; 0x30
    26a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a6:	98 a9       	ldd	r25, Y+48	; 0x30
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	69 f7       	brne	.-38     	; 0x2686 <HLCD_voidSendData+0xd0>
    26ac:	14 c0       	rjmp	.+40     	; 0x26d6 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	69 a9       	ldd	r22, Y+49	; 0x31
    26b0:	7a a9       	ldd	r23, Y+50	; 0x32
    26b2:	8b a9       	ldd	r24, Y+51	; 0x33
    26b4:	9c a9       	ldd	r25, Y+52	; 0x34
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	98 ab       	std	Y+48, r25	; 0x30
    26c0:	8f a7       	std	Y+47, r24	; 0x2f
    26c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c4:	98 a9       	ldd	r25, Y+48	; 0x30
    26c6:	9c a7       	std	Y+44, r25	; 0x2c
    26c8:	8b a7       	std	Y+43, r24	; 0x2b
    26ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    26cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <HLCD_voidSendData+0x118>
    26d2:	9c a7       	std	Y+44, r25	; 0x2c
    26d4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);
		CTL_BUS &=~(1<<LCD_EN);
    26d6:	a8 e3       	ldi	r26, 0x38	; 56
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e8 e3       	ldi	r30, 0x38	; 56
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	87 7f       	andi	r24, 0xF7	; 247
    26e2:	8c 93       	st	X, r24
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 ea       	ldi	r26, 0xA0	; 160
    26ea:	b0 e4       	ldi	r27, 0x40	; 64
    26ec:	8f a3       	std	Y+39, r24	; 0x27
    26ee:	98 a7       	std	Y+40, r25	; 0x28
    26f0:	a9 a7       	std	Y+41, r26	; 0x29
    26f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	6f a1       	ldd	r22, Y+39	; 0x27
    26f6:	78 a5       	ldd	r23, Y+40	; 0x28
    26f8:	89 a5       	ldd	r24, Y+41	; 0x29
    26fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a ef       	ldi	r20, 0xFA	; 250
    2702:	54 e4       	ldi	r21, 0x44	; 68
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	8b a3       	std	Y+35, r24	; 0x23
    270e:	9c a3       	std	Y+36, r25	; 0x24
    2710:	ad a3       	std	Y+37, r26	; 0x25
    2712:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2714:	6b a1       	ldd	r22, Y+35	; 0x23
    2716:	7c a1       	ldd	r23, Y+36	; 0x24
    2718:	8d a1       	ldd	r24, Y+37	; 0x25
    271a:	9e a1       	ldd	r25, Y+38	; 0x26
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <HLCD_voidSendData+0x180>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9a a3       	std	Y+34, r25	; 0x22
    2732:	89 a3       	std	Y+33, r24	; 0x21
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <HLCD_voidSendData+0x1fe>
	else if (__tmp > 65535)
    2736:	6b a1       	ldd	r22, Y+35	; 0x23
    2738:	7c a1       	ldd	r23, Y+36	; 0x24
    273a:	8d a1       	ldd	r24, Y+37	; 0x25
    273c:	9e a1       	ldd	r25, Y+38	; 0x26
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <HLCD_voidSendData+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	6f a1       	ldd	r22, Y+39	; 0x27
    2750:	78 a5       	ldd	r23, Y+40	; 0x28
    2752:	89 a5       	ldd	r24, Y+41	; 0x29
    2754:	9a a5       	ldd	r25, Y+42	; 0x2a
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9a a3       	std	Y+34, r25	; 0x22
    2774:	89 a3       	std	Y+33, r24	; 0x21
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <HLCD_voidSendData+0x1e0>
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	98 a3       	std	Y+32, r25	; 0x20
    277e:	8f 8f       	std	Y+31, r24	; 0x1f
    2780:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2782:	98 a1       	ldd	r25, Y+32	; 0x20
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <HLCD_voidSendData+0x1ce>
    2788:	98 a3       	std	Y+32, r25	; 0x20
    278a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	89 a1       	ldd	r24, Y+33	; 0x21
    278e:	9a a1       	ldd	r25, Y+34	; 0x22
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9a a3       	std	Y+34, r25	; 0x22
    2794:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	89 a1       	ldd	r24, Y+33	; 0x21
    2798:	9a a1       	ldd	r25, Y+34	; 0x22
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <HLCD_voidSendData+0x1c2>
    279e:	14 c0       	rjmp	.+40     	; 0x27c8 <HLCD_voidSendData+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	6b a1       	ldd	r22, Y+35	; 0x23
    27a2:	7c a1       	ldd	r23, Y+36	; 0x24
    27a4:	8d a1       	ldd	r24, Y+37	; 0x25
    27a6:	9e a1       	ldd	r25, Y+38	; 0x26
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9a a3       	std	Y+34, r25	; 0x22
    27b2:	89 a3       	std	Y+33, r24	; 0x21
    27b4:	89 a1       	ldd	r24, Y+33	; 0x21
    27b6:	9a a1       	ldd	r25, Y+34	; 0x22
    27b8:	9e 8f       	std	Y+30, r25	; 0x1e
    27ba:	8d 8f       	std	Y+29, r24	; 0x1d
    27bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <HLCD_voidSendData+0x20a>
    27c4:	9e 8f       	std	Y+30, r25	; 0x1e
    27c6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);
		DATA_BUS=(( A_u8Data & 0b00001111)<<4);
    27c8:	eb e3       	ldi	r30, 0x3B	; 59
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	89 ad       	ldd	r24, Y+57	; 0x39
    27ce:	88 2f       	mov	r24, r24
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	82 95       	swap	r24
    27d4:	92 95       	swap	r25
    27d6:	90 7f       	andi	r25, 0xF0	; 240
    27d8:	98 27       	eor	r25, r24
    27da:	80 7f       	andi	r24, 0xF0	; 240
    27dc:	98 27       	eor	r25, r24
    27de:	80 83       	st	Z, r24
		CTL_BUS |=(1<<LCD_EN);
    27e0:	a8 e3       	ldi	r26, 0x38	; 56
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e8 e3       	ldi	r30, 0x38	; 56
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	88 60       	ori	r24, 0x08	; 8
    27ec:	8c 93       	st	X, r24
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 ea       	ldi	r26, 0xA0	; 160
    27f4:	b0 e4       	ldi	r27, 0x40	; 64
    27f6:	89 8f       	std	Y+25, r24	; 0x19
    27f8:	9a 8f       	std	Y+26, r25	; 0x1a
    27fa:	ab 8f       	std	Y+27, r26	; 0x1b
    27fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2800:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2802:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2804:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a ef       	ldi	r20, 0xFA	; 250
    280c:	54 e4       	ldi	r21, 0x44	; 68
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	8d 8b       	std	Y+21, r24	; 0x15
    2818:	9e 8b       	std	Y+22, r25	; 0x16
    281a:	af 8b       	std	Y+23, r26	; 0x17
    281c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    281e:	6d 89       	ldd	r22, Y+21	; 0x15
    2820:	7e 89       	ldd	r23, Y+22	; 0x16
    2822:	8f 89       	ldd	r24, Y+23	; 0x17
    2824:	98 8d       	ldd	r25, Y+24	; 0x18
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	2c f4       	brge	.+10     	; 0x2840 <HLCD_voidSendData+0x28a>
		__ticks = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9c 8b       	std	Y+20, r25	; 0x14
    283c:	8b 8b       	std	Y+19, r24	; 0x13
    283e:	3f c0       	rjmp	.+126    	; 0x28be <HLCD_voidSendData+0x308>
	else if (__tmp > 65535)
    2840:	6d 89       	ldd	r22, Y+21	; 0x15
    2842:	7e 89       	ldd	r23, Y+22	; 0x16
    2844:	8f 89       	ldd	r24, Y+23	; 0x17
    2846:	98 8d       	ldd	r25, Y+24	; 0x18
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	3f ef       	ldi	r19, 0xFF	; 255
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	57 e4       	ldi	r21, 0x47	; 71
    2850:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2854:	18 16       	cp	r1, r24
    2856:	4c f5       	brge	.+82     	; 0x28aa <HLCD_voidSendData+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2858:	69 8d       	ldd	r22, Y+25	; 0x19
    285a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    285c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e2       	ldi	r20, 0x20	; 32
    2866:	51 e4       	ldi	r21, 0x41	; 65
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9c 8b       	std	Y+20, r25	; 0x14
    287e:	8b 8b       	std	Y+19, r24	; 0x13
    2880:	0f c0       	rjmp	.+30     	; 0x28a0 <HLCD_voidSendData+0x2ea>
    2882:	88 ec       	ldi	r24, 0xC8	; 200
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9a 8b       	std	Y+18, r25	; 0x12
    2888:	89 8b       	std	Y+17, r24	; 0x11
    288a:	89 89       	ldd	r24, Y+17	; 0x11
    288c:	9a 89       	ldd	r25, Y+18	; 0x12
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <HLCD_voidSendData+0x2d8>
    2892:	9a 8b       	std	Y+18, r25	; 0x12
    2894:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2896:	8b 89       	ldd	r24, Y+19	; 0x13
    2898:	9c 89       	ldd	r25, Y+20	; 0x14
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	9c 8b       	std	Y+20, r25	; 0x14
    289e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a0:	8b 89       	ldd	r24, Y+19	; 0x13
    28a2:	9c 89       	ldd	r25, Y+20	; 0x14
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	69 f7       	brne	.-38     	; 0x2882 <HLCD_voidSendData+0x2cc>
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <HLCD_voidSendData+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28aa:	6d 89       	ldd	r22, Y+21	; 0x15
    28ac:	7e 89       	ldd	r23, Y+22	; 0x16
    28ae:	8f 89       	ldd	r24, Y+23	; 0x17
    28b0:	98 8d       	ldd	r25, Y+24	; 0x18
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9c 8b       	std	Y+20, r25	; 0x14
    28bc:	8b 8b       	std	Y+19, r24	; 0x13
    28be:	8b 89       	ldd	r24, Y+19	; 0x13
    28c0:	9c 89       	ldd	r25, Y+20	; 0x14
    28c2:	98 8b       	std	Y+16, r25	; 0x10
    28c4:	8f 87       	std	Y+15, r24	; 0x0f
    28c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c8:	98 89       	ldd	r25, Y+16	; 0x10
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <HLCD_voidSendData+0x314>
    28ce:	98 8b       	std	Y+16, r25	; 0x10
    28d0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		CTL_BUS &=~(1<<LCD_EN);
    28d2:	a8 e3       	ldi	r26, 0x38	; 56
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	e8 e3       	ldi	r30, 0x38	; 56
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	87 7f       	andi	r24, 0xF7	; 247
    28de:	8c 93       	st	X, r24
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 ea       	ldi	r26, 0xA0	; 160
    28e6:	b0 e4       	ldi	r27, 0x40	; 64
    28e8:	8b 87       	std	Y+11, r24	; 0x0b
    28ea:	9c 87       	std	Y+12, r25	; 0x0c
    28ec:	ad 87       	std	Y+13, r26	; 0x0d
    28ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	4a ef       	ldi	r20, 0xFA	; 250
    28fe:	54 e4       	ldi	r21, 0x44	; 68
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	8f 83       	std	Y+7, r24	; 0x07
    290a:	98 87       	std	Y+8, r25	; 0x08
    290c:	a9 87       	std	Y+9, r26	; 0x09
    290e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2910:	6f 81       	ldd	r22, Y+7	; 0x07
    2912:	78 85       	ldd	r23, Y+8	; 0x08
    2914:	89 85       	ldd	r24, Y+9	; 0x09
    2916:	9a 85       	ldd	r25, Y+10	; 0x0a
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e8       	ldi	r20, 0x80	; 128
    291e:	5f e3       	ldi	r21, 0x3F	; 63
    2920:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2924:	88 23       	and	r24, r24
    2926:	2c f4       	brge	.+10     	; 0x2932 <HLCD_voidSendData+0x37c>
		__ticks = 1;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	9e 83       	std	Y+6, r25	; 0x06
    292e:	8d 83       	std	Y+5, r24	; 0x05
    2930:	3f c0       	rjmp	.+126    	; 0x29b0 <HLCD_voidSendData+0x3fa>
	else if (__tmp > 65535)
    2932:	6f 81       	ldd	r22, Y+7	; 0x07
    2934:	78 85       	ldd	r23, Y+8	; 0x08
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	57 e4       	ldi	r21, 0x47	; 71
    2942:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	4c f5       	brge	.+82     	; 0x299c <HLCD_voidSendData+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294a:	6b 85       	ldd	r22, Y+11	; 0x0b
    294c:	7c 85       	ldd	r23, Y+12	; 0x0c
    294e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2950:	9e 85       	ldd	r25, Y+14	; 0x0e
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e2       	ldi	r20, 0x20	; 32
    2958:	51 e4       	ldi	r21, 0x41	; 65
    295a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9e 83       	std	Y+6, r25	; 0x06
    2970:	8d 83       	std	Y+5, r24	; 0x05
    2972:	0f c0       	rjmp	.+30     	; 0x2992 <HLCD_voidSendData+0x3dc>
    2974:	88 ec       	ldi	r24, 0xC8	; 200
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9c 83       	std	Y+4, r25	; 0x04
    297a:	8b 83       	std	Y+3, r24	; 0x03
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <HLCD_voidSendData+0x3ca>
    2984:	9c 83       	std	Y+4, r25	; 0x04
    2986:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	9e 83       	std	Y+6, r25	; 0x06
    2990:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	9e 81       	ldd	r25, Y+6	; 0x06
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	69 f7       	brne	.-38     	; 0x2974 <HLCD_voidSendData+0x3be>
    299a:	14 c0       	rjmp	.+40     	; 0x29c4 <HLCD_voidSendData+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299c:	6f 81       	ldd	r22, Y+7	; 0x07
    299e:	78 85       	ldd	r23, Y+8	; 0x08
    29a0:	89 85       	ldd	r24, Y+9	; 0x09
    29a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	9e 83       	std	Y+6, r25	; 0x06
    29ae:	8d 83       	std	Y+5, r24	; 0x05
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	9a 81       	ldd	r25, Y+2	; 0x02
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	f1 f7       	brne	.-4      	; 0x29bc <HLCD_voidSendData+0x406>
    29c0:	9a 83       	std	Y+2, r25	; 0x02
    29c2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
}
    29c4:	e9 96       	adiw	r28, 0x39	; 57
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <HLCD_voidInit>:

void HLCD_voidInit() {
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	e8 97       	sbiw	r28, 0x38	; 56
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
    29ea:	ea e3       	ldi	r30, 0x3A	; 58
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 ef       	ldi	r24, 0xF0	; 240
    29f0:	80 83       	st	Z, r24
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
    29f2:	a7 e3       	ldi	r26, 0x37	; 55
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	e7 e3       	ldi	r30, 0x37	; 55
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	8e 60       	ori	r24, 0x0E	; 14
    29fe:	8c 93       	st	X, r24

	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
    2a00:	eb e3       	ldi	r30, 0x3B	; 59
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 e2       	ldi	r24, 0x20	; 32
    2a06:	80 83       	st	Z, r24
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
    2a08:	a8 e3       	ldi	r26, 0x38	; 56
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e8 e3       	ldi	r30, 0x38	; 56
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	88 60       	ori	r24, 0x08	; 8
    2a14:	8c 93       	st	X, r24
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	a0 ea       	ldi	r26, 0xA0	; 160
    2a1c:	b0 e4       	ldi	r27, 0x40	; 64
    2a1e:	8d ab       	std	Y+53, r24	; 0x35
    2a20:	9e ab       	std	Y+54, r25	; 0x36
    2a22:	af ab       	std	Y+55, r26	; 0x37
    2a24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a26:	6d a9       	ldd	r22, Y+53	; 0x35
    2a28:	7e a9       	ldd	r23, Y+54	; 0x36
    2a2a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a2c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	4a ef       	ldi	r20, 0xFA	; 250
    2a34:	54 e4       	ldi	r21, 0x44	; 68
    2a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	89 ab       	std	Y+49, r24	; 0x31
    2a40:	9a ab       	std	Y+50, r25	; 0x32
    2a42:	ab ab       	std	Y+51, r26	; 0x33
    2a44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a46:	69 a9       	ldd	r22, Y+49	; 0x31
    2a48:	7a a9       	ldd	r23, Y+50	; 0x32
    2a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e8       	ldi	r20, 0x80	; 128
    2a54:	5f e3       	ldi	r21, 0x3F	; 63
    2a56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a5a:	88 23       	and	r24, r24
    2a5c:	2c f4       	brge	.+10     	; 0x2a68 <HLCD_voidInit+0x92>
		__ticks = 1;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	98 ab       	std	Y+48, r25	; 0x30
    2a64:	8f a7       	std	Y+47, r24	; 0x2f
    2a66:	3f c0       	rjmp	.+126    	; 0x2ae6 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    2a68:	69 a9       	ldd	r22, Y+49	; 0x31
    2a6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	3f ef       	ldi	r19, 0xFF	; 255
    2a74:	4f e7       	ldi	r20, 0x7F	; 127
    2a76:	57 e4       	ldi	r21, 0x47	; 71
    2a78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a7c:	18 16       	cp	r1, r24
    2a7e:	4c f5       	brge	.+82     	; 0x2ad2 <HLCD_voidInit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a80:	6d a9       	ldd	r22, Y+53	; 0x35
    2a82:	7e a9       	ldd	r23, Y+54	; 0x36
    2a84:	8f a9       	ldd	r24, Y+55	; 0x37
    2a86:	98 ad       	ldd	r25, Y+56	; 0x38
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e2       	ldi	r20, 0x20	; 32
    2a8e:	51 e4       	ldi	r21, 0x41	; 65
    2a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	98 ab       	std	Y+48, r25	; 0x30
    2aa6:	8f a7       	std	Y+47, r24	; 0x2f
    2aa8:	0f c0       	rjmp	.+30     	; 0x2ac8 <HLCD_voidInit+0xf2>
    2aaa:	88 ec       	ldi	r24, 0xC8	; 200
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	9e a7       	std	Y+46, r25	; 0x2e
    2ab0:	8d a7       	std	Y+45, r24	; 0x2d
    2ab2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ab4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <HLCD_voidInit+0xe0>
    2aba:	9e a7       	std	Y+46, r25	; 0x2e
    2abc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	98 ab       	std	Y+48, r25	; 0x30
    2ac6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aca:	98 a9       	ldd	r25, Y+48	; 0x30
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	69 f7       	brne	.-38     	; 0x2aaa <HLCD_voidInit+0xd4>
    2ad0:	14 c0       	rjmp	.+40     	; 0x2afa <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    2ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	98 ab       	std	Y+48, r25	; 0x30
    2ae4:	8f a7       	std	Y+47, r24	; 0x2f
    2ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aea:	9c a7       	std	Y+44, r25	; 0x2c
    2aec:	8b a7       	std	Y+43, r24	; 0x2b
    2aee:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <HLCD_voidInit+0x11c>
    2af6:	9c a7       	std	Y+44, r25	; 0x2c
    2af8:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(5);
		CTL_BUS &=~(1<<LCD_EN);
    2afa:	a8 e3       	ldi	r26, 0x38	; 56
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	e8 e3       	ldi	r30, 0x38	; 56
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	87 7f       	andi	r24, 0xF7	; 247
    2b06:	8c 93       	st	X, r24
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 ea       	ldi	r26, 0xA0	; 160
    2b0e:	b0 e4       	ldi	r27, 0x40	; 64
    2b10:	8f a3       	std	Y+39, r24	; 0x27
    2b12:	98 a7       	std	Y+40, r25	; 0x28
    2b14:	a9 a7       	std	Y+41, r26	; 0x29
    2b16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b18:	6f a1       	ldd	r22, Y+39	; 0x27
    2b1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	4a ef       	ldi	r20, 0xFA	; 250
    2b26:	54 e4       	ldi	r21, 0x44	; 68
    2b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	8b a3       	std	Y+35, r24	; 0x23
    2b32:	9c a3       	std	Y+36, r25	; 0x24
    2b34:	ad a3       	std	Y+37, r26	; 0x25
    2b36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b38:	6b a1       	ldd	r22, Y+35	; 0x23
    2b3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e8       	ldi	r20, 0x80	; 128
    2b46:	5f e3       	ldi	r21, 0x3F	; 63
    2b48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b4c:	88 23       	and	r24, r24
    2b4e:	2c f4       	brge	.+10     	; 0x2b5a <HLCD_voidInit+0x184>
		__ticks = 1;
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	9a a3       	std	Y+34, r25	; 0x22
    2b56:	89 a3       	std	Y+33, r24	; 0x21
    2b58:	3f c0       	rjmp	.+126    	; 0x2bd8 <HLCD_voidInit+0x202>
	else if (__tmp > 65535)
    2b5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b60:	9e a1       	ldd	r25, Y+38	; 0x26
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	3f ef       	ldi	r19, 0xFF	; 255
    2b66:	4f e7       	ldi	r20, 0x7F	; 127
    2b68:	57 e4       	ldi	r21, 0x47	; 71
    2b6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b6e:	18 16       	cp	r1, r24
    2b70:	4c f5       	brge	.+82     	; 0x2bc4 <HLCD_voidInit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b72:	6f a1       	ldd	r22, Y+39	; 0x27
    2b74:	78 a5       	ldd	r23, Y+40	; 0x28
    2b76:	89 a5       	ldd	r24, Y+41	; 0x29
    2b78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e2       	ldi	r20, 0x20	; 32
    2b80:	51 e4       	ldi	r21, 0x41	; 65
    2b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	9a a3       	std	Y+34, r25	; 0x22
    2b98:	89 a3       	std	Y+33, r24	; 0x21
    2b9a:	0f c0       	rjmp	.+30     	; 0x2bba <HLCD_voidInit+0x1e4>
    2b9c:	88 ec       	ldi	r24, 0xC8	; 200
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	98 a3       	std	Y+32, r25	; 0x20
    2ba2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ba4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ba6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	f1 f7       	brne	.-4      	; 0x2ba8 <HLCD_voidInit+0x1d2>
    2bac:	98 a3       	std	Y+32, r25	; 0x20
    2bae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	9a a3       	std	Y+34, r25	; 0x22
    2bb8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bba:	89 a1       	ldd	r24, Y+33	; 0x21
    2bbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	69 f7       	brne	.-38     	; 0x2b9c <HLCD_voidInit+0x1c6>
    2bc2:	14 c0       	rjmp	.+40     	; 0x2bec <HLCD_voidInit+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc4:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc6:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc8:	8d a1       	ldd	r24, Y+37	; 0x25
    2bca:	9e a1       	ldd	r25, Y+38	; 0x26
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9a a3       	std	Y+34, r25	; 0x22
    2bd6:	89 a3       	std	Y+33, r24	; 0x21
    2bd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bda:	9a a1       	ldd	r25, Y+34	; 0x22
    2bdc:	9e 8f       	std	Y+30, r25	; 0x1e
    2bde:	8d 8f       	std	Y+29, r24	; 0x1d
    2be0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2be2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <HLCD_voidInit+0x20e>
    2be8:	9e 8f       	std	Y+30, r25	; 0x1e
    2bea:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);

		 HLCD_voidSendCommand(LCD_CMD_4BIT_2ROW_5X7);
    2bec:	88 e2       	ldi	r24, 0x28	; 40
    2bee:	0e 94 cb 10 	call	0x2196	; 0x2196 <HLCD_voidSendCommand>
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a0 ea       	ldi	r26, 0xA0	; 160
    2bf8:	b0 e4       	ldi	r27, 0x40	; 64
    2bfa:	89 8f       	std	Y+25, r24	; 0x19
    2bfc:	9a 8f       	std	Y+26, r25	; 0x1a
    2bfe:	ab 8f       	std	Y+27, r26	; 0x1b
    2c00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c02:	69 8d       	ldd	r22, Y+25	; 0x19
    2c04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	4a ef       	ldi	r20, 0xFA	; 250
    2c10:	54 e4       	ldi	r21, 0x44	; 68
    2c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	8d 8b       	std	Y+21, r24	; 0x15
    2c1c:	9e 8b       	std	Y+22, r25	; 0x16
    2c1e:	af 8b       	std	Y+23, r26	; 0x17
    2c20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c22:	6d 89       	ldd	r22, Y+21	; 0x15
    2c24:	7e 89       	ldd	r23, Y+22	; 0x16
    2c26:	8f 89       	ldd	r24, Y+23	; 0x17
    2c28:	98 8d       	ldd	r25, Y+24	; 0x18
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e8       	ldi	r20, 0x80	; 128
    2c30:	5f e3       	ldi	r21, 0x3F	; 63
    2c32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c36:	88 23       	and	r24, r24
    2c38:	2c f4       	brge	.+10     	; 0x2c44 <HLCD_voidInit+0x26e>
		__ticks = 1;
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	9c 8b       	std	Y+20, r25	; 0x14
    2c40:	8b 8b       	std	Y+19, r24	; 0x13
    2c42:	3f c0       	rjmp	.+126    	; 0x2cc2 <HLCD_voidInit+0x2ec>
	else if (__tmp > 65535)
    2c44:	6d 89       	ldd	r22, Y+21	; 0x15
    2c46:	7e 89       	ldd	r23, Y+22	; 0x16
    2c48:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	3f ef       	ldi	r19, 0xFF	; 255
    2c50:	4f e7       	ldi	r20, 0x7F	; 127
    2c52:	57 e4       	ldi	r21, 0x47	; 71
    2c54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c58:	18 16       	cp	r1, r24
    2c5a:	4c f5       	brge	.+82     	; 0x2cae <HLCD_voidInit+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e2       	ldi	r20, 0x20	; 32
    2c6a:	51 e4       	ldi	r21, 0x41	; 65
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	bc 01       	movw	r22, r24
    2c76:	cd 01       	movw	r24, r26
    2c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	9c 8b       	std	Y+20, r25	; 0x14
    2c82:	8b 8b       	std	Y+19, r24	; 0x13
    2c84:	0f c0       	rjmp	.+30     	; 0x2ca4 <HLCD_voidInit+0x2ce>
    2c86:	88 ec       	ldi	r24, 0xC8	; 200
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	9a 8b       	std	Y+18, r25	; 0x12
    2c8c:	89 8b       	std	Y+17, r24	; 0x11
    2c8e:	89 89       	ldd	r24, Y+17	; 0x11
    2c90:	9a 89       	ldd	r25, Y+18	; 0x12
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <HLCD_voidInit+0x2bc>
    2c96:	9a 8b       	std	Y+18, r25	; 0x12
    2c98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	9c 8b       	std	Y+20, r25	; 0x14
    2ca2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	69 f7       	brne	.-38     	; 0x2c86 <HLCD_voidInit+0x2b0>
    2cac:	14 c0       	rjmp	.+40     	; 0x2cd6 <HLCD_voidInit+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cae:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb0:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	9c 8b       	std	Y+20, r25	; 0x14
    2cc0:	8b 8b       	std	Y+19, r24	; 0x13
    2cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc6:	98 8b       	std	Y+16, r25	; 0x10
    2cc8:	8f 87       	std	Y+15, r24	; 0x0f
    2cca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ccc:	98 89       	ldd	r25, Y+16	; 0x10
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <HLCD_voidInit+0x2f8>
    2cd2:	98 8b       	std	Y+16, r25	; 0x10
    2cd4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		 HLCD_voidSendCommand(LCD_CMD_DISPLAY_CURSOR_BLINK);
    2cd6:	8f e0       	ldi	r24, 0x0F	; 15
    2cd8:	0e 94 cb 10 	call	0x2196	; 0x2196 <HLCD_voidSendCommand>
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	a0 ea       	ldi	r26, 0xA0	; 160
    2ce2:	b0 e4       	ldi	r27, 0x40	; 64
    2ce4:	8b 87       	std	Y+11, r24	; 0x0b
    2ce6:	9c 87       	std	Y+12, r25	; 0x0c
    2ce8:	ad 87       	std	Y+13, r26	; 0x0d
    2cea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a ef       	ldi	r20, 0xFA	; 250
    2cfa:	54 e4       	ldi	r21, 0x44	; 68
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	8f 83       	std	Y+7, r24	; 0x07
    2d06:	98 87       	std	Y+8, r25	; 0x08
    2d08:	a9 87       	std	Y+9, r26	; 0x09
    2d0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0e:	78 85       	ldd	r23, Y+8	; 0x08
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	2c f4       	brge	.+10     	; 0x2d2e <HLCD_voidInit+0x358>
		__ticks = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	9e 83       	std	Y+6, r25	; 0x06
    2d2a:	8d 83       	std	Y+5, r24	; 0x05
    2d2c:	3f c0       	rjmp	.+126    	; 0x2dac <HLCD_voidInit+0x3d6>
	else if (__tmp > 65535)
    2d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d30:	78 85       	ldd	r23, Y+8	; 0x08
    2d32:	89 85       	ldd	r24, Y+9	; 0x09
    2d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	4c f5       	brge	.+82     	; 0x2d98 <HLCD_voidInit+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e2       	ldi	r20, 0x20	; 32
    2d54:	51 e4       	ldi	r21, 0x41	; 65
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9e 83       	std	Y+6, r25	; 0x06
    2d6c:	8d 83       	std	Y+5, r24	; 0x05
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <HLCD_voidInit+0x3b8>
    2d70:	88 ec       	ldi	r24, 0xC8	; 200
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9c 83       	std	Y+4, r25	; 0x04
    2d76:	8b 83       	std	Y+3, r24	; 0x03
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <HLCD_voidInit+0x3a6>
    2d80:	9c 83       	std	Y+4, r25	; 0x04
    2d82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	9e 83       	std	Y+6, r25	; 0x06
    2d8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d90:	9e 81       	ldd	r25, Y+6	; 0x06
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	69 f7       	brne	.-38     	; 0x2d70 <HLCD_voidInit+0x39a>
    2d96:	14 c0       	rjmp	.+40     	; 0x2dc0 <HLCD_voidInit+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d98:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9a:	78 85       	ldd	r23, Y+8	; 0x08
    2d9c:	89 85       	ldd	r24, Y+9	; 0x09
    2d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	9e 83       	std	Y+6, r25	; 0x06
    2daa:	8d 83       	std	Y+5, r24	; 0x05
    2dac:	8d 81       	ldd	r24, Y+5	; 0x05
    2dae:	9e 81       	ldd	r25, Y+6	; 0x06
    2db0:	9a 83       	std	Y+2, r25	; 0x02
    2db2:	89 83       	std	Y+1, r24	; 0x01
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	9a 81       	ldd	r25, Y+2	; 0x02
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <HLCD_voidInit+0x3e2>
    2dbc:	9a 83       	std	Y+2, r25	; 0x02
    2dbe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
		 HLCD_voidSendCommand(0x80);
    2dc0:	80 e8       	ldi	r24, 0x80	; 128
    2dc2:	0e 94 cb 10 	call	0x2196	; 0x2196 <HLCD_voidSendCommand>
}
    2dc6:	e8 96       	adiw	r28, 0x38	; 56
    2dc8:	0f b6       	in	r0, 0x3f	; 63
    2dca:	f8 94       	cli
    2dcc:	de bf       	out	0x3e, r29	; 62
    2dce:	0f be       	out	0x3f, r0	; 63
    2dd0:	cd bf       	out	0x3d, r28	; 61
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	08 95       	ret

00002dd8 <HLCD_voidClearScreen>:



void HLCD_voidClearScreen() {
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
    2de0:	2e 97       	sbiw	r28, 0x0e	; 14
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61

	 HLCD_voidSendCommand(LCD_CMD_CLEAR_DISPLAY);
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	0e 94 cb 10 	call	0x2196	; 0x2196 <HLCD_voidSendCommand>
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	a0 ea       	ldi	r26, 0xA0	; 160
    2df8:	b0 e4       	ldi	r27, 0x40	; 64
    2dfa:	8b 87       	std	Y+11, r24	; 0x0b
    2dfc:	9c 87       	std	Y+12, r25	; 0x0c
    2dfe:	ad 87       	std	Y+13, r26	; 0x0d
    2e00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	4a ef       	ldi	r20, 0xFA	; 250
    2e10:	54 e4       	ldi	r21, 0x44	; 68
    2e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	8f 83       	std	Y+7, r24	; 0x07
    2e1c:	98 87       	std	Y+8, r25	; 0x08
    2e1e:	a9 87       	std	Y+9, r26	; 0x09
    2e20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e22:	6f 81       	ldd	r22, Y+7	; 0x07
    2e24:	78 85       	ldd	r23, Y+8	; 0x08
    2e26:	89 85       	ldd	r24, Y+9	; 0x09
    2e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e8       	ldi	r20, 0x80	; 128
    2e30:	5f e3       	ldi	r21, 0x3F	; 63
    2e32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e36:	88 23       	and	r24, r24
    2e38:	2c f4       	brge	.+10     	; 0x2e44 <HLCD_voidClearScreen+0x6c>
		__ticks = 1;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	9e 83       	std	Y+6, r25	; 0x06
    2e40:	8d 83       	std	Y+5, r24	; 0x05
    2e42:	3f c0       	rjmp	.+126    	; 0x2ec2 <HLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2e44:	6f 81       	ldd	r22, Y+7	; 0x07
    2e46:	78 85       	ldd	r23, Y+8	; 0x08
    2e48:	89 85       	ldd	r24, Y+9	; 0x09
    2e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	3f ef       	ldi	r19, 0xFF	; 255
    2e50:	4f e7       	ldi	r20, 0x7F	; 127
    2e52:	57 e4       	ldi	r21, 0x47	; 71
    2e54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e58:	18 16       	cp	r1, r24
    2e5a:	4c f5       	brge	.+82     	; 0x2eae <HLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e2       	ldi	r20, 0x20	; 32
    2e6a:	51 e4       	ldi	r21, 0x41	; 65
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	bc 01       	movw	r22, r24
    2e76:	cd 01       	movw	r24, r26
    2e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	9e 83       	std	Y+6, r25	; 0x06
    2e82:	8d 83       	std	Y+5, r24	; 0x05
    2e84:	0f c0       	rjmp	.+30     	; 0x2ea4 <HLCD_voidClearScreen+0xcc>
    2e86:	88 ec       	ldi	r24, 0xC8	; 200
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	9c 83       	std	Y+4, r25	; 0x04
    2e8c:	8b 83       	std	Y+3, r24	; 0x03
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	9c 81       	ldd	r25, Y+4	; 0x04
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <HLCD_voidClearScreen+0xba>
    2e96:	9c 83       	std	Y+4, r25	; 0x04
    2e98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	9e 83       	std	Y+6, r25	; 0x06
    2ea2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	69 f7       	brne	.-38     	; 0x2e86 <HLCD_voidClearScreen+0xae>
    2eac:	14 c0       	rjmp	.+40     	; 0x2ed6 <HLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eae:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb0:	78 85       	ldd	r23, Y+8	; 0x08
    2eb2:	89 85       	ldd	r24, Y+9	; 0x09
    2eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	9e 83       	std	Y+6, r25	; 0x06
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec6:	9a 83       	std	Y+2, r25	; 0x02
    2ec8:	89 83       	std	Y+1, r24	; 0x01
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <HLCD_voidClearScreen+0xf6>
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
}
    2ed6:	2e 96       	adiw	r28, 0x0e	; 14
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	f8 94       	cli
    2edc:	de bf       	out	0x3e, r29	; 62
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	cd bf       	out	0x3d, r28	; 61
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	08 95       	ret

00002ee8 <HLCD_voidGoTo>:

void HLCD_voidGoTo(u8 A_u8Row, u8 A_u8Col) {
    2ee8:	df 93       	push	r29
    2eea:	cf 93       	push	r28
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	6a 97       	sbiw	r28, 0x1a	; 26
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	89 8f       	std	Y+25, r24	; 0x19
    2efe:	6a 8f       	std	Y+26, r22	; 0x1a
	 HLCD_voidSendCommand((0x80|(A_u8Row<<6))+A_u8Col);
    2f00:	89 8d       	ldd	r24, Y+25	; 0x19
    2f02:	88 2f       	mov	r24, r24
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	00 24       	eor	r0, r0
    2f08:	96 95       	lsr	r25
    2f0a:	87 95       	ror	r24
    2f0c:	07 94       	ror	r0
    2f0e:	96 95       	lsr	r25
    2f10:	87 95       	ror	r24
    2f12:	07 94       	ror	r0
    2f14:	98 2f       	mov	r25, r24
    2f16:	80 2d       	mov	r24, r0
    2f18:	80 68       	ori	r24, 0x80	; 128
    2f1a:	98 2f       	mov	r25, r24
    2f1c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f1e:	89 0f       	add	r24, r25
    2f20:	0e 94 cb 10 	call	0x2196	; 0x2196 <HLCD_voidSendCommand>
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a8 e4       	ldi	r26, 0x48	; 72
    2f2a:	b2 e4       	ldi	r27, 0x42	; 66
    2f2c:	8d 8b       	std	Y+21, r24	; 0x15
    2f2e:	9e 8b       	std	Y+22, r25	; 0x16
    2f30:	af 8b       	std	Y+23, r26	; 0x17
    2f32:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f34:	6d 89       	ldd	r22, Y+21	; 0x15
    2f36:	7e 89       	ldd	r23, Y+22	; 0x16
    2f38:	8f 89       	ldd	r24, Y+23	; 0x17
    2f3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f3c:	2b ea       	ldi	r18, 0xAB	; 171
    2f3e:	3a ea       	ldi	r19, 0xAA	; 170
    2f40:	4a e2       	ldi	r20, 0x2A	; 42
    2f42:	50 e4       	ldi	r21, 0x40	; 64
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	89 8b       	std	Y+17, r24	; 0x11
    2f4e:	9a 8b       	std	Y+18, r25	; 0x12
    2f50:	ab 8b       	std	Y+19, r26	; 0x13
    2f52:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f54:	69 89       	ldd	r22, Y+17	; 0x11
    2f56:	7a 89       	ldd	r23, Y+18	; 0x12
    2f58:	8b 89       	ldd	r24, Y+19	; 0x13
    2f5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e8       	ldi	r20, 0x80	; 128
    2f62:	5f e3       	ldi	r21, 0x3F	; 63
    2f64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f68:	88 23       	and	r24, r24
    2f6a:	1c f4       	brge	.+6      	; 0x2f72 <HLCD_voidGoTo+0x8a>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	88 8b       	std	Y+16, r24	; 0x10
    2f70:	91 c0       	rjmp	.+290    	; 0x3094 <HLCD_voidGoTo+0x1ac>
	else if (__tmp > 255)
    2f72:	69 89       	ldd	r22, Y+17	; 0x11
    2f74:	7a 89       	ldd	r23, Y+18	; 0x12
    2f76:	8b 89       	ldd	r24, Y+19	; 0x13
    2f78:	9c 89       	ldd	r25, Y+20	; 0x14
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	4f e7       	ldi	r20, 0x7F	; 127
    2f80:	53 e4       	ldi	r21, 0x43	; 67
    2f82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f86:	18 16       	cp	r1, r24
    2f88:	0c f0       	brlt	.+2      	; 0x2f8c <HLCD_voidGoTo+0xa4>
    2f8a:	7b c0       	rjmp	.+246    	; 0x3082 <HLCD_voidGoTo+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2f8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f90:	8f 89       	ldd	r24, Y+23	; 0x17
    2f92:	98 8d       	ldd	r25, Y+24	; 0x18
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	4a e7       	ldi	r20, 0x7A	; 122
    2f9a:	54 e4       	ldi	r21, 0x44	; 68
    2f9c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	8c 87       	std	Y+12, r24	; 0x0c
    2fa6:	9d 87       	std	Y+13, r25	; 0x0d
    2fa8:	ae 87       	std	Y+14, r26	; 0x0e
    2faa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fac:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fae:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	4a ef       	ldi	r20, 0xFA	; 250
    2fba:	54 e4       	ldi	r21, 0x44	; 68
    2fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	88 87       	std	Y+8, r24	; 0x08
    2fc6:	99 87       	std	Y+9, r25	; 0x09
    2fc8:	aa 87       	std	Y+10, r26	; 0x0a
    2fca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2fcc:	68 85       	ldd	r22, Y+8	; 0x08
    2fce:	79 85       	ldd	r23, Y+9	; 0x09
    2fd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e8       	ldi	r20, 0x80	; 128
    2fda:	5f e3       	ldi	r21, 0x3F	; 63
    2fdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fe0:	88 23       	and	r24, r24
    2fe2:	2c f4       	brge	.+10     	; 0x2fee <HLCD_voidGoTo+0x106>
		__ticks = 1;
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	9f 83       	std	Y+7, r25	; 0x07
    2fea:	8e 83       	std	Y+6, r24	; 0x06
    2fec:	3f c0       	rjmp	.+126    	; 0x306c <HLCD_voidGoTo+0x184>
	else if (__tmp > 65535)
    2fee:	68 85       	ldd	r22, Y+8	; 0x08
    2ff0:	79 85       	ldd	r23, Y+9	; 0x09
    2ff2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	3f ef       	ldi	r19, 0xFF	; 255
    2ffa:	4f e7       	ldi	r20, 0x7F	; 127
    2ffc:	57 e4       	ldi	r21, 0x47	; 71
    2ffe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3002:	18 16       	cp	r1, r24
    3004:	4c f5       	brge	.+82     	; 0x3058 <HLCD_voidGoTo+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3006:	6c 85       	ldd	r22, Y+12	; 0x0c
    3008:	7d 85       	ldd	r23, Y+13	; 0x0d
    300a:	8e 85       	ldd	r24, Y+14	; 0x0e
    300c:	9f 85       	ldd	r25, Y+15	; 0x0f
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	40 e2       	ldi	r20, 0x20	; 32
    3014:	51 e4       	ldi	r21, 0x41	; 65
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	bc 01       	movw	r22, r24
    3020:	cd 01       	movw	r24, r26
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	9f 83       	std	Y+7, r25	; 0x07
    302c:	8e 83       	std	Y+6, r24	; 0x06
    302e:	0f c0       	rjmp	.+30     	; 0x304e <HLCD_voidGoTo+0x166>
    3030:	88 ec       	ldi	r24, 0xC8	; 200
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	9d 83       	std	Y+5, r25	; 0x05
    3036:	8c 83       	std	Y+4, r24	; 0x04
    3038:	8c 81       	ldd	r24, Y+4	; 0x04
    303a:	9d 81       	ldd	r25, Y+5	; 0x05
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <HLCD_voidGoTo+0x154>
    3040:	9d 83       	std	Y+5, r25	; 0x05
    3042:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3044:	8e 81       	ldd	r24, Y+6	; 0x06
    3046:	9f 81       	ldd	r25, Y+7	; 0x07
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	9f 83       	std	Y+7, r25	; 0x07
    304c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304e:	8e 81       	ldd	r24, Y+6	; 0x06
    3050:	9f 81       	ldd	r25, Y+7	; 0x07
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	69 f7       	brne	.-38     	; 0x3030 <HLCD_voidGoTo+0x148>
    3056:	24 c0       	rjmp	.+72     	; 0x30a0 <HLCD_voidGoTo+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3058:	68 85       	ldd	r22, Y+8	; 0x08
    305a:	79 85       	ldd	r23, Y+9	; 0x09
    305c:	8a 85       	ldd	r24, Y+10	; 0x0a
    305e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	9f 83       	std	Y+7, r25	; 0x07
    306a:	8e 83       	std	Y+6, r24	; 0x06
    306c:	8e 81       	ldd	r24, Y+6	; 0x06
    306e:	9f 81       	ldd	r25, Y+7	; 0x07
    3070:	9b 83       	std	Y+3, r25	; 0x03
    3072:	8a 83       	std	Y+2, r24	; 0x02
    3074:	8a 81       	ldd	r24, Y+2	; 0x02
    3076:	9b 81       	ldd	r25, Y+3	; 0x03
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <HLCD_voidGoTo+0x190>
    307c:	9b 83       	std	Y+3, r25	; 0x03
    307e:	8a 83       	std	Y+2, r24	; 0x02
    3080:	0f c0       	rjmp	.+30     	; 0x30a0 <HLCD_voidGoTo+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3082:	69 89       	ldd	r22, Y+17	; 0x11
    3084:	7a 89       	ldd	r23, Y+18	; 0x12
    3086:	8b 89       	ldd	r24, Y+19	; 0x13
    3088:	9c 89       	ldd	r25, Y+20	; 0x14
    308a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	88 8b       	std	Y+16, r24	; 0x10
    3094:	88 89       	ldd	r24, Y+16	; 0x10
    3096:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	8a 95       	dec	r24
    309c:	f1 f7       	brne	.-4      	; 0x309a <HLCD_voidGoTo+0x1b2>
    309e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us (50);
}
    30a0:	6a 96       	adiw	r28, 0x1a	; 26
    30a2:	0f b6       	in	r0, 0x3f	; 63
    30a4:	f8 94       	cli
    30a6:	de bf       	out	0x3e, r29	; 62
    30a8:	0f be       	out	0x3f, r0	; 63
    30aa:	cd bf       	out	0x3d, r28	; 61
    30ac:	cf 91       	pop	r28
    30ae:	df 91       	pop	r29
    30b0:	08 95       	ret

000030b2 <main>:
#include  "../HAL/ULTRASONIC/ultrasonic.h"
#include "../MCAL/EXTI/EXTI_Interface.h"
#include "../MCAL/GIE/GIE_Interface.h"


int main(){
    30b2:	df 93       	push	r29
    30b4:	cf 93       	push	r28
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	6c 97       	sbiw	r28, 0x1c	; 28
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	f8 94       	cli
    30c0:	de bf       	out	0x3e, r29	; 62
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	cd bf       	out	0x3d, r28	; 61

HLCD_voidInit();
    30c6:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <HLCD_voidInit>
HSNC_voidInit();
    30ca:	0e 94 ed 0b 	call	0x17da	; 0x17da <HSNC_voidInit>

MGIE_voidEnable();
    30ce:	0e 94 2f 07 	call	0xe5e	; 0xe5e <MGIE_voidEnable>

HLCD_voidSendString("Distance is ");
    30d2:	85 e6       	ldi	r24, 0x65	; 101
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	0e 94 a0 10 	call	0x2140	; 0x2140 <HLCD_voidSendString>
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	a0 e2       	ldi	r26, 0x20	; 32
    30e0:	b1 e4       	ldi	r27, 0x41	; 65
    30e2:	89 8f       	std	Y+25, r24	; 0x19
    30e4:	9a 8f       	std	Y+26, r25	; 0x1a
    30e6:	ab 8f       	std	Y+27, r26	; 0x1b
    30e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ea:	69 8d       	ldd	r22, Y+25	; 0x19
    30ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	4a ef       	ldi	r20, 0xFA	; 250
    30f8:	54 e4       	ldi	r21, 0x44	; 68
    30fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	8d 8b       	std	Y+21, r24	; 0x15
    3104:	9e 8b       	std	Y+22, r25	; 0x16
    3106:	af 8b       	std	Y+23, r26	; 0x17
    3108:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    310a:	6d 89       	ldd	r22, Y+21	; 0x15
    310c:	7e 89       	ldd	r23, Y+22	; 0x16
    310e:	8f 89       	ldd	r24, Y+23	; 0x17
    3110:	98 8d       	ldd	r25, Y+24	; 0x18
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e8       	ldi	r20, 0x80	; 128
    3118:	5f e3       	ldi	r21, 0x3F	; 63
    311a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    311e:	88 23       	and	r24, r24
    3120:	2c f4       	brge	.+10     	; 0x312c <main+0x7a>
		__ticks = 1;
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	9c 8b       	std	Y+20, r25	; 0x14
    3128:	8b 8b       	std	Y+19, r24	; 0x13
    312a:	3f c0       	rjmp	.+126    	; 0x31aa <main+0xf8>
	else if (__tmp > 65535)
    312c:	6d 89       	ldd	r22, Y+21	; 0x15
    312e:	7e 89       	ldd	r23, Y+22	; 0x16
    3130:	8f 89       	ldd	r24, Y+23	; 0x17
    3132:	98 8d       	ldd	r25, Y+24	; 0x18
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	3f ef       	ldi	r19, 0xFF	; 255
    3138:	4f e7       	ldi	r20, 0x7F	; 127
    313a:	57 e4       	ldi	r21, 0x47	; 71
    313c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3140:	18 16       	cp	r1, r24
    3142:	4c f5       	brge	.+82     	; 0x3196 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3144:	69 8d       	ldd	r22, Y+25	; 0x19
    3146:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    314a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	40 e2       	ldi	r20, 0x20	; 32
    3152:	51 e4       	ldi	r21, 0x41	; 65
    3154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	bc 01       	movw	r22, r24
    315e:	cd 01       	movw	r24, r26
    3160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	9c 8b       	std	Y+20, r25	; 0x14
    316a:	8b 8b       	std	Y+19, r24	; 0x13
    316c:	0f c0       	rjmp	.+30     	; 0x318c <main+0xda>
    316e:	88 ec       	ldi	r24, 0xC8	; 200
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	9a 8b       	std	Y+18, r25	; 0x12
    3174:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3176:	89 89       	ldd	r24, Y+17	; 0x11
    3178:	9a 89       	ldd	r25, Y+18	; 0x12
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	f1 f7       	brne	.-4      	; 0x317a <main+0xc8>
    317e:	9a 8b       	std	Y+18, r25	; 0x12
    3180:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3182:	8b 89       	ldd	r24, Y+19	; 0x13
    3184:	9c 89       	ldd	r25, Y+20	; 0x14
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	9c 8b       	std	Y+20, r25	; 0x14
    318a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318c:	8b 89       	ldd	r24, Y+19	; 0x13
    318e:	9c 89       	ldd	r25, Y+20	; 0x14
    3190:	00 97       	sbiw	r24, 0x00	; 0
    3192:	69 f7       	brne	.-38     	; 0x316e <main+0xbc>
    3194:	14 c0       	rjmp	.+40     	; 0x31be <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3196:	6d 89       	ldd	r22, Y+21	; 0x15
    3198:	7e 89       	ldd	r23, Y+22	; 0x16
    319a:	8f 89       	ldd	r24, Y+23	; 0x17
    319c:	98 8d       	ldd	r25, Y+24	; 0x18
    319e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	9c 8b       	std	Y+20, r25	; 0x14
    31a8:	8b 8b       	std	Y+19, r24	; 0x13
    31aa:	8b 89       	ldd	r24, Y+19	; 0x13
    31ac:	9c 89       	ldd	r25, Y+20	; 0x14
    31ae:	98 8b       	std	Y+16, r25	; 0x10
    31b0:	8f 87       	std	Y+15, r24	; 0x0f
    31b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    31b4:	98 89       	ldd	r25, Y+16	; 0x10
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	f1 f7       	brne	.-4      	; 0x31b6 <main+0x104>
    31ba:	98 8b       	std	Y+16, r25	; 0x10
    31bc:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(10);
while(1){
HSNC_voidTrigger();
    31be:	0e 94 13 0c 	call	0x1826	; 0x1826 <HSNC_voidTrigger>
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	a6 e1       	ldi	r26, 0x16	; 22
    31c8:	b3 e4       	ldi	r27, 0x43	; 67
    31ca:	8b 87       	std	Y+11, r24	; 0x0b
    31cc:	9c 87       	std	Y+12, r25	; 0x0c
    31ce:	ad 87       	std	Y+13, r26	; 0x0d
    31d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	4a ef       	ldi	r20, 0xFA	; 250
    31e0:	54 e4       	ldi	r21, 0x44	; 68
    31e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	8f 83       	std	Y+7, r24	; 0x07
    31ec:	98 87       	std	Y+8, r25	; 0x08
    31ee:	a9 87       	std	Y+9, r26	; 0x09
    31f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31f2:	6f 81       	ldd	r22, Y+7	; 0x07
    31f4:	78 85       	ldd	r23, Y+8	; 0x08
    31f6:	89 85       	ldd	r24, Y+9	; 0x09
    31f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e8       	ldi	r20, 0x80	; 128
    3200:	5f e3       	ldi	r21, 0x3F	; 63
    3202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3206:	88 23       	and	r24, r24
    3208:	2c f4       	brge	.+10     	; 0x3214 <main+0x162>
		__ticks = 1;
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	9e 83       	std	Y+6, r25	; 0x06
    3210:	8d 83       	std	Y+5, r24	; 0x05
    3212:	3f c0       	rjmp	.+126    	; 0x3292 <main+0x1e0>
	else if (__tmp > 65535)
    3214:	6f 81       	ldd	r22, Y+7	; 0x07
    3216:	78 85       	ldd	r23, Y+8	; 0x08
    3218:	89 85       	ldd	r24, Y+9	; 0x09
    321a:	9a 85       	ldd	r25, Y+10	; 0x0a
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	3f ef       	ldi	r19, 0xFF	; 255
    3220:	4f e7       	ldi	r20, 0x7F	; 127
    3222:	57 e4       	ldi	r21, 0x47	; 71
    3224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3228:	18 16       	cp	r1, r24
    322a:	4c f5       	brge	.+82     	; 0x327e <main+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322c:	6b 85       	ldd	r22, Y+11	; 0x0b
    322e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3230:	8d 85       	ldd	r24, Y+13	; 0x0d
    3232:	9e 85       	ldd	r25, Y+14	; 0x0e
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e2       	ldi	r20, 0x20	; 32
    323a:	51 e4       	ldi	r21, 0x41	; 65
    323c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	bc 01       	movw	r22, r24
    3246:	cd 01       	movw	r24, r26
    3248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	9e 83       	std	Y+6, r25	; 0x06
    3252:	8d 83       	std	Y+5, r24	; 0x05
    3254:	0f c0       	rjmp	.+30     	; 0x3274 <main+0x1c2>
    3256:	88 ec       	ldi	r24, 0xC8	; 200
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	9c 83       	std	Y+4, r25	; 0x04
    325c:	8b 83       	std	Y+3, r24	; 0x03
    325e:	8b 81       	ldd	r24, Y+3	; 0x03
    3260:	9c 81       	ldd	r25, Y+4	; 0x04
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	f1 f7       	brne	.-4      	; 0x3262 <main+0x1b0>
    3266:	9c 83       	std	Y+4, r25	; 0x04
    3268:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326a:	8d 81       	ldd	r24, Y+5	; 0x05
    326c:	9e 81       	ldd	r25, Y+6	; 0x06
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	9e 83       	std	Y+6, r25	; 0x06
    3272:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3274:	8d 81       	ldd	r24, Y+5	; 0x05
    3276:	9e 81       	ldd	r25, Y+6	; 0x06
    3278:	00 97       	sbiw	r24, 0x00	; 0
    327a:	69 f7       	brne	.-38     	; 0x3256 <main+0x1a4>
    327c:	a0 cf       	rjmp	.-192    	; 0x31be <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327e:	6f 81       	ldd	r22, Y+7	; 0x07
    3280:	78 85       	ldd	r23, Y+8	; 0x08
    3282:	89 85       	ldd	r24, Y+9	; 0x09
    3284:	9a 85       	ldd	r25, Y+10	; 0x0a
    3286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	9e 83       	std	Y+6, r25	; 0x06
    3290:	8d 83       	std	Y+5, r24	; 0x05
    3292:	8d 81       	ldd	r24, Y+5	; 0x05
    3294:	9e 81       	ldd	r25, Y+6	; 0x06
    3296:	9a 83       	std	Y+2, r25	; 0x02
    3298:	89 83       	std	Y+1, r24	; 0x01
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	9a 81       	ldd	r25, Y+2	; 0x02
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <main+0x1ec>
    32a2:	9a 83       	std	Y+2, r25	; 0x02
    32a4:	89 83       	std	Y+1, r24	; 0x01
    32a6:	8b cf       	rjmp	.-234    	; 0x31be <main+0x10c>

000032a8 <__udivmodsi4>:
    32a8:	a1 e2       	ldi	r26, 0x21	; 33
    32aa:	1a 2e       	mov	r1, r26
    32ac:	aa 1b       	sub	r26, r26
    32ae:	bb 1b       	sub	r27, r27
    32b0:	fd 01       	movw	r30, r26
    32b2:	0d c0       	rjmp	.+26     	; 0x32ce <__udivmodsi4_ep>

000032b4 <__udivmodsi4_loop>:
    32b4:	aa 1f       	adc	r26, r26
    32b6:	bb 1f       	adc	r27, r27
    32b8:	ee 1f       	adc	r30, r30
    32ba:	ff 1f       	adc	r31, r31
    32bc:	a2 17       	cp	r26, r18
    32be:	b3 07       	cpc	r27, r19
    32c0:	e4 07       	cpc	r30, r20
    32c2:	f5 07       	cpc	r31, r21
    32c4:	20 f0       	brcs	.+8      	; 0x32ce <__udivmodsi4_ep>
    32c6:	a2 1b       	sub	r26, r18
    32c8:	b3 0b       	sbc	r27, r19
    32ca:	e4 0b       	sbc	r30, r20
    32cc:	f5 0b       	sbc	r31, r21

000032ce <__udivmodsi4_ep>:
    32ce:	66 1f       	adc	r22, r22
    32d0:	77 1f       	adc	r23, r23
    32d2:	88 1f       	adc	r24, r24
    32d4:	99 1f       	adc	r25, r25
    32d6:	1a 94       	dec	r1
    32d8:	69 f7       	brne	.-38     	; 0x32b4 <__udivmodsi4_loop>
    32da:	60 95       	com	r22
    32dc:	70 95       	com	r23
    32de:	80 95       	com	r24
    32e0:	90 95       	com	r25
    32e2:	9b 01       	movw	r18, r22
    32e4:	ac 01       	movw	r20, r24
    32e6:	bd 01       	movw	r22, r26
    32e8:	cf 01       	movw	r24, r30
    32ea:	08 95       	ret

000032ec <__prologue_saves__>:
    32ec:	2f 92       	push	r2
    32ee:	3f 92       	push	r3
    32f0:	4f 92       	push	r4
    32f2:	5f 92       	push	r5
    32f4:	6f 92       	push	r6
    32f6:	7f 92       	push	r7
    32f8:	8f 92       	push	r8
    32fa:	9f 92       	push	r9
    32fc:	af 92       	push	r10
    32fe:	bf 92       	push	r11
    3300:	cf 92       	push	r12
    3302:	df 92       	push	r13
    3304:	ef 92       	push	r14
    3306:	ff 92       	push	r15
    3308:	0f 93       	push	r16
    330a:	1f 93       	push	r17
    330c:	cf 93       	push	r28
    330e:	df 93       	push	r29
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	ca 1b       	sub	r28, r26
    3316:	db 0b       	sbc	r29, r27
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	09 94       	ijmp

00003324 <__epilogue_restores__>:
    3324:	2a 88       	ldd	r2, Y+18	; 0x12
    3326:	39 88       	ldd	r3, Y+17	; 0x11
    3328:	48 88       	ldd	r4, Y+16	; 0x10
    332a:	5f 84       	ldd	r5, Y+15	; 0x0f
    332c:	6e 84       	ldd	r6, Y+14	; 0x0e
    332e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3330:	8c 84       	ldd	r8, Y+12	; 0x0c
    3332:	9b 84       	ldd	r9, Y+11	; 0x0b
    3334:	aa 84       	ldd	r10, Y+10	; 0x0a
    3336:	b9 84       	ldd	r11, Y+9	; 0x09
    3338:	c8 84       	ldd	r12, Y+8	; 0x08
    333a:	df 80       	ldd	r13, Y+7	; 0x07
    333c:	ee 80       	ldd	r14, Y+6	; 0x06
    333e:	fd 80       	ldd	r15, Y+5	; 0x05
    3340:	0c 81       	ldd	r16, Y+4	; 0x04
    3342:	1b 81       	ldd	r17, Y+3	; 0x03
    3344:	aa 81       	ldd	r26, Y+2	; 0x02
    3346:	b9 81       	ldd	r27, Y+1	; 0x01
    3348:	ce 0f       	add	r28, r30
    334a:	d1 1d       	adc	r29, r1
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	f8 94       	cli
    3350:	de bf       	out	0x3e, r29	; 62
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	cd bf       	out	0x3d, r28	; 61
    3356:	ed 01       	movw	r28, r26
    3358:	08 95       	ret

0000335a <memcpy>:
    335a:	fb 01       	movw	r30, r22
    335c:	dc 01       	movw	r26, r24
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <memcpy+0xa>
    3360:	01 90       	ld	r0, Z+
    3362:	0d 92       	st	X+, r0
    3364:	41 50       	subi	r20, 0x01	; 1
    3366:	50 40       	sbci	r21, 0x00	; 0
    3368:	d8 f7       	brcc	.-10     	; 0x3360 <memcpy+0x6>
    336a:	08 95       	ret

0000336c <strlen>:
    336c:	fc 01       	movw	r30, r24
    336e:	01 90       	ld	r0, Z+
    3370:	00 20       	and	r0, r0
    3372:	e9 f7       	brne	.-6      	; 0x336e <strlen+0x2>
    3374:	80 95       	com	r24
    3376:	90 95       	com	r25
    3378:	8e 0f       	add	r24, r30
    337a:	9f 1f       	adc	r25, r31
    337c:	08 95       	ret

0000337e <itoa>:
    337e:	fb 01       	movw	r30, r22
    3380:	9f 01       	movw	r18, r30
    3382:	e8 94       	clt
    3384:	42 30       	cpi	r20, 0x02	; 2
    3386:	c4 f0       	brlt	.+48     	; 0x33b8 <itoa+0x3a>
    3388:	45 32       	cpi	r20, 0x25	; 37
    338a:	b4 f4       	brge	.+44     	; 0x33b8 <itoa+0x3a>
    338c:	4a 30       	cpi	r20, 0x0A	; 10
    338e:	29 f4       	brne	.+10     	; 0x339a <itoa+0x1c>
    3390:	97 fb       	bst	r25, 7
    3392:	1e f4       	brtc	.+6      	; 0x339a <itoa+0x1c>
    3394:	90 95       	com	r25
    3396:	81 95       	neg	r24
    3398:	9f 4f       	sbci	r25, 0xFF	; 255
    339a:	64 2f       	mov	r22, r20
    339c:	77 27       	eor	r23, r23
    339e:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__udivmodhi4>
    33a2:	80 5d       	subi	r24, 0xD0	; 208
    33a4:	8a 33       	cpi	r24, 0x3A	; 58
    33a6:	0c f0       	brlt	.+2      	; 0x33aa <itoa+0x2c>
    33a8:	89 5d       	subi	r24, 0xD9	; 217
    33aa:	81 93       	st	Z+, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	00 97       	sbiw	r24, 0x00	; 0
    33b0:	a1 f7       	brne	.-24     	; 0x339a <itoa+0x1c>
    33b2:	16 f4       	brtc	.+4      	; 0x33b8 <itoa+0x3a>
    33b4:	5d e2       	ldi	r21, 0x2D	; 45
    33b6:	51 93       	st	Z+, r21
    33b8:	10 82       	st	Z, r1
    33ba:	c9 01       	movw	r24, r18
    33bc:	0c 94 e0 19 	jmp	0x33c0	; 0x33c0 <strrev>

000033c0 <strrev>:
    33c0:	dc 01       	movw	r26, r24
    33c2:	fc 01       	movw	r30, r24
    33c4:	67 2f       	mov	r22, r23
    33c6:	71 91       	ld	r23, Z+
    33c8:	77 23       	and	r23, r23
    33ca:	e1 f7       	brne	.-8      	; 0x33c4 <strrev+0x4>
    33cc:	32 97       	sbiw	r30, 0x02	; 2
    33ce:	04 c0       	rjmp	.+8      	; 0x33d8 <strrev+0x18>
    33d0:	7c 91       	ld	r23, X
    33d2:	6d 93       	st	X+, r22
    33d4:	70 83       	st	Z, r23
    33d6:	62 91       	ld	r22, -Z
    33d8:	ae 17       	cp	r26, r30
    33da:	bf 07       	cpc	r27, r31
    33dc:	c8 f3       	brcs	.-14     	; 0x33d0 <strrev+0x10>
    33de:	08 95       	ret

000033e0 <__udivmodhi4>:
    33e0:	aa 1b       	sub	r26, r26
    33e2:	bb 1b       	sub	r27, r27
    33e4:	51 e1       	ldi	r21, 0x11	; 17
    33e6:	07 c0       	rjmp	.+14     	; 0x33f6 <__udivmodhi4_ep>

000033e8 <__udivmodhi4_loop>:
    33e8:	aa 1f       	adc	r26, r26
    33ea:	bb 1f       	adc	r27, r27
    33ec:	a6 17       	cp	r26, r22
    33ee:	b7 07       	cpc	r27, r23
    33f0:	10 f0       	brcs	.+4      	; 0x33f6 <__udivmodhi4_ep>
    33f2:	a6 1b       	sub	r26, r22
    33f4:	b7 0b       	sbc	r27, r23

000033f6 <__udivmodhi4_ep>:
    33f6:	88 1f       	adc	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	5a 95       	dec	r21
    33fc:	a9 f7       	brne	.-22     	; 0x33e8 <__udivmodhi4_loop>
    33fe:	80 95       	com	r24
    3400:	90 95       	com	r25
    3402:	bc 01       	movw	r22, r24
    3404:	cd 01       	movw	r24, r26
    3406:	08 95       	ret

00003408 <_exit>:
    3408:	f8 94       	cli

0000340a <__stop_program>:
    340a:	ff cf       	rjmp	.-2      	; 0x340a <__stop_program>
