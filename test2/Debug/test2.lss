
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002492  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002492  00002526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080007a  0080007a  00002540  2**0
                  ALLOC
  3 .stab         00001a40  00000000  00000000  00002540  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b5b  00000000  00000000  00003f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00007f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000092d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009b64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 36 10 	jmp	0x206c	; 0x206c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 11 	jmp	0x228e	; 0x228e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <main>
      8a:	0c 94 47 12 	jmp	0x248e	; 0x248e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e7       	ldi	r22, 0x72	; 114
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <timer0_init>:

#include "timer.h"


void timer0_init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	    	/* Disable Timer 0 */
	    	TCCR0 = DISABLE_MODULE_VALUE;
     ca6:	e3 e5       	ldi	r30, 0x53	; 83
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	10 82       	st	Z, r1
	    	/* Setting pre scaler */
	    	TCCR0 = (PRESCLR1_VALUE);
     cac:	e3 e5       	ldi	r30, 0x53	; 83
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 83       	st	Z, r24
	    	/* Initializing the timer with zero */
	    	TCNT0 = ZER0_INITIALIZER;
     cb4:	e2 e5       	ldi	r30, 0x52	; 82
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	10 82       	st	Z, r1
				/* Timer overflow interrupt enable*/
				TIMSK |=(1<<TOIE0);
     cba:	a9 e5       	ldi	r26, 0x59	; 89
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e9 e5       	ldi	r30, 0x59	; 89
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	81 60       	ori	r24, 0x01	; 1
     cc6:	8c 93       	st	X, r24

	return;
}
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <lcd_init>:
*purpose       	: initialize LCD pins as output
*				 		and seting up the operation mode(4-bit)
*						default setting (cursor on)
*/
void lcd_init(void)
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	e8 97       	sbiw	r28, 0x38	; 56
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61

	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
     ce2:	ea e3       	ldi	r30, 0x3A	; 58
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 ef       	ldi	r24, 0xF0	; 240
     ce8:	80 83       	st	Z, r24
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
     cea:	a7 e3       	ldi	r26, 0x37	; 55
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e7 e3       	ldi	r30, 0x37	; 55
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8e 60       	ori	r24, 0x0E	; 14
     cf6:	8c 93       	st	X, r24

	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
     cf8:	eb e3       	ldi	r30, 0x3B	; 59
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 e2       	ldi	r24, 0x20	; 32
     cfe:	80 83       	st	Z, r24
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
     d00:	a8 e3       	ldi	r26, 0x38	; 56
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e8 e3       	ldi	r30, 0x38	; 56
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	88 60       	ori	r24, 0x08	; 8
     d0c:	8c 93       	st	X, r24
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	a0 ea       	ldi	r26, 0xA0	; 160
     d14:	b0 e4       	ldi	r27, 0x40	; 64
     d16:	8d ab       	std	Y+53, r24	; 0x35
     d18:	9e ab       	std	Y+54, r25	; 0x36
     d1a:	af ab       	std	Y+55, r26	; 0x37
     d1c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1e:	6d a9       	ldd	r22, Y+53	; 0x35
     d20:	7e a9       	ldd	r23, Y+54	; 0x36
     d22:	8f a9       	ldd	r24, Y+55	; 0x37
     d24:	98 ad       	ldd	r25, Y+56	; 0x38
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	4a ef       	ldi	r20, 0xFA	; 250
     d2c:	54 e4       	ldi	r21, 0x44	; 68
     d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	89 ab       	std	Y+49, r24	; 0x31
     d38:	9a ab       	std	Y+50, r25	; 0x32
     d3a:	ab ab       	std	Y+51, r26	; 0x33
     d3c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d3e:	69 a9       	ldd	r22, Y+49	; 0x31
     d40:	7a a9       	ldd	r23, Y+50	; 0x32
     d42:	8b a9       	ldd	r24, Y+51	; 0x33
     d44:	9c a9       	ldd	r25, Y+52	; 0x34
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e8       	ldi	r20, 0x80	; 128
     d4c:	5f e3       	ldi	r21, 0x3F	; 63
     d4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d52:	88 23       	and	r24, r24
     d54:	2c f4       	brge	.+10     	; 0xd60 <lcd_init+0x92>
		__ticks = 1;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	98 ab       	std	Y+48, r25	; 0x30
     d5c:	8f a7       	std	Y+47, r24	; 0x2f
     d5e:	3f c0       	rjmp	.+126    	; 0xdde <lcd_init+0x110>
	else if (__tmp > 65535)
     d60:	69 a9       	ldd	r22, Y+49	; 0x31
     d62:	7a a9       	ldd	r23, Y+50	; 0x32
     d64:	8b a9       	ldd	r24, Y+51	; 0x33
     d66:	9c a9       	ldd	r25, Y+52	; 0x34
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	3f ef       	ldi	r19, 0xFF	; 255
     d6c:	4f e7       	ldi	r20, 0x7F	; 127
     d6e:	57 e4       	ldi	r21, 0x47	; 71
     d70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d74:	18 16       	cp	r1, r24
     d76:	4c f5       	brge	.+82     	; 0xdca <lcd_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d78:	6d a9       	ldd	r22, Y+53	; 0x35
     d7a:	7e a9       	ldd	r23, Y+54	; 0x36
     d7c:	8f a9       	ldd	r24, Y+55	; 0x37
     d7e:	98 ad       	ldd	r25, Y+56	; 0x38
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e2       	ldi	r20, 0x20	; 32
     d86:	51 e4       	ldi	r21, 0x41	; 65
     d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	bc 01       	movw	r22, r24
     d92:	cd 01       	movw	r24, r26
     d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	98 ab       	std	Y+48, r25	; 0x30
     d9e:	8f a7       	std	Y+47, r24	; 0x2f
     da0:	0f c0       	rjmp	.+30     	; 0xdc0 <lcd_init+0xf2>
     da2:	88 ec       	ldi	r24, 0xC8	; 200
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9e a7       	std	Y+46, r25	; 0x2e
     da8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     daa:	8d a5       	ldd	r24, Y+45	; 0x2d
     dac:	9e a5       	ldd	r25, Y+46	; 0x2e
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <lcd_init+0xe0>
     db2:	9e a7       	std	Y+46, r25	; 0x2e
     db4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db6:	8f a5       	ldd	r24, Y+47	; 0x2f
     db8:	98 a9       	ldd	r25, Y+48	; 0x30
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	98 ab       	std	Y+48, r25	; 0x30
     dbe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc0:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc2:	98 a9       	ldd	r25, Y+48	; 0x30
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	69 f7       	brne	.-38     	; 0xda2 <lcd_init+0xd4>
     dc8:	14 c0       	rjmp	.+40     	; 0xdf2 <lcd_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dca:	69 a9       	ldd	r22, Y+49	; 0x31
     dcc:	7a a9       	ldd	r23, Y+50	; 0x32
     dce:	8b a9       	ldd	r24, Y+51	; 0x33
     dd0:	9c a9       	ldd	r25, Y+52	; 0x34
     dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	98 ab       	std	Y+48, r25	; 0x30
     ddc:	8f a7       	std	Y+47, r24	; 0x2f
     dde:	8f a5       	ldd	r24, Y+47	; 0x2f
     de0:	98 a9       	ldd	r25, Y+48	; 0x30
     de2:	9c a7       	std	Y+44, r25	; 0x2c
     de4:	8b a7       	std	Y+43, r24	; 0x2b
     de6:	8b a5       	ldd	r24, Y+43	; 0x2b
     de8:	9c a5       	ldd	r25, Y+44	; 0x2c
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <lcd_init+0x11c>
     dee:	9c a7       	std	Y+44, r25	; 0x2c
     df0:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
     df2:	a8 e3       	ldi	r26, 0x38	; 56
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e3       	ldi	r30, 0x38	; 56
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	87 7f       	andi	r24, 0xF7	; 247
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8f a3       	std	Y+39, r24	; 0x27
     e0a:	98 a7       	std	Y+40, r25	; 0x28
     e0c:	a9 a7       	std	Y+41, r26	; 0x29
     e0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6f a1       	ldd	r22, Y+39	; 0x27
     e12:	78 a5       	ldd	r23, Y+40	; 0x28
     e14:	89 a5       	ldd	r24, Y+41	; 0x29
     e16:	9a a5       	ldd	r25, Y+42	; 0x2a
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	4a ef       	ldi	r20, 0xFA	; 250
     e1e:	54 e4       	ldi	r21, 0x44	; 68
     e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8b a3       	std	Y+35, r24	; 0x23
     e2a:	9c a3       	std	Y+36, r25	; 0x24
     e2c:	ad a3       	std	Y+37, r26	; 0x25
     e2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e30:	6b a1       	ldd	r22, Y+35	; 0x23
     e32:	7c a1       	ldd	r23, Y+36	; 0x24
     e34:	8d a1       	ldd	r24, Y+37	; 0x25
     e36:	9e a1       	ldd	r25, Y+38	; 0x26
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_init+0x184>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9a a3       	std	Y+34, r25	; 0x22
     e4e:	89 a3       	std	Y+33, r24	; 0x21
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_init+0x202>
	else if (__tmp > 65535)
     e52:	6b a1       	ldd	r22, Y+35	; 0x23
     e54:	7c a1       	ldd	r23, Y+36	; 0x24
     e56:	8d a1       	ldd	r24, Y+37	; 0x25
     e58:	9e a1       	ldd	r25, Y+38	; 0x26
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6f a1       	ldd	r22, Y+39	; 0x27
     e6c:	78 a5       	ldd	r23, Y+40	; 0x28
     e6e:	89 a5       	ldd	r24, Y+41	; 0x29
     e70:	9a a5       	ldd	r25, Y+42	; 0x2a
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9a a3       	std	Y+34, r25	; 0x22
     e90:	89 a3       	std	Y+33, r24	; 0x21
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_init+0x1e4>
     e94:	88 ec       	ldi	r24, 0xC8	; 200
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	98 a3       	std	Y+32, r25	; 0x20
     e9a:	8f 8f       	std	Y+31, r24	; 0x1f
     e9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e9e:	98 a1       	ldd	r25, Y+32	; 0x20
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_init+0x1d2>
     ea4:	98 a3       	std	Y+32, r25	; 0x20
     ea6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	89 a1       	ldd	r24, Y+33	; 0x21
     eaa:	9a a1       	ldd	r25, Y+34	; 0x22
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9a a3       	std	Y+34, r25	; 0x22
     eb0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	89 a1       	ldd	r24, Y+33	; 0x21
     eb4:	9a a1       	ldd	r25, Y+34	; 0x22
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_init+0x1c6>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6b a1       	ldd	r22, Y+35	; 0x23
     ebe:	7c a1       	ldd	r23, Y+36	; 0x24
     ec0:	8d a1       	ldd	r24, Y+37	; 0x25
     ec2:	9e a1       	ldd	r25, Y+38	; 0x26
     ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9a a3       	std	Y+34, r25	; 0x22
     ece:	89 a3       	std	Y+33, r24	; 0x21
     ed0:	89 a1       	ldd	r24, Y+33	; 0x21
     ed2:	9a a1       	ldd	r25, Y+34	; 0x22
     ed4:	9e 8f       	std	Y+30, r25	; 0x1e
     ed6:	8d 8f       	std	Y+29, r24	; 0x1d
     ed8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eda:	9e 8d       	ldd	r25, Y+30	; 0x1e
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_init+0x20e>
     ee0:	9e 8f       	std	Y+30, r25	; 0x1e
     ee2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
     ee4:	88 e2       	ldi	r24, 0x28	; 40
     ee6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <lcd_send_command>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	a0 ea       	ldi	r26, 0xA0	; 160
     ef0:	b0 e4       	ldi	r27, 0x40	; 64
     ef2:	89 8f       	std	Y+25, r24	; 0x19
     ef4:	9a 8f       	std	Y+26, r25	; 0x1a
     ef6:	ab 8f       	std	Y+27, r26	; 0x1b
     ef8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efa:	69 8d       	ldd	r22, Y+25	; 0x19
     efc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     efe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f00:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	4a ef       	ldi	r20, 0xFA	; 250
     f08:	54 e4       	ldi	r21, 0x44	; 68
     f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	8d 8b       	std	Y+21, r24	; 0x15
     f14:	9e 8b       	std	Y+22, r25	; 0x16
     f16:	af 8b       	std	Y+23, r26	; 0x17
     f18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f1a:	6d 89       	ldd	r22, Y+21	; 0x15
     f1c:	7e 89       	ldd	r23, Y+22	; 0x16
     f1e:	8f 89       	ldd	r24, Y+23	; 0x17
     f20:	98 8d       	ldd	r25, Y+24	; 0x18
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e8       	ldi	r20, 0x80	; 128
     f28:	5f e3       	ldi	r21, 0x3F	; 63
     f2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f2e:	88 23       	and	r24, r24
     f30:	2c f4       	brge	.+10     	; 0xf3c <lcd_init+0x26e>
		__ticks = 1;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9c 8b       	std	Y+20, r25	; 0x14
     f38:	8b 8b       	std	Y+19, r24	; 0x13
     f3a:	3f c0       	rjmp	.+126    	; 0xfba <lcd_init+0x2ec>
	else if (__tmp > 65535)
     f3c:	6d 89       	ldd	r22, Y+21	; 0x15
     f3e:	7e 89       	ldd	r23, Y+22	; 0x16
     f40:	8f 89       	ldd	r24, Y+23	; 0x17
     f42:	98 8d       	ldd	r25, Y+24	; 0x18
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	3f ef       	ldi	r19, 0xFF	; 255
     f48:	4f e7       	ldi	r20, 0x7F	; 127
     f4a:	57 e4       	ldi	r21, 0x47	; 71
     f4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f50:	18 16       	cp	r1, r24
     f52:	4c f5       	brge	.+82     	; 0xfa6 <lcd_init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f54:	69 8d       	ldd	r22, Y+25	; 0x19
     f56:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f58:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e2       	ldi	r20, 0x20	; 32
     f62:	51 e4       	ldi	r21, 0x41	; 65
     f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	bc 01       	movw	r22, r24
     f6e:	cd 01       	movw	r24, r26
     f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	9c 8b       	std	Y+20, r25	; 0x14
     f7a:	8b 8b       	std	Y+19, r24	; 0x13
     f7c:	0f c0       	rjmp	.+30     	; 0xf9c <lcd_init+0x2ce>
     f7e:	88 ec       	ldi	r24, 0xC8	; 200
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9a 8b       	std	Y+18, r25	; 0x12
     f84:	89 8b       	std	Y+17, r24	; 0x11
     f86:	89 89       	ldd	r24, Y+17	; 0x11
     f88:	9a 89       	ldd	r25, Y+18	; 0x12
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <lcd_init+0x2bc>
     f8e:	9a 8b       	std	Y+18, r25	; 0x12
     f90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f92:	8b 89       	ldd	r24, Y+19	; 0x13
     f94:	9c 89       	ldd	r25, Y+20	; 0x14
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	9c 8b       	std	Y+20, r25	; 0x14
     f9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9c:	8b 89       	ldd	r24, Y+19	; 0x13
     f9e:	9c 89       	ldd	r25, Y+20	; 0x14
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	69 f7       	brne	.-38     	; 0xf7e <lcd_init+0x2b0>
     fa4:	14 c0       	rjmp	.+40     	; 0xfce <lcd_init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa6:	6d 89       	ldd	r22, Y+21	; 0x15
     fa8:	7e 89       	ldd	r23, Y+22	; 0x16
     faa:	8f 89       	ldd	r24, Y+23	; 0x17
     fac:	98 8d       	ldd	r25, Y+24	; 0x18
     fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	9c 8b       	std	Y+20, r25	; 0x14
     fb8:	8b 8b       	std	Y+19, r24	; 0x13
     fba:	8b 89       	ldd	r24, Y+19	; 0x13
     fbc:	9c 89       	ldd	r25, Y+20	; 0x14
     fbe:	98 8b       	std	Y+16, r25	; 0x10
     fc0:	8f 87       	std	Y+15, r24	; 0x0f
     fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc4:	98 89       	ldd	r25, Y+16	; 0x10
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <lcd_init+0x2f8>
     fca:	98 8b       	std	Y+16, r25	; 0x10
     fcc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	lcd_send_command(LCD_CMD_DISPLAY_CURSOR_BLINK);
     fce:	8f e0       	ldi	r24, 0x0F	; 15
     fd0:	0e 94 68 08 	call	0x10d0	; 0x10d0 <lcd_send_command>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	a0 ea       	ldi	r26, 0xA0	; 160
     fda:	b0 e4       	ldi	r27, 0x40	; 64
     fdc:	8b 87       	std	Y+11, r24	; 0x0b
     fde:	9c 87       	std	Y+12, r25	; 0x0c
     fe0:	ad 87       	std	Y+13, r26	; 0x0d
     fe2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fea:	9e 85       	ldd	r25, Y+14	; 0x0e
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4a ef       	ldi	r20, 0xFA	; 250
     ff2:	54 e4       	ldi	r21, 0x44	; 68
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	8f 83       	std	Y+7, r24	; 0x07
     ffe:	98 87       	std	Y+8, r25	; 0x08
    1000:	a9 87       	std	Y+9, r26	; 0x09
    1002:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1004:	6f 81       	ldd	r22, Y+7	; 0x07
    1006:	78 85       	ldd	r23, Y+8	; 0x08
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	9a 85       	ldd	r25, Y+10	; 0x0a
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1018:	88 23       	and	r24, r24
    101a:	2c f4       	brge	.+10     	; 0x1026 <lcd_init+0x358>
		__ticks = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9e 83       	std	Y+6, r25	; 0x06
    1022:	8d 83       	std	Y+5, r24	; 0x05
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <lcd_init+0x3d6>
	else if (__tmp > 65535)
    1026:	6f 81       	ldd	r22, Y+7	; 0x07
    1028:	78 85       	ldd	r23, Y+8	; 0x08
    102a:	89 85       	ldd	r24, Y+9	; 0x09
    102c:	9a 85       	ldd	r25, Y+10	; 0x0a
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    103a:	18 16       	cp	r1, r24
    103c:	4c f5       	brge	.+82     	; 0x1090 <lcd_init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1040:	7c 85       	ldd	r23, Y+12	; 0x0c
    1042:	8d 85       	ldd	r24, Y+13	; 0x0d
    1044:	9e 85       	ldd	r25, Y+14	; 0x0e
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e2       	ldi	r20, 0x20	; 32
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <lcd_init+0x3b8>
    1068:	88 ec       	ldi	r24, 0xC8	; 200
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9c 83       	std	Y+4, r25	; 0x04
    106e:	8b 83       	std	Y+3, r24	; 0x03
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <lcd_init+0x3a6>
    1078:	9c 83       	std	Y+4, r25	; 0x04
    107a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
    107e:	9e 81       	ldd	r25, Y+6	; 0x06
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	9e 83       	std	Y+6, r25	; 0x06
    1084:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	69 f7       	brne	.-38     	; 0x1068 <lcd_init+0x39a>
    108e:	14 c0       	rjmp	.+40     	; 0x10b8 <lcd_init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1090:	6f 81       	ldd	r22, Y+7	; 0x07
    1092:	78 85       	ldd	r23, Y+8	; 0x08
    1094:	89 85       	ldd	r24, Y+9	; 0x09
    1096:	9a 85       	ldd	r25, Y+10	; 0x0a
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9e 83       	std	Y+6, r25	; 0x06
    10a2:	8d 83       	std	Y+5, r24	; 0x05
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <lcd_init+0x3e2>
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	lcd_send_command(0x80);
    10b8:	80 e8       	ldi	r24, 0x80	; 128
    10ba:	0e 94 68 08 	call	0x10d0	; 0x10d0 <lcd_send_command>

}
    10be:	e8 96       	adiw	r28, 0x38	; 56
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <lcd_send_command>:
*purpose       	: sending a command to LCD by sending
*				 		the first nibble then the second nibble
*						enabling and disabling the LCD in between
*/
void lcd_send_command (uint8_t command)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	e9 97       	sbiw	r28, 0x39	; 57
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	89 af       	std	Y+57, r24	; 0x39
	DATA_BUS=((command&0b11110000));
    10e6:	eb e3       	ldi	r30, 0x3B	; 59
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	89 ad       	ldd	r24, Y+57	; 0x39
    10ec:	80 7f       	andi	r24, 0xF0	; 240
    10ee:	80 83       	st	Z, r24
	CTL_BUS &=~(1<<LCD_RS);
    10f0:	a8 e3       	ldi	r26, 0x38	; 56
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e8 e3       	ldi	r30, 0x38	; 56
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8d 7f       	andi	r24, 0xFD	; 253
    10fc:	8c 93       	st	X, r24
	CTL_BUS |=(1<<LCD_EN);
    10fe:	a8 e3       	ldi	r26, 0x38	; 56
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e8 e3       	ldi	r30, 0x38	; 56
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	88 60       	ori	r24, 0x08	; 8
    110a:	8c 93       	st	X, r24
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 ea       	ldi	r26, 0xA0	; 160
    1112:	b0 e4       	ldi	r27, 0x40	; 64
    1114:	8d ab       	std	Y+53, r24	; 0x35
    1116:	9e ab       	std	Y+54, r25	; 0x36
    1118:	af ab       	std	Y+55, r26	; 0x37
    111a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111c:	6d a9       	ldd	r22, Y+53	; 0x35
    111e:	7e a9       	ldd	r23, Y+54	; 0x36
    1120:	8f a9       	ldd	r24, Y+55	; 0x37
    1122:	98 ad       	ldd	r25, Y+56	; 0x38
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4a ef       	ldi	r20, 0xFA	; 250
    112a:	54 e4       	ldi	r21, 0x44	; 68
    112c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	89 ab       	std	Y+49, r24	; 0x31
    1136:	9a ab       	std	Y+50, r25	; 0x32
    1138:	ab ab       	std	Y+51, r26	; 0x33
    113a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    113c:	69 a9       	ldd	r22, Y+49	; 0x31
    113e:	7a a9       	ldd	r23, Y+50	; 0x32
    1140:	8b a9       	ldd	r24, Y+51	; 0x33
    1142:	9c a9       	ldd	r25, Y+52	; 0x34
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e8       	ldi	r20, 0x80	; 128
    114a:	5f e3       	ldi	r21, 0x3F	; 63
    114c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1150:	88 23       	and	r24, r24
    1152:	2c f4       	brge	.+10     	; 0x115e <lcd_send_command+0x8e>
		__ticks = 1;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	98 ab       	std	Y+48, r25	; 0x30
    115a:	8f a7       	std	Y+47, r24	; 0x2f
    115c:	3f c0       	rjmp	.+126    	; 0x11dc <lcd_send_command+0x10c>
	else if (__tmp > 65535)
    115e:	69 a9       	ldd	r22, Y+49	; 0x31
    1160:	7a a9       	ldd	r23, Y+50	; 0x32
    1162:	8b a9       	ldd	r24, Y+51	; 0x33
    1164:	9c a9       	ldd	r25, Y+52	; 0x34
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	4f e7       	ldi	r20, 0x7F	; 127
    116c:	57 e4       	ldi	r21, 0x47	; 71
    116e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1172:	18 16       	cp	r1, r24
    1174:	4c f5       	brge	.+82     	; 0x11c8 <lcd_send_command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1176:	6d a9       	ldd	r22, Y+53	; 0x35
    1178:	7e a9       	ldd	r23, Y+54	; 0x36
    117a:	8f a9       	ldd	r24, Y+55	; 0x37
    117c:	98 ad       	ldd	r25, Y+56	; 0x38
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e2       	ldi	r20, 0x20	; 32
    1184:	51 e4       	ldi	r21, 0x41	; 65
    1186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	bc 01       	movw	r22, r24
    1190:	cd 01       	movw	r24, r26
    1192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	98 ab       	std	Y+48, r25	; 0x30
    119c:	8f a7       	std	Y+47, r24	; 0x2f
    119e:	0f c0       	rjmp	.+30     	; 0x11be <lcd_send_command+0xee>
    11a0:	88 ec       	ldi	r24, 0xC8	; 200
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9e a7       	std	Y+46, r25	; 0x2e
    11a6:	8d a7       	std	Y+45, r24	; 0x2d
    11a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    11aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <lcd_send_command+0xdc>
    11b0:	9e a7       	std	Y+46, r25	; 0x2e
    11b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b6:	98 a9       	ldd	r25, Y+48	; 0x30
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	98 ab       	std	Y+48, r25	; 0x30
    11bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11be:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c0:	98 a9       	ldd	r25, Y+48	; 0x30
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	69 f7       	brne	.-38     	; 0x11a0 <lcd_send_command+0xd0>
    11c6:	14 c0       	rjmp	.+40     	; 0x11f0 <lcd_send_command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c8:	69 a9       	ldd	r22, Y+49	; 0x31
    11ca:	7a a9       	ldd	r23, Y+50	; 0x32
    11cc:	8b a9       	ldd	r24, Y+51	; 0x33
    11ce:	9c a9       	ldd	r25, Y+52	; 0x34
    11d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	98 ab       	std	Y+48, r25	; 0x30
    11da:	8f a7       	std	Y+47, r24	; 0x2f
    11dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    11de:	98 a9       	ldd	r25, Y+48	; 0x30
    11e0:	9c a7       	std	Y+44, r25	; 0x2c
    11e2:	8b a7       	std	Y+43, r24	; 0x2b
    11e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    11e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <lcd_send_command+0x118>
    11ec:	9c a7       	std	Y+44, r25	; 0x2c
    11ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    11f0:	a8 e3       	ldi	r26, 0x38	; 56
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e8 e3       	ldi	r30, 0x38	; 56
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	87 7f       	andi	r24, 0xF7	; 247
    11fc:	8c 93       	st	X, r24
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a0 ea       	ldi	r26, 0xA0	; 160
    1204:	b0 e4       	ldi	r27, 0x40	; 64
    1206:	8f a3       	std	Y+39, r24	; 0x27
    1208:	98 a7       	std	Y+40, r25	; 0x28
    120a:	a9 a7       	std	Y+41, r26	; 0x29
    120c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120e:	6f a1       	ldd	r22, Y+39	; 0x27
    1210:	78 a5       	ldd	r23, Y+40	; 0x28
    1212:	89 a5       	ldd	r24, Y+41	; 0x29
    1214:	9a a5       	ldd	r25, Y+42	; 0x2a
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	4a ef       	ldi	r20, 0xFA	; 250
    121c:	54 e4       	ldi	r21, 0x44	; 68
    121e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	8b a3       	std	Y+35, r24	; 0x23
    1228:	9c a3       	std	Y+36, r25	; 0x24
    122a:	ad a3       	std	Y+37, r26	; 0x25
    122c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    122e:	6b a1       	ldd	r22, Y+35	; 0x23
    1230:	7c a1       	ldd	r23, Y+36	; 0x24
    1232:	8d a1       	ldd	r24, Y+37	; 0x25
    1234:	9e a1       	ldd	r25, Y+38	; 0x26
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	5f e3       	ldi	r21, 0x3F	; 63
    123e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1242:	88 23       	and	r24, r24
    1244:	2c f4       	brge	.+10     	; 0x1250 <lcd_send_command+0x180>
		__ticks = 1;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9a a3       	std	Y+34, r25	; 0x22
    124c:	89 a3       	std	Y+33, r24	; 0x21
    124e:	3f c0       	rjmp	.+126    	; 0x12ce <lcd_send_command+0x1fe>
	else if (__tmp > 65535)
    1250:	6b a1       	ldd	r22, Y+35	; 0x23
    1252:	7c a1       	ldd	r23, Y+36	; 0x24
    1254:	8d a1       	ldd	r24, Y+37	; 0x25
    1256:	9e a1       	ldd	r25, Y+38	; 0x26
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	3f ef       	ldi	r19, 0xFF	; 255
    125c:	4f e7       	ldi	r20, 0x7F	; 127
    125e:	57 e4       	ldi	r21, 0x47	; 71
    1260:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1264:	18 16       	cp	r1, r24
    1266:	4c f5       	brge	.+82     	; 0x12ba <lcd_send_command+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1268:	6f a1       	ldd	r22, Y+39	; 0x27
    126a:	78 a5       	ldd	r23, Y+40	; 0x28
    126c:	89 a5       	ldd	r24, Y+41	; 0x29
    126e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e2       	ldi	r20, 0x20	; 32
    1276:	51 e4       	ldi	r21, 0x41	; 65
    1278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	9a a3       	std	Y+34, r25	; 0x22
    128e:	89 a3       	std	Y+33, r24	; 0x21
    1290:	0f c0       	rjmp	.+30     	; 0x12b0 <lcd_send_command+0x1e0>
    1292:	88 ec       	ldi	r24, 0xC8	; 200
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	98 a3       	std	Y+32, r25	; 0x20
    1298:	8f 8f       	std	Y+31, r24	; 0x1f
    129a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    129c:	98 a1       	ldd	r25, Y+32	; 0x20
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <lcd_send_command+0x1ce>
    12a2:	98 a3       	std	Y+32, r25	; 0x20
    12a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a6:	89 a1       	ldd	r24, Y+33	; 0x21
    12a8:	9a a1       	ldd	r25, Y+34	; 0x22
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	9a a3       	std	Y+34, r25	; 0x22
    12ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b0:	89 a1       	ldd	r24, Y+33	; 0x21
    12b2:	9a a1       	ldd	r25, Y+34	; 0x22
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	69 f7       	brne	.-38     	; 0x1292 <lcd_send_command+0x1c2>
    12b8:	14 c0       	rjmp	.+40     	; 0x12e2 <lcd_send_command+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ba:	6b a1       	ldd	r22, Y+35	; 0x23
    12bc:	7c a1       	ldd	r23, Y+36	; 0x24
    12be:	8d a1       	ldd	r24, Y+37	; 0x25
    12c0:	9e a1       	ldd	r25, Y+38	; 0x26
    12c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	9a a3       	std	Y+34, r25	; 0x22
    12cc:	89 a3       	std	Y+33, r24	; 0x21
    12ce:	89 a1       	ldd	r24, Y+33	; 0x21
    12d0:	9a a1       	ldd	r25, Y+34	; 0x22
    12d2:	9e 8f       	std	Y+30, r25	; 0x1e
    12d4:	8d 8f       	std	Y+29, r24	; 0x1d
    12d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	f1 f7       	brne	.-4      	; 0x12da <lcd_send_command+0x20a>
    12de:	9e 8f       	std	Y+30, r25	; 0x1e
    12e0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DATA_BUS=((command&0b00001111)<<4);
    12e2:	eb e3       	ldi	r30, 0x3B	; 59
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	89 ad       	ldd	r24, Y+57	; 0x39
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	82 95       	swap	r24
    12ee:	92 95       	swap	r25
    12f0:	90 7f       	andi	r25, 0xF0	; 240
    12f2:	98 27       	eor	r25, r24
    12f4:	80 7f       	andi	r24, 0xF0	; 240
    12f6:	98 27       	eor	r25, r24
    12f8:	80 83       	st	Z, r24
	CTL_BUS |=(1<<LCD_EN);
    12fa:	a8 e3       	ldi	r26, 0x38	; 56
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e8 e3       	ldi	r30, 0x38	; 56
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	88 60       	ori	r24, 0x08	; 8
    1306:	8c 93       	st	X, r24
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a0 ea       	ldi	r26, 0xA0	; 160
    130e:	b0 e4       	ldi	r27, 0x40	; 64
    1310:	89 8f       	std	Y+25, r24	; 0x19
    1312:	9a 8f       	std	Y+26, r25	; 0x1a
    1314:	ab 8f       	std	Y+27, r26	; 0x1b
    1316:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1318:	69 8d       	ldd	r22, Y+25	; 0x19
    131a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    131c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    131e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	4a ef       	ldi	r20, 0xFA	; 250
    1326:	54 e4       	ldi	r21, 0x44	; 68
    1328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	8d 8b       	std	Y+21, r24	; 0x15
    1332:	9e 8b       	std	Y+22, r25	; 0x16
    1334:	af 8b       	std	Y+23, r26	; 0x17
    1336:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1338:	6d 89       	ldd	r22, Y+21	; 0x15
    133a:	7e 89       	ldd	r23, Y+22	; 0x16
    133c:	8f 89       	ldd	r24, Y+23	; 0x17
    133e:	98 8d       	ldd	r25, Y+24	; 0x18
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e8       	ldi	r20, 0x80	; 128
    1346:	5f e3       	ldi	r21, 0x3F	; 63
    1348:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    134c:	88 23       	and	r24, r24
    134e:	2c f4       	brge	.+10     	; 0x135a <lcd_send_command+0x28a>
		__ticks = 1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	9c 8b       	std	Y+20, r25	; 0x14
    1356:	8b 8b       	std	Y+19, r24	; 0x13
    1358:	3f c0       	rjmp	.+126    	; 0x13d8 <lcd_send_command+0x308>
	else if (__tmp > 65535)
    135a:	6d 89       	ldd	r22, Y+21	; 0x15
    135c:	7e 89       	ldd	r23, Y+22	; 0x16
    135e:	8f 89       	ldd	r24, Y+23	; 0x17
    1360:	98 8d       	ldd	r25, Y+24	; 0x18
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	3f ef       	ldi	r19, 0xFF	; 255
    1366:	4f e7       	ldi	r20, 0x7F	; 127
    1368:	57 e4       	ldi	r21, 0x47	; 71
    136a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    136e:	18 16       	cp	r1, r24
    1370:	4c f5       	brge	.+82     	; 0x13c4 <lcd_send_command+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1372:	69 8d       	ldd	r22, Y+25	; 0x19
    1374:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e2       	ldi	r20, 0x20	; 32
    1380:	51 e4       	ldi	r21, 0x41	; 65
    1382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	9c 8b       	std	Y+20, r25	; 0x14
    1398:	8b 8b       	std	Y+19, r24	; 0x13
    139a:	0f c0       	rjmp	.+30     	; 0x13ba <lcd_send_command+0x2ea>
    139c:	88 ec       	ldi	r24, 0xC8	; 200
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9a 8b       	std	Y+18, r25	; 0x12
    13a2:	89 8b       	std	Y+17, r24	; 0x11
    13a4:	89 89       	ldd	r24, Y+17	; 0x11
    13a6:	9a 89       	ldd	r25, Y+18	; 0x12
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <lcd_send_command+0x2d8>
    13ac:	9a 8b       	std	Y+18, r25	; 0x12
    13ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b0:	8b 89       	ldd	r24, Y+19	; 0x13
    13b2:	9c 89       	ldd	r25, Y+20	; 0x14
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	9c 8b       	std	Y+20, r25	; 0x14
    13b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ba:	8b 89       	ldd	r24, Y+19	; 0x13
    13bc:	9c 89       	ldd	r25, Y+20	; 0x14
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	69 f7       	brne	.-38     	; 0x139c <lcd_send_command+0x2cc>
    13c2:	14 c0       	rjmp	.+40     	; 0x13ec <lcd_send_command+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c4:	6d 89       	ldd	r22, Y+21	; 0x15
    13c6:	7e 89       	ldd	r23, Y+22	; 0x16
    13c8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ca:	98 8d       	ldd	r25, Y+24	; 0x18
    13cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	9c 8b       	std	Y+20, r25	; 0x14
    13d6:	8b 8b       	std	Y+19, r24	; 0x13
    13d8:	8b 89       	ldd	r24, Y+19	; 0x13
    13da:	9c 89       	ldd	r25, Y+20	; 0x14
    13dc:	98 8b       	std	Y+16, r25	; 0x10
    13de:	8f 87       	std	Y+15, r24	; 0x0f
    13e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e2:	98 89       	ldd	r25, Y+16	; 0x10
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <lcd_send_command+0x314>
    13e8:	98 8b       	std	Y+16, r25	; 0x10
    13ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    13ec:	a8 e3       	ldi	r26, 0x38	; 56
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e8 e3       	ldi	r30, 0x38	; 56
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	87 7f       	andi	r24, 0xF7	; 247
    13f8:	8c 93       	st	X, r24
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 ea       	ldi	r26, 0xA0	; 160
    1400:	b0 e4       	ldi	r27, 0x40	; 64
    1402:	8b 87       	std	Y+11, r24	; 0x0b
    1404:	9c 87       	std	Y+12, r25	; 0x0c
    1406:	ad 87       	std	Y+13, r26	; 0x0d
    1408:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140a:	6b 85       	ldd	r22, Y+11	; 0x0b
    140c:	7c 85       	ldd	r23, Y+12	; 0x0c
    140e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1410:	9e 85       	ldd	r25, Y+14	; 0x0e
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	4a ef       	ldi	r20, 0xFA	; 250
    1418:	54 e4       	ldi	r21, 0x44	; 68
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	8f 83       	std	Y+7, r24	; 0x07
    1424:	98 87       	std	Y+8, r25	; 0x08
    1426:	a9 87       	std	Y+9, r26	; 0x09
    1428:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    142a:	6f 81       	ldd	r22, Y+7	; 0x07
    142c:	78 85       	ldd	r23, Y+8	; 0x08
    142e:	89 85       	ldd	r24, Y+9	; 0x09
    1430:	9a 85       	ldd	r25, Y+10	; 0x0a
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    143e:	88 23       	and	r24, r24
    1440:	2c f4       	brge	.+10     	; 0x144c <lcd_send_command+0x37c>
		__ticks = 1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
    144a:	3f c0       	rjmp	.+126    	; 0x14ca <lcd_send_command+0x3fa>
	else if (__tmp > 65535)
    144c:	6f 81       	ldd	r22, Y+7	; 0x07
    144e:	78 85       	ldd	r23, Y+8	; 0x08
    1450:	89 85       	ldd	r24, Y+9	; 0x09
    1452:	9a 85       	ldd	r25, Y+10	; 0x0a
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	4c f5       	brge	.+82     	; 0x14b6 <lcd_send_command+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1464:	6b 85       	ldd	r22, Y+11	; 0x0b
    1466:	7c 85       	ldd	r23, Y+12	; 0x0c
    1468:	8d 85       	ldd	r24, Y+13	; 0x0d
    146a:	9e 85       	ldd	r25, Y+14	; 0x0e
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <lcd_send_command+0x3dc>
    148e:	88 ec       	ldi	r24, 0xC8	; 200
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	9c 83       	std	Y+4, r25	; 0x04
    1494:	8b 83       	std	Y+3, r24	; 0x03
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <lcd_send_command+0x3ca>
    149e:	9c 83       	std	Y+4, r25	; 0x04
    14a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	69 f7       	brne	.-38     	; 0x148e <lcd_send_command+0x3be>
    14b4:	14 c0       	rjmp	.+40     	; 0x14de <lcd_send_command+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b6:	6f 81       	ldd	r22, Y+7	; 0x07
    14b8:	78 85       	ldd	r23, Y+8	; 0x08
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <lcd_send_command+0x406>
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    14de:	e9 96       	adiw	r28, 0x39	; 57
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <lcd_write_word>:
*return		   		: void
*purpose       	: printing a full word to the
*				 		LCD (Maximun 20 characters)
*/
void lcd_write_word(uint8_t word[20])
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <lcd_write_word+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <lcd_write_word+0x8>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	9c 83       	std	Y+4, r25	; 0x04
    14fe:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    1500:	1a 82       	std	Y+2, r1	; 0x02
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <lcd_write_word+0x34>
	while(word[i]!='\0')
	{
		lcd_write_character(word[i]);
    1506:	29 81       	ldd	r18, Y+1	; 0x01
    1508:	3a 81       	ldd	r19, Y+2	; 0x02
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	fc 01       	movw	r30, r24
    1510:	e2 0f       	add	r30, r18
    1512:	f3 1f       	adc	r31, r19
    1514:	80 81       	ld	r24, Z
    1516:	0e 94 a3 0a 	call	0x1546	; 0x1546 <lcd_write_character>
		i++;
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	89 83       	std	Y+1, r24	; 0x01
*				 		LCD (Maximun 20 characters)
*/
void lcd_write_word(uint8_t word[20])
{
	int i=0;
	while(word[i]!='\0')
    1524:	29 81       	ldd	r18, Y+1	; 0x01
    1526:	3a 81       	ldd	r19, Y+2	; 0x02
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	fc 01       	movw	r30, r24
    152e:	e2 0f       	add	r30, r18
    1530:	f3 1f       	adc	r31, r19
    1532:	80 81       	ld	r24, Z
    1534:	88 23       	and	r24, r24
    1536:	39 f7       	brne	.-50     	; 0x1506 <lcd_write_word+0x16>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <lcd_write_character>:
*purpose       	: sending one characterto LCD by sending
*				 		 the first nibble first then the second nibble
*						 enabling and disabling the LCD in between
*/
void lcd_write_character(uint8_t character)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	e9 97       	sbiw	r28, 0x39	; 57
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	89 af       	std	Y+57, r24	; 0x39

	DATA_BUS=((character & 0b11110000));
    155c:	eb e3       	ldi	r30, 0x3B	; 59
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	89 ad       	ldd	r24, Y+57	; 0x39
    1562:	80 7f       	andi	r24, 0xF0	; 240
    1564:	80 83       	st	Z, r24
	CTL_BUS|=(1<<LCD_RS);
    1566:	a8 e3       	ldi	r26, 0x38	; 56
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e8 e3       	ldi	r30, 0x38	; 56
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	82 60       	ori	r24, 0x02	; 2
    1572:	8c 93       	st	X, r24
	CTL_BUS |=(1<<LCD_EN);
    1574:	a8 e3       	ldi	r26, 0x38	; 56
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e8 e3       	ldi	r30, 0x38	; 56
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	88 60       	ori	r24, 0x08	; 8
    1580:	8c 93       	st	X, r24
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a0 ea       	ldi	r26, 0xA0	; 160
    1588:	b0 e4       	ldi	r27, 0x40	; 64
    158a:	8d ab       	std	Y+53, r24	; 0x35
    158c:	9e ab       	std	Y+54, r25	; 0x36
    158e:	af ab       	std	Y+55, r26	; 0x37
    1590:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1592:	6d a9       	ldd	r22, Y+53	; 0x35
    1594:	7e a9       	ldd	r23, Y+54	; 0x36
    1596:	8f a9       	ldd	r24, Y+55	; 0x37
    1598:	98 ad       	ldd	r25, Y+56	; 0x38
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	4a ef       	ldi	r20, 0xFA	; 250
    15a0:	54 e4       	ldi	r21, 0x44	; 68
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	89 ab       	std	Y+49, r24	; 0x31
    15ac:	9a ab       	std	Y+50, r25	; 0x32
    15ae:	ab ab       	std	Y+51, r26	; 0x33
    15b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15b2:	69 a9       	ldd	r22, Y+49	; 0x31
    15b4:	7a a9       	ldd	r23, Y+50	; 0x32
    15b6:	8b a9       	ldd	r24, Y+51	; 0x33
    15b8:	9c a9       	ldd	r25, Y+52	; 0x34
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	5f e3       	ldi	r21, 0x3F	; 63
    15c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <lcd_write_character+0x8e>
		__ticks = 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	98 ab       	std	Y+48, r25	; 0x30
    15d0:	8f a7       	std	Y+47, r24	; 0x2f
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <lcd_write_character+0x10c>
	else if (__tmp > 65535)
    15d4:	69 a9       	ldd	r22, Y+49	; 0x31
    15d6:	7a a9       	ldd	r23, Y+50	; 0x32
    15d8:	8b a9       	ldd	r24, Y+51	; 0x33
    15da:	9c a9       	ldd	r25, Y+52	; 0x34
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	3f ef       	ldi	r19, 0xFF	; 255
    15e0:	4f e7       	ldi	r20, 0x7F	; 127
    15e2:	57 e4       	ldi	r21, 0x47	; 71
    15e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	4c f5       	brge	.+82     	; 0x163e <lcd_write_character+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ec:	6d a9       	ldd	r22, Y+53	; 0x35
    15ee:	7e a9       	ldd	r23, Y+54	; 0x36
    15f0:	8f a9       	ldd	r24, Y+55	; 0x37
    15f2:	98 ad       	ldd	r25, Y+56	; 0x38
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e2       	ldi	r20, 0x20	; 32
    15fa:	51 e4       	ldi	r21, 0x41	; 65
    15fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	98 ab       	std	Y+48, r25	; 0x30
    1612:	8f a7       	std	Y+47, r24	; 0x2f
    1614:	0f c0       	rjmp	.+30     	; 0x1634 <lcd_write_character+0xee>
    1616:	88 ec       	ldi	r24, 0xC8	; 200
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9e a7       	std	Y+46, r25	; 0x2e
    161c:	8d a7       	std	Y+45, r24	; 0x2d
    161e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1620:	9e a5       	ldd	r25, Y+46	; 0x2e
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <lcd_write_character+0xdc>
    1626:	9e a7       	std	Y+46, r25	; 0x2e
    1628:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162a:	8f a5       	ldd	r24, Y+47	; 0x2f
    162c:	98 a9       	ldd	r25, Y+48	; 0x30
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	98 ab       	std	Y+48, r25	; 0x30
    1632:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1634:	8f a5       	ldd	r24, Y+47	; 0x2f
    1636:	98 a9       	ldd	r25, Y+48	; 0x30
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	69 f7       	brne	.-38     	; 0x1616 <lcd_write_character+0xd0>
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <lcd_write_character+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163e:	69 a9       	ldd	r22, Y+49	; 0x31
    1640:	7a a9       	ldd	r23, Y+50	; 0x32
    1642:	8b a9       	ldd	r24, Y+51	; 0x33
    1644:	9c a9       	ldd	r25, Y+52	; 0x34
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	98 ab       	std	Y+48, r25	; 0x30
    1650:	8f a7       	std	Y+47, r24	; 0x2f
    1652:	8f a5       	ldd	r24, Y+47	; 0x2f
    1654:	98 a9       	ldd	r25, Y+48	; 0x30
    1656:	9c a7       	std	Y+44, r25	; 0x2c
    1658:	8b a7       	std	Y+43, r24	; 0x2b
    165a:	8b a5       	ldd	r24, Y+43	; 0x2b
    165c:	9c a5       	ldd	r25, Y+44	; 0x2c
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <lcd_write_character+0x118>
    1662:	9c a7       	std	Y+44, r25	; 0x2c
    1664:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    1666:	a8 e3       	ldi	r26, 0x38	; 56
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e8 e3       	ldi	r30, 0x38	; 56
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	87 7f       	andi	r24, 0xF7	; 247
    1672:	8c 93       	st	X, r24
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a0 ea       	ldi	r26, 0xA0	; 160
    167a:	b0 e4       	ldi	r27, 0x40	; 64
    167c:	8f a3       	std	Y+39, r24	; 0x27
    167e:	98 a7       	std	Y+40, r25	; 0x28
    1680:	a9 a7       	std	Y+41, r26	; 0x29
    1682:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1684:	6f a1       	ldd	r22, Y+39	; 0x27
    1686:	78 a5       	ldd	r23, Y+40	; 0x28
    1688:	89 a5       	ldd	r24, Y+41	; 0x29
    168a:	9a a5       	ldd	r25, Y+42	; 0x2a
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	4a ef       	ldi	r20, 0xFA	; 250
    1692:	54 e4       	ldi	r21, 0x44	; 68
    1694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	8b a3       	std	Y+35, r24	; 0x23
    169e:	9c a3       	std	Y+36, r25	; 0x24
    16a0:	ad a3       	std	Y+37, r26	; 0x25
    16a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16a4:	6b a1       	ldd	r22, Y+35	; 0x23
    16a6:	7c a1       	ldd	r23, Y+36	; 0x24
    16a8:	8d a1       	ldd	r24, Y+37	; 0x25
    16aa:	9e a1       	ldd	r25, Y+38	; 0x26
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e8       	ldi	r20, 0x80	; 128
    16b2:	5f e3       	ldi	r21, 0x3F	; 63
    16b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16b8:	88 23       	and	r24, r24
    16ba:	2c f4       	brge	.+10     	; 0x16c6 <lcd_write_character+0x180>
		__ticks = 1;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9a a3       	std	Y+34, r25	; 0x22
    16c2:	89 a3       	std	Y+33, r24	; 0x21
    16c4:	3f c0       	rjmp	.+126    	; 0x1744 <lcd_write_character+0x1fe>
	else if (__tmp > 65535)
    16c6:	6b a1       	ldd	r22, Y+35	; 0x23
    16c8:	7c a1       	ldd	r23, Y+36	; 0x24
    16ca:	8d a1       	ldd	r24, Y+37	; 0x25
    16cc:	9e a1       	ldd	r25, Y+38	; 0x26
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	3f ef       	ldi	r19, 0xFF	; 255
    16d2:	4f e7       	ldi	r20, 0x7F	; 127
    16d4:	57 e4       	ldi	r21, 0x47	; 71
    16d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16da:	18 16       	cp	r1, r24
    16dc:	4c f5       	brge	.+82     	; 0x1730 <lcd_write_character+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16de:	6f a1       	ldd	r22, Y+39	; 0x27
    16e0:	78 a5       	ldd	r23, Y+40	; 0x28
    16e2:	89 a5       	ldd	r24, Y+41	; 0x29
    16e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e2       	ldi	r20, 0x20	; 32
    16ec:	51 e4       	ldi	r21, 0x41	; 65
    16ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	bc 01       	movw	r22, r24
    16f8:	cd 01       	movw	r24, r26
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	9a a3       	std	Y+34, r25	; 0x22
    1704:	89 a3       	std	Y+33, r24	; 0x21
    1706:	0f c0       	rjmp	.+30     	; 0x1726 <lcd_write_character+0x1e0>
    1708:	88 ec       	ldi	r24, 0xC8	; 200
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	98 a3       	std	Y+32, r25	; 0x20
    170e:	8f 8f       	std	Y+31, r24	; 0x1f
    1710:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1712:	98 a1       	ldd	r25, Y+32	; 0x20
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <lcd_write_character+0x1ce>
    1718:	98 a3       	std	Y+32, r25	; 0x20
    171a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171c:	89 a1       	ldd	r24, Y+33	; 0x21
    171e:	9a a1       	ldd	r25, Y+34	; 0x22
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	9a a3       	std	Y+34, r25	; 0x22
    1724:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1726:	89 a1       	ldd	r24, Y+33	; 0x21
    1728:	9a a1       	ldd	r25, Y+34	; 0x22
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	69 f7       	brne	.-38     	; 0x1708 <lcd_write_character+0x1c2>
    172e:	14 c0       	rjmp	.+40     	; 0x1758 <lcd_write_character+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1730:	6b a1       	ldd	r22, Y+35	; 0x23
    1732:	7c a1       	ldd	r23, Y+36	; 0x24
    1734:	8d a1       	ldd	r24, Y+37	; 0x25
    1736:	9e a1       	ldd	r25, Y+38	; 0x26
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9a a3       	std	Y+34, r25	; 0x22
    1742:	89 a3       	std	Y+33, r24	; 0x21
    1744:	89 a1       	ldd	r24, Y+33	; 0x21
    1746:	9a a1       	ldd	r25, Y+34	; 0x22
    1748:	9e 8f       	std	Y+30, r25	; 0x1e
    174a:	8d 8f       	std	Y+29, r24	; 0x1d
    174c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    174e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <lcd_write_character+0x20a>
    1754:	9e 8f       	std	Y+30, r25	; 0x1e
    1756:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DATA_BUS=((character & 0b00001111)<<4);
    1758:	eb e3       	ldi	r30, 0x3B	; 59
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	89 ad       	ldd	r24, Y+57	; 0x39
    175e:	88 2f       	mov	r24, r24
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	82 95       	swap	r24
    1764:	92 95       	swap	r25
    1766:	90 7f       	andi	r25, 0xF0	; 240
    1768:	98 27       	eor	r25, r24
    176a:	80 7f       	andi	r24, 0xF0	; 240
    176c:	98 27       	eor	r25, r24
    176e:	80 83       	st	Z, r24
	CTL_BUS |=(1<<LCD_EN);
    1770:	a8 e3       	ldi	r26, 0x38	; 56
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e8 e3       	ldi	r30, 0x38	; 56
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	88 60       	ori	r24, 0x08	; 8
    177c:	8c 93       	st	X, r24
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 ea       	ldi	r26, 0xA0	; 160
    1784:	b0 e4       	ldi	r27, 0x40	; 64
    1786:	89 8f       	std	Y+25, r24	; 0x19
    1788:	9a 8f       	std	Y+26, r25	; 0x1a
    178a:	ab 8f       	std	Y+27, r26	; 0x1b
    178c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178e:	69 8d       	ldd	r22, Y+25	; 0x19
    1790:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1792:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1794:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	4a ef       	ldi	r20, 0xFA	; 250
    179c:	54 e4       	ldi	r21, 0x44	; 68
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	8d 8b       	std	Y+21, r24	; 0x15
    17a8:	9e 8b       	std	Y+22, r25	; 0x16
    17aa:	af 8b       	std	Y+23, r26	; 0x17
    17ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17ae:	6d 89       	ldd	r22, Y+21	; 0x15
    17b0:	7e 89       	ldd	r23, Y+22	; 0x16
    17b2:	8f 89       	ldd	r24, Y+23	; 0x17
    17b4:	98 8d       	ldd	r25, Y+24	; 0x18
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <lcd_write_character+0x28a>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9c 8b       	std	Y+20, r25	; 0x14
    17cc:	8b 8b       	std	Y+19, r24	; 0x13
    17ce:	3f c0       	rjmp	.+126    	; 0x184e <lcd_write_character+0x308>
	else if (__tmp > 65535)
    17d0:	6d 89       	ldd	r22, Y+21	; 0x15
    17d2:	7e 89       	ldd	r23, Y+22	; 0x16
    17d4:	8f 89       	ldd	r24, Y+23	; 0x17
    17d6:	98 8d       	ldd	r25, Y+24	; 0x18
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	3f ef       	ldi	r19, 0xFF	; 255
    17dc:	4f e7       	ldi	r20, 0x7F	; 127
    17de:	57 e4       	ldi	r21, 0x47	; 71
    17e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17e4:	18 16       	cp	r1, r24
    17e6:	4c f5       	brge	.+82     	; 0x183a <lcd_write_character+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e2       	ldi	r20, 0x20	; 32
    17f6:	51 e4       	ldi	r21, 0x41	; 65
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9c 8b       	std	Y+20, r25	; 0x14
    180e:	8b 8b       	std	Y+19, r24	; 0x13
    1810:	0f c0       	rjmp	.+30     	; 0x1830 <lcd_write_character+0x2ea>
    1812:	88 ec       	ldi	r24, 0xC8	; 200
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9a 8b       	std	Y+18, r25	; 0x12
    1818:	89 8b       	std	Y+17, r24	; 0x11
    181a:	89 89       	ldd	r24, Y+17	; 0x11
    181c:	9a 89       	ldd	r25, Y+18	; 0x12
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <lcd_write_character+0x2d8>
    1822:	9a 8b       	std	Y+18, r25	; 0x12
    1824:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1826:	8b 89       	ldd	r24, Y+19	; 0x13
    1828:	9c 89       	ldd	r25, Y+20	; 0x14
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	9c 8b       	std	Y+20, r25	; 0x14
    182e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1830:	8b 89       	ldd	r24, Y+19	; 0x13
    1832:	9c 89       	ldd	r25, Y+20	; 0x14
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	69 f7       	brne	.-38     	; 0x1812 <lcd_write_character+0x2cc>
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <lcd_write_character+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183a:	6d 89       	ldd	r22, Y+21	; 0x15
    183c:	7e 89       	ldd	r23, Y+22	; 0x16
    183e:	8f 89       	ldd	r24, Y+23	; 0x17
    1840:	98 8d       	ldd	r25, Y+24	; 0x18
    1842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	9c 8b       	std	Y+20, r25	; 0x14
    184c:	8b 8b       	std	Y+19, r24	; 0x13
    184e:	8b 89       	ldd	r24, Y+19	; 0x13
    1850:	9c 89       	ldd	r25, Y+20	; 0x14
    1852:	98 8b       	std	Y+16, r25	; 0x10
    1854:	8f 87       	std	Y+15, r24	; 0x0f
    1856:	8f 85       	ldd	r24, Y+15	; 0x0f
    1858:	98 89       	ldd	r25, Y+16	; 0x10
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <lcd_write_character+0x314>
    185e:	98 8b       	std	Y+16, r25	; 0x10
    1860:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    1862:	a8 e3       	ldi	r26, 0x38	; 56
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e8 e3       	ldi	r30, 0x38	; 56
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	87 7f       	andi	r24, 0xF7	; 247
    186e:	8c 93       	st	X, r24
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a0 ea       	ldi	r26, 0xA0	; 160
    1876:	b0 e4       	ldi	r27, 0x40	; 64
    1878:	8b 87       	std	Y+11, r24	; 0x0b
    187a:	9c 87       	std	Y+12, r25	; 0x0c
    187c:	ad 87       	std	Y+13, r26	; 0x0d
    187e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	6b 85       	ldd	r22, Y+11	; 0x0b
    1882:	7c 85       	ldd	r23, Y+12	; 0x0c
    1884:	8d 85       	ldd	r24, Y+13	; 0x0d
    1886:	9e 85       	ldd	r25, Y+14	; 0x0e
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4a ef       	ldi	r20, 0xFA	; 250
    188e:	54 e4       	ldi	r21, 0x44	; 68
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8f 83       	std	Y+7, r24	; 0x07
    189a:	98 87       	std	Y+8, r25	; 0x08
    189c:	a9 87       	std	Y+9, r26	; 0x09
    189e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18a0:	6f 81       	ldd	r22, Y+7	; 0x07
    18a2:	78 85       	ldd	r23, Y+8	; 0x08
    18a4:	89 85       	ldd	r24, Y+9	; 0x09
    18a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	5f e3       	ldi	r21, 0x3F	; 63
    18b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <lcd_write_character+0x37c>
		__ticks = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9e 83       	std	Y+6, r25	; 0x06
    18be:	8d 83       	std	Y+5, r24	; 0x05
    18c0:	3f c0       	rjmp	.+126    	; 0x1940 <lcd_write_character+0x3fa>
	else if (__tmp > 65535)
    18c2:	6f 81       	ldd	r22, Y+7	; 0x07
    18c4:	78 85       	ldd	r23, Y+8	; 0x08
    18c6:	89 85       	ldd	r24, Y+9	; 0x09
    18c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	4f e7       	ldi	r20, 0x7F	; 127
    18d0:	57 e4       	ldi	r21, 0x47	; 71
    18d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	4c f5       	brge	.+82     	; 0x192c <lcd_write_character+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	6b 85       	ldd	r22, Y+11	; 0x0b
    18dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18de:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e2       	ldi	r20, 0x20	; 32
    18e8:	51 e4       	ldi	r21, 0x41	; 65
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <lcd_write_character+0x3dc>
    1904:	88 ec       	ldi	r24, 0xC8	; 200
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9c 83       	std	Y+4, r25	; 0x04
    190a:	8b 83       	std	Y+3, r24	; 0x03
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	9c 81       	ldd	r25, Y+4	; 0x04
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <lcd_write_character+0x3ca>
    1914:	9c 83       	std	Y+4, r25	; 0x04
    1916:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1918:	8d 81       	ldd	r24, Y+5	; 0x05
    191a:	9e 81       	ldd	r25, Y+6	; 0x06
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	9e 83       	std	Y+6, r25	; 0x06
    1920:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	9e 81       	ldd	r25, Y+6	; 0x06
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	69 f7       	brne	.-38     	; 0x1904 <lcd_write_character+0x3be>
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <lcd_write_character+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	9e 81       	ldd	r25, Y+6	; 0x06
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <lcd_write_character+0x406>
    1950:	9a 83       	std	Y+2, r25	; 0x02
    1952:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1954:	e9 96       	adiw	r28, 0x39	; 57
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <lcd_clear>:
*return		   		: void
*purpose       	: Clearing the lcd screen by sending
*				 	the LCD_CMD_CLEAR_DISPLAY command to LCD
*/
void lcd_clear(void)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	2e 97       	sbiw	r28, 0x0e	; 14
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <lcd_send_command>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 ea       	ldi	r26, 0xA0	; 160
    1986:	b0 e4       	ldi	r27, 0x40	; 64
    1988:	8b 87       	std	Y+11, r24	; 0x0b
    198a:	9c 87       	std	Y+12, r25	; 0x0c
    198c:	ad 87       	std	Y+13, r26	; 0x0d
    198e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1990:	6b 85       	ldd	r22, Y+11	; 0x0b
    1992:	7c 85       	ldd	r23, Y+12	; 0x0c
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a ef       	ldi	r20, 0xFA	; 250
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8f 83       	std	Y+7, r24	; 0x07
    19aa:	98 87       	std	Y+8, r25	; 0x08
    19ac:	a9 87       	std	Y+9, r26	; 0x09
    19ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <lcd_clear+0x6c>
		__ticks = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
    19d0:	3f c0       	rjmp	.+126    	; 0x1a50 <lcd_clear+0xea>
	else if (__tmp > 65535)
    19d2:	6f 81       	ldd	r22, Y+7	; 0x07
    19d4:	78 85       	ldd	r23, Y+8	; 0x08
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	3f ef       	ldi	r19, 0xFF	; 255
    19de:	4f e7       	ldi	r20, 0x7F	; 127
    19e0:	57 e4       	ldi	r21, 0x47	; 71
    19e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e6:	18 16       	cp	r1, r24
    19e8:	4c f5       	brge	.+82     	; 0x1a3c <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	0f c0       	rjmp	.+30     	; 0x1a32 <lcd_clear+0xcc>
    1a14:	88 ec       	ldi	r24, 0xC8	; 200
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	8b 83       	std	Y+3, r24	; 0x03
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <lcd_clear+0xba>
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	9e 83       	std	Y+6, r25	; 0x06
    1a30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	69 f7       	brne	.-38     	; 0x1a14 <lcd_clear+0xae>
    1a3a:	14 c0       	rjmp	.+40     	; 0x1a64 <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3e:	78 85       	ldd	r23, Y+8	; 0x08
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <lcd_clear+0xf6>
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1a64:	2e 96       	adiw	r28, 0x0e	; 14
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <lcd_goto_xy>:
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	6a 97       	sbiw	r28, 0x1a	; 26
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	89 8f       	std	Y+25, r24	; 0x19
    1a8c:	6a 8f       	std	Y+26, r22	; 0x1a
	lcd_send_command((0x80|(line<<6))+pos);
    1a8e:	89 8d       	ldd	r24, Y+25	; 0x19
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	00 24       	eor	r0, r0
    1a96:	96 95       	lsr	r25
    1a98:	87 95       	ror	r24
    1a9a:	07 94       	ror	r0
    1a9c:	96 95       	lsr	r25
    1a9e:	87 95       	ror	r24
    1aa0:	07 94       	ror	r0
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	80 2d       	mov	r24, r0
    1aa6:	80 68       	ori	r24, 0x80	; 128
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1aac:	89 0f       	add	r24, r25
    1aae:	0e 94 68 08 	call	0x10d0	; 0x10d0 <lcd_send_command>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a8 e4       	ldi	r26, 0x48	; 72
    1ab8:	b2 e4       	ldi	r27, 0x42	; 66
    1aba:	8d 8b       	std	Y+21, r24	; 0x15
    1abc:	9e 8b       	std	Y+22, r25	; 0x16
    1abe:	af 8b       	std	Y+23, r26	; 0x17
    1ac0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aca:	2b ea       	ldi	r18, 0xAB	; 171
    1acc:	3a ea       	ldi	r19, 0xAA	; 170
    1ace:	4a e2       	ldi	r20, 0x2A	; 42
    1ad0:	50 e4       	ldi	r21, 0x40	; 64
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	89 8b       	std	Y+17, r24	; 0x11
    1adc:	9a 8b       	std	Y+18, r25	; 0x12
    1ade:	ab 8b       	std	Y+19, r26	; 0x13
    1ae0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ae2:	69 89       	ldd	r22, Y+17	; 0x11
    1ae4:	7a 89       	ldd	r23, Y+18	; 0x12
    1ae6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	1c f4       	brge	.+6      	; 0x1b00 <lcd_goto_xy+0x8a>
		__ticks = 1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	88 8b       	std	Y+16, r24	; 0x10
    1afe:	91 c0       	rjmp	.+290    	; 0x1c22 <lcd_goto_xy+0x1ac>
	else if (__tmp > 255)
    1b00:	69 89       	ldd	r22, Y+17	; 0x11
    1b02:	7a 89       	ldd	r23, Y+18	; 0x12
    1b04:	8b 89       	ldd	r24, Y+19	; 0x13
    1b06:	9c 89       	ldd	r25, Y+20	; 0x14
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	53 e4       	ldi	r21, 0x43	; 67
    1b10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	0c f0       	brlt	.+2      	; 0x1b1a <lcd_goto_xy+0xa4>
    1b18:	7b c0       	rjmp	.+246    	; 0x1c10 <lcd_goto_xy+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1b1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b20:	98 8d       	ldd	r25, Y+24	; 0x18
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	4a e7       	ldi	r20, 0x7A	; 122
    1b28:	54 e4       	ldi	r21, 0x44	; 68
    1b2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8c 87       	std	Y+12, r24	; 0x0c
    1b34:	9d 87       	std	Y+13, r25	; 0x0d
    1b36:	ae 87       	std	Y+14, r26	; 0x0e
    1b38:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b3c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b40:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	4a ef       	ldi	r20, 0xFA	; 250
    1b48:	54 e4       	ldi	r21, 0x44	; 68
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	88 87       	std	Y+8, r24	; 0x08
    1b54:	99 87       	std	Y+9, r25	; 0x09
    1b56:	aa 87       	std	Y+10, r26	; 0x0a
    1b58:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b5a:	68 85       	ldd	r22, Y+8	; 0x08
    1b5c:	79 85       	ldd	r23, Y+9	; 0x09
    1b5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e8       	ldi	r20, 0x80	; 128
    1b68:	5f e3       	ldi	r21, 0x3F	; 63
    1b6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b6e:	88 23       	and	r24, r24
    1b70:	2c f4       	brge	.+10     	; 0x1b7c <lcd_goto_xy+0x106>
		__ticks = 1;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9f 83       	std	Y+7, r25	; 0x07
    1b78:	8e 83       	std	Y+6, r24	; 0x06
    1b7a:	3f c0       	rjmp	.+126    	; 0x1bfa <lcd_goto_xy+0x184>
	else if (__tmp > 65535)
    1b7c:	68 85       	ldd	r22, Y+8	; 0x08
    1b7e:	79 85       	ldd	r23, Y+9	; 0x09
    1b80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	3f ef       	ldi	r19, 0xFF	; 255
    1b88:	4f e7       	ldi	r20, 0x7F	; 127
    1b8a:	57 e4       	ldi	r21, 0x47	; 71
    1b8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b90:	18 16       	cp	r1, r24
    1b92:	4c f5       	brge	.+82     	; 0x1be6 <lcd_goto_xy+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b94:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b96:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b98:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e2       	ldi	r20, 0x20	; 32
    1ba2:	51 e4       	ldi	r21, 0x41	; 65
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	bc 01       	movw	r22, r24
    1bae:	cd 01       	movw	r24, r26
    1bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9f 83       	std	Y+7, r25	; 0x07
    1bba:	8e 83       	std	Y+6, r24	; 0x06
    1bbc:	0f c0       	rjmp	.+30     	; 0x1bdc <lcd_goto_xy+0x166>
    1bbe:	88 ec       	ldi	r24, 0xC8	; 200
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9d 83       	std	Y+5, r25	; 0x05
    1bc4:	8c 83       	std	Y+4, r24	; 0x04
    1bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <lcd_goto_xy+0x154>
    1bce:	9d 83       	std	Y+5, r25	; 0x05
    1bd0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	9f 83       	std	Y+7, r25	; 0x07
    1bda:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bdc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bde:	9f 81       	ldd	r25, Y+7	; 0x07
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	69 f7       	brne	.-38     	; 0x1bbe <lcd_goto_xy+0x148>
    1be4:	24 c0       	rjmp	.+72     	; 0x1c2e <lcd_goto_xy+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be6:	68 85       	ldd	r22, Y+8	; 0x08
    1be8:	79 85       	ldd	r23, Y+9	; 0x09
    1bea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	9f 83       	std	Y+7, r25	; 0x07
    1bf8:	8e 83       	std	Y+6, r24	; 0x06
    1bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfe:	9b 83       	std	Y+3, r25	; 0x03
    1c00:	8a 83       	std	Y+2, r24	; 0x02
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	9b 81       	ldd	r25, Y+3	; 0x03
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <lcd_goto_xy+0x190>
    1c0a:	9b 83       	std	Y+3, r25	; 0x03
    1c0c:	8a 83       	std	Y+2, r24	; 0x02
    1c0e:	0f c0       	rjmp	.+30     	; 0x1c2e <lcd_goto_xy+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c10:	69 89       	ldd	r22, Y+17	; 0x11
    1c12:	7a 89       	ldd	r23, Y+18	; 0x12
    1c14:	8b 89       	ldd	r24, Y+19	; 0x13
    1c16:	9c 89       	ldd	r25, Y+20	; 0x14
    1c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	88 8b       	std	Y+16, r24	; 0x10
    1c22:	88 89       	ldd	r24, Y+16	; 0x10
    1c24:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	8a 95       	dec	r24
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <lcd_goto_xy+0x1b2>
    1c2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us (50);
}
    1c2e:	6a 96       	adiw	r28, 0x1a	; 26
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <main>:
#include  "LCD/LCD.h"
#include  "ultrasonic.h"

int main(){
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	6c 97       	sbiw	r28, 0x1c	; 28
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61

lcd_init();
    1c54:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_init>
ultrasonic_init();
    1c58:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <ultrasonic_init>
sei();
    1c5c:	78 94       	sei

lcd_write_word("Distance is ");
    1c5e:	80 e6       	ldi	r24, 0x60	; 96
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <lcd_write_word>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a0 e2       	ldi	r26, 0x20	; 32
    1c6c:	b1 e4       	ldi	r27, 0x41	; 65
    1c6e:	89 8f       	std	Y+25, r24	; 0x19
    1c70:	9a 8f       	std	Y+26, r25	; 0x1a
    1c72:	ab 8f       	std	Y+27, r26	; 0x1b
    1c74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	69 8d       	ldd	r22, Y+25	; 0x19
    1c78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a ef       	ldi	r20, 0xFA	; 250
    1c84:	54 e4       	ldi	r21, 0x44	; 68
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8d 8b       	std	Y+21, r24	; 0x15
    1c90:	9e 8b       	std	Y+22, r25	; 0x16
    1c92:	af 8b       	std	Y+23, r26	; 0x17
    1c94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c96:	6d 89       	ldd	r22, Y+21	; 0x15
    1c98:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <main+0x78>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9c 8b       	std	Y+20, r25	; 0x14
    1cb4:	8b 8b       	std	Y+19, r24	; 0x13
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <main+0xf6>
	else if (__tmp > 65535)
    1cb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cba:	7e 89       	ldd	r23, Y+22	; 0x16
    1cbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9c 8b       	std	Y+20, r25	; 0x14
    1cf6:	8b 8b       	std	Y+19, r24	; 0x13
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <main+0xd8>
    1cfa:	88 ec       	ldi	r24, 0xC8	; 200
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9a 8b       	std	Y+18, r25	; 0x12
    1d00:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d02:	89 89       	ldd	r24, Y+17	; 0x11
    1d04:	9a 89       	ldd	r25, Y+18	; 0x12
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <main+0xc6>
    1d0a:	9a 8b       	std	Y+18, r25	; 0x12
    1d0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d10:	9c 89       	ldd	r25, Y+20	; 0x14
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9c 8b       	std	Y+20, r25	; 0x14
    1d16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	8b 89       	ldd	r24, Y+19	; 0x13
    1d1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <main+0xba>
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	6d 89       	ldd	r22, Y+21	; 0x15
    1d24:	7e 89       	ldd	r23, Y+22	; 0x16
    1d26:	8f 89       	ldd	r24, Y+23	; 0x17
    1d28:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9c 8b       	std	Y+20, r25	; 0x14
    1d34:	8b 8b       	std	Y+19, r24	; 0x13
    1d36:	8b 89       	ldd	r24, Y+19	; 0x13
    1d38:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3a:	98 8b       	std	Y+16, r25	; 0x10
    1d3c:	8f 87       	std	Y+15, r24	; 0x0f
    1d3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d40:	98 89       	ldd	r25, Y+16	; 0x10
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <main+0x102>
    1d46:	98 8b       	std	Y+16, r25	; 0x10
    1d48:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(10);
while(1){
  ultra_triger();
    1d4a:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <ultra_triger>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a0 e7       	ldi	r26, 0x70	; 112
    1d54:	b1 e4       	ldi	r27, 0x41	; 65
    1d56:	8b 87       	std	Y+11, r24	; 0x0b
    1d58:	9c 87       	std	Y+12, r25	; 0x0c
    1d5a:	ad 87       	std	Y+13, r26	; 0x0d
    1d5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	4a ef       	ldi	r20, 0xFA	; 250
    1d6c:	54 e4       	ldi	r21, 0x44	; 68
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	8f 83       	std	Y+7, r24	; 0x07
    1d78:	98 87       	std	Y+8, r25	; 0x08
    1d7a:	a9 87       	std	Y+9, r26	; 0x09
    1d7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	5f e3       	ldi	r21, 0x3F	; 63
    1d8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d92:	88 23       	and	r24, r24
    1d94:	2c f4       	brge	.+10     	; 0x1da0 <main+0x160>
		__ticks = 1;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
    1d9e:	3f c0       	rjmp	.+126    	; 0x1e1e <main+0x1de>
	else if (__tmp > 65535)
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	4f e7       	ldi	r20, 0x7F	; 127
    1dae:	57 e4       	ldi	r21, 0x47	; 71
    1db0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db4:	18 16       	cp	r1, r24
    1db6:	4c f5       	brge	.+82     	; 0x1e0a <main+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e2       	ldi	r20, 0x20	; 32
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	0f c0       	rjmp	.+30     	; 0x1e00 <main+0x1c0>
    1de2:	88 ec       	ldi	r24, 0xC8	; 200
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	9c 83       	std	Y+4, r25	; 0x04
    1de8:	8b 83       	std	Y+3, r24	; 0x03
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <main+0x1ae>
    1df2:	9c 83       	std	Y+4, r25	; 0x04
    1df4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df6:	8d 81       	ldd	r24, Y+5	; 0x05
    1df8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	69 f7       	brne	.-38     	; 0x1de2 <main+0x1a2>
    1e08:	a0 cf       	rjmp	.-192    	; 0x1d4a <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0c:	78 85       	ldd	r23, Y+8	; 0x08
    1e0e:	89 85       	ldd	r24, Y+9	; 0x09
    1e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <main+0x1ea>
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	8b cf       	rjmp	.-234    	; 0x1d4a <main+0x10a>

00001e34 <ultrasonic_init>:
uint8_t rising_edge=0;
uint32_t timer_counter=0;
uint32_t distance;
uint8_t distance_str[10];

void ultrasonic_init(void){
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62

  TRIGER_DDR|=(1<<TRIGER);
    1e3c:	a1 e3       	ldi	r26, 0x31	; 49
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e1 e3       	ldi	r30, 0x31	; 49
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	81 60       	ori	r24, 0x01	; 1
    1e48:	8c 93       	st	X, r24
  ECHO_DDR&=~(1<<ECHO);
    1e4a:	a1 e3       	ldi	r26, 0x31	; 49
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e1 e3       	ldi	r30, 0x31	; 49
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	87 7f       	andi	r24, 0xF7	; 247
    1e56:	8c 93       	st	X, r24
  ECHO_PULLUP|=(1<<ECHO);
    1e58:	a2 e3       	ldi	r26, 0x32	; 50
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e2 e3       	ldi	r30, 0x32	; 50
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	88 60       	ori	r24, 0x08	; 8
    1e64:	8c 93       	st	X, r24
  enable_ex_interrupt();
    1e66:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <enable_ex_interrupt>
  timer0_init();
    1e6a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <timer0_init>
  return;
}
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <enable_ex_interrupt>:

void enable_ex_interrupt(void){
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62

  MCUCR |= (1<<ISC10);		// Trigger INT1 on any logic change.
    1e7c:	a5 e5       	ldi	r26, 0x55	; 85
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e5 e5       	ldi	r30, 0x55	; 85
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	84 60       	ori	r24, 0x04	; 4
    1e88:	8c 93       	st	X, r24
  GICR  |= (1<<INT1);			// Enable INT1 interrupts.
    1e8a:	ab e5       	ldi	r26, 0x5B	; 91
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	eb e5       	ldi	r30, 0x5B	; 91
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	80 68       	ori	r24, 0x80	; 128
    1e96:	8c 93       	st	X, r24

  return;
}
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <ultra_triger>:

void ultra_triger(void){
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	68 97       	sbiw	r28, 0x18	; 24
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
  if(!sensor_working){
    1eb2:	80 91 7a 00 	lds	r24, 0x007A
    1eb6:	88 23       	and	r24, r24
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <ultra_triger+0x1e>
    1eba:	cf c0       	rjmp	.+414    	; 0x205a <ultra_triger+0x1bc>
    TRIGER_PORT|=(1<<TRIGER);
    1ebc:	a2 e3       	ldi	r26, 0x32	; 50
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e2 e3       	ldi	r30, 0x32	; 50
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	81 60       	ori	r24, 0x01	; 1
    1ec8:	8c 93       	st	X, r24
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	a0 e7       	ldi	r26, 0x70	; 112
    1ed0:	b1 e4       	ldi	r27, 0x41	; 65
    1ed2:	8d 8b       	std	Y+21, r24	; 0x15
    1ed4:	9e 8b       	std	Y+22, r25	; 0x16
    1ed6:	af 8b       	std	Y+23, r26	; 0x17
    1ed8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1eda:	6d 89       	ldd	r22, Y+21	; 0x15
    1edc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ede:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee2:	2b ea       	ldi	r18, 0xAB	; 171
    1ee4:	3a ea       	ldi	r19, 0xAA	; 170
    1ee6:	4a e2       	ldi	r20, 0x2A	; 42
    1ee8:	50 e4       	ldi	r21, 0x40	; 64
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	89 8b       	std	Y+17, r24	; 0x11
    1ef4:	9a 8b       	std	Y+18, r25	; 0x12
    1ef6:	ab 8b       	std	Y+19, r26	; 0x13
    1ef8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1efa:	69 89       	ldd	r22, Y+17	; 0x11
    1efc:	7a 89       	ldd	r23, Y+18	; 0x12
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e8       	ldi	r20, 0x80	; 128
    1f08:	5f e3       	ldi	r21, 0x3F	; 63
    1f0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f0e:	88 23       	and	r24, r24
    1f10:	1c f4       	brge	.+6      	; 0x1f18 <ultra_triger+0x7a>
		__ticks = 1;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	88 8b       	std	Y+16, r24	; 0x10
    1f16:	91 c0       	rjmp	.+290    	; 0x203a <ultra_triger+0x19c>
	else if (__tmp > 255)
    1f18:	69 89       	ldd	r22, Y+17	; 0x11
    1f1a:	7a 89       	ldd	r23, Y+18	; 0x12
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	53 e4       	ldi	r21, 0x43	; 67
    1f28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	0c f0       	brlt	.+2      	; 0x1f32 <ultra_triger+0x94>
    1f30:	7b c0       	rjmp	.+246    	; 0x2028 <ultra_triger+0x18a>
	{
		_delay_ms(__us / 1000.0);
    1f32:	6d 89       	ldd	r22, Y+21	; 0x15
    1f34:	7e 89       	ldd	r23, Y+22	; 0x16
    1f36:	8f 89       	ldd	r24, Y+23	; 0x17
    1f38:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	4a e7       	ldi	r20, 0x7A	; 122
    1f40:	54 e4       	ldi	r21, 0x44	; 68
    1f42:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	8c 87       	std	Y+12, r24	; 0x0c
    1f4c:	9d 87       	std	Y+13, r25	; 0x0d
    1f4e:	ae 87       	std	Y+14, r26	; 0x0e
    1f50:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f52:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f54:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f56:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f58:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	4a ef       	ldi	r20, 0xFA	; 250
    1f60:	54 e4       	ldi	r21, 0x44	; 68
    1f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	88 87       	std	Y+8, r24	; 0x08
    1f6c:	99 87       	std	Y+9, r25	; 0x09
    1f6e:	aa 87       	std	Y+10, r26	; 0x0a
    1f70:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f72:	68 85       	ldd	r22, Y+8	; 0x08
    1f74:	79 85       	ldd	r23, Y+9	; 0x09
    1f76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f78:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e8       	ldi	r20, 0x80	; 128
    1f80:	5f e3       	ldi	r21, 0x3F	; 63
    1f82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f86:	88 23       	and	r24, r24
    1f88:	2c f4       	brge	.+10     	; 0x1f94 <ultra_triger+0xf6>
		__ticks = 1;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	9f 83       	std	Y+7, r25	; 0x07
    1f90:	8e 83       	std	Y+6, r24	; 0x06
    1f92:	3f c0       	rjmp	.+126    	; 0x2012 <ultra_triger+0x174>
	else if (__tmp > 65535)
    1f94:	68 85       	ldd	r22, Y+8	; 0x08
    1f96:	79 85       	ldd	r23, Y+9	; 0x09
    1f98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	3f ef       	ldi	r19, 0xFF	; 255
    1fa0:	4f e7       	ldi	r20, 0x7F	; 127
    1fa2:	57 e4       	ldi	r21, 0x47	; 71
    1fa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa8:	18 16       	cp	r1, r24
    1faa:	4c f5       	brge	.+82     	; 0x1ffe <ultra_triger+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fac:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fae:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e2       	ldi	r20, 0x20	; 32
    1fba:	51 e4       	ldi	r21, 0x41	; 65
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	9f 83       	std	Y+7, r25	; 0x07
    1fd2:	8e 83       	std	Y+6, r24	; 0x06
    1fd4:	0f c0       	rjmp	.+30     	; 0x1ff4 <ultra_triger+0x156>
    1fd6:	88 ec       	ldi	r24, 0xC8	; 200
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9d 83       	std	Y+5, r25	; 0x05
    1fdc:	8c 83       	std	Y+4, r24	; 0x04
    1fde:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <ultra_triger+0x144>
    1fe6:	9d 83       	std	Y+5, r25	; 0x05
    1fe8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fea:	8e 81       	ldd	r24, Y+6	; 0x06
    1fec:	9f 81       	ldd	r25, Y+7	; 0x07
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	9f 83       	std	Y+7, r25	; 0x07
    1ff2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	69 f7       	brne	.-38     	; 0x1fd6 <ultra_triger+0x138>
    1ffc:	24 c0       	rjmp	.+72     	; 0x2046 <ultra_triger+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffe:	68 85       	ldd	r22, Y+8	; 0x08
    2000:	79 85       	ldd	r23, Y+9	; 0x09
    2002:	8a 85       	ldd	r24, Y+10	; 0x0a
    2004:	9b 85       	ldd	r25, Y+11	; 0x0b
    2006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	9f 83       	std	Y+7, r25	; 0x07
    2010:	8e 83       	std	Y+6, r24	; 0x06
    2012:	8e 81       	ldd	r24, Y+6	; 0x06
    2014:	9f 81       	ldd	r25, Y+7	; 0x07
    2016:	9b 83       	std	Y+3, r25	; 0x03
    2018:	8a 83       	std	Y+2, r24	; 0x02
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	9b 81       	ldd	r25, Y+3	; 0x03
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <ultra_triger+0x180>
    2022:	9b 83       	std	Y+3, r25	; 0x03
    2024:	8a 83       	std	Y+2, r24	; 0x02
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <ultra_triger+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2028:	69 89       	ldd	r22, Y+17	; 0x11
    202a:	7a 89       	ldd	r23, Y+18	; 0x12
    202c:	8b 89       	ldd	r24, Y+19	; 0x13
    202e:	9c 89       	ldd	r25, Y+20	; 0x14
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	88 8b       	std	Y+16, r24	; 0x10
    203a:	88 89       	ldd	r24, Y+16	; 0x10
    203c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	8a 95       	dec	r24
    2042:	f1 f7       	brne	.-4      	; 0x2040 <ultra_triger+0x1a2>
    2044:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);
    TRIGER_PORT&=~(1<<TRIGER);
    2046:	a2 e3       	ldi	r26, 0x32	; 50
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e2 e3       	ldi	r30, 0x32	; 50
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	8e 7f       	andi	r24, 0xFE	; 254
    2052:	8c 93       	st	X, r24
    sensor_working=1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	80 93 7a 00 	sts	0x007A, r24
  }
}
    205a:	68 96       	adiw	r28, 0x18	; 24
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <__vector_2>:

ISR(INT1_vect){
    206c:	1f 92       	push	r1
    206e:	0f 92       	push	r0
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	0f 92       	push	r0
    2074:	11 24       	eor	r1, r1
    2076:	2f 93       	push	r18
    2078:	3f 93       	push	r19
    207a:	4f 93       	push	r20
    207c:	5f 93       	push	r21
    207e:	6f 93       	push	r22
    2080:	7f 93       	push	r23
    2082:	8f 93       	push	r24
    2084:	9f 93       	push	r25
    2086:	af 93       	push	r26
    2088:	bf 93       	push	r27
    208a:	ef 93       	push	r30
    208c:	ff 93       	push	r31
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	2e 97       	sbiw	r28, 0x0e	; 14
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	cd bf       	out	0x3d, r28	; 61
  if(sensor_working==1){
    209c:	80 91 7a 00 	lds	r24, 0x007A
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <__vector_2+0x3a>
    20a4:	de c0       	rjmp	.+444    	; 0x2262 <__vector_2+0x1f6>
    if(rising_edge==0){
    20a6:	80 91 7b 00 	lds	r24, 0x007B
    20aa:	88 23       	and	r24, r24
    20ac:	79 f4       	brne	.+30     	; 0x20cc <__vector_2+0x60>
      TCNT0=0x00;
    20ae:	e2 e5       	ldi	r30, 0x52	; 82
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	10 82       	st	Z, r1
      rising_edge=1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	80 93 7b 00 	sts	0x007B, r24
      timer_counter=0;
    20ba:	10 92 7c 00 	sts	0x007C, r1
    20be:	10 92 7d 00 	sts	0x007D, r1
    20c2:	10 92 7e 00 	sts	0x007E, r1
    20c6:	10 92 7f 00 	sts	0x007F, r1
    20ca:	cb c0       	rjmp	.+406    	; 0x2262 <__vector_2+0x1f6>
    }
  else{
    distance=(timer_counter*256+TCNT0)/466;
    20cc:	80 91 7c 00 	lds	r24, 0x007C
    20d0:	90 91 7d 00 	lds	r25, 0x007D
    20d4:	a0 91 7e 00 	lds	r26, 0x007E
    20d8:	b0 91 7f 00 	lds	r27, 0x007F
    20dc:	22 27       	eor	r18, r18
    20de:	38 2f       	mov	r19, r24
    20e0:	49 2f       	mov	r20, r25
    20e2:	5a 2f       	mov	r21, r26
    20e4:	e2 e5       	ldi	r30, 0x52	; 82
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	88 2f       	mov	r24, r24
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a0 e0       	ldi	r26, 0x00	; 0
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	82 0f       	add	r24, r18
    20f4:	93 1f       	adc	r25, r19
    20f6:	a4 1f       	adc	r26, r20
    20f8:	b5 1f       	adc	r27, r21
    20fa:	22 ed       	ldi	r18, 0xD2	; 210
    20fc:	31 e0       	ldi	r19, 0x01	; 1
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	0e 94 97 11 	call	0x232e	; 0x232e <__udivmodsi4>
    210a:	da 01       	movw	r26, r20
    210c:	c9 01       	movw	r24, r18
    210e:	80 93 80 00 	sts	0x0080, r24
    2112:	90 93 81 00 	sts	0x0081, r25
    2116:	a0 93 82 00 	sts	0x0082, r26
    211a:	b0 93 83 00 	sts	0x0083, r27
    lcd_goto_xy(1,0);
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <lcd_goto_xy>
  	itoa(distance,distance_str,10);
    212a:	80 91 80 00 	lds	r24, 0x0080
    212e:	90 91 81 00 	lds	r25, 0x0081
    2132:	a0 91 82 00 	lds	r26, 0x0082
    2136:	b0 91 83 00 	lds	r27, 0x0083
    213a:	24 e8       	ldi	r18, 0x84	; 132
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	b9 01       	movw	r22, r18
    2140:	4a e0       	ldi	r20, 0x0A	; 10
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	0e 94 02 12 	call	0x2404	; 0x2404 <itoa>
  	strcat(distance_str, " cm ");
    2148:	84 e8       	ldi	r24, 0x84	; 132
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <strlen>
    2150:	8c 57       	subi	r24, 0x7C	; 124
    2152:	9f 4f       	sbci	r25, 0xFF	; 255
    2154:	2d e6       	ldi	r18, 0x6D	; 109
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	b9 01       	movw	r22, r18
    215a:	45 e0       	ldi	r20, 0x05	; 5
    215c:	50 e0       	ldi	r21, 0x00	; 0
    215e:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <memcpy>
  	lcd_write_word(distance_str);
    2162:	84 e8       	ldi	r24, 0x84	; 132
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <lcd_write_word>
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	a0 e2       	ldi	r26, 0x20	; 32
    2170:	b2 e4       	ldi	r27, 0x42	; 66
    2172:	8b 87       	std	Y+11, r24	; 0x0b
    2174:	9c 87       	std	Y+12, r25	; 0x0c
    2176:	ad 87       	std	Y+13, r26	; 0x0d
    2178:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217a:	6b 85       	ldd	r22, Y+11	; 0x0b
    217c:	7c 85       	ldd	r23, Y+12	; 0x0c
    217e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2180:	9e 85       	ldd	r25, Y+14	; 0x0e
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	4a ef       	ldi	r20, 0xFA	; 250
    2188:	54 e4       	ldi	r21, 0x44	; 68
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	8f 83       	std	Y+7, r24	; 0x07
    2194:	98 87       	std	Y+8, r25	; 0x08
    2196:	a9 87       	std	Y+9, r26	; 0x09
    2198:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    219a:	6f 81       	ldd	r22, Y+7	; 0x07
    219c:	78 85       	ldd	r23, Y+8	; 0x08
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e8       	ldi	r20, 0x80	; 128
    21a8:	5f e3       	ldi	r21, 0x3F	; 63
    21aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ae:	88 23       	and	r24, r24
    21b0:	2c f4       	brge	.+10     	; 0x21bc <__vector_2+0x150>
		__ticks = 1;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
    21ba:	3f c0       	rjmp	.+126    	; 0x223a <__vector_2+0x1ce>
	else if (__tmp > 65535)
    21bc:	6f 81       	ldd	r22, Y+7	; 0x07
    21be:	78 85       	ldd	r23, Y+8	; 0x08
    21c0:	89 85       	ldd	r24, Y+9	; 0x09
    21c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	3f ef       	ldi	r19, 0xFF	; 255
    21c8:	4f e7       	ldi	r20, 0x7F	; 127
    21ca:	57 e4       	ldi	r21, 0x47	; 71
    21cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d0:	18 16       	cp	r1, r24
    21d2:	4c f5       	brge	.+82     	; 0x2226 <__vector_2+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21da:	9e 85       	ldd	r25, Y+14	; 0x0e
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e2       	ldi	r20, 0x20	; 32
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <__vector_2+0x1b0>
    21fe:	88 ec       	ldi	r24, 0xC8	; 200
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9c 83       	std	Y+4, r25	; 0x04
    2204:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <__vector_2+0x19e>
    220e:	9c 83       	std	Y+4, r25	; 0x04
    2210:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2212:	8d 81       	ldd	r24, Y+5	; 0x05
    2214:	9e 81       	ldd	r25, Y+6	; 0x06
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	69 f7       	brne	.-38     	; 0x21fe <__vector_2+0x192>
    2224:	14 c0       	rjmp	.+40     	; 0x224e <__vector_2+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2226:	6f 81       	ldd	r22, Y+7	; 0x07
    2228:	78 85       	ldd	r23, Y+8	; 0x08
    222a:	89 85       	ldd	r24, Y+9	; 0x09
    222c:	9a 85       	ldd	r25, Y+10	; 0x0a
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9e 83       	std	Y+6, r25	; 0x06
    2238:	8d 83       	std	Y+5, r24	; 0x05
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	9e 81       	ldd	r25, Y+6	; 0x06
    223e:	9a 83       	std	Y+2, r25	; 0x02
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <__vector_2+0x1da>
    224a:	9a 83       	std	Y+2, r25	; 0x02
    224c:	89 83       	std	Y+1, r24	; 0x01
  	_delay_ms(40);
    timer_counter=0;
    224e:	10 92 7c 00 	sts	0x007C, r1
    2252:	10 92 7d 00 	sts	0x007D, r1
    2256:	10 92 7e 00 	sts	0x007E, r1
    225a:	10 92 7f 00 	sts	0x007F, r1
    rising_edge=0;
    225e:	10 92 7b 00 	sts	0x007B, r1
  }
}}
    2262:	2e 96       	adiw	r28, 0x0e	; 14
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	ff 91       	pop	r31
    226e:	ef 91       	pop	r30
    2270:	bf 91       	pop	r27
    2272:	af 91       	pop	r26
    2274:	9f 91       	pop	r25
    2276:	8f 91       	pop	r24
    2278:	7f 91       	pop	r23
    227a:	6f 91       	pop	r22
    227c:	5f 91       	pop	r21
    227e:	4f 91       	pop	r20
    2280:	3f 91       	pop	r19
    2282:	2f 91       	pop	r18
    2284:	0f 90       	pop	r0
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	0f 90       	pop	r0
    228a:	1f 90       	pop	r1
    228c:	18 95       	reti

0000228e <__vector_11>:

ISR(TIMER0_OVF_vect){
    228e:	1f 92       	push	r1
    2290:	0f 92       	push	r0
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	0f 92       	push	r0
    2296:	11 24       	eor	r1, r1
    2298:	2f 93       	push	r18
    229a:	8f 93       	push	r24
    229c:	9f 93       	push	r25
    229e:	af 93       	push	r26
    22a0:	bf 93       	push	r27
    22a2:	ef 93       	push	r30
    22a4:	ff 93       	push	r31
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    timer_counter++;
    22ae:	80 91 7c 00 	lds	r24, 0x007C
    22b2:	90 91 7d 00 	lds	r25, 0x007D
    22b6:	a0 91 7e 00 	lds	r26, 0x007E
    22ba:	b0 91 7f 00 	lds	r27, 0x007F
    22be:	01 96       	adiw	r24, 0x01	; 1
    22c0:	a1 1d       	adc	r26, r1
    22c2:	b1 1d       	adc	r27, r1
    22c4:	80 93 7c 00 	sts	0x007C, r24
    22c8:	90 93 7d 00 	sts	0x007D, r25
    22cc:	a0 93 7e 00 	sts	0x007E, r26
    22d0:	b0 93 7f 00 	sts	0x007F, r27
    if(timer_counter >730){
    22d4:	80 91 7c 00 	lds	r24, 0x007C
    22d8:	90 91 7d 00 	lds	r25, 0x007D
    22dc:	a0 91 7e 00 	lds	r26, 0x007E
    22e0:	b0 91 7f 00 	lds	r27, 0x007F
    22e4:	8b 3d       	cpi	r24, 0xDB	; 219
    22e6:	22 e0       	ldi	r18, 0x02	; 2
    22e8:	92 07       	cpc	r25, r18
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	a2 07       	cpc	r26, r18
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	b2 07       	cpc	r27, r18
    22f2:	78 f0       	brcs	.+30     	; 0x2312 <__vector_11+0x84>
      TCNT0=0x00;
    22f4:	e2 e5       	ldi	r30, 0x52	; 82
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	10 82       	st	Z, r1
      sensor_working=0;
    22fa:	10 92 7a 00 	sts	0x007A, r1
      rising_edge=0;
    22fe:	10 92 7b 00 	sts	0x007B, r1
      timer_counter=0;
    2302:	10 92 7c 00 	sts	0x007C, r1
    2306:	10 92 7d 00 	sts	0x007D, r1
    230a:	10 92 7e 00 	sts	0x007E, r1
    230e:	10 92 7f 00 	sts	0x007F, r1
    }
}
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	ff 91       	pop	r31
    2318:	ef 91       	pop	r30
    231a:	bf 91       	pop	r27
    231c:	af 91       	pop	r26
    231e:	9f 91       	pop	r25
    2320:	8f 91       	pop	r24
    2322:	2f 91       	pop	r18
    2324:	0f 90       	pop	r0
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	0f 90       	pop	r0
    232a:	1f 90       	pop	r1
    232c:	18 95       	reti

0000232e <__udivmodsi4>:
    232e:	a1 e2       	ldi	r26, 0x21	; 33
    2330:	1a 2e       	mov	r1, r26
    2332:	aa 1b       	sub	r26, r26
    2334:	bb 1b       	sub	r27, r27
    2336:	fd 01       	movw	r30, r26
    2338:	0d c0       	rjmp	.+26     	; 0x2354 <__udivmodsi4_ep>

0000233a <__udivmodsi4_loop>:
    233a:	aa 1f       	adc	r26, r26
    233c:	bb 1f       	adc	r27, r27
    233e:	ee 1f       	adc	r30, r30
    2340:	ff 1f       	adc	r31, r31
    2342:	a2 17       	cp	r26, r18
    2344:	b3 07       	cpc	r27, r19
    2346:	e4 07       	cpc	r30, r20
    2348:	f5 07       	cpc	r31, r21
    234a:	20 f0       	brcs	.+8      	; 0x2354 <__udivmodsi4_ep>
    234c:	a2 1b       	sub	r26, r18
    234e:	b3 0b       	sbc	r27, r19
    2350:	e4 0b       	sbc	r30, r20
    2352:	f5 0b       	sbc	r31, r21

00002354 <__udivmodsi4_ep>:
    2354:	66 1f       	adc	r22, r22
    2356:	77 1f       	adc	r23, r23
    2358:	88 1f       	adc	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	1a 94       	dec	r1
    235e:	69 f7       	brne	.-38     	; 0x233a <__udivmodsi4_loop>
    2360:	60 95       	com	r22
    2362:	70 95       	com	r23
    2364:	80 95       	com	r24
    2366:	90 95       	com	r25
    2368:	9b 01       	movw	r18, r22
    236a:	ac 01       	movw	r20, r24
    236c:	bd 01       	movw	r22, r26
    236e:	cf 01       	movw	r24, r30
    2370:	08 95       	ret

00002372 <__prologue_saves__>:
    2372:	2f 92       	push	r2
    2374:	3f 92       	push	r3
    2376:	4f 92       	push	r4
    2378:	5f 92       	push	r5
    237a:	6f 92       	push	r6
    237c:	7f 92       	push	r7
    237e:	8f 92       	push	r8
    2380:	9f 92       	push	r9
    2382:	af 92       	push	r10
    2384:	bf 92       	push	r11
    2386:	cf 92       	push	r12
    2388:	df 92       	push	r13
    238a:	ef 92       	push	r14
    238c:	ff 92       	push	r15
    238e:	0f 93       	push	r16
    2390:	1f 93       	push	r17
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	ca 1b       	sub	r28, r26
    239c:	db 0b       	sbc	r29, r27
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	09 94       	ijmp

000023aa <__epilogue_restores__>:
    23aa:	2a 88       	ldd	r2, Y+18	; 0x12
    23ac:	39 88       	ldd	r3, Y+17	; 0x11
    23ae:	48 88       	ldd	r4, Y+16	; 0x10
    23b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    23b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    23b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    23b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    23b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    23ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    23bc:	b9 84       	ldd	r11, Y+9	; 0x09
    23be:	c8 84       	ldd	r12, Y+8	; 0x08
    23c0:	df 80       	ldd	r13, Y+7	; 0x07
    23c2:	ee 80       	ldd	r14, Y+6	; 0x06
    23c4:	fd 80       	ldd	r15, Y+5	; 0x05
    23c6:	0c 81       	ldd	r16, Y+4	; 0x04
    23c8:	1b 81       	ldd	r17, Y+3	; 0x03
    23ca:	aa 81       	ldd	r26, Y+2	; 0x02
    23cc:	b9 81       	ldd	r27, Y+1	; 0x01
    23ce:	ce 0f       	add	r28, r30
    23d0:	d1 1d       	adc	r29, r1
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	ed 01       	movw	r28, r26
    23de:	08 95       	ret

000023e0 <memcpy>:
    23e0:	fb 01       	movw	r30, r22
    23e2:	dc 01       	movw	r26, r24
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <memcpy+0xa>
    23e6:	01 90       	ld	r0, Z+
    23e8:	0d 92       	st	X+, r0
    23ea:	41 50       	subi	r20, 0x01	; 1
    23ec:	50 40       	sbci	r21, 0x00	; 0
    23ee:	d8 f7       	brcc	.-10     	; 0x23e6 <memcpy+0x6>
    23f0:	08 95       	ret

000023f2 <strlen>:
    23f2:	fc 01       	movw	r30, r24
    23f4:	01 90       	ld	r0, Z+
    23f6:	00 20       	and	r0, r0
    23f8:	e9 f7       	brne	.-6      	; 0x23f4 <strlen+0x2>
    23fa:	80 95       	com	r24
    23fc:	90 95       	com	r25
    23fe:	8e 0f       	add	r24, r30
    2400:	9f 1f       	adc	r25, r31
    2402:	08 95       	ret

00002404 <itoa>:
    2404:	fb 01       	movw	r30, r22
    2406:	9f 01       	movw	r18, r30
    2408:	e8 94       	clt
    240a:	42 30       	cpi	r20, 0x02	; 2
    240c:	c4 f0       	brlt	.+48     	; 0x243e <itoa+0x3a>
    240e:	45 32       	cpi	r20, 0x25	; 37
    2410:	b4 f4       	brge	.+44     	; 0x243e <itoa+0x3a>
    2412:	4a 30       	cpi	r20, 0x0A	; 10
    2414:	29 f4       	brne	.+10     	; 0x2420 <itoa+0x1c>
    2416:	97 fb       	bst	r25, 7
    2418:	1e f4       	brtc	.+6      	; 0x2420 <itoa+0x1c>
    241a:	90 95       	com	r25
    241c:	81 95       	neg	r24
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	64 2f       	mov	r22, r20
    2422:	77 27       	eor	r23, r23
    2424:	0e 94 33 12 	call	0x2466	; 0x2466 <__udivmodhi4>
    2428:	80 5d       	subi	r24, 0xD0	; 208
    242a:	8a 33       	cpi	r24, 0x3A	; 58
    242c:	0c f0       	brlt	.+2      	; 0x2430 <itoa+0x2c>
    242e:	89 5d       	subi	r24, 0xD9	; 217
    2430:	81 93       	st	Z+, r24
    2432:	cb 01       	movw	r24, r22
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	a1 f7       	brne	.-24     	; 0x2420 <itoa+0x1c>
    2438:	16 f4       	brtc	.+4      	; 0x243e <itoa+0x3a>
    243a:	5d e2       	ldi	r21, 0x2D	; 45
    243c:	51 93       	st	Z+, r21
    243e:	10 82       	st	Z, r1
    2440:	c9 01       	movw	r24, r18
    2442:	0c 94 23 12 	jmp	0x2446	; 0x2446 <strrev>

00002446 <strrev>:
    2446:	dc 01       	movw	r26, r24
    2448:	fc 01       	movw	r30, r24
    244a:	67 2f       	mov	r22, r23
    244c:	71 91       	ld	r23, Z+
    244e:	77 23       	and	r23, r23
    2450:	e1 f7       	brne	.-8      	; 0x244a <strrev+0x4>
    2452:	32 97       	sbiw	r30, 0x02	; 2
    2454:	04 c0       	rjmp	.+8      	; 0x245e <strrev+0x18>
    2456:	7c 91       	ld	r23, X
    2458:	6d 93       	st	X+, r22
    245a:	70 83       	st	Z, r23
    245c:	62 91       	ld	r22, -Z
    245e:	ae 17       	cp	r26, r30
    2460:	bf 07       	cpc	r27, r31
    2462:	c8 f3       	brcs	.-14     	; 0x2456 <strrev+0x10>
    2464:	08 95       	ret

00002466 <__udivmodhi4>:
    2466:	aa 1b       	sub	r26, r26
    2468:	bb 1b       	sub	r27, r27
    246a:	51 e1       	ldi	r21, 0x11	; 17
    246c:	07 c0       	rjmp	.+14     	; 0x247c <__udivmodhi4_ep>

0000246e <__udivmodhi4_loop>:
    246e:	aa 1f       	adc	r26, r26
    2470:	bb 1f       	adc	r27, r27
    2472:	a6 17       	cp	r26, r22
    2474:	b7 07       	cpc	r27, r23
    2476:	10 f0       	brcs	.+4      	; 0x247c <__udivmodhi4_ep>
    2478:	a6 1b       	sub	r26, r22
    247a:	b7 0b       	sbc	r27, r23

0000247c <__udivmodhi4_ep>:
    247c:	88 1f       	adc	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	5a 95       	dec	r21
    2482:	a9 f7       	brne	.-22     	; 0x246e <__udivmodhi4_loop>
    2484:	80 95       	com	r24
    2486:	90 95       	com	r25
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	08 95       	ret

0000248e <_exit>:
    248e:	f8 94       	cli

00002490 <__stop_program>:
    2490:	ff cf       	rjmp	.-2      	; 0x2490 <__stop_program>
