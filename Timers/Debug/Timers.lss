
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00002610  000026a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080008e  0080008e  000026d2  2**0
                  ALLOC
  3 .stab         00002664  00000000  00000000  000026d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ec  00000000  00000000  00004d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000060d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000099b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 11 	call	0x232e	; 0x232e <main>
      8a:	0c 94 06 13 	jmp	0x260c	; 0x260c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 df 12 	jmp	0x25be	; 0x25be <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MTimer_voidTimerInit>:
/**
 * @brief Initialize the timer with the specified mode.
 *
 * @param A_u8TimerMode: The desired timer mode (0 for Normal, 1 for Compare, 2 for Fast PWM).
 */
void MTimer_voidTimerInit(u8 A_u8TimerMode) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
    /* Choose Timer Mode */
    if (A_u8TimerMode == 0) {
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	88 23       	and	r24, r24
     b56:	b1 f4       	brne	.+44     	; 0xb84 <MTimer_voidTimerInit+0x3e>
        CLR_BIT(TCCR0, 6); // Clear WGM00 bit for Normal Mode
     b58:	a3 e5       	ldi	r26, 0x53	; 83
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e3 e5       	ldi	r30, 0x53	; 83
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8f 7b       	andi	r24, 0xBF	; 191
     b64:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, 3); // Clear WGM01 bit for Normal Mode
     b66:	a3 e5       	ldi	r26, 0x53	; 83
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e3 e5       	ldi	r30, 0x53	; 83
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	87 7f       	andi	r24, 0xF7	; 247
     b72:	8c 93       	st	X, r24

        /* Set Timer Overflow Interrupt Enable */
        SET_BIT(TIMSK, 0);
     b74:	a9 e5       	ldi	r26, 0x59	; 89
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e9 e5       	ldi	r30, 0x59	; 89
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	81 60       	ori	r24, 0x01	; 1
     b80:	8c 93       	st	X, r24
     b82:	38 c0       	rjmp	.+112    	; 0xbf4 <MTimer_voidTimerInit+0xae>
    } else if (A_u8TimerMode == 1) {
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	b1 f4       	brne	.+44     	; 0xbb6 <MTimer_voidTimerInit+0x70>
        CLR_BIT(TCCR0, 6); // Clear WGM00 bit for CTC Mode
     b8a:	a3 e5       	ldi	r26, 0x53	; 83
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e3 e5       	ldi	r30, 0x53	; 83
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	8f 7b       	andi	r24, 0xBF	; 191
     b96:	8c 93       	st	X, r24
        SET_BIT(TCCR0, 3); // Set WGM01 bit for CTC Mode
     b98:	a3 e5       	ldi	r26, 0x53	; 83
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e3 e5       	ldi	r30, 0x53	; 83
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	88 60       	ori	r24, 0x08	; 8
     ba4:	8c 93       	st	X, r24

        /* Set Compare Match Interrupt Enable */
        SET_BIT(TIMSK, 1);
     ba6:	a9 e5       	ldi	r26, 0x59	; 89
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e9 e5       	ldi	r30, 0x59	; 89
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	82 60       	ori	r24, 0x02	; 2
     bb2:	8c 93       	st	X, r24
     bb4:	1f c0       	rjmp	.+62     	; 0xbf4 <MTimer_voidTimerInit+0xae>
    } else if (A_u8TimerMode == 2) {
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	e1 f4       	brne	.+56     	; 0xbf4 <MTimer_voidTimerInit+0xae>
        SET_BIT(TCCR0, 6); // Set WGM00 bit for Fast PWM Mode
     bbc:	a3 e5       	ldi	r26, 0x53	; 83
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e3 e5       	ldi	r30, 0x53	; 83
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	80 64       	ori	r24, 0x40	; 64
     bc8:	8c 93       	st	X, r24
        SET_BIT(TCCR0, 3); // Set WGM01 bit for Fast PWM Mode
     bca:	a3 e5       	ldi	r26, 0x53	; 83
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e3 e5       	ldi	r30, 0x53	; 83
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	88 60       	ori	r24, 0x08	; 8
     bd6:	8c 93       	st	X, r24

        /* Set OC0 as Non-inverted PWM */
        SET_BIT(TCCR0, 5);
     bd8:	a3 e5       	ldi	r26, 0x53	; 83
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e3 e5       	ldi	r30, 0x53	; 83
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	80 62       	ori	r24, 0x20	; 32
     be4:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, 4);
     be6:	a3 e5       	ldi	r26, 0x53	; 83
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e3 e5       	ldi	r30, 0x53	; 83
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8f 7e       	andi	r24, 0xEF	; 239
     bf2:	8c 93       	st	X, r24
    }
}
     bf4:	0f 90       	pop	r0
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <MTimer_voidSetPreloadValue>:
 * @brief Set the preload value of the timer.
 *
 * @param A_u8Preload: The preload value to set.
 * @param A_u8TimerMode: The current timer mode (0 for Normal, 1 for Compare, 2 for Fast PWM).
 */
void MTimer_voidSetPreloadValue(u8 A_u8Preload, u8 A_u8TimerMode) {
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	00 d0       	rcall	.+0      	; 0xc02 <MTimer_voidSetPreloadValue+0x6>
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	6a 83       	std	Y+2, r22	; 0x02
    if (A_u8TimerMode == 0) {
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	88 23       	and	r24, r24
     c0e:	29 f4       	brne	.+10     	; 0xc1a <MTimer_voidSetPreloadValue+0x1e>
        TCNT0 = A_u8Preload; // Set Timer0 preload value for Normal Mode
     c10:	e2 e5       	ldi	r30, 0x52	; 82
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	80 83       	st	Z, r24
     c18:	04 c0       	rjmp	.+8      	; 0xc22 <MTimer_voidSetPreloadValue+0x26>
    } else {
        /* Set Compare Register Value */
        OCR0 = A_u8Preload; // Set Timer0 Compare Match value for Compare and Fast PWM Modes
     c1a:	ec e5       	ldi	r30, 0x5C	; 92
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	80 83       	st	Z, r24
    }
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <MTimer_voidStart>:

/**
 * @brief Start the timer with a prescaler of 8.
 */
void MTimer_voidStart() {
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
    /* Choose Prescaler 8 */
    CLR_BIT(TCCR0, 0);
     c34:	a3 e5       	ldi	r26, 0x53	; 83
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e3 e5       	ldi	r30, 0x53	; 83
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	8e 7f       	andi	r24, 0xFE	; 254
     c40:	8c 93       	st	X, r24
    SET_BIT(TCCR0, 1);
     c42:	a3 e5       	ldi	r26, 0x53	; 83
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e3 e5       	ldi	r30, 0x53	; 83
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	82 60       	ori	r24, 0x02	; 2
     c4e:	8c 93       	st	X, r24
    CLR_BIT(TCCR0, 2);
     c50:	a3 e5       	ldi	r26, 0x53	; 83
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e3 e5       	ldi	r30, 0x53	; 83
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	8b 7f       	andi	r24, 0xFB	; 251
     c5c:	8c 93       	st	X, r24
}
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <MTimer_voidStop>:

/**
 * @brief Stop the timer (disable the clock source).
 */
void MTimer_voidStop() {
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TCCR0, 0);
     c6c:	a3 e5       	ldi	r26, 0x53	; 83
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e3 e5       	ldi	r30, 0x53	; 83
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	8e 7f       	andi	r24, 0xFE	; 254
     c78:	8c 93       	st	X, r24
    CLR_BIT(TCCR0, 1);
     c7a:	a3 e5       	ldi	r26, 0x53	; 83
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e3 e5       	ldi	r30, 0x53	; 83
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	8d 7f       	andi	r24, 0xFD	; 253
     c86:	8c 93       	st	X, r24
    CLR_BIT(TCCR0, 2);
     c88:	a3 e5       	ldi	r26, 0x53	; 83
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e3 e5       	ldi	r30, 0x53	; 83
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	8b 7f       	andi	r24, 0xFB	; 251
     c94:	8c 93       	st	X, r24
}
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <MTimer1_voidInit>:

/**
 * @brief Initialize Timer1 with a prescaler of 8.
 */
void MTimer1_voidInit() {
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
    /* Select Prescaler 8 */
    CLR_BIT(TCCR1B, 0);
     ca4:	ae e4       	ldi	r26, 0x4E	; 78
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ee e4       	ldi	r30, 0x4E	; 78
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8e 7f       	andi	r24, 0xFE	; 254
     cb0:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, 1);
     cb2:	ae e4       	ldi	r26, 0x4E	; 78
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ee e4       	ldi	r30, 0x4E	; 78
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, 2);
     cc0:	ae e4       	ldi	r26, 0x4E	; 78
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	ee e4       	ldi	r30, 0x4E	; 78
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8b 7f       	andi	r24, 0xFB	; 251
     ccc:	8c 93       	st	X, r24
}
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <MTimer1_voidSetValue>:
/**
 * @brief Set the value of Timer1.
 *
 * @param A_u16Value: The value to set in Timer1.
 */
void MTimer1_voidSetValue(u16 A_u16Value) {
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <MTimer1_voidSetValue+0x6>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = A_u16Value;
     ce2:	ec e4       	ldi	r30, 0x4C	; 76
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	91 83       	std	Z+1, r25	; 0x01
     cec:	80 83       	st	Z, r24
}
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <MTimer1_u16ReadTimer1Value>:
/**
 * @brief Read the current value of Timer1.
 *
 * @return The current value of Timer1.
 */
u16 MTimer1_u16ReadTimer1Value() {
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
    return TCNT1;
     d00:	ec e4       	ldi	r30, 0x4C	; 76
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <timer0_init>:
void timer0_init(void)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	    	/* Disable Timer 0 */
	    	TCCR0 = 0x00;
     d16:	e3 e5       	ldi	r30, 0x53	; 83
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	10 82       	st	Z, r1
	    	/* Setting pre scaler */
	    	TCCR0 = 0x01;
     d1c:	e3 e5       	ldi	r30, 0x53	; 83
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	80 83       	st	Z, r24
	    	/* Initializing the timer with zero */
	    	TCNT0 = 0x00;
     d24:	e2 e5       	ldi	r30, 0x52	; 82
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	10 82       	st	Z, r1
				/* Timer overflow interrupt enable*/
				TIMSK |=(1<<TOIE0);
     d2a:	a9 e5       	ldi	r26, 0x59	; 89
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e9 e5       	ldi	r30, 0x59	; 89
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	81 60       	ori	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24

	return;
}
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <MGIE_voidEnable>:

#include "../DIO/DIO_Interface.h"
#include"GIE_Interface.h"

void MGIE_voidEnable()
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     d46:	af e5       	ldi	r26, 0x5F	; 95
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	ef e5       	ldi	r30, 0x5F	; 95
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 68       	ori	r24, 0x80	; 128
     d52:	8c 93       	st	X, r24


}
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <MGIE_voidDisable>:
void MGIE_voidDisable()
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG,7);
     d62:	af e5       	ldi	r26, 0x5F	; 95
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	ef e5       	ldi	r30, 0x5F	; 95
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	8f 77       	andi	r24, 0x7F	; 127
     d6e:	8c 93       	st	X, r24

}
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <MEXTI_voidSenseControl>:
 * 3--------> Rising
 *
 * */


void MEXTI_voidSenseControl(u8 A_u8ExtiNumber, u8 A_u8State){
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	2a 97       	sbiw	r28, 0x0a	; 10
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	6a 83       	std	Y+2, r22	; 0x02


	switch(A_u8ExtiNumber){
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	3a 87       	std	Y+10, r19	; 0x0a
     d96:	29 87       	std	Y+9, r18	; 0x09
     d98:	89 85       	ldd	r24, Y+9	; 0x09
     d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	91 05       	cpc	r25, r1
     da0:	09 f4       	brne	.+2      	; 0xda4 <MEXTI_voidSenseControl+0x2e>
     da2:	66 c0       	rjmp	.+204    	; 0xe70 <MEXTI_voidSenseControl+0xfa>
     da4:	29 85       	ldd	r18, Y+9	; 0x09
     da6:	3a 85       	ldd	r19, Y+10	; 0x0a
     da8:	22 30       	cpi	r18, 0x02	; 2
     daa:	31 05       	cpc	r19, r1
     dac:	09 f4       	brne	.+2      	; 0xdb0 <MEXTI_voidSenseControl+0x3a>
     dae:	bb c0       	rjmp	.+374    	; 0xf26 <MEXTI_voidSenseControl+0x1b0>
     db0:	89 85       	ldd	r24, Y+9	; 0x09
     db2:	9a 85       	ldd	r25, Y+10	; 0x0a
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	09 f0       	breq	.+2      	; 0xdba <MEXTI_voidSenseControl+0x44>
     db8:	d5 c0       	rjmp	.+426    	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
		/*EXTI INT0*/
		case 0:
			switch(A_u8State){
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	38 87       	std	Y+8, r19	; 0x08
     dc2:	2f 83       	std	Y+7, r18	; 0x07
     dc4:	8f 81       	ldd	r24, Y+7	; 0x07
     dc6:	98 85       	ldd	r25, Y+8	; 0x08
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	91 05       	cpc	r25, r1
     dcc:	21 f1       	breq	.+72     	; 0xe16 <MEXTI_voidSenseControl+0xa0>
     dce:	2f 81       	ldd	r18, Y+7	; 0x07
     dd0:	38 85       	ldd	r19, Y+8	; 0x08
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	2c f4       	brge	.+10     	; 0xde2 <MEXTI_voidSenseControl+0x6c>
     dd8:	8f 81       	ldd	r24, Y+7	; 0x07
     dda:	98 85       	ldd	r25, Y+8	; 0x08
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	61 f0       	breq	.+24     	; 0xdf8 <MEXTI_voidSenseControl+0x82>
     de0:	c1 c0       	rjmp	.+386    	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
     de2:	2f 81       	ldd	r18, Y+7	; 0x07
     de4:	38 85       	ldd	r19, Y+8	; 0x08
     de6:	22 30       	cpi	r18, 0x02	; 2
     de8:	31 05       	cpc	r19, r1
     dea:	21 f1       	breq	.+72     	; 0xe34 <MEXTI_voidSenseControl+0xbe>
     dec:	8f 81       	ldd	r24, Y+7	; 0x07
     dee:	98 85       	ldd	r25, Y+8	; 0x08
     df0:	83 30       	cpi	r24, 0x03	; 3
     df2:	91 05       	cpc	r25, r1
     df4:	71 f1       	breq	.+92     	; 0xe52 <MEXTI_voidSenseControl+0xdc>
     df6:	b6 c0       	rjmp	.+364    	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
				case 0:
					CLR_BIT(MCUCR,0);
     df8:	a5 e5       	ldi	r26, 0x55	; 85
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e5 e5       	ldi	r30, 0x55	; 85
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	8e 7f       	andi	r24, 0xFE	; 254
     e04:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
     e06:	a5 e5       	ldi	r26, 0x55	; 85
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e5 e5       	ldi	r30, 0x55	; 85
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8d 7f       	andi	r24, 0xFD	; 253
     e12:	8c 93       	st	X, r24
     e14:	a7 c0       	rjmp	.+334    	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 0);
     e16:	a5 e5       	ldi	r26, 0x55	; 85
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e5 e5       	ldi	r30, 0x55	; 85
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	81 60       	ori	r24, 0x01	; 1
     e22:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 1);
     e24:	a5 e5       	ldi	r26, 0x55	; 85
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e5 e5       	ldi	r30, 0x55	; 85
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8d 7f       	andi	r24, 0xFD	; 253
     e30:	8c 93       	st	X, r24
     e32:	98 c0       	rjmp	.+304    	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 0);
     e34:	a5 e5       	ldi	r26, 0x55	; 85
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e5 e5       	ldi	r30, 0x55	; 85
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	8e 7f       	andi	r24, 0xFE	; 254
     e40:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
     e42:	a5 e5       	ldi	r26, 0x55	; 85
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e5 e5       	ldi	r30, 0x55	; 85
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	82 60       	ori	r24, 0x02	; 2
     e4e:	8c 93       	st	X, r24
     e50:	89 c0       	rjmp	.+274    	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 0);
     e52:	a5 e5       	ldi	r26, 0x55	; 85
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e5       	ldi	r30, 0x55	; 85
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
     e60:	a5 e5       	ldi	r26, 0x55	; 85
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e5       	ldi	r30, 0x55	; 85
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	82 60       	ori	r24, 0x02	; 2
     e6c:	8c 93       	st	X, r24
     e6e:	7a c0       	rjmp	.+244    	; 0xf64 <MEXTI_voidSenseControl+0x1ee>

			}
		break;
		/*EXTI INT1*/
		case 1:
			switch(A_u8State){
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	3e 83       	std	Y+6, r19	; 0x06
     e78:	2d 83       	std	Y+5, r18	; 0x05
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	91 05       	cpc	r25, r1
     e82:	21 f1       	breq	.+72     	; 0xecc <MEXTI_voidSenseControl+0x156>
     e84:	2d 81       	ldd	r18, Y+5	; 0x05
     e86:	3e 81       	ldd	r19, Y+6	; 0x06
     e88:	22 30       	cpi	r18, 0x02	; 2
     e8a:	31 05       	cpc	r19, r1
     e8c:	2c f4       	brge	.+10     	; 0xe98 <MEXTI_voidSenseControl+0x122>
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	9e 81       	ldd	r25, Y+6	; 0x06
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	61 f0       	breq	.+24     	; 0xeae <MEXTI_voidSenseControl+0x138>
     e96:	66 c0       	rjmp	.+204    	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
     e98:	2d 81       	ldd	r18, Y+5	; 0x05
     e9a:	3e 81       	ldd	r19, Y+6	; 0x06
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	31 05       	cpc	r19, r1
     ea0:	21 f1       	breq	.+72     	; 0xeea <MEXTI_voidSenseControl+0x174>
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	83 30       	cpi	r24, 0x03	; 3
     ea8:	91 05       	cpc	r25, r1
     eaa:	71 f1       	breq	.+92     	; 0xf08 <MEXTI_voidSenseControl+0x192>
     eac:	5b c0       	rjmp	.+182    	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
				case 0:
					CLR_BIT(MCUCR,2);
     eae:	a5 e5       	ldi	r26, 0x55	; 85
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e5 e5       	ldi	r30, 0x55	; 85
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	8b 7f       	andi	r24, 0xFB	; 251
     eba:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
     ebc:	a5 e5       	ldi	r26, 0x55	; 85
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e5 e5       	ldi	r30, 0x55	; 85
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	87 7f       	andi	r24, 0xF7	; 247
     ec8:	8c 93       	st	X, r24
     eca:	4c c0       	rjmp	.+152    	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 2);
     ecc:	a5 e5       	ldi	r26, 0x55	; 85
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e5       	ldi	r30, 0x55	; 85
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	84 60       	ori	r24, 0x04	; 4
     ed8:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 3);
     eda:	a5 e5       	ldi	r26, 0x55	; 85
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e5 e5       	ldi	r30, 0x55	; 85
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	87 7f       	andi	r24, 0xF7	; 247
     ee6:	8c 93       	st	X, r24
     ee8:	3d c0       	rjmp	.+122    	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 2);
     eea:	a5 e5       	ldi	r26, 0x55	; 85
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e5 e5       	ldi	r30, 0x55	; 85
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8b 7f       	andi	r24, 0xFB	; 251
     ef6:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
     ef8:	a5 e5       	ldi	r26, 0x55	; 85
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e5 e5       	ldi	r30, 0x55	; 85
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	8c 93       	st	X, r24
     f06:	2e c0       	rjmp	.+92     	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 2);
     f08:	a5 e5       	ldi	r26, 0x55	; 85
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e5 e5       	ldi	r30, 0x55	; 85
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	84 60       	ori	r24, 0x04	; 4
     f14:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
     f16:	a5 e5       	ldi	r26, 0x55	; 85
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e5 e5       	ldi	r30, 0x55	; 85
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	88 60       	ori	r24, 0x08	; 8
     f22:	8c 93       	st	X, r24
     f24:	1f c0       	rjmp	.+62     	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
			}
		break;

		/*EXTI INT2*/
		case 2:
			switch(A_u8State){
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3c 83       	std	Y+4, r19	; 0x04
     f2e:	2b 83       	std	Y+3, r18	; 0x03
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	91 05       	cpc	r25, r1
     f38:	31 f0       	breq	.+12     	; 0xf46 <MEXTI_voidSenseControl+0x1d0>
     f3a:	2b 81       	ldd	r18, Y+3	; 0x03
     f3c:	3c 81       	ldd	r19, Y+4	; 0x04
     f3e:	23 30       	cpi	r18, 0x03	; 3
     f40:	31 05       	cpc	r19, r1
     f42:	49 f0       	breq	.+18     	; 0xf56 <MEXTI_voidSenseControl+0x1e0>
     f44:	0f c0       	rjmp	.+30     	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
			case 2: CLR_BIT(MCUCSR, 6);break;
     f46:	a4 e5       	ldi	r26, 0x54	; 84
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e4 e5       	ldi	r30, 0x54	; 84
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8f 7b       	andi	r24, 0xBF	; 191
     f52:	8c 93       	st	X, r24
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <MEXTI_voidSenseControl+0x1ee>
			case 3: SET_BIT(MCUCSR, 6);break;
     f56:	a4 e5       	ldi	r26, 0x54	; 84
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e4 e5       	ldi	r30, 0x54	; 84
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	80 64       	ori	r24, 0x40	; 64
     f62:	8c 93       	st	X, r24
			}
		break;

	}
}
     f64:	2a 96       	adiw	r28, 0x0a	; 10
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <MEXTI_voidEnable>:


void MEXTI_voidEnable(u8 A_u8ExtiNumber){
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <MEXTI_voidEnable+0x6>
     f7c:	0f 92       	push	r0
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiNumber){
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	3b 83       	std	Y+3, r19	; 0x03
     f8c:	2a 83       	std	Y+2, r18	; 0x02
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	9b 81       	ldd	r25, Y+3	; 0x03
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	91 05       	cpc	r25, r1
     f96:	89 f0       	breq	.+34     	; 0xfba <MEXTI_voidEnable+0x44>
     f98:	2a 81       	ldd	r18, Y+2	; 0x02
     f9a:	3b 81       	ldd	r19, Y+3	; 0x03
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	a1 f0       	breq	.+40     	; 0xfca <MEXTI_voidEnable+0x54>
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	9b 81       	ldd	r25, Y+3	; 0x03
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	b9 f4       	brne	.+46     	; 0xfd8 <MEXTI_voidEnable+0x62>
		case 0: SET_BIT( GICR, 6); break;
     faa:	ab e5       	ldi	r26, 0x5B	; 91
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	eb e5       	ldi	r30, 0x5B	; 91
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	80 64       	ori	r24, 0x40	; 64
     fb6:	8c 93       	st	X, r24
     fb8:	0f c0       	rjmp	.+30     	; 0xfd8 <MEXTI_voidEnable+0x62>
		case 1: SET_BIT( GICR, 7); break;
     fba:	ab e5       	ldi	r26, 0x5B	; 91
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	eb e5       	ldi	r30, 0x5B	; 91
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	80 68       	ori	r24, 0x80	; 128
     fc6:	8c 93       	st	X, r24
     fc8:	07 c0       	rjmp	.+14     	; 0xfd8 <MEXTI_voidEnable+0x62>
		case 2: SET_BIT(GICR, 5); break;
     fca:	ab e5       	ldi	r26, 0x5B	; 91
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	eb e5       	ldi	r30, 0x5B	; 91
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	80 62       	ori	r24, 0x20	; 32
     fd6:	8c 93       	st	X, r24
	}

}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <MEXTI_voidDisable>:

void MEXTI_voidDisable(u8 A_u8ExtiNumber){
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <MEXTI_voidDisable+0x6>
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiNumber){
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3b 83       	std	Y+3, r19	; 0x03
     ffa:	2a 83       	std	Y+2, r18	; 0x02
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	91 05       	cpc	r25, r1
    1004:	89 f0       	breq	.+34     	; 0x1028 <MEXTI_voidDisable+0x44>
    1006:	2a 81       	ldd	r18, Y+2	; 0x02
    1008:	3b 81       	ldd	r19, Y+3	; 0x03
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	a1 f0       	breq	.+40     	; 0x1038 <MEXTI_voidDisable+0x54>
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	b9 f4       	brne	.+46     	; 0x1046 <MEXTI_voidDisable+0x62>
		case 0: CLR_BIT( GICR, 6); break;
    1018:	ab e5       	ldi	r26, 0x5B	; 91
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	eb e5       	ldi	r30, 0x5B	; 91
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8f 7b       	andi	r24, 0xBF	; 191
    1024:	8c 93       	st	X, r24
    1026:	0f c0       	rjmp	.+30     	; 0x1046 <MEXTI_voidDisable+0x62>
		case 1: CLR_BIT( GICR, 7); break;
    1028:	ab e5       	ldi	r26, 0x5B	; 91
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	eb e5       	ldi	r30, 0x5B	; 91
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 77       	andi	r24, 0x7F	; 127
    1034:	8c 93       	st	X, r24
    1036:	07 c0       	rjmp	.+14     	; 0x1046 <MEXTI_voidDisable+0x62>
		case 2: CLR_BIT(GICR, 5); break;
    1038:	ab e5       	ldi	r26, 0x5B	; 91
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	eb e5       	ldi	r30, 0x5B	; 91
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8f 7d       	andi	r24, 0xDF	; 223
    1044:	8c 93       	st	X, r24
	}
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <MDIO_voidSetPinDirection>:
#include<avr/io.h>
#include"DIO_Interface.h"



void  MDIO_voidSetPinDirection(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Dir){
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	2d 97       	sbiw	r28, 0x0d	; 13
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	6a 83       	std	Y+2, r22	; 0x02
    106a:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortNumber){
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	3d 87       	std	Y+13, r19	; 0x0d
    1074:	2c 87       	std	Y+12, r18	; 0x0c
    1076:	8c 85       	ldd	r24, Y+12	; 0x0c
    1078:	9d 85       	ldd	r25, Y+13	; 0x0d
    107a:	82 34       	cpi	r24, 0x42	; 66
    107c:	91 05       	cpc	r25, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <MDIO_voidSetPinDirection+0x30>
    1080:	50 c0       	rjmp	.+160    	; 0x1122 <MDIO_voidSetPinDirection+0xd0>
    1082:	2c 85       	ldd	r18, Y+12	; 0x0c
    1084:	3d 85       	ldd	r19, Y+13	; 0x0d
    1086:	23 34       	cpi	r18, 0x43	; 67
    1088:	31 05       	cpc	r19, r1
    108a:	34 f4       	brge	.+12     	; 0x1098 <MDIO_voidSetPinDirection+0x46>
    108c:	8c 85       	ldd	r24, Y+12	; 0x0c
    108e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1090:	81 34       	cpi	r24, 0x41	; 65
    1092:	91 05       	cpc	r25, r1
    1094:	71 f0       	breq	.+28     	; 0x10b2 <MDIO_voidSetPinDirection+0x60>
    1096:	ec c0       	rjmp	.+472    	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
    1098:	2c 85       	ldd	r18, Y+12	; 0x0c
    109a:	3d 85       	ldd	r19, Y+13	; 0x0d
    109c:	23 34       	cpi	r18, 0x43	; 67
    109e:	31 05       	cpc	r19, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <MDIO_voidSetPinDirection+0x52>
    10a2:	77 c0       	rjmp	.+238    	; 0x1192 <MDIO_voidSetPinDirection+0x140>
    10a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    10a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    10a8:	84 34       	cpi	r24, 0x44	; 68
    10aa:	91 05       	cpc	r25, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <MDIO_voidSetPinDirection+0x5e>
    10ae:	a9 c0       	rjmp	.+338    	; 0x1202 <MDIO_voidSetPinDirection+0x1b0>
    10b0:	df c0       	rjmp	.+446    	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
		case 'A':
			switch(A_u8Dir){
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	3b 87       	std	Y+11, r19	; 0x0b
    10ba:	2a 87       	std	Y+10, r18	; 0x0a
    10bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    10be:	9b 85       	ldd	r25, Y+11	; 0x0b
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	31 f0       	breq	.+12     	; 0x10d0 <MDIO_voidSetPinDirection+0x7e>
    10c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    10c6:	3b 85       	ldd	r19, Y+11	; 0x0b
    10c8:	21 30       	cpi	r18, 0x01	; 1
    10ca:	31 05       	cpc	r19, r1
    10cc:	b1 f0       	breq	.+44     	; 0x10fa <MDIO_voidSetPinDirection+0xa8>
    10ce:	d0 c0       	rjmp	.+416    	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRA , A_u8PinNumber);break;
    10d0:	aa e3       	ldi	r26, 0x3A	; 58
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ea e3       	ldi	r30, 0x3A	; 58
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <MDIO_voidSetPinDirection+0x9c>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <MDIO_voidSetPinDirection+0x98>
    10f2:	80 95       	com	r24
    10f4:	84 23       	and	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	bb c0       	rjmp	.+374    	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRA, A_u8PinNumber); break;
    10fa:	aa e3       	ldi	r26, 0x3A	; 58
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	ea e3       	ldi	r30, 0x3A	; 58
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 2e       	mov	r0, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <MDIO_voidSetPinDirection+0xc6>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <MDIO_voidSetPinDirection+0xc2>
    111c:	84 2b       	or	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	a7 c0       	rjmp	.+334    	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'B':
			switch(A_u8Dir){
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	39 87       	std	Y+9, r19	; 0x09
    112a:	28 87       	std	Y+8, r18	; 0x08
    112c:	88 85       	ldd	r24, Y+8	; 0x08
    112e:	99 85       	ldd	r25, Y+9	; 0x09
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	31 f0       	breq	.+12     	; 0x1140 <MDIO_voidSetPinDirection+0xee>
    1134:	28 85       	ldd	r18, Y+8	; 0x08
    1136:	39 85       	ldd	r19, Y+9	; 0x09
    1138:	21 30       	cpi	r18, 0x01	; 1
    113a:	31 05       	cpc	r19, r1
    113c:	b1 f0       	breq	.+44     	; 0x116a <MDIO_voidSetPinDirection+0x118>
    113e:	98 c0       	rjmp	.+304    	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRB , A_u8PinNumber);break;
    1140:	a7 e3       	ldi	r26, 0x37	; 55
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e7 e3       	ldi	r30, 0x37	; 55
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <MDIO_voidSetPinDirection+0x10c>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <MDIO_voidSetPinDirection+0x108>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	83 c0       	rjmp	.+262    	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRB, A_u8PinNumber); break;
    116a:	a7 e3       	ldi	r26, 0x37	; 55
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e7 e3       	ldi	r30, 0x37	; 55
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <MDIO_voidSetPinDirection+0x136>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <MDIO_voidSetPinDirection+0x132>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	6f c0       	rjmp	.+222    	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'C':
			switch(A_u8Dir){
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3f 83       	std	Y+7, r19	; 0x07
    119a:	2e 83       	std	Y+6, r18	; 0x06
    119c:	8e 81       	ldd	r24, Y+6	; 0x06
    119e:	9f 81       	ldd	r25, Y+7	; 0x07
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	31 f0       	breq	.+12     	; 0x11b0 <MDIO_voidSetPinDirection+0x15e>
    11a4:	2e 81       	ldd	r18, Y+6	; 0x06
    11a6:	3f 81       	ldd	r19, Y+7	; 0x07
    11a8:	21 30       	cpi	r18, 0x01	; 1
    11aa:	31 05       	cpc	r19, r1
    11ac:	b1 f0       	breq	.+44     	; 0x11da <MDIO_voidSetPinDirection+0x188>
    11ae:	60 c0       	rjmp	.+192    	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRC , A_u8PinNumber);break;
    11b0:	a4 e3       	ldi	r26, 0x34	; 52
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e4 e3       	ldi	r30, 0x34	; 52
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <MDIO_voidSetPinDirection+0x17c>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <MDIO_voidSetPinDirection+0x178>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	4b c0       	rjmp	.+150    	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRC, A_u8PinNumber); break;
    11da:	a4 e3       	ldi	r26, 0x34	; 52
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e4 e3       	ldi	r30, 0x34	; 52
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <MDIO_voidSetPinDirection+0x1a6>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <MDIO_voidSetPinDirection+0x1a2>
    11fc:	84 2b       	or	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	37 c0       	rjmp	.+110    	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'D':
			switch(A_u8Dir){
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	3d 83       	std	Y+5, r19	; 0x05
    120a:	2c 83       	std	Y+4, r18	; 0x04
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	31 f0       	breq	.+12     	; 0x1220 <MDIO_voidSetPinDirection+0x1ce>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	21 30       	cpi	r18, 0x01	; 1
    121a:	31 05       	cpc	r19, r1
    121c:	b1 f0       	breq	.+44     	; 0x124a <MDIO_voidSetPinDirection+0x1f8>
    121e:	28 c0       	rjmp	.+80     	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRD , A_u8PinNumber);break;
    1220:	a1 e3       	ldi	r26, 0x31	; 49
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e1 e3       	ldi	r30, 0x31	; 49
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <MDIO_voidSetPinDirection+0x1ec>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <MDIO_voidSetPinDirection+0x1e8>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	13 c0       	rjmp	.+38     	; 0x1270 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRD, A_u8PinNumber); break;
    124a:	a1 e3       	ldi	r26, 0x31	; 49
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e1 e3       	ldi	r30, 0x31	; 49
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <MDIO_voidSetPinDirection+0x216>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <MDIO_voidSetPinDirection+0x212>
    126c:	84 2b       	or	r24, r20
    126e:	8c 93       	st	X, r24
			}
		break;
	}

}
    1270:	2d 96       	adiw	r28, 0x0d	; 13
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8PinValue){
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	2d 97       	sbiw	r28, 0x0d	; 13
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	6a 83       	std	Y+2, r22	; 0x02
    129a:	4b 83       	std	Y+3, r20	; 0x03

	switch(A_u8PortNumber){
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	3d 87       	std	Y+13, r19	; 0x0d
    12a4:	2c 87       	std	Y+12, r18	; 0x0c
    12a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    12a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    12aa:	82 34       	cpi	r24, 0x42	; 66
    12ac:	91 05       	cpc	r25, r1
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <MDIO_voidSetPinValue+0x30>
    12b0:	50 c0       	rjmp	.+160    	; 0x1352 <MDIO_voidSetPinValue+0xd0>
    12b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    12b4:	3d 85       	ldd	r19, Y+13	; 0x0d
    12b6:	23 34       	cpi	r18, 0x43	; 67
    12b8:	31 05       	cpc	r19, r1
    12ba:	34 f4       	brge	.+12     	; 0x12c8 <MDIO_voidSetPinValue+0x46>
    12bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    12be:	9d 85       	ldd	r25, Y+13	; 0x0d
    12c0:	81 34       	cpi	r24, 0x41	; 65
    12c2:	91 05       	cpc	r25, r1
    12c4:	71 f0       	breq	.+28     	; 0x12e2 <MDIO_voidSetPinValue+0x60>
    12c6:	ec c0       	rjmp	.+472    	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
    12c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    12cc:	23 34       	cpi	r18, 0x43	; 67
    12ce:	31 05       	cpc	r19, r1
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <MDIO_voidSetPinValue+0x52>
    12d2:	77 c0       	rjmp	.+238    	; 0x13c2 <MDIO_voidSetPinValue+0x140>
    12d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    12d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    12d8:	84 34       	cpi	r24, 0x44	; 68
    12da:	91 05       	cpc	r25, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <MDIO_voidSetPinValue+0x5e>
    12de:	a9 c0       	rjmp	.+338    	; 0x1432 <MDIO_voidSetPinValue+0x1b0>
    12e0:	df c0       	rjmp	.+446    	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
		case 'A':
			switch(A_u8PinValue){
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3b 87       	std	Y+11, r19	; 0x0b
    12ea:	2a 87       	std	Y+10, r18	; 0x0a
    12ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	31 f0       	breq	.+12     	; 0x1300 <MDIO_voidSetPinValue+0x7e>
    12f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    12f6:	3b 85       	ldd	r19, Y+11	; 0x0b
    12f8:	21 30       	cpi	r18, 0x01	; 1
    12fa:	31 05       	cpc	r19, r1
    12fc:	b1 f0       	breq	.+44     	; 0x132a <MDIO_voidSetPinValue+0xa8>
    12fe:	d0 c0       	rjmp	.+416    	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTA , A_u8PinNumber); break;
    1300:	ab e3       	ldi	r26, 0x3B	; 59
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	eb e3       	ldi	r30, 0x3B	; 59
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <MDIO_voidSetPinValue+0x9c>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <MDIO_voidSetPinValue+0x98>
    1322:	80 95       	com	r24
    1324:	84 23       	and	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	bb c0       	rjmp	.+374    	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTA, A_u8PinNumber); break;
    132a:	ab e3       	ldi	r26, 0x3B	; 59
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	eb e3       	ldi	r30, 0x3B	; 59
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <MDIO_voidSetPinValue+0xc6>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <MDIO_voidSetPinValue+0xc2>
    134c:	84 2b       	or	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	a7 c0       	rjmp	.+334    	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'B':
			switch(A_u8PinValue){
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	39 87       	std	Y+9, r19	; 0x09
    135a:	28 87       	std	Y+8, r18	; 0x08
    135c:	88 85       	ldd	r24, Y+8	; 0x08
    135e:	99 85       	ldd	r25, Y+9	; 0x09
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	31 f0       	breq	.+12     	; 0x1370 <MDIO_voidSetPinValue+0xee>
    1364:	28 85       	ldd	r18, Y+8	; 0x08
    1366:	39 85       	ldd	r19, Y+9	; 0x09
    1368:	21 30       	cpi	r18, 0x01	; 1
    136a:	31 05       	cpc	r19, r1
    136c:	b1 f0       	breq	.+44     	; 0x139a <MDIO_voidSetPinValue+0x118>
    136e:	98 c0       	rjmp	.+304    	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTB , A_u8PinNumber); break;
    1370:	a8 e3       	ldi	r26, 0x38	; 56
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e8 e3       	ldi	r30, 0x38	; 56
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <MDIO_voidSetPinValue+0x10c>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <MDIO_voidSetPinValue+0x108>
    1392:	80 95       	com	r24
    1394:	84 23       	and	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	83 c0       	rjmp	.+262    	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTB, A_u8PinNumber); break;
    139a:	a8 e3       	ldi	r26, 0x38	; 56
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e8 e3       	ldi	r30, 0x38	; 56
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <MDIO_voidSetPinValue+0x136>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <MDIO_voidSetPinValue+0x132>
    13bc:	84 2b       	or	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	6f c0       	rjmp	.+222    	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
			}

		break;

		case 'C':
			switch(A_u8PinValue){
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3f 83       	std	Y+7, r19	; 0x07
    13ca:	2e 83       	std	Y+6, r18	; 0x06
    13cc:	8e 81       	ldd	r24, Y+6	; 0x06
    13ce:	9f 81       	ldd	r25, Y+7	; 0x07
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	31 f0       	breq	.+12     	; 0x13e0 <MDIO_voidSetPinValue+0x15e>
    13d4:	2e 81       	ldd	r18, Y+6	; 0x06
    13d6:	3f 81       	ldd	r19, Y+7	; 0x07
    13d8:	21 30       	cpi	r18, 0x01	; 1
    13da:	31 05       	cpc	r19, r1
    13dc:	b1 f0       	breq	.+44     	; 0x140a <MDIO_voidSetPinValue+0x188>
    13de:	60 c0       	rjmp	.+192    	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTC , A_u8PinNumber); break;
    13e0:	a5 e3       	ldi	r26, 0x35	; 53
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e5 e3       	ldi	r30, 0x35	; 53
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <MDIO_voidSetPinValue+0x17c>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <MDIO_voidSetPinValue+0x178>
    1402:	80 95       	com	r24
    1404:	84 23       	and	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	4b c0       	rjmp	.+150    	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTC, A_u8PinNumber); break;
    140a:	a5 e3       	ldi	r26, 0x35	; 53
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e3       	ldi	r30, 0x35	; 53
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <MDIO_voidSetPinValue+0x1a6>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <MDIO_voidSetPinValue+0x1a2>
    142c:	84 2b       	or	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	37 c0       	rjmp	.+110    	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'D':
			switch(A_u8PinValue){
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3d 83       	std	Y+5, r19	; 0x05
    143a:	2c 83       	std	Y+4, r18	; 0x04
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	9d 81       	ldd	r25, Y+5	; 0x05
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	31 f0       	breq	.+12     	; 0x1450 <MDIO_voidSetPinValue+0x1ce>
    1444:	2c 81       	ldd	r18, Y+4	; 0x04
    1446:	3d 81       	ldd	r19, Y+5	; 0x05
    1448:	21 30       	cpi	r18, 0x01	; 1
    144a:	31 05       	cpc	r19, r1
    144c:	b1 f0       	breq	.+44     	; 0x147a <MDIO_voidSetPinValue+0x1f8>
    144e:	28 c0       	rjmp	.+80     	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTD , A_u8PinNumber); break;
    1450:	a2 e3       	ldi	r26, 0x32	; 50
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e2 e3       	ldi	r30, 0x32	; 50
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <MDIO_voidSetPinValue+0x1ec>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <MDIO_voidSetPinValue+0x1e8>
    1472:	80 95       	com	r24
    1474:	84 23       	and	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	13 c0       	rjmp	.+38     	; 0x14a0 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTD, A_u8PinNumber); break;
    147a:	a2 e3       	ldi	r26, 0x32	; 50
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e2 e3       	ldi	r30, 0x32	; 50
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <MDIO_voidSetPinValue+0x216>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <MDIO_voidSetPinValue+0x212>
    149c:	84 2b       	or	r24, r20
    149e:	8c 93       	st	X, r24
			}
		break;
	}
}
    14a0:	2d 96       	adiw	r28, 0x0d	; 13
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <MDIO_voidSetPortDirection>:



void MDIO_voidSetPortDirection(u8 A_u8PortNumber, u8 A_u8PortDir){
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <MDIO_voidSetPortDirection+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <MDIO_voidSetPortDirection+0x8>
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3c 83       	std	Y+4, r19	; 0x04
    14ca:	2b 83       	std	Y+3, r18	; 0x03
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	82 34       	cpi	r24, 0x42	; 66
    14d2:	91 05       	cpc	r25, r1
    14d4:	d9 f0       	breq	.+54     	; 0x150c <MDIO_voidSetPortDirection+0x5a>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	23 34       	cpi	r18, 0x43	; 67
    14dc:	31 05       	cpc	r19, r1
    14de:	34 f4       	brge	.+12     	; 0x14ec <MDIO_voidSetPortDirection+0x3a>
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	81 34       	cpi	r24, 0x41	; 65
    14e6:	91 05       	cpc	r25, r1
    14e8:	61 f0       	breq	.+24     	; 0x1502 <MDIO_voidSetPortDirection+0x50>
    14ea:	1e c0       	rjmp	.+60     	; 0x1528 <MDIO_voidSetPortDirection+0x76>
    14ec:	2b 81       	ldd	r18, Y+3	; 0x03
    14ee:	3c 81       	ldd	r19, Y+4	; 0x04
    14f0:	23 34       	cpi	r18, 0x43	; 67
    14f2:	31 05       	cpc	r19, r1
    14f4:	81 f0       	breq	.+32     	; 0x1516 <MDIO_voidSetPortDirection+0x64>
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	84 34       	cpi	r24, 0x44	; 68
    14fc:	91 05       	cpc	r25, r1
    14fe:	81 f0       	breq	.+32     	; 0x1520 <MDIO_voidSetPortDirection+0x6e>
    1500:	13 c0       	rjmp	.+38     	; 0x1528 <MDIO_voidSetPortDirection+0x76>
		case 'A': DDRA = A_u8PortDir; break;
    1502:	ea e3       	ldi	r30, 0x3A	; 58
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 83       	st	Z, r24
    150a:	0e c0       	rjmp	.+28     	; 0x1528 <MDIO_voidSetPortDirection+0x76>
		case 'B': DDRB = A_u8PortDir; break;
    150c:	e7 e3       	ldi	r30, 0x37	; 55
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	80 83       	st	Z, r24
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <MDIO_voidSetPortDirection+0x76>
		case 'C': DDRC = A_u8PortDir; break;
    1516:	e4 e3       	ldi	r30, 0x34	; 52
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	80 83       	st	Z, r24
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <MDIO_voidSetPortDirection+0x76>
		case 'D': DDRD = A_u8PortDir; break;
    1520:	e1 e3       	ldi	r30, 0x31	; 49
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	80 83       	st	Z, r24
	}
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortNumber, u8 A_u8PortValue){
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	00 d0       	rcall	.+0      	; 0x153c <MDIO_voidSetPortValue+0x6>
    153c:	00 d0       	rcall	.+0      	; 0x153e <MDIO_voidSetPortValue+0x8>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	3c 83       	std	Y+4, r19	; 0x04
    154e:	2b 83       	std	Y+3, r18	; 0x03
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	82 34       	cpi	r24, 0x42	; 66
    1556:	91 05       	cpc	r25, r1
    1558:	d9 f0       	breq	.+54     	; 0x1590 <MDIO_voidSetPortValue+0x5a>
    155a:	2b 81       	ldd	r18, Y+3	; 0x03
    155c:	3c 81       	ldd	r19, Y+4	; 0x04
    155e:	23 34       	cpi	r18, 0x43	; 67
    1560:	31 05       	cpc	r19, r1
    1562:	34 f4       	brge	.+12     	; 0x1570 <MDIO_voidSetPortValue+0x3a>
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	81 34       	cpi	r24, 0x41	; 65
    156a:	91 05       	cpc	r25, r1
    156c:	61 f0       	breq	.+24     	; 0x1586 <MDIO_voidSetPortValue+0x50>
    156e:	1e c0       	rjmp	.+60     	; 0x15ac <MDIO_voidSetPortValue+0x76>
    1570:	2b 81       	ldd	r18, Y+3	; 0x03
    1572:	3c 81       	ldd	r19, Y+4	; 0x04
    1574:	23 34       	cpi	r18, 0x43	; 67
    1576:	31 05       	cpc	r19, r1
    1578:	81 f0       	breq	.+32     	; 0x159a <MDIO_voidSetPortValue+0x64>
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	84 34       	cpi	r24, 0x44	; 68
    1580:	91 05       	cpc	r25, r1
    1582:	81 f0       	breq	.+32     	; 0x15a4 <MDIO_voidSetPortValue+0x6e>
    1584:	13 c0       	rjmp	.+38     	; 0x15ac <MDIO_voidSetPortValue+0x76>
		case 'A':PORTA = A_u8PortValue; break;
    1586:	eb e3       	ldi	r30, 0x3B	; 59
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	80 83       	st	Z, r24
    158e:	0e c0       	rjmp	.+28     	; 0x15ac <MDIO_voidSetPortValue+0x76>
		case 'B':PORTB = A_u8PortValue; break;
    1590:	e8 e3       	ldi	r30, 0x38	; 56
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	80 83       	st	Z, r24
    1598:	09 c0       	rjmp	.+18     	; 0x15ac <MDIO_voidSetPortValue+0x76>
		case 'C':PORTC = A_u8PortValue; break;
    159a:	e5 e3       	ldi	r30, 0x35	; 53
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	80 83       	st	Z, r24
    15a2:	04 c0       	rjmp	.+8      	; 0x15ac <MDIO_voidSetPortValue+0x76>
		case 'D':PORTD = A_u8PortValue; break;
    15a4:	e2 e3       	ldi	r30, 0x32	; 50
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	80 83       	st	Z, r24
	}
}
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <MDIO_u8GetPinValue>:





u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber){
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <MDIO_u8GetPinValue+0x6>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <MDIO_u8GetPinValue+0x8>
    15c2:	0f 92       	push	r0
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Result;

	if(A_u8PinNumber < 8){
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	88 30       	cpi	r24, 0x08	; 8
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <MDIO_u8GetPinValue+0x1a>
    15d2:	68 c0       	rjmp	.+208    	; 0x16a4 <MDIO_u8GetPinValue+0xea>
		switch(A_u8PortNumber){
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	3d 83       	std	Y+5, r19	; 0x05
    15dc:	2c 83       	std	Y+4, r18	; 0x04
    15de:	4c 81       	ldd	r20, Y+4	; 0x04
    15e0:	5d 81       	ldd	r21, Y+5	; 0x05
    15e2:	42 34       	cpi	r20, 0x42	; 66
    15e4:	51 05       	cpc	r21, r1
    15e6:	41 f1       	breq	.+80     	; 0x1638 <MDIO_u8GetPinValue+0x7e>
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	83 34       	cpi	r24, 0x43	; 67
    15ee:	91 05       	cpc	r25, r1
    15f0:	34 f4       	brge	.+12     	; 0x15fe <MDIO_u8GetPinValue+0x44>
    15f2:	2c 81       	ldd	r18, Y+4	; 0x04
    15f4:	3d 81       	ldd	r19, Y+5	; 0x05
    15f6:	21 34       	cpi	r18, 0x41	; 65
    15f8:	31 05       	cpc	r19, r1
    15fa:	61 f0       	breq	.+24     	; 0x1614 <MDIO_u8GetPinValue+0x5a>
    15fc:	55 c0       	rjmp	.+170    	; 0x16a8 <MDIO_u8GetPinValue+0xee>
    15fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1600:	5d 81       	ldd	r21, Y+5	; 0x05
    1602:	43 34       	cpi	r20, 0x43	; 67
    1604:	51 05       	cpc	r21, r1
    1606:	51 f1       	breq	.+84     	; 0x165c <MDIO_u8GetPinValue+0xa2>
    1608:	8c 81       	ldd	r24, Y+4	; 0x04
    160a:	9d 81       	ldd	r25, Y+5	; 0x05
    160c:	84 34       	cpi	r24, 0x44	; 68
    160e:	91 05       	cpc	r25, r1
    1610:	b9 f1       	breq	.+110    	; 0x1680 <MDIO_u8GetPinValue+0xc6>
    1612:	4a c0       	rjmp	.+148    	; 0x16a8 <MDIO_u8GetPinValue+0xee>
			case 'A':Local_u8Result =  GET_BIT(PINA, A_u8PinNumber);break;
    1614:	e9 e3       	ldi	r30, 0x39	; 57
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <MDIO_u8GetPinValue+0x72>
    1628:	55 95       	asr	r21
    162a:	47 95       	ror	r20
    162c:	8a 95       	dec	r24
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <MDIO_u8GetPinValue+0x6e>
    1630:	ca 01       	movw	r24, r20
    1632:	81 70       	andi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	38 c0       	rjmp	.+112    	; 0x16a8 <MDIO_u8GetPinValue+0xee>
			case 'B':Local_u8Result =  GET_BIT(PINB, A_u8PinNumber); break;
    1638:	e6 e3       	ldi	r30, 0x36	; 54
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a9 01       	movw	r20, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <MDIO_u8GetPinValue+0x96>
    164c:	55 95       	asr	r21
    164e:	47 95       	ror	r20
    1650:	8a 95       	dec	r24
    1652:	e2 f7       	brpl	.-8      	; 0x164c <MDIO_u8GetPinValue+0x92>
    1654:	ca 01       	movw	r24, r20
    1656:	81 70       	andi	r24, 0x01	; 1
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	26 c0       	rjmp	.+76     	; 0x16a8 <MDIO_u8GetPinValue+0xee>
			case 'C':Local_u8Result =  GET_BIT(PINC, A_u8PinNumber); break;
    165c:	e3 e3       	ldi	r30, 0x33	; 51
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a9 01       	movw	r20, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <MDIO_u8GetPinValue+0xba>
    1670:	55 95       	asr	r21
    1672:	47 95       	ror	r20
    1674:	8a 95       	dec	r24
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <MDIO_u8GetPinValue+0xb6>
    1678:	ca 01       	movw	r24, r20
    167a:	81 70       	andi	r24, 0x01	; 1
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <MDIO_u8GetPinValue+0xee>
			case 'D':Local_u8Result =  GET_BIT(PIND, A_u8PinNumber); break;
    1680:	e0 e3       	ldi	r30, 0x30	; 48
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a9 01       	movw	r20, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <MDIO_u8GetPinValue+0xde>
    1694:	55 95       	asr	r21
    1696:	47 95       	ror	r20
    1698:	8a 95       	dec	r24
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <MDIO_u8GetPinValue+0xda>
    169c:	ca 01       	movw	r24, r20
    169e:	81 70       	andi	r24, 0x01	; 1
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <MDIO_u8GetPinValue+0xee>
		}
	}
	else {
		Local_u8Result = 255;
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <MADC_voidInit>:
 * Internal     2
 *
 * */


void MADC_voidInit(u8 A_u8Vref){
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <MADC_voidInit+0x6>
    16c0:	0f 92       	push	r0
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	89 83       	std	Y+1, r24	; 0x01

	switch(A_u8Vref){
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	3b 83       	std	Y+3, r19	; 0x03
    16d0:	2a 83       	std	Y+2, r18	; 0x02
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	9b 81       	ldd	r25, Y+3	; 0x03
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	91 05       	cpc	r25, r1
    16da:	c1 f0       	breq	.+48     	; 0x170c <MADC_voidInit+0x52>
    16dc:	2a 81       	ldd	r18, Y+2	; 0x02
    16de:	3b 81       	ldd	r19, Y+3	; 0x03
    16e0:	22 30       	cpi	r18, 0x02	; 2
    16e2:	31 05       	cpc	r19, r1
    16e4:	11 f1       	breq	.+68     	; 0x172a <MADC_voidInit+0x70>
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	61 f5       	brne	.+88     	; 0x1746 <MADC_voidInit+0x8c>
		case 0:
			CLR_BIT(ADMUX, 6);
    16ee:	a7 e2       	ldi	r26, 0x27	; 39
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e7 e2       	ldi	r30, 0x27	; 39
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8f 7b       	andi	r24, 0xBF	; 191
    16fa:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, 7);
    16fc:	a7 e2       	ldi	r26, 0x27	; 39
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e7 e2       	ldi	r30, 0x27	; 39
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	8f 77       	andi	r24, 0x7F	; 127
    1708:	8c 93       	st	X, r24
    170a:	1d c0       	rjmp	.+58     	; 0x1746 <MADC_voidInit+0x8c>
		break;

		case 1:
			SET_BIT(ADMUX, 6);
    170c:	a7 e2       	ldi	r26, 0x27	; 39
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e7 e2       	ldi	r30, 0x27	; 39
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	80 64       	ori	r24, 0x40	; 64
    1718:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, 7);
    171a:	a7 e2       	ldi	r26, 0x27	; 39
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e7 e2       	ldi	r30, 0x27	; 39
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	8f 77       	andi	r24, 0x7F	; 127
    1726:	8c 93       	st	X, r24
    1728:	0e c0       	rjmp	.+28     	; 0x1746 <MADC_voidInit+0x8c>
		break;

		case 2:
			SET_BIT(ADMUX, 6);
    172a:	a7 e2       	ldi	r26, 0x27	; 39
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e7 e2       	ldi	r30, 0x27	; 39
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	80 64       	ori	r24, 0x40	; 64
    1736:	8c 93       	st	X, r24
			SET_BIT(ADMUX, 7);
    1738:	a7 e2       	ldi	r26, 0x27	; 39
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e7 e2       	ldi	r30, 0x27	; 39
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 68       	ori	r24, 0x80	; 128
    1744:	8c 93       	st	X, r24
		break;
	}
	/*Left|Right Adjust*/
	SET_BIT(ADMUX, 5);
    1746:	a7 e2       	ldi	r26, 0x27	; 39
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e7 e2       	ldi	r30, 0x27	; 39
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	80 62       	ori	r24, 0x20	; 32
    1752:	8c 93       	st	X, r24

	/*128 Prescaller*/
	SET_BIT(ADCSRA, 0);
    1754:	a6 e2       	ldi	r26, 0x26	; 38
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e6 e2       	ldi	r30, 0x26	; 38
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	81 60       	ori	r24, 0x01	; 1
    1760:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
    1762:	a6 e2       	ldi	r26, 0x26	; 38
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e6 e2       	ldi	r30, 0x26	; 38
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	82 60       	ori	r24, 0x02	; 2
    176e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 2);
    1770:	a6 e2       	ldi	r26, 0x26	; 38
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e6 e2       	ldi	r30, 0x26	; 38
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	84 60       	ori	r24, 0x04	; 4
    177c:	8c 93       	st	X, r24

	/*ADC Enable*/
	SET_BIT(ADCSRA, 7);
    177e:	a6 e2       	ldi	r26, 0x26	; 38
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e6 e2       	ldi	r30, 0x26	; 38
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	80 68       	ori	r24, 0x80	; 128
    178a:	8c 93       	st	X, r24
}
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <MADC_u8GetChannelReading>:


u8 MADC_u8GetChannelReading(u8 A_u8Channel){
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = ADMUX & 0b11100000;
    17a4:	a7 e2       	ldi	r26, 0x27	; 39
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e7 e2       	ldi	r30, 0x27	; 39
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	80 7e       	andi	r24, 0xE0	; 224
    17b0:	8c 93       	st	X, r24
	ADMUX = ADMUX|A_u8Channel;
    17b2:	a7 e2       	ldi	r26, 0x27	; 39
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e7 e2       	ldi	r30, 0x27	; 39
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	90 81       	ld	r25, Z
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	89 2b       	or	r24, r25
    17c0:	8c 93       	st	X, r24

	/*Start Conversion*/
	SET_BIT(ADCSRA, 6);
    17c2:	a6 e2       	ldi	r26, 0x26	; 38
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e6 e2       	ldi	r30, 0x26	; 38
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	80 64       	ori	r24, 0x40	; 64
    17ce:	8c 93       	st	X, r24

	/*Wait Till Adc Flag Is Fired (1) */
	while(GET_BIT(ADCSRA, 4) == 0);
    17d0:	e6 e2       	ldi	r30, 0x26	; 38
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	82 95       	swap	r24
    17d8:	8f 70       	andi	r24, 0x0F	; 15
    17da:	88 2f       	mov	r24, r24
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	90 70       	andi	r25, 0x00	; 0
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	a9 f3       	breq	.-22     	; 0x17d0 <MADC_u8GetChannelReading+0x38>
	/*Clear ADC FLAG*/
	SET_BIT(ADCSRA, 4);
    17e6:	a6 e2       	ldi	r26, 0x26	; 38
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e6 e2       	ldi	r30, 0x26	; 38
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	80 61       	ori	r24, 0x10	; 16
    17f2:	8c 93       	st	X, r24

	return ADCH;
    17f4:	e5 e2       	ldi	r30, 0x25	; 37
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z

}
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <motorReverse>:
#include"motorInterface.h"
#include<util/delay.h>
#include<avr/io.h>

void motorReverse(void)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62

	MDIO_voidSetPinValue(port,backwardPin,1);
    180a:	83 e4       	ldi	r24, 0x43	; 67
    180c:	61 e0       	ldi	r22, 0x01	; 1
    180e:	41 e0       	ldi	r20, 0x01	; 1
    1810:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>

}
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <motorForward>:

void motorForward(void)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62

	MDIO_voidSetPinValue(port,forwardPin,1);
    1822:	83 e4       	ldi	r24, 0x43	; 67
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>

}
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <motorStop>:

void motorStop(void)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62

	MDIO_voidSetPinValue(port,forwardPin,0);
    183a:	83 e4       	ldi	r24, 0x43	; 67
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(port,backwardPin,0);
    1844:	83 e4       	ldi	r24, 0x43	; 67
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>

}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <motorInit>:


void motorInit(void)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62


	MDIO_voidSetPortDirection(port,0xFF);
    185c:	83 e4       	ldi	r24, 0x43	; 67
    185e:	6f ef       	ldi	r22, 0xFF	; 255
    1860:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <MDIO_voidSetPortDirection>

}
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <HLCD_voidSendCommand>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include"LCD.h"
#include<avr/delay.h>

void HLCD_voidSendCommand(u8 A_u8Cmd)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	6d 97       	sbiw	r28, 0x1d	; 29
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	8d 8f       	std	Y+29, r24	; 0x1d
	//initialize control pins
	MDIO_voidSetPinValue('A', 0, 0);
    1880:	81 e4       	ldi	r24, 0x41	; 65
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('A', 1, 0);
    188a:	81 e4       	ldi	r24, 0x41	; 65
    188c:	61 e0       	ldi	r22, 0x01	; 1
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>

	//Write command on data pins
	MDIO_voidSetPortValue('C', A_u8Cmd);
    1894:	83 e4       	ldi	r24, 0x43	; 67
    1896:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1898:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>

	//pulse on enable pin 1.53ms 1
	MDIO_voidSetPinValue('A', 2, 1);
    189c:	81 e4       	ldi	r24, 0x41	; 65
    189e:	62 e0       	ldi	r22, 0x02	; 2
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	a0 e0       	ldi	r26, 0x00	; 0
    18ac:	b0 e4       	ldi	r27, 0x40	; 64
    18ae:	89 8f       	std	Y+25, r24	; 0x19
    18b0:	9a 8f       	std	Y+26, r25	; 0x1a
    18b2:	ab 8f       	std	Y+27, r26	; 0x1b
    18b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b6:	69 8d       	ldd	r22, Y+25	; 0x19
    18b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	4a ef       	ldi	r20, 0xFA	; 250
    18c4:	54 e4       	ldi	r21, 0x44	; 68
    18c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	8d 8b       	std	Y+21, r24	; 0x15
    18d0:	9e 8b       	std	Y+22, r25	; 0x16
    18d2:	af 8b       	std	Y+23, r26	; 0x17
    18d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18d6:	6d 89       	ldd	r22, Y+21	; 0x15
    18d8:	7e 89       	ldd	r23, Y+22	; 0x16
    18da:	8f 89       	ldd	r24, Y+23	; 0x17
    18dc:	98 8d       	ldd	r25, Y+24	; 0x18
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e8       	ldi	r20, 0x80	; 128
    18e4:	5f e3       	ldi	r21, 0x3F	; 63
    18e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ea:	88 23       	and	r24, r24
    18ec:	2c f4       	brge	.+10     	; 0x18f8 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9c 8b       	std	Y+20, r25	; 0x14
    18f4:	8b 8b       	std	Y+19, r24	; 0x13
    18f6:	3f c0       	rjmp	.+126    	; 0x1976 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    18f8:	6d 89       	ldd	r22, Y+21	; 0x15
    18fa:	7e 89       	ldd	r23, Y+22	; 0x16
    18fc:	8f 89       	ldd	r24, Y+23	; 0x17
    18fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	3f ef       	ldi	r19, 0xFF	; 255
    1904:	4f e7       	ldi	r20, 0x7F	; 127
    1906:	57 e4       	ldi	r21, 0x47	; 71
    1908:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    190c:	18 16       	cp	r1, r24
    190e:	4c f5       	brge	.+82     	; 0x1962 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1910:	69 8d       	ldd	r22, Y+25	; 0x19
    1912:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1914:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1916:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e2       	ldi	r20, 0x20	; 32
    191e:	51 e4       	ldi	r21, 0x41	; 65
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <HLCD_voidSendCommand+0xee>
    193a:	88 ec       	ldi	r24, 0xC8	; 200
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9a 8b       	std	Y+18, r25	; 0x12
    1940:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1942:	89 89       	ldd	r24, Y+17	; 0x11
    1944:	9a 89       	ldd	r25, Y+18	; 0x12
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <HLCD_voidSendCommand+0xdc>
    194a:	9a 8b       	std	Y+18, r25	; 0x12
    194c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194e:	8b 89       	ldd	r24, Y+19	; 0x13
    1950:	9c 89       	ldd	r25, Y+20	; 0x14
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	9c 8b       	std	Y+20, r25	; 0x14
    1956:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1958:	8b 89       	ldd	r24, Y+19	; 0x13
    195a:	9c 89       	ldd	r25, Y+20	; 0x14
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	69 f7       	brne	.-38     	; 0x193a <HLCD_voidSendCommand+0xd0>
    1960:	14 c0       	rjmp	.+40     	; 0x198a <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1962:	6d 89       	ldd	r22, Y+21	; 0x15
    1964:	7e 89       	ldd	r23, Y+22	; 0x16
    1966:	8f 89       	ldd	r24, Y+23	; 0x17
    1968:	98 8d       	ldd	r25, Y+24	; 0x18
    196a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9c 8b       	std	Y+20, r25	; 0x14
    1974:	8b 8b       	std	Y+19, r24	; 0x13
    1976:	8b 89       	ldd	r24, Y+19	; 0x13
    1978:	9c 89       	ldd	r25, Y+20	; 0x14
    197a:	98 8b       	std	Y+16, r25	; 0x10
    197c:	8f 87       	std	Y+15, r24	; 0x0f
    197e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1980:	98 89       	ldd	r25, Y+16	; 0x10
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <HLCD_voidSendCommand+0x118>
    1986:	98 8b       	std	Y+16, r25	; 0x10
    1988:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_voidSetPinValue('A', 2, 0);
    198a:	81 e4       	ldi	r24, 0x41	; 65
    198c:	62 e0       	ldi	r22, 0x02	; 2
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a0 e0       	ldi	r26, 0x00	; 0
    199a:	b0 e4       	ldi	r27, 0x40	; 64
    199c:	8b 87       	std	Y+11, r24	; 0x0b
    199e:	9c 87       	std	Y+12, r25	; 0x0c
    19a0:	ad 87       	std	Y+13, r26	; 0x0d
    19a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	4a ef       	ldi	r20, 0xFA	; 250
    19b2:	54 e4       	ldi	r21, 0x44	; 68
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	8f 83       	std	Y+7, r24	; 0x07
    19be:	98 87       	std	Y+8, r25	; 0x08
    19c0:	a9 87       	std	Y+9, r26	; 0x09
    19c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c4:	6f 81       	ldd	r22, Y+7	; 0x07
    19c6:	78 85       	ldd	r23, Y+8	; 0x08
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e8       	ldi	r20, 0x80	; 128
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d8:	88 23       	and	r24, r24
    19da:	2c f4       	brge	.+10     	; 0x19e6 <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
    19e4:	3f c0       	rjmp	.+126    	; 0x1a64 <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    19e6:	6f 81       	ldd	r22, Y+7	; 0x07
    19e8:	78 85       	ldd	r23, Y+8	; 0x08
    19ea:	89 85       	ldd	r24, Y+9	; 0x09
    19ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	4c f5       	brge	.+82     	; 0x1a50 <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e2       	ldi	r20, 0x20	; 32
    1a0c:	51 e4       	ldi	r21, 0x41	; 65
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <HLCD_voidSendCommand+0x1dc>
    1a28:	88 ec       	ldi	r24, 0xC8	; 200
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	9c 83       	std	Y+4, r25	; 0x04
    1a2e:	8b 83       	std	Y+3, r24	; 0x03
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	9c 81       	ldd	r25, Y+4	; 0x04
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <HLCD_voidSendCommand+0x1ca>
    1a38:	9c 83       	std	Y+4, r25	; 0x04
    1a3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	69 f7       	brne	.-38     	; 0x1a28 <HLCD_voidSendCommand+0x1be>
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a50:	6f 81       	ldd	r22, Y+7	; 0x07
    1a52:	78 85       	ldd	r23, Y+8	; 0x08
    1a54:	89 85       	ldd	r24, Y+9	; 0x09
    1a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	9a 83       	std	Y+2, r25	; 0x02
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <HLCD_voidSendCommand+0x206>
    1a74:	9a 83       	std	Y+2, r25	; 0x02
    1a76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a78:	6d 96       	adiw	r28, 0x1d	; 29
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	6d 97       	sbiw	r28, 0x1d	; 29
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_voidSetPinValue('A',0,1);
    1aa0:	81 e4       	ldi	r24, 0x41	; 65
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('A',1,0);
    1aaa:	81 e4       	ldi	r24, 0x41	; 65
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>
	//Write data
	MDIO_voidSetPortValue('C',A_u8Data);
    1ab4:	83 e4       	ldi	r24, 0x43	; 67
    1ab6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ab8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>

	//pulse on enable pin
	MDIO_voidSetPinValue('A',2,1);
    1abc:	81 e4       	ldi	r24, 0x41	; 65
    1abe:	62 e0       	ldi	r22, 0x02	; 2
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	a0 e0       	ldi	r26, 0x00	; 0
    1acc:	b0 e4       	ldi	r27, 0x40	; 64
    1ace:	89 8f       	std	Y+25, r24	; 0x19
    1ad0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ad2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ad4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ad8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ada:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1adc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a ef       	ldi	r20, 0xFA	; 250
    1ae4:	54 e4       	ldi	r21, 0x44	; 68
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8d 8b       	std	Y+21, r24	; 0x15
    1af0:	9e 8b       	std	Y+22, r25	; 0x16
    1af2:	af 8b       	std	Y+23, r26	; 0x17
    1af4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1af6:	6d 89       	ldd	r22, Y+21	; 0x15
    1af8:	7e 89       	ldd	r23, Y+22	; 0x16
    1afa:	8f 89       	ldd	r24, Y+23	; 0x17
    1afc:	98 8d       	ldd	r25, Y+24	; 0x18
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	2c f4       	brge	.+10     	; 0x1b18 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	9c 8b       	std	Y+20, r25	; 0x14
    1b14:	8b 8b       	std	Y+19, r24	; 0x13
    1b16:	3f c0       	rjmp	.+126    	; 0x1b96 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1b18:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	3f ef       	ldi	r19, 0xFF	; 255
    1b24:	4f e7       	ldi	r20, 0x7F	; 127
    1b26:	57 e4       	ldi	r21, 0x47	; 71
    1b28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2c:	18 16       	cp	r1, r24
    1b2e:	4c f5       	brge	.+82     	; 0x1b82 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b30:	69 8d       	ldd	r22, Y+25	; 0x19
    1b32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9c 8b       	std	Y+20, r25	; 0x14
    1b56:	8b 8b       	std	Y+19, r24	; 0x13
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <HLCD_voidSendData+0xee>
    1b5a:	88 ec       	ldi	r24, 0xC8	; 200
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9a 8b       	std	Y+18, r25	; 0x12
    1b60:	89 8b       	std	Y+17, r24	; 0x11
    1b62:	89 89       	ldd	r24, Y+17	; 0x11
    1b64:	9a 89       	ldd	r25, Y+18	; 0x12
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <HLCD_voidSendData+0xdc>
    1b6a:	9a 8b       	std	Y+18, r25	; 0x12
    1b6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b70:	9c 89       	ldd	r25, Y+20	; 0x14
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	9c 8b       	std	Y+20, r25	; 0x14
    1b76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b78:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	69 f7       	brne	.-38     	; 0x1b5a <HLCD_voidSendData+0xd0>
    1b80:	14 c0       	rjmp	.+40     	; 0x1baa <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b82:	6d 89       	ldd	r22, Y+21	; 0x15
    1b84:	7e 89       	ldd	r23, Y+22	; 0x16
    1b86:	8f 89       	ldd	r24, Y+23	; 0x17
    1b88:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	9c 8b       	std	Y+20, r25	; 0x14
    1b94:	8b 8b       	std	Y+19, r24	; 0x13
    1b96:	8b 89       	ldd	r24, Y+19	; 0x13
    1b98:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9a:	98 8b       	std	Y+16, r25	; 0x10
    1b9c:	8f 87       	std	Y+15, r24	; 0x0f
    1b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba0:	98 89       	ldd	r25, Y+16	; 0x10
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <HLCD_voidSendData+0x118>
    1ba6:	98 8b       	std	Y+16, r25	; 0x10
    1ba8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_voidSetPinValue('A',2,0);
    1baa:	81 e4       	ldi	r24, 0x41	; 65
    1bac:	62 e0       	ldi	r22, 0x02	; 2
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a0 e0       	ldi	r26, 0x00	; 0
    1bba:	b0 e4       	ldi	r27, 0x40	; 64
    1bbc:	8b 87       	std	Y+11, r24	; 0x0b
    1bbe:	9c 87       	std	Y+12, r25	; 0x0c
    1bc0:	ad 87       	std	Y+13, r26	; 0x0d
    1bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a ef       	ldi	r20, 0xFA	; 250
    1bd2:	54 e4       	ldi	r21, 0x44	; 68
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8f 83       	std	Y+7, r24	; 0x07
    1bde:	98 87       	std	Y+8, r25	; 0x08
    1be0:	a9 87       	std	Y+9, r26	; 0x09
    1be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1be4:	6f 81       	ldd	r22, Y+7	; 0x07
    1be6:	78 85       	ldd	r23, Y+8	; 0x08
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <HLCD_voidSendData+0x17c>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    1c06:	6f 81       	ldd	r22, Y+7	; 0x07
    1c08:	78 85       	ldd	r23, Y+8	; 0x08
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	4c f5       	brge	.+82     	; 0x1c70 <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9e 83       	std	Y+6, r25	; 0x06
    1c44:	8d 83       	std	Y+5, r24	; 0x05
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <HLCD_voidSendData+0x1dc>
    1c48:	88 ec       	ldi	r24, 0xC8	; 200
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9c 83       	std	Y+4, r25	; 0x04
    1c4e:	8b 83       	std	Y+3, r24	; 0x03
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <HLCD_voidSendData+0x1ca>
    1c58:	9c 83       	std	Y+4, r25	; 0x04
    1c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <HLCD_voidSendData+0x1be>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	6f 81       	ldd	r22, Y+7	; 0x07
    1c72:	78 85       	ldd	r23, Y+8	; 0x08
    1c74:	89 85       	ldd	r24, Y+9	; 0x09
    1c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9e 83       	std	Y+6, r25	; 0x06
    1c82:	8d 83       	std	Y+5, r24	; 0x05
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <HLCD_voidSendData+0x206>
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c98:	6d 96       	adiw	r28, 0x1d	; 29
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <HLCD_voidInit>:

void HLCD_voidInit()
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	e8 97       	sbiw	r28, 0x38	; 56
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	a0 e2       	ldi	r26, 0x20	; 32
    1cc4:	b2 e4       	ldi	r27, 0x42	; 66
    1cc6:	8d ab       	std	Y+53, r24	; 0x35
    1cc8:	9e ab       	std	Y+54, r25	; 0x36
    1cca:	af ab       	std	Y+55, r26	; 0x37
    1ccc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cce:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd0:	7e a9       	ldd	r23, Y+54	; 0x36
    1cd2:	8f a9       	ldd	r24, Y+55	; 0x37
    1cd4:	98 ad       	ldd	r25, Y+56	; 0x38
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a ef       	ldi	r20, 0xFA	; 250
    1cdc:	54 e4       	ldi	r21, 0x44	; 68
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	89 ab       	std	Y+49, r24	; 0x31
    1ce8:	9a ab       	std	Y+50, r25	; 0x32
    1cea:	ab ab       	std	Y+51, r26	; 0x33
    1cec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cee:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <HLCD_voidInit+0x66>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	98 ab       	std	Y+48, r25	; 0x30
    1d0c:	8f a7       	std	Y+47, r24	; 0x2f
    1d0e:	3f c0       	rjmp	.+126    	; 0x1d8e <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1d10:	69 a9       	ldd	r22, Y+49	; 0x31
    1d12:	7a a9       	ldd	r23, Y+50	; 0x32
    1d14:	8b a9       	ldd	r24, Y+51	; 0x33
    1d16:	9c a9       	ldd	r25, Y+52	; 0x34
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	4c f5       	brge	.+82     	; 0x1d7a <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d28:	6d a9       	ldd	r22, Y+53	; 0x35
    1d2a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d2c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d2e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e2       	ldi	r20, 0x20	; 32
    1d36:	51 e4       	ldi	r21, 0x41	; 65
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	98 ab       	std	Y+48, r25	; 0x30
    1d4e:	8f a7       	std	Y+47, r24	; 0x2f
    1d50:	0f c0       	rjmp	.+30     	; 0x1d70 <HLCD_voidInit+0xc6>
    1d52:	88 ec       	ldi	r24, 0xC8	; 200
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9e a7       	std	Y+46, r25	; 0x2e
    1d58:	8d a7       	std	Y+45, r24	; 0x2d
    1d5a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d5c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <HLCD_voidInit+0xb4>
    1d62:	9e a7       	std	Y+46, r25	; 0x2e
    1d64:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d68:	98 a9       	ldd	r25, Y+48	; 0x30
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	98 ab       	std	Y+48, r25	; 0x30
    1d6e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d72:	98 a9       	ldd	r25, Y+48	; 0x30
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	69 f7       	brne	.-38     	; 0x1d52 <HLCD_voidInit+0xa8>
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d80:	9c a9       	ldd	r25, Y+52	; 0x34
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	98 ab       	std	Y+48, r25	; 0x30
    1d8c:	8f a7       	std	Y+47, r24	; 0x2f
    1d8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d90:	98 a9       	ldd	r25, Y+48	; 0x30
    1d92:	9c a7       	std	Y+44, r25	; 0x2c
    1d94:	8b a7       	std	Y+43, r24	; 0x2b
    1d96:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d98:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <HLCD_voidInit+0xf0>
    1d9e:	9c a7       	std	Y+44, r25	; 0x2c
    1da0:	8b a7       	std	Y+43, r24	; 0x2b
	//Wait for more than 30 micros
	_delay_ms(40);

	//Function set 0b00111000
	HLCD_voidSendCommand(0b00111000);
    1da2:	88 e3       	ldi	r24, 0x38	; 56
    1da4:	0e 94 35 0c 	call	0x186a	; 0x186a <HLCD_voidSendCommand>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e8       	ldi	r26, 0x80	; 128
    1dae:	bf e3       	ldi	r27, 0x3F	; 63
    1db0:	8f a3       	std	Y+39, r24	; 0x27
    1db2:	98 a7       	std	Y+40, r25	; 0x28
    1db4:	a9 a7       	std	Y+41, r26	; 0x29
    1db6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	6f a1       	ldd	r22, Y+39	; 0x27
    1dba:	78 a5       	ldd	r23, Y+40	; 0x28
    1dbc:	89 a5       	ldd	r24, Y+41	; 0x29
    1dbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a ef       	ldi	r20, 0xFA	; 250
    1dc6:	54 e4       	ldi	r21, 0x44	; 68
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8b a3       	std	Y+35, r24	; 0x23
    1dd2:	9c a3       	std	Y+36, r25	; 0x24
    1dd4:	ad a3       	std	Y+37, r26	; 0x25
    1dd6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dda:	7c a1       	ldd	r23, Y+36	; 0x24
    1ddc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dde:	9e a1       	ldd	r25, Y+38	; 0x26
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dec:	88 23       	and	r24, r24
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <HLCD_voidInit+0x150>
		__ticks = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9a a3       	std	Y+34, r25	; 0x22
    1df6:	89 a3       	std	Y+33, r24	; 0x21
    1df8:	3f c0       	rjmp	.+126    	; 0x1e78 <HLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    1dfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1dfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1e00:	9e a1       	ldd	r25, Y+38	; 0x26
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	3f ef       	ldi	r19, 0xFF	; 255
    1e06:	4f e7       	ldi	r20, 0x7F	; 127
    1e08:	57 e4       	ldi	r21, 0x47	; 71
    1e0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	4c f5       	brge	.+82     	; 0x1e64 <HLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e12:	6f a1       	ldd	r22, Y+39	; 0x27
    1e14:	78 a5       	ldd	r23, Y+40	; 0x28
    1e16:	89 a5       	ldd	r24, Y+41	; 0x29
    1e18:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e2       	ldi	r20, 0x20	; 32
    1e20:	51 e4       	ldi	r21, 0x41	; 65
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9a a3       	std	Y+34, r25	; 0x22
    1e38:	89 a3       	std	Y+33, r24	; 0x21
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <HLCD_voidInit+0x1b0>
    1e3c:	88 ec       	ldi	r24, 0xC8	; 200
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	98 a3       	std	Y+32, r25	; 0x20
    1e42:	8f 8f       	std	Y+31, r24	; 0x1f
    1e44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e46:	98 a1       	ldd	r25, Y+32	; 0x20
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <HLCD_voidInit+0x19e>
    1e4c:	98 a3       	std	Y+32, r25	; 0x20
    1e4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e50:	89 a1       	ldd	r24, Y+33	; 0x21
    1e52:	9a a1       	ldd	r25, Y+34	; 0x22
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	9a a3       	std	Y+34, r25	; 0x22
    1e58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	69 f7       	brne	.-38     	; 0x1e3c <HLCD_voidInit+0x192>
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <HLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e64:	6b a1       	ldd	r22, Y+35	; 0x23
    1e66:	7c a1       	ldd	r23, Y+36	; 0x24
    1e68:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9a a3       	std	Y+34, r25	; 0x22
    1e76:	89 a3       	std	Y+33, r24	; 0x21
    1e78:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <HLCD_voidInit+0x1da>
    1e88:	9e 8f       	std	Y+30, r25	; 0x1e
    1e8a:	8d 8f       	std	Y+29, r24	; 0x1d

	//Wait for 40 ms
	_delay_ms(1);

	//Display ON/OFF  0b00001111
	HLCD_voidSendCommand(0b00001111);
    1e8c:	8f e0       	ldi	r24, 0x0F	; 15
    1e8e:	0e 94 35 0c 	call	0x186a	; 0x186a <HLCD_voidSendCommand>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 e8       	ldi	r26, 0x80	; 128
    1e98:	bf e3       	ldi	r27, 0x3F	; 63
    1e9a:	89 8f       	std	Y+25, r24	; 0x19
    1e9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e9e:	ab 8f       	std	Y+27, r26	; 0x1b
    1ea0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ea6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ea8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4a ef       	ldi	r20, 0xFA	; 250
    1eb0:	54 e4       	ldi	r21, 0x44	; 68
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	8d 8b       	std	Y+21, r24	; 0x15
    1ebc:	9e 8b       	std	Y+22, r25	; 0x16
    1ebe:	af 8b       	std	Y+23, r26	; 0x17
    1ec0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ec2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <HLCD_voidInit+0x23a>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9c 8b       	std	Y+20, r25	; 0x14
    1ee0:	8b 8b       	std	Y+19, r24	; 0x13
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <HLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    1ee4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eea:	98 8d       	ldd	r25, Y+24	; 0x18
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <HLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	69 8d       	ldd	r22, Y+25	; 0x19
    1efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9c 8b       	std	Y+20, r25	; 0x14
    1f22:	8b 8b       	std	Y+19, r24	; 0x13
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <HLCD_voidInit+0x29a>
    1f26:	88 ec       	ldi	r24, 0xC8	; 200
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9a 8b       	std	Y+18, r25	; 0x12
    1f2c:	89 8b       	std	Y+17, r24	; 0x11
    1f2e:	89 89       	ldd	r24, Y+17	; 0x11
    1f30:	9a 89       	ldd	r25, Y+18	; 0x12
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <HLCD_voidInit+0x288>
    1f36:	9a 8b       	std	Y+18, r25	; 0x12
    1f38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	9c 8b       	std	Y+20, r25	; 0x14
    1f42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	8b 89       	ldd	r24, Y+19	; 0x13
    1f46:	9c 89       	ldd	r25, Y+20	; 0x14
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <HLCD_voidInit+0x27c>
    1f4c:	14 c0       	rjmp	.+40     	; 0x1f76 <HLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f50:	7e 89       	ldd	r23, Y+22	; 0x16
    1f52:	8f 89       	ldd	r24, Y+23	; 0x17
    1f54:	98 8d       	ldd	r25, Y+24	; 0x18
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9c 8b       	std	Y+20, r25	; 0x14
    1f60:	8b 8b       	std	Y+19, r24	; 0x13
    1f62:	8b 89       	ldd	r24, Y+19	; 0x13
    1f64:	9c 89       	ldd	r25, Y+20	; 0x14
    1f66:	98 8b       	std	Y+16, r25	; 0x10
    1f68:	8f 87       	std	Y+15, r24	; 0x0f
    1f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f6c:	98 89       	ldd	r25, Y+16	; 0x10
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <HLCD_voidInit+0x2c4>
    1f72:	98 8b       	std	Y+16, r25	; 0x10
    1f74:	8f 87       	std	Y+15, r24	; 0x0f

	//Wait for 40 ms
	_delay_ms(1);

	//Clear Display 0b0000001 -----------
	HLCD_voidSendCommand(0b00000001);
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	0e 94 35 0c 	call	0x186a	; 0x186a <HLCD_voidSendCommand>
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	a0 e0       	ldi	r26, 0x00	; 0
    1f82:	b0 e4       	ldi	r27, 0x40	; 64
    1f84:	8b 87       	std	Y+11, r24	; 0x0b
    1f86:	9c 87       	std	Y+12, r25	; 0x0c
    1f88:	ad 87       	std	Y+13, r26	; 0x0d
    1f8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	4a ef       	ldi	r20, 0xFA	; 250
    1f9a:	54 e4       	ldi	r21, 0x44	; 68
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	8f 83       	std	Y+7, r24	; 0x07
    1fa6:	98 87       	std	Y+8, r25	; 0x08
    1fa8:	a9 87       	std	Y+9, r26	; 0x09
    1faa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fac:	6f 81       	ldd	r22, Y+7	; 0x07
    1fae:	78 85       	ldd	r23, Y+8	; 0x08
    1fb0:	89 85       	ldd	r24, Y+9	; 0x09
    1fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e8       	ldi	r20, 0x80	; 128
    1fba:	5f e3       	ldi	r21, 0x3F	; 63
    1fbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc0:	88 23       	and	r24, r24
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <HLCD_voidInit+0x324>
		__ticks = 1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <HLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    1fce:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd0:	78 85       	ldd	r23, Y+8	; 0x08
    1fd2:	89 85       	ldd	r24, Y+9	; 0x09
    1fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	3f ef       	ldi	r19, 0xFF	; 255
    1fda:	4f e7       	ldi	r20, 0x7F	; 127
    1fdc:	57 e4       	ldi	r21, 0x47	; 71
    1fde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	4c f5       	brge	.+82     	; 0x2038 <HLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e2       	ldi	r20, 0x20	; 32
    1ff4:	51 e4       	ldi	r21, 0x41	; 65
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
    200e:	0f c0       	rjmp	.+30     	; 0x202e <HLCD_voidInit+0x384>
    2010:	88 ec       	ldi	r24, 0xC8	; 200
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9c 83       	std	Y+4, r25	; 0x04
    2016:	8b 83       	std	Y+3, r24	; 0x03
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <HLCD_voidInit+0x372>
    2020:	9c 83       	std	Y+4, r25	; 0x04
    2022:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2024:	8d 81       	ldd	r24, Y+5	; 0x05
    2026:	9e 81       	ldd	r25, Y+6	; 0x06
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	69 f7       	brne	.-38     	; 0x2010 <HLCD_voidInit+0x366>
    2036:	14 c0       	rjmp	.+40     	; 0x2060 <HLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2038:	6f 81       	ldd	r22, Y+7	; 0x07
    203a:	78 85       	ldd	r23, Y+8	; 0x08
    203c:	89 85       	ldd	r24, Y+9	; 0x09
    203e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	9a 83       	std	Y+2, r25	; 0x02
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <HLCD_voidInit+0x3ae>
    205c:	9a 83       	std	Y+2, r25	; 0x02
    205e:	89 83       	std	Y+1, r24	; 0x01

	//wait for 2ms
	_delay_ms(2);

	//Entry mode set 0b00000110
	HLCD_voidSendCommand(0b00000110);
    2060:	86 e0       	ldi	r24, 0x06	; 6
    2062:	0e 94 35 0c 	call	0x186a	; 0x186a <HLCD_voidSendCommand>

}
    2066:	e8 96       	adiw	r28, 0x38	; 56
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <HLCD_voidGoTo>:

void HLCD_voidGoTo(u8 A_u8Row, u8 A_u8Col)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	00 d0       	rcall	.+0      	; 0x207e <HLCD_voidGoTo+0x6>
    207e:	0f 92       	push	r0
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	8a 83       	std	Y+2, r24	; 0x02
    2086:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8DDRamAddress ;
	if(A_u8Row < 2 && A_u8Col < 16 )
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	82 30       	cpi	r24, 0x02	; 2
    208c:	90 f4       	brcc	.+36     	; 0x20b2 <HLCD_voidGoTo+0x3a>
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	80 31       	cpi	r24, 0x10	; 16
    2092:	78 f4       	brcc	.+30     	; 0x20b2 <HLCD_voidGoTo+0x3a>
	{
		if(A_u8Row == 0)
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	88 23       	and	r24, r24
    2098:	19 f4       	brne	.+6      	; 0x20a0 <HLCD_voidGoTo+0x28>
		{
			L_u8DDRamAddress = 0x00+A_u8Col;
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	03 c0       	rjmp	.+6      	; 0x20a6 <HLCD_voidGoTo+0x2e>
		}
		else
		{
			L_u8DDRamAddress = 0x40+A_u8Col;
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	80 5c       	subi	r24, 0xC0	; 192
    20a4:	89 83       	std	Y+1, r24	; 0x01
		}
		SET_BIT(L_u8DDRamAddress, 7);
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	80 68       	ori	r24, 0x80	; 128
    20aa:	89 83       	std	Y+1, r24	; 0x01
		HLCD_voidSendCommand(L_u8DDRamAddress);
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	0e 94 35 0c 	call	0x186a	; 0x186a <HLCD_voidSendCommand>

	}
}
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <HLCD_voidSendString>:



void HLCD_voidSendString(u8 *String){
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <HLCD_voidSendString+0x6>
    20c4:	0f 92       	push	r0
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	9b 83       	std	Y+3, r25	; 0x03
    20cc:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
    20ce:	19 82       	std	Y+1, r1	; 0x01
    20d0:	0e c0       	rjmp	.+28     	; 0x20ee <HLCD_voidSendString+0x30>
	while(String[i] != '\0'){
		HLCD_voidSendData(String[i]);
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	9b 81       	ldd	r25, Y+3	; 0x03
    20dc:	fc 01       	movw	r30, r24
    20de:	e2 0f       	add	r30, r18
    20e0:	f3 1f       	adc	r31, r19
    20e2:	80 81       	ld	r24, Z
    20e4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <HLCD_voidSendData>
		i++;
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	8f 5f       	subi	r24, 0xFF	; 255
    20ec:	89 83       	std	Y+1, r24	; 0x01



void HLCD_voidSendString(u8 *String){
	u8 i =0;
	while(String[i] != '\0'){
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	9b 81       	ldd	r25, Y+3	; 0x03
    20f8:	fc 01       	movw	r30, r24
    20fa:	e2 0f       	add	r30, r18
    20fc:	f3 1f       	adc	r31, r19
    20fe:	80 81       	ld	r24, Z
    2100:	88 23       	and	r24, r24
    2102:	39 f7       	brne	.-50     	; 0x20d2 <HLCD_voidSendString+0x14>
		HLCD_voidSendData(String[i]);
		i++;
	}
}
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <HLCD_voidDisplayNumber>:



void HLCD_voidDisplayNumber(s32 A_s32Number)
{
    2110:	ef 92       	push	r14
    2112:	ff 92       	push	r15
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	28 97       	sbiw	r28, 0x08	; 8
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	6d 83       	std	Y+5, r22	; 0x05
    212e:	7e 83       	std	Y+6, r23	; 0x06
    2130:	8f 83       	std	Y+7, r24	; 0x07
    2132:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Number=1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e0       	ldi	r26, 0x00	; 0
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	ab 83       	std	Y+3, r26	; 0x03
    2142:	bc 83       	std	Y+4, r27	; 0x04
	if (A_s32Number==0)
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	af 81       	ldd	r26, Y+7	; 0x07
    214a:	b8 85       	ldd	r27, Y+8	; 0x08
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	a1 05       	cpc	r26, r1
    2150:	b1 05       	cpc	r27, r1
    2152:	19 f4       	brne	.+6      	; 0x215a <HLCD_voidDisplayNumber+0x4a>
	{
		HLCD_voidSendData('0');
    2154:	80 e3       	ldi	r24, 0x30	; 48
    2156:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <HLCD_voidSendData>
	}
	if (A_s32Number<0)
    215a:	8d 81       	ldd	r24, Y+5	; 0x05
    215c:	9e 81       	ldd	r25, Y+6	; 0x06
    215e:	af 81       	ldd	r26, Y+7	; 0x07
    2160:	b8 85       	ldd	r27, Y+8	; 0x08
    2162:	bb 23       	and	r27, r27
    2164:	0c f0       	brlt	.+2      	; 0x2168 <HLCD_voidDisplayNumber+0x58>
    2166:	49 c0       	rjmp	.+146    	; 0x21fa <HLCD_voidDisplayNumber+0xea>
	{
		HLCD_voidSendData('-');
    2168:	8d e2       	ldi	r24, 0x2D	; 45
    216a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <HLCD_voidSendData>
		A_s32Number *=-1;
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	9e 81       	ldd	r25, Y+6	; 0x06
    2172:	af 81       	ldd	r26, Y+7	; 0x07
    2174:	b8 85       	ldd	r27, Y+8	; 0x08
    2176:	b0 95       	com	r27
    2178:	a0 95       	com	r26
    217a:	90 95       	com	r25
    217c:	81 95       	neg	r24
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	af 4f       	sbci	r26, 0xFF	; 255
    2182:	bf 4f       	sbci	r27, 0xFF	; 255
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	af 83       	std	Y+7, r26	; 0x07
    218a:	b8 87       	std	Y+8, r27	; 0x08
    218c:	36 c0       	rjmp	.+108    	; 0x21fa <HLCD_voidDisplayNumber+0xea>
	}
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	ab 81       	ldd	r26, Y+3	; 0x03
    2194:	bc 81       	ldd	r27, Y+4	; 0x04
    2196:	2a e0       	ldi	r18, 0x0A	; 10
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsi3>
    21a6:	7b 01       	movw	r14, r22
    21a8:	8c 01       	movw	r16, r24
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	af 81       	ldd	r26, Y+7	; 0x07
    21b0:	b8 85       	ldd	r27, Y+8	; 0x08
    21b2:	2a e0       	ldi	r18, 0x0A	; 10
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divmodsi4>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8e 0d       	add	r24, r14
    21c8:	9f 1d       	adc	r25, r15
    21ca:	a0 1f       	adc	r26, r16
    21cc:	b1 1f       	adc	r27, r17
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	ab 83       	std	Y+3, r26	; 0x03
    21d4:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number = A_s32Number /10;
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	af 81       	ldd	r26, Y+7	; 0x07
    21dc:	b8 85       	ldd	r27, Y+8	; 0x08
    21de:	2a e0       	ldi	r18, 0x0A	; 10
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 b4 12 	call	0x2568	; 0x2568 <__divmodsi4>
    21ee:	da 01       	movw	r26, r20
    21f0:	c9 01       	movw	r24, r18
    21f2:	8d 83       	std	Y+5, r24	; 0x05
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	af 83       	std	Y+7, r26	; 0x07
    21f8:	b8 87       	std	Y+8, r27	; 0x08
	if (A_s32Number<0)
	{
		HLCD_voidSendData('-');
		A_s32Number *=-1;
	}
	while (A_s32Number!=0)
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	af 81       	ldd	r26, Y+7	; 0x07
    2200:	b8 85       	ldd	r27, Y+8	; 0x08
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	a1 05       	cpc	r26, r1
    2206:	b1 05       	cpc	r27, r1
    2208:	11 f6       	brne	.-124    	; 0x218e <HLCD_voidDisplayNumber+0x7e>
    220a:	23 c0       	rjmp	.+70     	; 0x2252 <HLCD_voidDisplayNumber+0x142>
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
	{
		HLCD_voidSendData((local_u32Number%10)+48);
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	ab 81       	ldd	r26, Y+3	; 0x03
    2212:	bc 81       	ldd	r27, Y+4	; 0x04
    2214:	2a e0       	ldi	r18, 0x0A	; 10
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	80 5d       	subi	r24, 0xD0	; 208
    222a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <HLCD_voidSendData>
		local_u32Number=local_u32Number/10;
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	ab 81       	ldd	r26, Y+3	; 0x03
    2234:	bc 81       	ldd	r27, Y+4	; 0x04
    2236:	2a e0       	ldi	r18, 0x0A	; 10
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	50 e0       	ldi	r21, 0x00	; 0
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    2246:	da 01       	movw	r26, r20
    2248:	c9 01       	movw	r24, r18
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	ab 83       	std	Y+3, r26	; 0x03
    2250:	bc 83       	std	Y+4, r27	; 0x04
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	ab 81       	ldd	r26, Y+3	; 0x03
    2258:	bc 81       	ldd	r27, Y+4	; 0x04
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	91 05       	cpc	r25, r1
    225e:	a1 05       	cpc	r26, r1
    2260:	b1 05       	cpc	r27, r1
    2262:	a1 f6       	brne	.-88     	; 0x220c <HLCD_voidDisplayNumber+0xfc>
	{
		HLCD_voidSendData((local_u32Number%10)+48);
		local_u32Number=local_u32Number/10;
	}
}
    2264:	28 96       	adiw	r28, 0x08	; 8
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	1f 91       	pop	r17
    2276:	0f 91       	pop	r16
    2278:	ff 90       	pop	r15
    227a:	ef 90       	pop	r14
    227c:	08 95       	ret

0000227e <HKPD_u8GetPressedKey>:
/*
 *
 *
 * */

u8 HKPD_u8GetPressedKey(){
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	00 d0       	rcall	.+0      	; 0x2284 <HKPD_u8GetPressedKey+0x6>
    2284:	00 d0       	rcall	.+0      	; 0x2286 <HKPD_u8GetPressedKey+0x8>
    2286:	0f 92       	push	r0
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=255, Col, Row;
    228c:	8f ef       	ldi	r24, 0xFF	; 255
    228e:	8c 83       	std	Y+4, r24	; 0x04

	for(Col = 0; Col<4; Col++){
    2290:	1b 82       	std	Y+3, r1	; 0x03
    2292:	3e c0       	rjmp	.+124    	; 0x2310 <HKPD_u8GetPressedKey+0x92>
		/*Activate Current Col*/
		MDIO_voidSetPinValue('D',Col ,0);
    2294:	84 e4       	ldi	r24, 0x44	; 68
    2296:	6b 81       	ldd	r22, Y+3	; 0x03
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>

		for(Row = 0; Row<4; Row++){
    229e:	1a 82       	std	Y+2, r1	; 0x02
    22a0:	2c c0       	rjmp	.+88     	; 0x22fa <HKPD_u8GetPressedKey+0x7c>

			u8 L_u8PinValue = MDIO_u8GetPinValue('D', (Row+4));
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	98 2f       	mov	r25, r24
    22a6:	9c 5f       	subi	r25, 0xFC	; 252
    22a8:	84 e4       	ldi	r24, 0x44	; 68
    22aa:	69 2f       	mov	r22, r25
    22ac:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <MDIO_u8GetPinValue>
    22b0:	89 83       	std	Y+1, r24	; 0x01

			/*Check If Key Is Pressed*/
			if(L_u8PinValue == 0){
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	88 23       	and	r24, r24
    22b6:	f1 f4       	brne	.+60     	; 0x22f4 <HKPD_u8GetPressedKey+0x76>
				Local_u8PressedKey = G_u8KPDButtons[Row][Col];
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	48 2f       	mov	r20, r24
    22bc:	50 e0       	ldi	r21, 0x00	; 0
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	ca 01       	movw	r24, r20
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	82 0f       	add	r24, r18
    22d0:	93 1f       	adc	r25, r19
    22d2:	fc 01       	movw	r30, r24
    22d4:	e3 58       	subi	r30, 0x83	; 131
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	8c 83       	std	Y+4, r24	; 0x04

				while(MDIO_u8GetPinValue('D', (Row+4)) == 0);
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	98 2f       	mov	r25, r24
    22e0:	9c 5f       	subi	r25, 0xFC	; 252
    22e2:	84 e4       	ldi	r24, 0x44	; 68
    22e4:	69 2f       	mov	r22, r25
    22e6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <MDIO_u8GetPinValue>
    22ea:	88 23       	and	r24, r24
    22ec:	b9 f3       	breq	.-18     	; 0x22dc <HKPD_u8GetPressedKey+0x5e>

				return Local_u8PressedKey;
    22ee:	8c 81       	ldd	r24, Y+4	; 0x04
    22f0:	8d 83       	std	Y+5, r24	; 0x05
    22f2:	14 c0       	rjmp	.+40     	; 0x231c <HKPD_u8GetPressedKey+0x9e>

	for(Col = 0; Col<4; Col++){
		/*Activate Current Col*/
		MDIO_voidSetPinValue('D',Col ,0);

		for(Row = 0; Row<4; Row++){
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	8f 5f       	subi	r24, 0xFF	; 255
    22f8:	8a 83       	std	Y+2, r24	; 0x02
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	84 30       	cpi	r24, 0x04	; 4
    22fe:	88 f2       	brcs	.-94     	; 0x22a2 <HKPD_u8GetPressedKey+0x24>

				return Local_u8PressedKey;
			}
		}
		/*Deactivate Current Col*/
		MDIO_voidSetPinValue('D',Col ,1);
    2300:	84 e4       	ldi	r24, 0x44	; 68
    2302:	6b 81       	ldd	r22, Y+3	; 0x03
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 41 09 	call	0x1282	; 0x1282 <MDIO_voidSetPinValue>
 * */

u8 HKPD_u8GetPressedKey(){
	u8 Local_u8PressedKey=255, Col, Row;

	for(Col = 0; Col<4; Col++){
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	8b 83       	std	Y+3, r24	; 0x03
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	84 30       	cpi	r24, 0x04	; 4
    2314:	08 f4       	brcc	.+2      	; 0x2318 <HKPD_u8GetPressedKey+0x9a>
    2316:	be cf       	rjmp	.-132    	; 0x2294 <HKPD_u8GetPressedKey+0x16>
			}
		}
		/*Deactivate Current Col*/
		MDIO_voidSetPinValue('D',Col ,1);
	}
	return Local_u8PressedKey;
    2318:	8c 81       	ldd	r24, Y+4	; 0x04
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	8d 81       	ldd	r24, Y+5	; 0x05

}
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <main>:

u16 G_counter, OnTicks, OffTicks;


int main()
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	00 d0       	rcall	.+0      	; 0x2334 <main+0x6>
    2334:	00 d0       	rcall	.+0      	; 0x2336 <main+0x8>
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection('B', 3, 1);
    233a:	82 e4       	ldi	r24, 0x42	; 66
    233c:	63 e0       	ldi	r22, 0x03	; 3
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 29 08 	call	0x1052	; 0x1052 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection('D', 2, 0);
    2344:	84 e4       	ldi	r24, 0x44	; 68
    2346:	62 e0       	ldi	r22, 0x02	; 2
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	0e 94 29 08 	call	0x1052	; 0x1052 <MDIO_voidSetPinDirection>

	/*LCD Configrations*/

	MDIO_voidSetPortDirection('C', 0xff);
    234e:	83 e4       	ldi	r24, 0x43	; 67
    2350:	6f ef       	ldi	r22, 0xFF	; 255
    2352:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <MDIO_voidSetPortDirection>
	MDIO_voidSetPortDirection('A', 0xff);
    2356:	81 e4       	ldi	r24, 0x41	; 65
    2358:	6f ef       	ldi	r22, 0xFF	; 255
    235a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <MDIO_voidSetPortDirection>


	MTimer_voidTimerInit(2);
    235e:	82 e0       	ldi	r24, 0x02	; 2
    2360:	0e 94 a3 05 	call	0xb46	; 0xb46 <MTimer_voidTimerInit>
	MTimer_voidSetPreloadValue(2, 64);
    2364:	82 e0       	ldi	r24, 0x02	; 2
    2366:	60 e4       	ldi	r22, 0x40	; 64
    2368:	0e 94 fe 05 	call	0xbfc	; 0xbfc <MTimer_voidSetPreloadValue>

	MEXTI_voidSenseControl(0,3);
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	63 e0       	ldi	r22, 0x03	; 3
    2370:	0e 94 bb 06 	call	0xd76	; 0xd76 <MEXTI_voidSenseControl>
	MTimer_voidStart();
    2374:	0e 94 16 06 	call	0xc2c	; 0xc2c <MTimer_voidStart>
	MTimer1_voidInit();
    2378:	0e 94 4e 06 	call	0xc9c	; 0xc9c <MTimer1_voidInit>

	HLCD_voidInit();
    237c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <HLCD_voidInit>

	/*EXTI Enable*/
	MEXTI_voidEnable(0);
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	0e 94 bb 07 	call	0xf76	; 0xf76 <MEXTI_voidEnable>

	/*Enable Global Interrupt*/
	MGIE_voidEnable();
    2386:	0e 94 9f 06 	call	0xd3e	; 0xd3e <MGIE_voidEnable>

	u8 *Str1 = "OnTicks= ";
    238a:	80 e6       	ldi	r24, 0x60	; 96
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
	u8 *Str2 = "OffTicks= ";
    2392:	8a e6       	ldi	r24, 0x6A	; 106
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
	while(1){


		while(OnTicks == 0 && OffTicks==0);
    239a:	80 91 92 00 	lds	r24, 0x0092
    239e:	90 91 93 00 	lds	r25, 0x0093
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	31 f4       	brne	.+12     	; 0x23b2 <main+0x84>
    23a6:	80 91 90 00 	lds	r24, 0x0090
    23aa:	90 91 91 00 	lds	r25, 0x0091
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	a1 f3       	breq	.-24     	; 0x239a <main+0x6c>

		HLCD_voidGoTo(0,0);
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	0e 94 3c 10 	call	0x2078	; 0x2078 <HLCD_voidGoTo>
		HLCD_voidSendString(Str1);
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	0e 94 5f 10 	call	0x20be	; 0x20be <HLCD_voidSendString>
		HLCD_voidDisplayNumber(OnTicks);
    23c2:	80 91 92 00 	lds	r24, 0x0092
    23c6:	90 91 93 00 	lds	r25, 0x0093
    23ca:	cc 01       	movw	r24, r24
    23cc:	a0 e0       	ldi	r26, 0x00	; 0
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_voidDisplayNumber>

		HLCD_voidGoTo(1,0);
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	0e 94 3c 10 	call	0x2078	; 0x2078 <HLCD_voidGoTo>
		HLCD_voidSendString(Str2);
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	9a 81       	ldd	r25, Y+2	; 0x02
    23e4:	0e 94 5f 10 	call	0x20be	; 0x20be <HLCD_voidSendString>
		HLCD_voidDisplayNumber(OffTicks);
    23e8:	80 91 90 00 	lds	r24, 0x0090
    23ec:	90 91 91 00 	lds	r25, 0x0091
    23f0:	cc 01       	movw	r24, r24
    23f2:	a0 e0       	ldi	r26, 0x00	; 0
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	bc 01       	movw	r22, r24
    23f8:	cd 01       	movw	r24, r26
    23fa:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_voidDisplayNumber>
		while(OnTicks && OffTicks);
    23fe:	80 91 92 00 	lds	r24, 0x0092
    2402:	90 91 93 00 	lds	r25, 0x0093
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	41 f2       	breq	.-112    	; 0x239a <main+0x6c>
    240a:	80 91 90 00 	lds	r24, 0x0090
    240e:	90 91 91 00 	lds	r25, 0x0091
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	a1 f7       	brne	.-24     	; 0x23fe <main+0xd0>
    2416:	c1 cf       	rjmp	.-126    	; 0x239a <main+0x6c>

00002418 <__vector_1>:
	}

}

ISR(INT0_vect){
    2418:	1f 92       	push	r1
    241a:	0f 92       	push	r0
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	0f 92       	push	r0
    2420:	11 24       	eor	r1, r1
    2422:	2f 93       	push	r18
    2424:	3f 93       	push	r19
    2426:	4f 93       	push	r20
    2428:	5f 93       	push	r21
    242a:	6f 93       	push	r22
    242c:	7f 93       	push	r23
    242e:	8f 93       	push	r24
    2430:	9f 93       	push	r25
    2432:	af 93       	push	r26
    2434:	bf 93       	push	r27
    2436:	ef 93       	push	r30
    2438:	ff 93       	push	r31
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62

	G_counter++;
    2442:	80 91 8e 00 	lds	r24, 0x008E
    2446:	90 91 8f 00 	lds	r25, 0x008F
    244a:	01 96       	adiw	r24, 0x01	; 1
    244c:	90 93 8f 00 	sts	0x008F, r25
    2450:	80 93 8e 00 	sts	0x008E, r24
	/*Detect Rising Edge*/
	if(G_counter == 1){
    2454:	80 91 8e 00 	lds	r24, 0x008E
    2458:	90 91 8f 00 	lds	r25, 0x008F
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	91 05       	cpc	r25, r1
    2460:	49 f4       	brne	.+18     	; 0x2474 <__vector_1+0x5c>
		MTimer1_voidSetValue(0);
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <MTimer1_voidSetValue>
		MEXTI_voidSenseControl(0,2);
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	62 e0       	ldi	r22, 0x02	; 2
    246e:	0e 94 bb 06 	call	0xd76	; 0xd76 <MEXTI_voidSenseControl>
    2472:	26 c0       	rjmp	.+76     	; 0x24c0 <__vector_1+0xa8>
	}
	else if(G_counter == 2){
    2474:	80 91 8e 00 	lds	r24, 0x008E
    2478:	90 91 8f 00 	lds	r25, 0x008F
    247c:	82 30       	cpi	r24, 0x02	; 2
    247e:	91 05       	cpc	r25, r1
    2480:	79 f4       	brne	.+30     	; 0x24a0 <__vector_1+0x88>
		/*Get Ton*/
		OnTicks = MTimer1_u16ReadTimer1Value();
    2482:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <MTimer1_u16ReadTimer1Value>
    2486:	90 93 93 00 	sts	0x0093, r25
    248a:	80 93 92 00 	sts	0x0092, r24
		/*Detect next Rising Edge*/
		MEXTI_voidSenseControl(0,3);
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	63 e0       	ldi	r22, 0x03	; 3
    2492:	0e 94 bb 06 	call	0xd76	; 0xd76 <MEXTI_voidSenseControl>
		/*Set Timer1 == 0*/
		MTimer1_voidSetValue(0);
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <MTimer1_voidSetValue>
    249e:	10 c0       	rjmp	.+32     	; 0x24c0 <__vector_1+0xa8>
	}
	else if(G_counter == 3){
    24a0:	80 91 8e 00 	lds	r24, 0x008E
    24a4:	90 91 8f 00 	lds	r25, 0x008F
    24a8:	83 30       	cpi	r24, 0x03	; 3
    24aa:	91 05       	cpc	r25, r1
    24ac:	49 f4       	brne	.+18     	; 0x24c0 <__vector_1+0xa8>
		/*Get Toff*/
		OffTicks = MTimer1_u16ReadTimer1Value();
    24ae:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <MTimer1_u16ReadTimer1Value>
    24b2:	90 93 91 00 	sts	0x0091, r25
    24b6:	80 93 90 00 	sts	0x0090, r24
		/*Disable INT0*/
		MEXTI_voidDisable(0);
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <MEXTI_voidDisable>
	}
}
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	ff 91       	pop	r31
    24c6:	ef 91       	pop	r30
    24c8:	bf 91       	pop	r27
    24ca:	af 91       	pop	r26
    24cc:	9f 91       	pop	r25
    24ce:	8f 91       	pop	r24
    24d0:	7f 91       	pop	r23
    24d2:	6f 91       	pop	r22
    24d4:	5f 91       	pop	r21
    24d6:	4f 91       	pop	r20
    24d8:	3f 91       	pop	r19
    24da:	2f 91       	pop	r18
    24dc:	0f 90       	pop	r0
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	0f 90       	pop	r0
    24e2:	1f 90       	pop	r1
    24e4:	18 95       	reti

000024e6 <__mulsi3>:
    24e6:	62 9f       	mul	r22, r18
    24e8:	d0 01       	movw	r26, r0
    24ea:	73 9f       	mul	r23, r19
    24ec:	f0 01       	movw	r30, r0
    24ee:	82 9f       	mul	r24, r18
    24f0:	e0 0d       	add	r30, r0
    24f2:	f1 1d       	adc	r31, r1
    24f4:	64 9f       	mul	r22, r20
    24f6:	e0 0d       	add	r30, r0
    24f8:	f1 1d       	adc	r31, r1
    24fa:	92 9f       	mul	r25, r18
    24fc:	f0 0d       	add	r31, r0
    24fe:	83 9f       	mul	r24, r19
    2500:	f0 0d       	add	r31, r0
    2502:	74 9f       	mul	r23, r20
    2504:	f0 0d       	add	r31, r0
    2506:	65 9f       	mul	r22, r21
    2508:	f0 0d       	add	r31, r0
    250a:	99 27       	eor	r25, r25
    250c:	72 9f       	mul	r23, r18
    250e:	b0 0d       	add	r27, r0
    2510:	e1 1d       	adc	r30, r1
    2512:	f9 1f       	adc	r31, r25
    2514:	63 9f       	mul	r22, r19
    2516:	b0 0d       	add	r27, r0
    2518:	e1 1d       	adc	r30, r1
    251a:	f9 1f       	adc	r31, r25
    251c:	bd 01       	movw	r22, r26
    251e:	cf 01       	movw	r24, r30
    2520:	11 24       	eor	r1, r1
    2522:	08 95       	ret

00002524 <__udivmodsi4>:
    2524:	a1 e2       	ldi	r26, 0x21	; 33
    2526:	1a 2e       	mov	r1, r26
    2528:	aa 1b       	sub	r26, r26
    252a:	bb 1b       	sub	r27, r27
    252c:	fd 01       	movw	r30, r26
    252e:	0d c0       	rjmp	.+26     	; 0x254a <__udivmodsi4_ep>

00002530 <__udivmodsi4_loop>:
    2530:	aa 1f       	adc	r26, r26
    2532:	bb 1f       	adc	r27, r27
    2534:	ee 1f       	adc	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	a2 17       	cp	r26, r18
    253a:	b3 07       	cpc	r27, r19
    253c:	e4 07       	cpc	r30, r20
    253e:	f5 07       	cpc	r31, r21
    2540:	20 f0       	brcs	.+8      	; 0x254a <__udivmodsi4_ep>
    2542:	a2 1b       	sub	r26, r18
    2544:	b3 0b       	sbc	r27, r19
    2546:	e4 0b       	sbc	r30, r20
    2548:	f5 0b       	sbc	r31, r21

0000254a <__udivmodsi4_ep>:
    254a:	66 1f       	adc	r22, r22
    254c:	77 1f       	adc	r23, r23
    254e:	88 1f       	adc	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	1a 94       	dec	r1
    2554:	69 f7       	brne	.-38     	; 0x2530 <__udivmodsi4_loop>
    2556:	60 95       	com	r22
    2558:	70 95       	com	r23
    255a:	80 95       	com	r24
    255c:	90 95       	com	r25
    255e:	9b 01       	movw	r18, r22
    2560:	ac 01       	movw	r20, r24
    2562:	bd 01       	movw	r22, r26
    2564:	cf 01       	movw	r24, r30
    2566:	08 95       	ret

00002568 <__divmodsi4>:
    2568:	97 fb       	bst	r25, 7
    256a:	09 2e       	mov	r0, r25
    256c:	05 26       	eor	r0, r21
    256e:	0e d0       	rcall	.+28     	; 0x258c <__divmodsi4_neg1>
    2570:	57 fd       	sbrc	r21, 7
    2572:	04 d0       	rcall	.+8      	; 0x257c <__divmodsi4_neg2>
    2574:	d7 df       	rcall	.-82     	; 0x2524 <__udivmodsi4>
    2576:	0a d0       	rcall	.+20     	; 0x258c <__divmodsi4_neg1>
    2578:	00 1c       	adc	r0, r0
    257a:	38 f4       	brcc	.+14     	; 0x258a <__divmodsi4_exit>

0000257c <__divmodsi4_neg2>:
    257c:	50 95       	com	r21
    257e:	40 95       	com	r20
    2580:	30 95       	com	r19
    2582:	21 95       	neg	r18
    2584:	3f 4f       	sbci	r19, 0xFF	; 255
    2586:	4f 4f       	sbci	r20, 0xFF	; 255
    2588:	5f 4f       	sbci	r21, 0xFF	; 255

0000258a <__divmodsi4_exit>:
    258a:	08 95       	ret

0000258c <__divmodsi4_neg1>:
    258c:	f6 f7       	brtc	.-4      	; 0x258a <__divmodsi4_exit>
    258e:	90 95       	com	r25
    2590:	80 95       	com	r24
    2592:	70 95       	com	r23
    2594:	61 95       	neg	r22
    2596:	7f 4f       	sbci	r23, 0xFF	; 255
    2598:	8f 4f       	sbci	r24, 0xFF	; 255
    259a:	9f 4f       	sbci	r25, 0xFF	; 255
    259c:	08 95       	ret

0000259e <__prologue_saves__>:
    259e:	2f 92       	push	r2
    25a0:	3f 92       	push	r3
    25a2:	4f 92       	push	r4
    25a4:	5f 92       	push	r5
    25a6:	6f 92       	push	r6
    25a8:	7f 92       	push	r7
    25aa:	8f 92       	push	r8
    25ac:	9f 92       	push	r9
    25ae:	af 92       	push	r10
    25b0:	bf 92       	push	r11
    25b2:	cf 92       	push	r12
    25b4:	df 92       	push	r13
    25b6:	ef 92       	push	r14
    25b8:	ff 92       	push	r15
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	ca 1b       	sub	r28, r26
    25c8:	db 0b       	sbc	r29, r27
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	09 94       	ijmp

000025d6 <__epilogue_restores__>:
    25d6:	2a 88       	ldd	r2, Y+18	; 0x12
    25d8:	39 88       	ldd	r3, Y+17	; 0x11
    25da:	48 88       	ldd	r4, Y+16	; 0x10
    25dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    25de:	6e 84       	ldd	r6, Y+14	; 0x0e
    25e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    25e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    25e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    25e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25e8:	b9 84       	ldd	r11, Y+9	; 0x09
    25ea:	c8 84       	ldd	r12, Y+8	; 0x08
    25ec:	df 80       	ldd	r13, Y+7	; 0x07
    25ee:	ee 80       	ldd	r14, Y+6	; 0x06
    25f0:	fd 80       	ldd	r15, Y+5	; 0x05
    25f2:	0c 81       	ldd	r16, Y+4	; 0x04
    25f4:	1b 81       	ldd	r17, Y+3	; 0x03
    25f6:	aa 81       	ldd	r26, Y+2	; 0x02
    25f8:	b9 81       	ldd	r27, Y+1	; 0x01
    25fa:	ce 0f       	add	r28, r30
    25fc:	d1 1d       	adc	r29, r1
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	ed 01       	movw	r28, r26
    260a:	08 95       	ret

0000260c <_exit>:
    260c:	f8 94       	cli

0000260e <__stop_program>:
    260e:	ff cf       	rjmp	.-2      	; 0x260e <__stop_program>
