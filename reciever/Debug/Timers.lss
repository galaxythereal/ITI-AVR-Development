
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000025e0  00002674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080008e  0080008e  000026a2  2**0
                  ALLOC
  3 .stab         00002610  00000000  00000000  000026a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d8  00000000  00000000  00004cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009920  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a4db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7f 11 	call	0x22fe	; 0x22fe <main>
      8a:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MTimer_voidTimerInit>:
 * A_u8TimerMode-----> 0 ------> NormalMode
 * A_u8TimerMode-----> 1 ------> Compare
 * A_u8TimerMode-----> 2 ------> Fast PWM
 * */

void MTimer_voidTimerInit(u8 A_u8TimerMode){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
	/*Choose Timer Mode*/
	if(A_u8TimerMode == 0){
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	88 23       	and	r24, r24
     b56:	b1 f4       	brne	.+44     	; 0xb84 <MTimer_voidTimerInit+0x3e>
		CLR_BIT(TCCR0,6);
     b58:	a3 e5       	ldi	r26, 0x53	; 83
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e3 e5       	ldi	r30, 0x53	; 83
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8f 7b       	andi	r24, 0xBF	; 191
     b64:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);
     b66:	a3 e5       	ldi	r26, 0x53	; 83
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e3 e5       	ldi	r30, 0x53	; 83
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	87 7f       	andi	r24, 0xF7	; 247
     b72:	8c 93       	st	X, r24

		/*Set Timer Interrupt Enalbe*/
		SET_BIT(TIMSK, 0);
     b74:	a9 e5       	ldi	r26, 0x59	; 89
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e9 e5       	ldi	r30, 0x59	; 89
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	81 60       	ori	r24, 0x01	; 1
     b80:	8c 93       	st	X, r24
     b82:	38 c0       	rjmp	.+112    	; 0xbf4 <MTimer_voidTimerInit+0xae>

	}
	else if (A_u8TimerMode == 1){
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	b1 f4       	brne	.+44     	; 0xbb6 <MTimer_voidTimerInit+0x70>

		CLR_BIT(TCCR0,6);
     b8a:	a3 e5       	ldi	r26, 0x53	; 83
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e3 e5       	ldi	r30, 0x53	; 83
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	8f 7b       	andi	r24, 0xBF	; 191
     b96:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);
     b98:	a3 e5       	ldi	r26, 0x53	; 83
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e3 e5       	ldi	r30, 0x53	; 83
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	88 60       	ori	r24, 0x08	; 8
     ba4:	8c 93       	st	X, r24

		/*Set Compare Interrupt Enalbe*/
		 SET_BIT(TIMSK, 1);
     ba6:	a9 e5       	ldi	r26, 0x59	; 89
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e9 e5       	ldi	r30, 0x59	; 89
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	82 60       	ori	r24, 0x02	; 2
     bb2:	8c 93       	st	X, r24
     bb4:	1f c0       	rjmp	.+62     	; 0xbf4 <MTimer_voidTimerInit+0xae>
	}
	else if(A_u8TimerMode == 2){
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	e1 f4       	brne	.+56     	; 0xbf4 <MTimer_voidTimerInit+0xae>

		SET_BIT(TCCR0, 6);
     bbc:	a3 e5       	ldi	r26, 0x53	; 83
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e3 e5       	ldi	r30, 0x53	; 83
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	80 64       	ori	r24, 0x40	; 64
     bc8:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 3);
     bca:	a3 e5       	ldi	r26, 0x53	; 83
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e3 e5       	ldi	r30, 0x53	; 83
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	88 60       	ori	r24, 0x08	; 8
     bd6:	8c 93       	st	X, r24

		/*Set On Top Clear On compare
		 * */
		SET_BIT(TCCR0,5);
     bd8:	a3 e5       	ldi	r26, 0x53	; 83
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e3 e5       	ldi	r30, 0x53	; 83
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	80 62       	ori	r24, 0x20	; 32
     be4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,4);
     be6:	a3 e5       	ldi	r26, 0x53	; 83
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e3 e5       	ldi	r30, 0x53	; 83
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8f 7e       	andi	r24, 0xEF	; 239
     bf2:	8c 93       	st	X, r24
	}


}
     bf4:	0f 90       	pop	r0
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <MTimer_voidSetPreloadValue>:


void MTimer_voidSetPreloadValue(u8 A_u8Preload, u8 A_u8TimerMode){
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	00 d0       	rcall	.+0      	; 0xc02 <MTimer_voidSetPreloadValue+0x6>
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8TimerMode == 0){
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	88 23       	and	r24, r24
     c0e:	29 f4       	brne	.+10     	; 0xc1a <MTimer_voidSetPreloadValue+0x1e>
		TCNT0 = A_u8Preload;
     c10:	e2 e5       	ldi	r30, 0x52	; 82
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	80 83       	st	Z, r24
     c18:	04 c0       	rjmp	.+8      	; 0xc22 <MTimer_voidSetPreloadValue+0x26>
	}
	else{
		/*Set Compare Reg Value*/
		OCR0 = A_u8Preload;
     c1a:	ec e5       	ldi	r30, 0x5C	; 92
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	80 83       	st	Z, r24
	}
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <MTimer_voidStart>:



void MTimer_voidStart(){
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62

	/*Choose Prescaller 8*/
	CLR_BIT(TCCR0,0);
     c34:	a3 e5       	ldi	r26, 0x53	; 83
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e3 e5       	ldi	r30, 0x53	; 83
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	8e 7f       	andi	r24, 0xFE	; 254
     c40:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
     c42:	a3 e5       	ldi	r26, 0x53	; 83
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e3 e5       	ldi	r30, 0x53	; 83
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	82 60       	ori	r24, 0x02	; 2
     c4e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
     c50:	a3 e5       	ldi	r26, 0x53	; 83
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e3 e5       	ldi	r30, 0x53	; 83
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	8b 7f       	andi	r24, 0xFB	; 251
     c5c:	8c 93       	st	X, r24

}
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <MTimer_voidStop>:
void MTimer_voidStop(){
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,0);
     c6c:	a3 e5       	ldi	r26, 0x53	; 83
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e3 e5       	ldi	r30, 0x53	; 83
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	8e 7f       	andi	r24, 0xFE	; 254
     c78:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
     c7a:	a3 e5       	ldi	r26, 0x53	; 83
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e3 e5       	ldi	r30, 0x53	; 83
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	8d 7f       	andi	r24, 0xFD	; 253
     c86:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
     c88:	a3 e5       	ldi	r26, 0x53	; 83
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e3 e5       	ldi	r30, 0x53	; 83
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	8b 7f       	andi	r24, 0xFB	; 251
     c94:	8c 93       	st	X, r24

}
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <MTimer1_voidInit>:




void MTimer1_voidInit(){
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
	/*Select Ps 8* */
	CLR_BIT(TCCR1B,0);
     ca4:	ae e4       	ldi	r26, 0x4E	; 78
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ee e4       	ldi	r30, 0x4E	; 78
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8e 7f       	andi	r24, 0xFE	; 254
     cb0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
     cb2:	ae e4       	ldi	r26, 0x4E	; 78
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ee e4       	ldi	r30, 0x4E	; 78
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
     cc0:	ae e4       	ldi	r26, 0x4E	; 78
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	ee e4       	ldi	r30, 0x4E	; 78
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8b 7f       	andi	r24, 0xFB	; 251
     ccc:	8c 93       	st	X, r24
}
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <MTimer1_voidSetValue>:


void MTimer1_voidSetValue(u16 A_u16Value){
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <MTimer1_voidSetValue+0x6>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = A_u16Value;
     ce2:	ec e4       	ldi	r30, 0x4C	; 76
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	91 83       	std	Z+1, r25	; 0x01
     cec:	80 83       	st	Z, r24
}
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <MTimer1_u16ReadTimer1Value>:

u16 MTimer1_u16ReadTimer1Value(){
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
     d00:	ec e4       	ldi	r30, 0x4C	; 76
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <MGIE_voidEnable>:

#include "../DIO/DIO_Interface.h"
#include"GIE_Interface.h"

void MGIE_voidEnable()
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     d16:	af e5       	ldi	r26, 0x5F	; 95
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	ef e5       	ldi	r30, 0x5F	; 95
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 68       	ori	r24, 0x80	; 128
     d22:	8c 93       	st	X, r24


}
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <MGIE_voidDisable>:
void MGIE_voidDisable()
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG,7);
     d32:	af e5       	ldi	r26, 0x5F	; 95
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ef e5       	ldi	r30, 0x5F	; 95
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 77       	andi	r24, 0x7F	; 127
     d3e:	8c 93       	st	X, r24

}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <MEXTI_voidSenseControl>:
 * 3--------> Rising
 *
 * */


void MEXTI_voidSenseControl(u8 A_u8ExtiNumber, u8 A_u8State){
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	2a 97       	sbiw	r28, 0x0a	; 10
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02


	switch(A_u8ExtiNumber){
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	3a 87       	std	Y+10, r19	; 0x0a
     d66:	29 87       	std	Y+9, r18	; 0x09
     d68:	89 85       	ldd	r24, Y+9	; 0x09
     d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <MEXTI_voidSenseControl+0x2e>
     d72:	66 c0       	rjmp	.+204    	; 0xe40 <MEXTI_voidSenseControl+0xfa>
     d74:	29 85       	ldd	r18, Y+9	; 0x09
     d76:	3a 85       	ldd	r19, Y+10	; 0x0a
     d78:	22 30       	cpi	r18, 0x02	; 2
     d7a:	31 05       	cpc	r19, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <MEXTI_voidSenseControl+0x3a>
     d7e:	bb c0       	rjmp	.+374    	; 0xef6 <MEXTI_voidSenseControl+0x1b0>
     d80:	89 85       	ldd	r24, Y+9	; 0x09
     d82:	9a 85       	ldd	r25, Y+10	; 0x0a
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	09 f0       	breq	.+2      	; 0xd8a <MEXTI_voidSenseControl+0x44>
     d88:	d5 c0       	rjmp	.+426    	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
		/*EXTI INT0*/
		case 0:
			switch(A_u8State){
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	38 87       	std	Y+8, r19	; 0x08
     d92:	2f 83       	std	Y+7, r18	; 0x07
     d94:	8f 81       	ldd	r24, Y+7	; 0x07
     d96:	98 85       	ldd	r25, Y+8	; 0x08
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	91 05       	cpc	r25, r1
     d9c:	21 f1       	breq	.+72     	; 0xde6 <MEXTI_voidSenseControl+0xa0>
     d9e:	2f 81       	ldd	r18, Y+7	; 0x07
     da0:	38 85       	ldd	r19, Y+8	; 0x08
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	31 05       	cpc	r19, r1
     da6:	2c f4       	brge	.+10     	; 0xdb2 <MEXTI_voidSenseControl+0x6c>
     da8:	8f 81       	ldd	r24, Y+7	; 0x07
     daa:	98 85       	ldd	r25, Y+8	; 0x08
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	61 f0       	breq	.+24     	; 0xdc8 <MEXTI_voidSenseControl+0x82>
     db0:	c1 c0       	rjmp	.+386    	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
     db2:	2f 81       	ldd	r18, Y+7	; 0x07
     db4:	38 85       	ldd	r19, Y+8	; 0x08
     db6:	22 30       	cpi	r18, 0x02	; 2
     db8:	31 05       	cpc	r19, r1
     dba:	21 f1       	breq	.+72     	; 0xe04 <MEXTI_voidSenseControl+0xbe>
     dbc:	8f 81       	ldd	r24, Y+7	; 0x07
     dbe:	98 85       	ldd	r25, Y+8	; 0x08
     dc0:	83 30       	cpi	r24, 0x03	; 3
     dc2:	91 05       	cpc	r25, r1
     dc4:	71 f1       	breq	.+92     	; 0xe22 <MEXTI_voidSenseControl+0xdc>
     dc6:	b6 c0       	rjmp	.+364    	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
				case 0:
					CLR_BIT(MCUCR,0);
     dc8:	a5 e5       	ldi	r26, 0x55	; 85
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e5 e5       	ldi	r30, 0x55	; 85
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8e 7f       	andi	r24, 0xFE	; 254
     dd4:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
     dd6:	a5 e5       	ldi	r26, 0x55	; 85
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e5 e5       	ldi	r30, 0x55	; 85
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8d 7f       	andi	r24, 0xFD	; 253
     de2:	8c 93       	st	X, r24
     de4:	a7 c0       	rjmp	.+334    	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 0);
     de6:	a5 e5       	ldi	r26, 0x55	; 85
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e5 e5       	ldi	r30, 0x55	; 85
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 1);
     df4:	a5 e5       	ldi	r26, 0x55	; 85
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e5 e5       	ldi	r30, 0x55	; 85
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8d 7f       	andi	r24, 0xFD	; 253
     e00:	8c 93       	st	X, r24
     e02:	98 c0       	rjmp	.+304    	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 0);
     e04:	a5 e5       	ldi	r26, 0x55	; 85
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e5 e5       	ldi	r30, 0x55	; 85
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8e 7f       	andi	r24, 0xFE	; 254
     e10:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
     e12:	a5 e5       	ldi	r26, 0x55	; 85
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e5 e5       	ldi	r30, 0x55	; 85
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	82 60       	ori	r24, 0x02	; 2
     e1e:	8c 93       	st	X, r24
     e20:	89 c0       	rjmp	.+274    	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 0);
     e22:	a5 e5       	ldi	r26, 0x55	; 85
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e5 e5       	ldi	r30, 0x55	; 85
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	81 60       	ori	r24, 0x01	; 1
     e2e:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
     e30:	a5 e5       	ldi	r26, 0x55	; 85
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e5 e5       	ldi	r30, 0x55	; 85
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	82 60       	ori	r24, 0x02	; 2
     e3c:	8c 93       	st	X, r24
     e3e:	7a c0       	rjmp	.+244    	; 0xf34 <MEXTI_voidSenseControl+0x1ee>

			}
		break;
		/*EXTI INT1*/
		case 1:
			switch(A_u8State){
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	3e 83       	std	Y+6, r19	; 0x06
     e48:	2d 83       	std	Y+5, r18	; 0x05
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	9e 81       	ldd	r25, Y+6	; 0x06
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	91 05       	cpc	r25, r1
     e52:	21 f1       	breq	.+72     	; 0xe9c <MEXTI_voidSenseControl+0x156>
     e54:	2d 81       	ldd	r18, Y+5	; 0x05
     e56:	3e 81       	ldd	r19, Y+6	; 0x06
     e58:	22 30       	cpi	r18, 0x02	; 2
     e5a:	31 05       	cpc	r19, r1
     e5c:	2c f4       	brge	.+10     	; 0xe68 <MEXTI_voidSenseControl+0x122>
     e5e:	8d 81       	ldd	r24, Y+5	; 0x05
     e60:	9e 81       	ldd	r25, Y+6	; 0x06
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	61 f0       	breq	.+24     	; 0xe7e <MEXTI_voidSenseControl+0x138>
     e66:	66 c0       	rjmp	.+204    	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
     e68:	2d 81       	ldd	r18, Y+5	; 0x05
     e6a:	3e 81       	ldd	r19, Y+6	; 0x06
     e6c:	22 30       	cpi	r18, 0x02	; 2
     e6e:	31 05       	cpc	r19, r1
     e70:	21 f1       	breq	.+72     	; 0xeba <MEXTI_voidSenseControl+0x174>
     e72:	8d 81       	ldd	r24, Y+5	; 0x05
     e74:	9e 81       	ldd	r25, Y+6	; 0x06
     e76:	83 30       	cpi	r24, 0x03	; 3
     e78:	91 05       	cpc	r25, r1
     e7a:	71 f1       	breq	.+92     	; 0xed8 <MEXTI_voidSenseControl+0x192>
     e7c:	5b c0       	rjmp	.+182    	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
				case 0:
					CLR_BIT(MCUCR,2);
     e7e:	a5 e5       	ldi	r26, 0x55	; 85
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e5 e5       	ldi	r30, 0x55	; 85
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8b 7f       	andi	r24, 0xFB	; 251
     e8a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
     e8c:	a5 e5       	ldi	r26, 0x55	; 85
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e5       	ldi	r30, 0x55	; 85
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	87 7f       	andi	r24, 0xF7	; 247
     e98:	8c 93       	st	X, r24
     e9a:	4c c0       	rjmp	.+152    	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 2);
     e9c:	a5 e5       	ldi	r26, 0x55	; 85
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e5 e5       	ldi	r30, 0x55	; 85
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	84 60       	ori	r24, 0x04	; 4
     ea8:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 3);
     eaa:	a5 e5       	ldi	r26, 0x55	; 85
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e5       	ldi	r30, 0x55	; 85
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	87 7f       	andi	r24, 0xF7	; 247
     eb6:	8c 93       	st	X, r24
     eb8:	3d c0       	rjmp	.+122    	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 2);
     eba:	a5 e5       	ldi	r26, 0x55	; 85
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e5 e5       	ldi	r30, 0x55	; 85
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8b 7f       	andi	r24, 0xFB	; 251
     ec6:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
     ec8:	a5 e5       	ldi	r26, 0x55	; 85
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e5 e5       	ldi	r30, 0x55	; 85
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	88 60       	ori	r24, 0x08	; 8
     ed4:	8c 93       	st	X, r24
     ed6:	2e c0       	rjmp	.+92     	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 2);
     ed8:	a5 e5       	ldi	r26, 0x55	; 85
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e5 e5       	ldi	r30, 0x55	; 85
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	84 60       	ori	r24, 0x04	; 4
     ee4:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
     ee6:	a5 e5       	ldi	r26, 0x55	; 85
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e5 e5       	ldi	r30, 0x55	; 85
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	88 60       	ori	r24, 0x08	; 8
     ef2:	8c 93       	st	X, r24
     ef4:	1f c0       	rjmp	.+62     	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
			}
		break;

		/*EXTI INT2*/
		case 2:
			switch(A_u8State){
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	3c 83       	std	Y+4, r19	; 0x04
     efe:	2b 83       	std	Y+3, r18	; 0x03
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	9c 81       	ldd	r25, Y+4	; 0x04
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	91 05       	cpc	r25, r1
     f08:	31 f0       	breq	.+12     	; 0xf16 <MEXTI_voidSenseControl+0x1d0>
     f0a:	2b 81       	ldd	r18, Y+3	; 0x03
     f0c:	3c 81       	ldd	r19, Y+4	; 0x04
     f0e:	23 30       	cpi	r18, 0x03	; 3
     f10:	31 05       	cpc	r19, r1
     f12:	49 f0       	breq	.+18     	; 0xf26 <MEXTI_voidSenseControl+0x1e0>
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
			case 2: CLR_BIT(MCUCSR, 6);break;
     f16:	a4 e5       	ldi	r26, 0x54	; 84
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e4 e5       	ldi	r30, 0x54	; 84
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8f 7b       	andi	r24, 0xBF	; 191
     f22:	8c 93       	st	X, r24
     f24:	07 c0       	rjmp	.+14     	; 0xf34 <MEXTI_voidSenseControl+0x1ee>
			case 3: SET_BIT(MCUCSR, 6);break;
     f26:	a4 e5       	ldi	r26, 0x54	; 84
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e4 e5       	ldi	r30, 0x54	; 84
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 64       	ori	r24, 0x40	; 64
     f32:	8c 93       	st	X, r24
			}
		break;

	}
}
     f34:	2a 96       	adiw	r28, 0x0a	; 10
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <MEXTI_voidEnable>:


void MEXTI_voidEnable(u8 A_u8ExtiNumber){
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <MEXTI_voidEnable+0x6>
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiNumber){
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	3b 83       	std	Y+3, r19	; 0x03
     f5c:	2a 83       	std	Y+2, r18	; 0x02
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	91 05       	cpc	r25, r1
     f66:	89 f0       	breq	.+34     	; 0xf8a <MEXTI_voidEnable+0x44>
     f68:	2a 81       	ldd	r18, Y+2	; 0x02
     f6a:	3b 81       	ldd	r19, Y+3	; 0x03
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	31 05       	cpc	r19, r1
     f70:	a1 f0       	breq	.+40     	; 0xf9a <MEXTI_voidEnable+0x54>
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	9b 81       	ldd	r25, Y+3	; 0x03
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	b9 f4       	brne	.+46     	; 0xfa8 <MEXTI_voidEnable+0x62>
		case 0: SET_BIT( GICR, 6); break;
     f7a:	ab e5       	ldi	r26, 0x5B	; 91
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	eb e5       	ldi	r30, 0x5B	; 91
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	80 64       	ori	r24, 0x40	; 64
     f86:	8c 93       	st	X, r24
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <MEXTI_voidEnable+0x62>
		case 1: SET_BIT( GICR, 7); break;
     f8a:	ab e5       	ldi	r26, 0x5B	; 91
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	eb e5       	ldi	r30, 0x5B	; 91
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	80 68       	ori	r24, 0x80	; 128
     f96:	8c 93       	st	X, r24
     f98:	07 c0       	rjmp	.+14     	; 0xfa8 <MEXTI_voidEnable+0x62>
		case 2: SET_BIT(GICR, 5); break;
     f9a:	ab e5       	ldi	r26, 0x5B	; 91
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	eb e5       	ldi	r30, 0x5B	; 91
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	80 62       	ori	r24, 0x20	; 32
     fa6:	8c 93       	st	X, r24
	}

}
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <MEXTI_voidDisable>:

void MEXTI_voidDisable(u8 A_u8ExtiNumber){
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <MEXTI_voidDisable+0x6>
     fba:	0f 92       	push	r0
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiNumber){
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	3b 83       	std	Y+3, r19	; 0x03
     fca:	2a 83       	std	Y+2, r18	; 0x02
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	9b 81       	ldd	r25, Y+3	; 0x03
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	91 05       	cpc	r25, r1
     fd4:	89 f0       	breq	.+34     	; 0xff8 <MEXTI_voidDisable+0x44>
     fd6:	2a 81       	ldd	r18, Y+2	; 0x02
     fd8:	3b 81       	ldd	r19, Y+3	; 0x03
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	a1 f0       	breq	.+40     	; 0x1008 <MEXTI_voidDisable+0x54>
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	9b 81       	ldd	r25, Y+3	; 0x03
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	b9 f4       	brne	.+46     	; 0x1016 <MEXTI_voidDisable+0x62>
		case 0: CLR_BIT( GICR, 6); break;
     fe8:	ab e5       	ldi	r26, 0x5B	; 91
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	eb e5       	ldi	r30, 0x5B	; 91
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	8f 7b       	andi	r24, 0xBF	; 191
     ff4:	8c 93       	st	X, r24
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <MEXTI_voidDisable+0x62>
		case 1: CLR_BIT( GICR, 7); break;
     ff8:	ab e5       	ldi	r26, 0x5B	; 91
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	eb e5       	ldi	r30, 0x5B	; 91
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8f 77       	andi	r24, 0x7F	; 127
    1004:	8c 93       	st	X, r24
    1006:	07 c0       	rjmp	.+14     	; 0x1016 <MEXTI_voidDisable+0x62>
		case 2: CLR_BIT(GICR, 5); break;
    1008:	ab e5       	ldi	r26, 0x5B	; 91
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	eb e5       	ldi	r30, 0x5B	; 91
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8f 7d       	andi	r24, 0xDF	; 223
    1014:	8c 93       	st	X, r24
	}
}
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <MDIO_voidSetPinDirection>:
#include<avr/io.h>
#include"DIO_Interface.h"



void  MDIO_voidSetPinDirection(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Dir){
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	2d 97       	sbiw	r28, 0x0d	; 13
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	6a 83       	std	Y+2, r22	; 0x02
    103a:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortNumber){
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3d 87       	std	Y+13, r19	; 0x0d
    1044:	2c 87       	std	Y+12, r18	; 0x0c
    1046:	8c 85       	ldd	r24, Y+12	; 0x0c
    1048:	9d 85       	ldd	r25, Y+13	; 0x0d
    104a:	82 34       	cpi	r24, 0x42	; 66
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <MDIO_voidSetPinDirection+0x30>
    1050:	50 c0       	rjmp	.+160    	; 0x10f2 <MDIO_voidSetPinDirection+0xd0>
    1052:	2c 85       	ldd	r18, Y+12	; 0x0c
    1054:	3d 85       	ldd	r19, Y+13	; 0x0d
    1056:	23 34       	cpi	r18, 0x43	; 67
    1058:	31 05       	cpc	r19, r1
    105a:	34 f4       	brge	.+12     	; 0x1068 <MDIO_voidSetPinDirection+0x46>
    105c:	8c 85       	ldd	r24, Y+12	; 0x0c
    105e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1060:	81 34       	cpi	r24, 0x41	; 65
    1062:	91 05       	cpc	r25, r1
    1064:	71 f0       	breq	.+28     	; 0x1082 <MDIO_voidSetPinDirection+0x60>
    1066:	ec c0       	rjmp	.+472    	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
    1068:	2c 85       	ldd	r18, Y+12	; 0x0c
    106a:	3d 85       	ldd	r19, Y+13	; 0x0d
    106c:	23 34       	cpi	r18, 0x43	; 67
    106e:	31 05       	cpc	r19, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <MDIO_voidSetPinDirection+0x52>
    1072:	77 c0       	rjmp	.+238    	; 0x1162 <MDIO_voidSetPinDirection+0x140>
    1074:	8c 85       	ldd	r24, Y+12	; 0x0c
    1076:	9d 85       	ldd	r25, Y+13	; 0x0d
    1078:	84 34       	cpi	r24, 0x44	; 68
    107a:	91 05       	cpc	r25, r1
    107c:	09 f4       	brne	.+2      	; 0x1080 <MDIO_voidSetPinDirection+0x5e>
    107e:	a9 c0       	rjmp	.+338    	; 0x11d2 <MDIO_voidSetPinDirection+0x1b0>
    1080:	df c0       	rjmp	.+446    	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
		case 'A':
			switch(A_u8Dir){
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	3b 87       	std	Y+11, r19	; 0x0b
    108a:	2a 87       	std	Y+10, r18	; 0x0a
    108c:	8a 85       	ldd	r24, Y+10	; 0x0a
    108e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	31 f0       	breq	.+12     	; 0x10a0 <MDIO_voidSetPinDirection+0x7e>
    1094:	2a 85       	ldd	r18, Y+10	; 0x0a
    1096:	3b 85       	ldd	r19, Y+11	; 0x0b
    1098:	21 30       	cpi	r18, 0x01	; 1
    109a:	31 05       	cpc	r19, r1
    109c:	b1 f0       	breq	.+44     	; 0x10ca <MDIO_voidSetPinDirection+0xa8>
    109e:	d0 c0       	rjmp	.+416    	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRA , A_u8PinNumber);break;
    10a0:	aa e3       	ldi	r26, 0x3A	; 58
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ea e3       	ldi	r30, 0x3A	; 58
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <MDIO_voidSetPinDirection+0x9c>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <MDIO_voidSetPinDirection+0x98>
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	bb c0       	rjmp	.+374    	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRA, A_u8PinNumber); break;
    10ca:	aa e3       	ldi	r26, 0x3A	; 58
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ea e3       	ldi	r30, 0x3A	; 58
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <MDIO_voidSetPinDirection+0xc6>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <MDIO_voidSetPinDirection+0xc2>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	a7 c0       	rjmp	.+334    	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'B':
			switch(A_u8Dir){
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	39 87       	std	Y+9, r19	; 0x09
    10fa:	28 87       	std	Y+8, r18	; 0x08
    10fc:	88 85       	ldd	r24, Y+8	; 0x08
    10fe:	99 85       	ldd	r25, Y+9	; 0x09
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	31 f0       	breq	.+12     	; 0x1110 <MDIO_voidSetPinDirection+0xee>
    1104:	28 85       	ldd	r18, Y+8	; 0x08
    1106:	39 85       	ldd	r19, Y+9	; 0x09
    1108:	21 30       	cpi	r18, 0x01	; 1
    110a:	31 05       	cpc	r19, r1
    110c:	b1 f0       	breq	.+44     	; 0x113a <MDIO_voidSetPinDirection+0x118>
    110e:	98 c0       	rjmp	.+304    	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRB , A_u8PinNumber);break;
    1110:	a7 e3       	ldi	r26, 0x37	; 55
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e7 e3       	ldi	r30, 0x37	; 55
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <MDIO_voidSetPinDirection+0x10c>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <MDIO_voidSetPinDirection+0x108>
    1132:	80 95       	com	r24
    1134:	84 23       	and	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	83 c0       	rjmp	.+262    	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRB, A_u8PinNumber); break;
    113a:	a7 e3       	ldi	r26, 0x37	; 55
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e7 e3       	ldi	r30, 0x37	; 55
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <MDIO_voidSetPinDirection+0x136>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <MDIO_voidSetPinDirection+0x132>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	6f c0       	rjmp	.+222    	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'C':
			switch(A_u8Dir){
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3f 83       	std	Y+7, r19	; 0x07
    116a:	2e 83       	std	Y+6, r18	; 0x06
    116c:	8e 81       	ldd	r24, Y+6	; 0x06
    116e:	9f 81       	ldd	r25, Y+7	; 0x07
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	31 f0       	breq	.+12     	; 0x1180 <MDIO_voidSetPinDirection+0x15e>
    1174:	2e 81       	ldd	r18, Y+6	; 0x06
    1176:	3f 81       	ldd	r19, Y+7	; 0x07
    1178:	21 30       	cpi	r18, 0x01	; 1
    117a:	31 05       	cpc	r19, r1
    117c:	b1 f0       	breq	.+44     	; 0x11aa <MDIO_voidSetPinDirection+0x188>
    117e:	60 c0       	rjmp	.+192    	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRC , A_u8PinNumber);break;
    1180:	a4 e3       	ldi	r26, 0x34	; 52
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e4 e3       	ldi	r30, 0x34	; 52
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <MDIO_voidSetPinDirection+0x17c>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <MDIO_voidSetPinDirection+0x178>
    11a2:	80 95       	com	r24
    11a4:	84 23       	and	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	4b c0       	rjmp	.+150    	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRC, A_u8PinNumber); break;
    11aa:	a4 e3       	ldi	r26, 0x34	; 52
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e4 e3       	ldi	r30, 0x34	; 52
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <MDIO_voidSetPinDirection+0x1a6>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <MDIO_voidSetPinDirection+0x1a2>
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	37 c0       	rjmp	.+110    	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'D':
			switch(A_u8Dir){
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3d 83       	std	Y+5, r19	; 0x05
    11da:	2c 83       	std	Y+4, r18	; 0x04
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	9d 81       	ldd	r25, Y+5	; 0x05
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	31 f0       	breq	.+12     	; 0x11f0 <MDIO_voidSetPinDirection+0x1ce>
    11e4:	2c 81       	ldd	r18, Y+4	; 0x04
    11e6:	3d 81       	ldd	r19, Y+5	; 0x05
    11e8:	21 30       	cpi	r18, 0x01	; 1
    11ea:	31 05       	cpc	r19, r1
    11ec:	b1 f0       	breq	.+44     	; 0x121a <MDIO_voidSetPinDirection+0x1f8>
    11ee:	28 c0       	rjmp	.+80     	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRD , A_u8PinNumber);break;
    11f0:	a1 e3       	ldi	r26, 0x31	; 49
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e1 e3       	ldi	r30, 0x31	; 49
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <MDIO_voidSetPinDirection+0x1ec>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <MDIO_voidSetPinDirection+0x1e8>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	13 c0       	rjmp	.+38     	; 0x1240 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRD, A_u8PinNumber); break;
    121a:	a1 e3       	ldi	r26, 0x31	; 49
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e1 e3       	ldi	r30, 0x31	; 49
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <MDIO_voidSetPinDirection+0x216>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <MDIO_voidSetPinDirection+0x212>
    123c:	84 2b       	or	r24, r20
    123e:	8c 93       	st	X, r24
			}
		break;
	}

}
    1240:	2d 96       	adiw	r28, 0x0d	; 13
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8PinValue){
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	2d 97       	sbiw	r28, 0x0d	; 13
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	6a 83       	std	Y+2, r22	; 0x02
    126a:	4b 83       	std	Y+3, r20	; 0x03

	switch(A_u8PortNumber){
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	3d 87       	std	Y+13, r19	; 0x0d
    1274:	2c 87       	std	Y+12, r18	; 0x0c
    1276:	8c 85       	ldd	r24, Y+12	; 0x0c
    1278:	9d 85       	ldd	r25, Y+13	; 0x0d
    127a:	82 34       	cpi	r24, 0x42	; 66
    127c:	91 05       	cpc	r25, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <MDIO_voidSetPinValue+0x30>
    1280:	50 c0       	rjmp	.+160    	; 0x1322 <MDIO_voidSetPinValue+0xd0>
    1282:	2c 85       	ldd	r18, Y+12	; 0x0c
    1284:	3d 85       	ldd	r19, Y+13	; 0x0d
    1286:	23 34       	cpi	r18, 0x43	; 67
    1288:	31 05       	cpc	r19, r1
    128a:	34 f4       	brge	.+12     	; 0x1298 <MDIO_voidSetPinValue+0x46>
    128c:	8c 85       	ldd	r24, Y+12	; 0x0c
    128e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1290:	81 34       	cpi	r24, 0x41	; 65
    1292:	91 05       	cpc	r25, r1
    1294:	71 f0       	breq	.+28     	; 0x12b2 <MDIO_voidSetPinValue+0x60>
    1296:	ec c0       	rjmp	.+472    	; 0x1470 <MDIO_voidSetPinValue+0x21e>
    1298:	2c 85       	ldd	r18, Y+12	; 0x0c
    129a:	3d 85       	ldd	r19, Y+13	; 0x0d
    129c:	23 34       	cpi	r18, 0x43	; 67
    129e:	31 05       	cpc	r19, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <MDIO_voidSetPinValue+0x52>
    12a2:	77 c0       	rjmp	.+238    	; 0x1392 <MDIO_voidSetPinValue+0x140>
    12a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    12a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    12a8:	84 34       	cpi	r24, 0x44	; 68
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <MDIO_voidSetPinValue+0x5e>
    12ae:	a9 c0       	rjmp	.+338    	; 0x1402 <MDIO_voidSetPinValue+0x1b0>
    12b0:	df c0       	rjmp	.+446    	; 0x1470 <MDIO_voidSetPinValue+0x21e>
		case 'A':
			switch(A_u8PinValue){
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3b 87       	std	Y+11, r19	; 0x0b
    12ba:	2a 87       	std	Y+10, r18	; 0x0a
    12bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    12be:	9b 85       	ldd	r25, Y+11	; 0x0b
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	31 f0       	breq	.+12     	; 0x12d0 <MDIO_voidSetPinValue+0x7e>
    12c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    12c6:	3b 85       	ldd	r19, Y+11	; 0x0b
    12c8:	21 30       	cpi	r18, 0x01	; 1
    12ca:	31 05       	cpc	r19, r1
    12cc:	b1 f0       	breq	.+44     	; 0x12fa <MDIO_voidSetPinValue+0xa8>
    12ce:	d0 c0       	rjmp	.+416    	; 0x1470 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTA , A_u8PinNumber); break;
    12d0:	ab e3       	ldi	r26, 0x3B	; 59
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	eb e3       	ldi	r30, 0x3B	; 59
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <MDIO_voidSetPinValue+0x9c>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <MDIO_voidSetPinValue+0x98>
    12f2:	80 95       	com	r24
    12f4:	84 23       	and	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	bb c0       	rjmp	.+374    	; 0x1470 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTA, A_u8PinNumber); break;
    12fa:	ab e3       	ldi	r26, 0x3B	; 59
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	eb e3       	ldi	r30, 0x3B	; 59
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <MDIO_voidSetPinValue+0xc6>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <MDIO_voidSetPinValue+0xc2>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	a7 c0       	rjmp	.+334    	; 0x1470 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'B':
			switch(A_u8PinValue){
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	39 87       	std	Y+9, r19	; 0x09
    132a:	28 87       	std	Y+8, r18	; 0x08
    132c:	88 85       	ldd	r24, Y+8	; 0x08
    132e:	99 85       	ldd	r25, Y+9	; 0x09
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	31 f0       	breq	.+12     	; 0x1340 <MDIO_voidSetPinValue+0xee>
    1334:	28 85       	ldd	r18, Y+8	; 0x08
    1336:	39 85       	ldd	r19, Y+9	; 0x09
    1338:	21 30       	cpi	r18, 0x01	; 1
    133a:	31 05       	cpc	r19, r1
    133c:	b1 f0       	breq	.+44     	; 0x136a <MDIO_voidSetPinValue+0x118>
    133e:	98 c0       	rjmp	.+304    	; 0x1470 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTB , A_u8PinNumber); break;
    1340:	a8 e3       	ldi	r26, 0x38	; 56
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e8 e3       	ldi	r30, 0x38	; 56
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <MDIO_voidSetPinValue+0x10c>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <MDIO_voidSetPinValue+0x108>
    1362:	80 95       	com	r24
    1364:	84 23       	and	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	83 c0       	rjmp	.+262    	; 0x1470 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTB, A_u8PinNumber); break;
    136a:	a8 e3       	ldi	r26, 0x38	; 56
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e8 e3       	ldi	r30, 0x38	; 56
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <MDIO_voidSetPinValue+0x136>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <MDIO_voidSetPinValue+0x132>
    138c:	84 2b       	or	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	6f c0       	rjmp	.+222    	; 0x1470 <MDIO_voidSetPinValue+0x21e>
			}

		break;

		case 'C':
			switch(A_u8PinValue){
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3f 83       	std	Y+7, r19	; 0x07
    139a:	2e 83       	std	Y+6, r18	; 0x06
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	9f 81       	ldd	r25, Y+7	; 0x07
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	31 f0       	breq	.+12     	; 0x13b0 <MDIO_voidSetPinValue+0x15e>
    13a4:	2e 81       	ldd	r18, Y+6	; 0x06
    13a6:	3f 81       	ldd	r19, Y+7	; 0x07
    13a8:	21 30       	cpi	r18, 0x01	; 1
    13aa:	31 05       	cpc	r19, r1
    13ac:	b1 f0       	breq	.+44     	; 0x13da <MDIO_voidSetPinValue+0x188>
    13ae:	60 c0       	rjmp	.+192    	; 0x1470 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTC , A_u8PinNumber); break;
    13b0:	a5 e3       	ldi	r26, 0x35	; 53
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e5 e3       	ldi	r30, 0x35	; 53
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <MDIO_voidSetPinValue+0x17c>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <MDIO_voidSetPinValue+0x178>
    13d2:	80 95       	com	r24
    13d4:	84 23       	and	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	4b c0       	rjmp	.+150    	; 0x1470 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTC, A_u8PinNumber); break;
    13da:	a5 e3       	ldi	r26, 0x35	; 53
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e5 e3       	ldi	r30, 0x35	; 53
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <MDIO_voidSetPinValue+0x1a6>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <MDIO_voidSetPinValue+0x1a2>
    13fc:	84 2b       	or	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	37 c0       	rjmp	.+110    	; 0x1470 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'D':
			switch(A_u8PinValue){
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	3d 83       	std	Y+5, r19	; 0x05
    140a:	2c 83       	std	Y+4, r18	; 0x04
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	31 f0       	breq	.+12     	; 0x1420 <MDIO_voidSetPinValue+0x1ce>
    1414:	2c 81       	ldd	r18, Y+4	; 0x04
    1416:	3d 81       	ldd	r19, Y+5	; 0x05
    1418:	21 30       	cpi	r18, 0x01	; 1
    141a:	31 05       	cpc	r19, r1
    141c:	b1 f0       	breq	.+44     	; 0x144a <MDIO_voidSetPinValue+0x1f8>
    141e:	28 c0       	rjmp	.+80     	; 0x1470 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTD , A_u8PinNumber); break;
    1420:	a2 e3       	ldi	r26, 0x32	; 50
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e2 e3       	ldi	r30, 0x32	; 50
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <MDIO_voidSetPinValue+0x1ec>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <MDIO_voidSetPinValue+0x1e8>
    1442:	80 95       	com	r24
    1444:	84 23       	and	r24, r20
    1446:	8c 93       	st	X, r24
    1448:	13 c0       	rjmp	.+38     	; 0x1470 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTD, A_u8PinNumber); break;
    144a:	a2 e3       	ldi	r26, 0x32	; 50
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e2 e3       	ldi	r30, 0x32	; 50
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <MDIO_voidSetPinValue+0x216>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <MDIO_voidSetPinValue+0x212>
    146c:	84 2b       	or	r24, r20
    146e:	8c 93       	st	X, r24
			}
		break;
	}
}
    1470:	2d 96       	adiw	r28, 0x0d	; 13
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <MDIO_voidSetPortDirection>:



void MDIO_voidSetPortDirection(u8 A_u8PortNumber, u8 A_u8PortDir){
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <MDIO_voidSetPortDirection+0x6>
    1488:	00 d0       	rcall	.+0      	; 0x148a <MDIO_voidSetPortDirection+0x8>
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	3c 83       	std	Y+4, r19	; 0x04
    149a:	2b 83       	std	Y+3, r18	; 0x03
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	82 34       	cpi	r24, 0x42	; 66
    14a2:	91 05       	cpc	r25, r1
    14a4:	d9 f0       	breq	.+54     	; 0x14dc <MDIO_voidSetPortDirection+0x5a>
    14a6:	2b 81       	ldd	r18, Y+3	; 0x03
    14a8:	3c 81       	ldd	r19, Y+4	; 0x04
    14aa:	23 34       	cpi	r18, 0x43	; 67
    14ac:	31 05       	cpc	r19, r1
    14ae:	34 f4       	brge	.+12     	; 0x14bc <MDIO_voidSetPortDirection+0x3a>
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	81 34       	cpi	r24, 0x41	; 65
    14b6:	91 05       	cpc	r25, r1
    14b8:	61 f0       	breq	.+24     	; 0x14d2 <MDIO_voidSetPortDirection+0x50>
    14ba:	1e c0       	rjmp	.+60     	; 0x14f8 <MDIO_voidSetPortDirection+0x76>
    14bc:	2b 81       	ldd	r18, Y+3	; 0x03
    14be:	3c 81       	ldd	r19, Y+4	; 0x04
    14c0:	23 34       	cpi	r18, 0x43	; 67
    14c2:	31 05       	cpc	r19, r1
    14c4:	81 f0       	breq	.+32     	; 0x14e6 <MDIO_voidSetPortDirection+0x64>
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	84 34       	cpi	r24, 0x44	; 68
    14cc:	91 05       	cpc	r25, r1
    14ce:	81 f0       	breq	.+32     	; 0x14f0 <MDIO_voidSetPortDirection+0x6e>
    14d0:	13 c0       	rjmp	.+38     	; 0x14f8 <MDIO_voidSetPortDirection+0x76>
		case 'A': DDRA = A_u8PortDir; break;
    14d2:	ea e3       	ldi	r30, 0x3A	; 58
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	80 83       	st	Z, r24
    14da:	0e c0       	rjmp	.+28     	; 0x14f8 <MDIO_voidSetPortDirection+0x76>
		case 'B': DDRB = A_u8PortDir; break;
    14dc:	e7 e3       	ldi	r30, 0x37	; 55
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	80 83       	st	Z, r24
    14e4:	09 c0       	rjmp	.+18     	; 0x14f8 <MDIO_voidSetPortDirection+0x76>
		case 'C': DDRC = A_u8PortDir; break;
    14e6:	e4 e3       	ldi	r30, 0x34	; 52
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	80 83       	st	Z, r24
    14ee:	04 c0       	rjmp	.+8      	; 0x14f8 <MDIO_voidSetPortDirection+0x76>
		case 'D': DDRD = A_u8PortDir; break;
    14f0:	e1 e3       	ldi	r30, 0x31	; 49
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	80 83       	st	Z, r24
	}
}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortNumber, u8 A_u8PortValue){
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <MDIO_voidSetPortValue+0x6>
    150c:	00 d0       	rcall	.+0      	; 0x150e <MDIO_voidSetPortValue+0x8>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	3c 83       	std	Y+4, r19	; 0x04
    151e:	2b 83       	std	Y+3, r18	; 0x03
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	82 34       	cpi	r24, 0x42	; 66
    1526:	91 05       	cpc	r25, r1
    1528:	d9 f0       	breq	.+54     	; 0x1560 <MDIO_voidSetPortValue+0x5a>
    152a:	2b 81       	ldd	r18, Y+3	; 0x03
    152c:	3c 81       	ldd	r19, Y+4	; 0x04
    152e:	23 34       	cpi	r18, 0x43	; 67
    1530:	31 05       	cpc	r19, r1
    1532:	34 f4       	brge	.+12     	; 0x1540 <MDIO_voidSetPortValue+0x3a>
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	81 34       	cpi	r24, 0x41	; 65
    153a:	91 05       	cpc	r25, r1
    153c:	61 f0       	breq	.+24     	; 0x1556 <MDIO_voidSetPortValue+0x50>
    153e:	1e c0       	rjmp	.+60     	; 0x157c <MDIO_voidSetPortValue+0x76>
    1540:	2b 81       	ldd	r18, Y+3	; 0x03
    1542:	3c 81       	ldd	r19, Y+4	; 0x04
    1544:	23 34       	cpi	r18, 0x43	; 67
    1546:	31 05       	cpc	r19, r1
    1548:	81 f0       	breq	.+32     	; 0x156a <MDIO_voidSetPortValue+0x64>
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	84 34       	cpi	r24, 0x44	; 68
    1550:	91 05       	cpc	r25, r1
    1552:	81 f0       	breq	.+32     	; 0x1574 <MDIO_voidSetPortValue+0x6e>
    1554:	13 c0       	rjmp	.+38     	; 0x157c <MDIO_voidSetPortValue+0x76>
		case 'A':PORTA = A_u8PortValue; break;
    1556:	eb e3       	ldi	r30, 0x3B	; 59
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	80 83       	st	Z, r24
    155e:	0e c0       	rjmp	.+28     	; 0x157c <MDIO_voidSetPortValue+0x76>
		case 'B':PORTB = A_u8PortValue; break;
    1560:	e8 e3       	ldi	r30, 0x38	; 56
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	80 83       	st	Z, r24
    1568:	09 c0       	rjmp	.+18     	; 0x157c <MDIO_voidSetPortValue+0x76>
		case 'C':PORTC = A_u8PortValue; break;
    156a:	e5 e3       	ldi	r30, 0x35	; 53
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	80 83       	st	Z, r24
    1572:	04 c0       	rjmp	.+8      	; 0x157c <MDIO_voidSetPortValue+0x76>
		case 'D':PORTD = A_u8PortValue; break;
    1574:	e2 e3       	ldi	r30, 0x32	; 50
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	80 83       	st	Z, r24
	}
}
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <MDIO_u8GetPinValue>:





u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber){
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <MDIO_u8GetPinValue+0x6>
    1590:	00 d0       	rcall	.+0      	; 0x1592 <MDIO_u8GetPinValue+0x8>
    1592:	0f 92       	push	r0
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	8a 83       	std	Y+2, r24	; 0x02
    159a:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Result;

	if(A_u8PinNumber < 8){
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	88 30       	cpi	r24, 0x08	; 8
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <MDIO_u8GetPinValue+0x1a>
    15a2:	68 c0       	rjmp	.+208    	; 0x1674 <MDIO_u8GetPinValue+0xea>
		switch(A_u8PortNumber){
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	3d 83       	std	Y+5, r19	; 0x05
    15ac:	2c 83       	std	Y+4, r18	; 0x04
    15ae:	4c 81       	ldd	r20, Y+4	; 0x04
    15b0:	5d 81       	ldd	r21, Y+5	; 0x05
    15b2:	42 34       	cpi	r20, 0x42	; 66
    15b4:	51 05       	cpc	r21, r1
    15b6:	41 f1       	breq	.+80     	; 0x1608 <MDIO_u8GetPinValue+0x7e>
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	9d 81       	ldd	r25, Y+5	; 0x05
    15bc:	83 34       	cpi	r24, 0x43	; 67
    15be:	91 05       	cpc	r25, r1
    15c0:	34 f4       	brge	.+12     	; 0x15ce <MDIO_u8GetPinValue+0x44>
    15c2:	2c 81       	ldd	r18, Y+4	; 0x04
    15c4:	3d 81       	ldd	r19, Y+5	; 0x05
    15c6:	21 34       	cpi	r18, 0x41	; 65
    15c8:	31 05       	cpc	r19, r1
    15ca:	61 f0       	breq	.+24     	; 0x15e4 <MDIO_u8GetPinValue+0x5a>
    15cc:	55 c0       	rjmp	.+170    	; 0x1678 <MDIO_u8GetPinValue+0xee>
    15ce:	4c 81       	ldd	r20, Y+4	; 0x04
    15d0:	5d 81       	ldd	r21, Y+5	; 0x05
    15d2:	43 34       	cpi	r20, 0x43	; 67
    15d4:	51 05       	cpc	r21, r1
    15d6:	51 f1       	breq	.+84     	; 0x162c <MDIO_u8GetPinValue+0xa2>
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	9d 81       	ldd	r25, Y+5	; 0x05
    15dc:	84 34       	cpi	r24, 0x44	; 68
    15de:	91 05       	cpc	r25, r1
    15e0:	b9 f1       	breq	.+110    	; 0x1650 <MDIO_u8GetPinValue+0xc6>
    15e2:	4a c0       	rjmp	.+148    	; 0x1678 <MDIO_u8GetPinValue+0xee>
			case 'A':Local_u8Result =  GET_BIT(PINA, A_u8PinNumber);break;
    15e4:	e9 e3       	ldi	r30, 0x39	; 57
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a9 01       	movw	r20, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <MDIO_u8GetPinValue+0x72>
    15f8:	55 95       	asr	r21
    15fa:	47 95       	ror	r20
    15fc:	8a 95       	dec	r24
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <MDIO_u8GetPinValue+0x6e>
    1600:	ca 01       	movw	r24, r20
    1602:	81 70       	andi	r24, 0x01	; 1
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	38 c0       	rjmp	.+112    	; 0x1678 <MDIO_u8GetPinValue+0xee>
			case 'B':Local_u8Result =  GET_BIT(PINB, A_u8PinNumber); break;
    1608:	e6 e3       	ldi	r30, 0x36	; 54
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	a9 01       	movw	r20, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <MDIO_u8GetPinValue+0x96>
    161c:	55 95       	asr	r21
    161e:	47 95       	ror	r20
    1620:	8a 95       	dec	r24
    1622:	e2 f7       	brpl	.-8      	; 0x161c <MDIO_u8GetPinValue+0x92>
    1624:	ca 01       	movw	r24, r20
    1626:	81 70       	andi	r24, 0x01	; 1
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	26 c0       	rjmp	.+76     	; 0x1678 <MDIO_u8GetPinValue+0xee>
			case 'C':Local_u8Result =  GET_BIT(PINC, A_u8PinNumber); break;
    162c:	e3 e3       	ldi	r30, 0x33	; 51
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a9 01       	movw	r20, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <MDIO_u8GetPinValue+0xba>
    1640:	55 95       	asr	r21
    1642:	47 95       	ror	r20
    1644:	8a 95       	dec	r24
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <MDIO_u8GetPinValue+0xb6>
    1648:	ca 01       	movw	r24, r20
    164a:	81 70       	andi	r24, 0x01	; 1
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <MDIO_u8GetPinValue+0xee>
			case 'D':Local_u8Result =  GET_BIT(PIND, A_u8PinNumber); break;
    1650:	e0 e3       	ldi	r30, 0x30	; 48
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a9 01       	movw	r20, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <MDIO_u8GetPinValue+0xde>
    1664:	55 95       	asr	r21
    1666:	47 95       	ror	r20
    1668:	8a 95       	dec	r24
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <MDIO_u8GetPinValue+0xda>
    166c:	ca 01       	movw	r24, r20
    166e:	81 70       	andi	r24, 0x01	; 1
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <MDIO_u8GetPinValue+0xee>
		}
	}
	else {
		Local_u8Result = 255;
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
    1678:	89 81       	ldd	r24, Y+1	; 0x01
}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <MADC_voidInit>:
 * Internal     2
 *
 * */


void MADC_voidInit(u8 A_u8Vref){
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <MADC_voidInit+0x6>
    1690:	0f 92       	push	r0
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	89 83       	std	Y+1, r24	; 0x01

	switch(A_u8Vref){
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3b 83       	std	Y+3, r19	; 0x03
    16a0:	2a 83       	std	Y+2, r18	; 0x02
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	9b 81       	ldd	r25, Y+3	; 0x03
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	c1 f0       	breq	.+48     	; 0x16dc <MADC_voidInit+0x52>
    16ac:	2a 81       	ldd	r18, Y+2	; 0x02
    16ae:	3b 81       	ldd	r19, Y+3	; 0x03
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	11 f1       	breq	.+68     	; 0x16fa <MADC_voidInit+0x70>
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	61 f5       	brne	.+88     	; 0x1716 <MADC_voidInit+0x8c>
		case 0:
			CLR_BIT(ADMUX, 6);
    16be:	a7 e2       	ldi	r26, 0x27	; 39
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e7 e2       	ldi	r30, 0x27	; 39
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8f 7b       	andi	r24, 0xBF	; 191
    16ca:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, 7);
    16cc:	a7 e2       	ldi	r26, 0x27	; 39
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e7 e2       	ldi	r30, 0x27	; 39
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	8f 77       	andi	r24, 0x7F	; 127
    16d8:	8c 93       	st	X, r24
    16da:	1d c0       	rjmp	.+58     	; 0x1716 <MADC_voidInit+0x8c>
		break;

		case 1:
			SET_BIT(ADMUX, 6);
    16dc:	a7 e2       	ldi	r26, 0x27	; 39
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e7 e2       	ldi	r30, 0x27	; 39
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	80 64       	ori	r24, 0x40	; 64
    16e8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, 7);
    16ea:	a7 e2       	ldi	r26, 0x27	; 39
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e7 e2       	ldi	r30, 0x27	; 39
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8f 77       	andi	r24, 0x7F	; 127
    16f6:	8c 93       	st	X, r24
    16f8:	0e c0       	rjmp	.+28     	; 0x1716 <MADC_voidInit+0x8c>
		break;

		case 2:
			SET_BIT(ADMUX, 6);
    16fa:	a7 e2       	ldi	r26, 0x27	; 39
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e7 e2       	ldi	r30, 0x27	; 39
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 64       	ori	r24, 0x40	; 64
    1706:	8c 93       	st	X, r24
			SET_BIT(ADMUX, 7);
    1708:	a7 e2       	ldi	r26, 0x27	; 39
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e7 e2       	ldi	r30, 0x27	; 39
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 68       	ori	r24, 0x80	; 128
    1714:	8c 93       	st	X, r24
		break;
	}
	/*Left|Right Adjust*/
	SET_BIT(ADMUX, 5);
    1716:	a7 e2       	ldi	r26, 0x27	; 39
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e7 e2       	ldi	r30, 0x27	; 39
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	80 62       	ori	r24, 0x20	; 32
    1722:	8c 93       	st	X, r24

	/*128 Prescaller*/
	SET_BIT(ADCSRA, 0);
    1724:	a6 e2       	ldi	r26, 0x26	; 38
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e6 e2       	ldi	r30, 0x26	; 38
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	81 60       	ori	r24, 0x01	; 1
    1730:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
    1732:	a6 e2       	ldi	r26, 0x26	; 38
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e6 e2       	ldi	r30, 0x26	; 38
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	82 60       	ori	r24, 0x02	; 2
    173e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 2);
    1740:	a6 e2       	ldi	r26, 0x26	; 38
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e6 e2       	ldi	r30, 0x26	; 38
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	84 60       	ori	r24, 0x04	; 4
    174c:	8c 93       	st	X, r24

	/*ADC Enable*/
	SET_BIT(ADCSRA, 7);
    174e:	a6 e2       	ldi	r26, 0x26	; 38
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e6 e2       	ldi	r30, 0x26	; 38
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	80 68       	ori	r24, 0x80	; 128
    175a:	8c 93       	st	X, r24
}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <MADC_u8GetChannelReading>:


u8 MADC_u8GetChannelReading(u8 A_u8Channel){
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	0f 92       	push	r0
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = ADMUX & 0b11100000;
    1774:	a7 e2       	ldi	r26, 0x27	; 39
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e7 e2       	ldi	r30, 0x27	; 39
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	80 7e       	andi	r24, 0xE0	; 224
    1780:	8c 93       	st	X, r24
	ADMUX = ADMUX|A_u8Channel;
    1782:	a7 e2       	ldi	r26, 0x27	; 39
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e7 e2       	ldi	r30, 0x27	; 39
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	90 81       	ld	r25, Z
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	89 2b       	or	r24, r25
    1790:	8c 93       	st	X, r24

	/*Start Conversion*/
	SET_BIT(ADCSRA, 6);
    1792:	a6 e2       	ldi	r26, 0x26	; 38
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e6 e2       	ldi	r30, 0x26	; 38
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	80 64       	ori	r24, 0x40	; 64
    179e:	8c 93       	st	X, r24

	/*Wait Till Adc Flag Is Fired (1) */
	while(GET_BIT(ADCSRA, 4) == 0);
    17a0:	e6 e2       	ldi	r30, 0x26	; 38
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	82 95       	swap	r24
    17a8:	8f 70       	andi	r24, 0x0F	; 15
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	81 70       	andi	r24, 0x01	; 1
    17b0:	90 70       	andi	r25, 0x00	; 0
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	a9 f3       	breq	.-22     	; 0x17a0 <MADC_u8GetChannelReading+0x38>
	/*Clear ADC FLAG*/
	SET_BIT(ADCSRA, 4);
    17b6:	a6 e2       	ldi	r26, 0x26	; 38
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e6 e2       	ldi	r30, 0x26	; 38
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	80 61       	ori	r24, 0x10	; 16
    17c2:	8c 93       	st	X, r24

	return ADCH;
    17c4:	e5 e2       	ldi	r30, 0x25	; 37
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z

}
    17ca:	0f 90       	pop	r0
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <motorReverse>:
#include"motorInterface.h"
#include<util/delay.h>
#include<avr/io.h>

void motorReverse(void)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62

	MDIO_voidSetPinValue(port,backwardPin,1);
    17da:	83 e4       	ldi	r24, 0x43	; 67
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>

}
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <motorForward>:

void motorForward(void)
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62

	MDIO_voidSetPinValue(port,forwardPin,1);
    17f2:	83 e4       	ldi	r24, 0x43	; 67
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	41 e0       	ldi	r20, 0x01	; 1
    17f8:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>

}
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <motorStop>:

void motorStop(void)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62

	MDIO_voidSetPinValue(port,forwardPin,0);
    180a:	83 e4       	ldi	r24, 0x43	; 67
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(port,backwardPin,0);
    1814:	83 e4       	ldi	r24, 0x43	; 67
    1816:	61 e0       	ldi	r22, 0x01	; 1
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>

}
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <motorInit>:


void motorInit(void)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62


	MDIO_voidSetPortDirection(port,0xFF);
    182c:	83 e4       	ldi	r24, 0x43	; 67
    182e:	6f ef       	ldi	r22, 0xFF	; 255
    1830:	0e 94 41 0a 	call	0x1482	; 0x1482 <MDIO_voidSetPortDirection>

}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <HLCD_voidSendCommand>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include"LCD.h"
#include<avr/delay.h>

void HLCD_voidSendCommand(u8 A_u8Cmd)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	6d 97       	sbiw	r28, 0x1d	; 29
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	8d 8f       	std	Y+29, r24	; 0x1d
	//initialize control pins
	MDIO_voidSetPinValue('A', 0, 0);
    1850:	81 e4       	ldi	r24, 0x41	; 65
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('A', 1, 0);
    185a:	81 e4       	ldi	r24, 0x41	; 65
    185c:	61 e0       	ldi	r22, 0x01	; 1
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>

	//Write command on data pins
	MDIO_voidSetPortValue('C', A_u8Cmd);
    1864:	83 e4       	ldi	r24, 0x43	; 67
    1866:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1868:	0e 94 83 0a 	call	0x1506	; 0x1506 <MDIO_voidSetPortValue>

	//pulse on enable pin 1.53ms 1
	MDIO_voidSetPinValue('A', 2, 1);
    186c:	81 e4       	ldi	r24, 0x41	; 65
    186e:	62 e0       	ldi	r22, 0x02	; 2
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a0 e0       	ldi	r26, 0x00	; 0
    187c:	b0 e4       	ldi	r27, 0x40	; 64
    187e:	89 8f       	std	Y+25, r24	; 0x19
    1880:	9a 8f       	std	Y+26, r25	; 0x1a
    1882:	ab 8f       	std	Y+27, r26	; 0x1b
    1884:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1886:	69 8d       	ldd	r22, Y+25	; 0x19
    1888:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    188c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	4a ef       	ldi	r20, 0xFA	; 250
    1894:	54 e4       	ldi	r21, 0x44	; 68
    1896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	8d 8b       	std	Y+21, r24	; 0x15
    18a0:	9e 8b       	std	Y+22, r25	; 0x16
    18a2:	af 8b       	std	Y+23, r26	; 0x17
    18a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18a6:	6d 89       	ldd	r22, Y+21	; 0x15
    18a8:	7e 89       	ldd	r23, Y+22	; 0x16
    18aa:	8f 89       	ldd	r24, Y+23	; 0x17
    18ac:	98 8d       	ldd	r25, Y+24	; 0x18
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e8       	ldi	r20, 0x80	; 128
    18b4:	5f e3       	ldi	r21, 0x3F	; 63
    18b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ba:	88 23       	and	r24, r24
    18bc:	2c f4       	brge	.+10     	; 0x18c8 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9c 8b       	std	Y+20, r25	; 0x14
    18c4:	8b 8b       	std	Y+19, r24	; 0x13
    18c6:	3f c0       	rjmp	.+126    	; 0x1946 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    18c8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ca:	7e 89       	ldd	r23, Y+22	; 0x16
    18cc:	8f 89       	ldd	r24, Y+23	; 0x17
    18ce:	98 8d       	ldd	r25, Y+24	; 0x18
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	3f ef       	ldi	r19, 0xFF	; 255
    18d4:	4f e7       	ldi	r20, 0x7F	; 127
    18d6:	57 e4       	ldi	r21, 0x47	; 71
    18d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18dc:	18 16       	cp	r1, r24
    18de:	4c f5       	brge	.+82     	; 0x1932 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e0:	69 8d       	ldd	r22, Y+25	; 0x19
    18e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e2       	ldi	r20, 0x20	; 32
    18ee:	51 e4       	ldi	r21, 0x41	; 65
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	bc 01       	movw	r22, r24
    18fa:	cd 01       	movw	r24, r26
    18fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	9c 8b       	std	Y+20, r25	; 0x14
    1906:	8b 8b       	std	Y+19, r24	; 0x13
    1908:	0f c0       	rjmp	.+30     	; 0x1928 <HLCD_voidSendCommand+0xee>
    190a:	88 ec       	ldi	r24, 0xC8	; 200
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9a 8b       	std	Y+18, r25	; 0x12
    1910:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1912:	89 89       	ldd	r24, Y+17	; 0x11
    1914:	9a 89       	ldd	r25, Y+18	; 0x12
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <HLCD_voidSendCommand+0xdc>
    191a:	9a 8b       	std	Y+18, r25	; 0x12
    191c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191e:	8b 89       	ldd	r24, Y+19	; 0x13
    1920:	9c 89       	ldd	r25, Y+20	; 0x14
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	9c 8b       	std	Y+20, r25	; 0x14
    1926:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1928:	8b 89       	ldd	r24, Y+19	; 0x13
    192a:	9c 89       	ldd	r25, Y+20	; 0x14
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	69 f7       	brne	.-38     	; 0x190a <HLCD_voidSendCommand+0xd0>
    1930:	14 c0       	rjmp	.+40     	; 0x195a <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1932:	6d 89       	ldd	r22, Y+21	; 0x15
    1934:	7e 89       	ldd	r23, Y+22	; 0x16
    1936:	8f 89       	ldd	r24, Y+23	; 0x17
    1938:	98 8d       	ldd	r25, Y+24	; 0x18
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9c 8b       	std	Y+20, r25	; 0x14
    1944:	8b 8b       	std	Y+19, r24	; 0x13
    1946:	8b 89       	ldd	r24, Y+19	; 0x13
    1948:	9c 89       	ldd	r25, Y+20	; 0x14
    194a:	98 8b       	std	Y+16, r25	; 0x10
    194c:	8f 87       	std	Y+15, r24	; 0x0f
    194e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1950:	98 89       	ldd	r25, Y+16	; 0x10
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <HLCD_voidSendCommand+0x118>
    1956:	98 8b       	std	Y+16, r25	; 0x10
    1958:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_voidSetPinValue('A', 2, 0);
    195a:	81 e4       	ldi	r24, 0x41	; 65
    195c:	62 e0       	ldi	r22, 0x02	; 2
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a0 e0       	ldi	r26, 0x00	; 0
    196a:	b0 e4       	ldi	r27, 0x40	; 64
    196c:	8b 87       	std	Y+11, r24	; 0x0b
    196e:	9c 87       	std	Y+12, r25	; 0x0c
    1970:	ad 87       	std	Y+13, r26	; 0x0d
    1972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1974:	6b 85       	ldd	r22, Y+11	; 0x0b
    1976:	7c 85       	ldd	r23, Y+12	; 0x0c
    1978:	8d 85       	ldd	r24, Y+13	; 0x0d
    197a:	9e 85       	ldd	r25, Y+14	; 0x0e
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a ef       	ldi	r20, 0xFA	; 250
    1982:	54 e4       	ldi	r21, 0x44	; 68
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8f 83       	std	Y+7, r24	; 0x07
    198e:	98 87       	std	Y+8, r25	; 0x08
    1990:	a9 87       	std	Y+9, r26	; 0x09
    1992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1994:	6f 81       	ldd	r22, Y+7	; 0x07
    1996:	78 85       	ldd	r23, Y+8	; 0x08
    1998:	89 85       	ldd	r24, Y+9	; 0x09
    199a:	9a 85       	ldd	r25, Y+10	; 0x0a
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	5f e3       	ldi	r21, 0x3F	; 63
    19a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a8:	88 23       	and	r24, r24
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	8d 83       	std	Y+5, r24	; 0x05
    19b4:	3f c0       	rjmp	.+126    	; 0x1a34 <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    19b6:	6f 81       	ldd	r22, Y+7	; 0x07
    19b8:	78 85       	ldd	r23, Y+8	; 0x08
    19ba:	89 85       	ldd	r24, Y+9	; 0x09
    19bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	57 e4       	ldi	r21, 0x47	; 71
    19c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	4c f5       	brge	.+82     	; 0x1a20 <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e2       	ldi	r20, 0x20	; 32
    19dc:	51 e4       	ldi	r21, 0x41	; 65
    19de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	cd 01       	movw	r24, r26
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <HLCD_voidSendCommand+0x1dc>
    19f8:	88 ec       	ldi	r24, 0xC8	; 200
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9c 83       	std	Y+4, r25	; 0x04
    19fe:	8b 83       	std	Y+3, r24	; 0x03
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <HLCD_voidSendCommand+0x1ca>
    1a08:	9c 83       	std	Y+4, r25	; 0x04
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	69 f7       	brne	.-38     	; 0x19f8 <HLCD_voidSendCommand+0x1be>
    1a1e:	14 c0       	rjmp	.+40     	; 0x1a48 <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <HLCD_voidSendCommand+0x206>
    1a44:	9a 83       	std	Y+2, r25	; 0x02
    1a46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a48:	6d 96       	adiw	r28, 0x1d	; 29
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	6d 97       	sbiw	r28, 0x1d	; 29
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_voidSetPinValue('A',0,1);
    1a70:	81 e4       	ldi	r24, 0x41	; 65
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('A',1,0);
    1a7a:	81 e4       	ldi	r24, 0x41	; 65
    1a7c:	61 e0       	ldi	r22, 0x01	; 1
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>
	//Write data
	MDIO_voidSetPortValue('C',A_u8Data);
    1a84:	83 e4       	ldi	r24, 0x43	; 67
    1a86:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a88:	0e 94 83 0a 	call	0x1506	; 0x1506 <MDIO_voidSetPortValue>

	//pulse on enable pin
	MDIO_voidSetPinValue('A',2,1);
    1a8c:	81 e4       	ldi	r24, 0x41	; 65
    1a8e:	62 e0       	ldi	r22, 0x02	; 2
    1a90:	41 e0       	ldi	r20, 0x01	; 1
    1a92:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a0 e0       	ldi	r26, 0x00	; 0
    1a9c:	b0 e4       	ldi	r27, 0x40	; 64
    1a9e:	89 8f       	std	Y+25, r24	; 0x19
    1aa0:	9a 8f       	std	Y+26, r25	; 0x1a
    1aa2:	ab 8f       	std	Y+27, r26	; 0x1b
    1aa4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa6:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	4a ef       	ldi	r20, 0xFA	; 250
    1ab4:	54 e4       	ldi	r21, 0x44	; 68
    1ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	8d 8b       	std	Y+21, r24	; 0x15
    1ac0:	9e 8b       	std	Y+22, r25	; 0x16
    1ac2:	af 8b       	std	Y+23, r26	; 0x17
    1ac4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aca:	8f 89       	ldd	r24, Y+23	; 0x17
    1acc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9c 8b       	std	Y+20, r25	; 0x14
    1ae4:	8b 8b       	std	Y+19, r24	; 0x13
    1ae6:	3f c0       	rjmp	.+126    	; 0x1b66 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aea:	7e 89       	ldd	r23, Y+22	; 0x16
    1aec:	8f 89       	ldd	r24, Y+23	; 0x17
    1aee:	98 8d       	ldd	r25, Y+24	; 0x18
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	57 e4       	ldi	r21, 0x47	; 71
    1af8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afc:	18 16       	cp	r1, r24
    1afe:	4c f5       	brge	.+82     	; 0x1b52 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b00:	69 8d       	ldd	r22, Y+25	; 0x19
    1b02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9c 8b       	std	Y+20, r25	; 0x14
    1b26:	8b 8b       	std	Y+19, r24	; 0x13
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <HLCD_voidSendData+0xee>
    1b2a:	88 ec       	ldi	r24, 0xC8	; 200
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9a 8b       	std	Y+18, r25	; 0x12
    1b30:	89 8b       	std	Y+17, r24	; 0x11
    1b32:	89 89       	ldd	r24, Y+17	; 0x11
    1b34:	9a 89       	ldd	r25, Y+18	; 0x12
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <HLCD_voidSendData+0xdc>
    1b3a:	9a 8b       	std	Y+18, r25	; 0x12
    1b3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b40:	9c 89       	ldd	r25, Y+20	; 0x14
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	9c 8b       	std	Y+20, r25	; 0x14
    1b46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b48:	8b 89       	ldd	r24, Y+19	; 0x13
    1b4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	69 f7       	brne	.-38     	; 0x1b2a <HLCD_voidSendData+0xd0>
    1b50:	14 c0       	rjmp	.+40     	; 0x1b7a <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b52:	6d 89       	ldd	r22, Y+21	; 0x15
    1b54:	7e 89       	ldd	r23, Y+22	; 0x16
    1b56:	8f 89       	ldd	r24, Y+23	; 0x17
    1b58:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9c 8b       	std	Y+20, r25	; 0x14
    1b64:	8b 8b       	std	Y+19, r24	; 0x13
    1b66:	8b 89       	ldd	r24, Y+19	; 0x13
    1b68:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6a:	98 8b       	std	Y+16, r25	; 0x10
    1b6c:	8f 87       	std	Y+15, r24	; 0x0f
    1b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b70:	98 89       	ldd	r25, Y+16	; 0x10
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <HLCD_voidSendData+0x118>
    1b76:	98 8b       	std	Y+16, r25	; 0x10
    1b78:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_voidSetPinValue('A',2,0);
    1b7a:	81 e4       	ldi	r24, 0x41	; 65
    1b7c:	62 e0       	ldi	r22, 0x02	; 2
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e0       	ldi	r26, 0x00	; 0
    1b8a:	b0 e4       	ldi	r27, 0x40	; 64
    1b8c:	8b 87       	std	Y+11, r24	; 0x0b
    1b8e:	9c 87       	std	Y+12, r25	; 0x0c
    1b90:	ad 87       	std	Y+13, r26	; 0x0d
    1b92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4a ef       	ldi	r20, 0xFA	; 250
    1ba2:	54 e4       	ldi	r21, 0x44	; 68
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8f 83       	std	Y+7, r24	; 0x07
    1bae:	98 87       	std	Y+8, r25	; 0x08
    1bb0:	a9 87       	std	Y+9, r26	; 0x09
    1bb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb6:	78 85       	ldd	r23, Y+8	; 0x08
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc8:	88 23       	and	r24, r24
    1bca:	2c f4       	brge	.+10     	; 0x1bd6 <HLCD_voidSendData+0x17c>
		__ticks = 1;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	3f c0       	rjmp	.+126    	; 0x1c54 <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	57 e4       	ldi	r21, 0x47	; 71
    1be6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bea:	18 16       	cp	r1, r24
    1bec:	4c f5       	brge	.+82     	; 0x1c40 <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e2       	ldi	r20, 0x20	; 32
    1bfc:	51 e4       	ldi	r21, 0x41	; 65
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	9e 83       	std	Y+6, r25	; 0x06
    1c14:	8d 83       	std	Y+5, r24	; 0x05
    1c16:	0f c0       	rjmp	.+30     	; 0x1c36 <HLCD_voidSendData+0x1dc>
    1c18:	88 ec       	ldi	r24, 0xC8	; 200
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9c 83       	std	Y+4, r25	; 0x04
    1c1e:	8b 83       	std	Y+3, r24	; 0x03
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <HLCD_voidSendData+0x1ca>
    1c28:	9c 83       	std	Y+4, r25	; 0x04
    1c2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	69 f7       	brne	.-38     	; 0x1c18 <HLCD_voidSendData+0x1be>
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	9e 83       	std	Y+6, r25	; 0x06
    1c52:	8d 83       	std	Y+5, r24	; 0x05
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	9e 81       	ldd	r25, Y+6	; 0x06
    1c58:	9a 83       	std	Y+2, r25	; 0x02
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <HLCD_voidSendData+0x206>
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c68:	6d 96       	adiw	r28, 0x1d	; 29
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <HLCD_voidInit>:

void HLCD_voidInit()
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	e8 97       	sbiw	r28, 0x38	; 56
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e2       	ldi	r26, 0x20	; 32
    1c94:	b2 e4       	ldi	r27, 0x42	; 66
    1c96:	8d ab       	std	Y+53, r24	; 0x35
    1c98:	9e ab       	std	Y+54, r25	; 0x36
    1c9a:	af ab       	std	Y+55, r26	; 0x37
    1c9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1ca0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ca2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a ef       	ldi	r20, 0xFA	; 250
    1cac:	54 e4       	ldi	r21, 0x44	; 68
    1cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	89 ab       	std	Y+49, r24	; 0x31
    1cb8:	9a ab       	std	Y+50, r25	; 0x32
    1cba:	ab ab       	std	Y+51, r26	; 0x33
    1cbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <HLCD_voidInit+0x66>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	98 ab       	std	Y+48, r25	; 0x30
    1cdc:	8f a7       	std	Y+47, r24	; 0x2f
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1ce0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cfa:	7e a9       	ldd	r23, Y+54	; 0x36
    1cfc:	8f a9       	ldd	r24, Y+55	; 0x37
    1cfe:	98 ad       	ldd	r25, Y+56	; 0x38
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	98 ab       	std	Y+48, r25	; 0x30
    1d1e:	8f a7       	std	Y+47, r24	; 0x2f
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <HLCD_voidInit+0xc6>
    1d22:	88 ec       	ldi	r24, 0xC8	; 200
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9e a7       	std	Y+46, r25	; 0x2e
    1d28:	8d a7       	std	Y+45, r24	; 0x2d
    1d2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <HLCD_voidInit+0xb4>
    1d32:	9e a7       	std	Y+46, r25	; 0x2e
    1d34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d38:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	98 ab       	std	Y+48, r25	; 0x30
    1d3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d42:	98 a9       	ldd	r25, Y+48	; 0x30
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <HLCD_voidInit+0xa8>
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d50:	9c a9       	ldd	r25, Y+52	; 0x34
    1d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	98 ab       	std	Y+48, r25	; 0x30
    1d5c:	8f a7       	std	Y+47, r24	; 0x2f
    1d5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d60:	98 a9       	ldd	r25, Y+48	; 0x30
    1d62:	9c a7       	std	Y+44, r25	; 0x2c
    1d64:	8b a7       	std	Y+43, r24	; 0x2b
    1d66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d68:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <HLCD_voidInit+0xf0>
    1d6e:	9c a7       	std	Y+44, r25	; 0x2c
    1d70:	8b a7       	std	Y+43, r24	; 0x2b
	//Wait for more than 30 micros
	_delay_ms(40);

	//Function set 0b00111000
	HLCD_voidSendCommand(0b00111000);
    1d72:	88 e3       	ldi	r24, 0x38	; 56
    1d74:	0e 94 1d 0c 	call	0x183a	; 0x183a <HLCD_voidSendCommand>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a0 e8       	ldi	r26, 0x80	; 128
    1d7e:	bf e3       	ldi	r27, 0x3F	; 63
    1d80:	8f a3       	std	Y+39, r24	; 0x27
    1d82:	98 a7       	std	Y+40, r25	; 0x28
    1d84:	a9 a7       	std	Y+41, r26	; 0x29
    1d86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	6f a1       	ldd	r22, Y+39	; 0x27
    1d8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4a ef       	ldi	r20, 0xFA	; 250
    1d96:	54 e4       	ldi	r21, 0x44	; 68
    1d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	8b a3       	std	Y+35, r24	; 0x23
    1da2:	9c a3       	std	Y+36, r25	; 0x24
    1da4:	ad a3       	std	Y+37, r26	; 0x25
    1da6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1da8:	6b a1       	ldd	r22, Y+35	; 0x23
    1daa:	7c a1       	ldd	r23, Y+36	; 0x24
    1dac:	8d a1       	ldd	r24, Y+37	; 0x25
    1dae:	9e a1       	ldd	r25, Y+38	; 0x26
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <HLCD_voidInit+0x150>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9a a3       	std	Y+34, r25	; 0x22
    1dc6:	89 a3       	std	Y+33, r24	; 0x21
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <HLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    1dca:	6b a1       	ldd	r22, Y+35	; 0x23
    1dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dce:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	4c f5       	brge	.+82     	; 0x1e34 <HLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de2:	6f a1       	ldd	r22, Y+39	; 0x27
    1de4:	78 a5       	ldd	r23, Y+40	; 0x28
    1de6:	89 a5       	ldd	r24, Y+41	; 0x29
    1de8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9a a3       	std	Y+34, r25	; 0x22
    1e08:	89 a3       	std	Y+33, r24	; 0x21
    1e0a:	0f c0       	rjmp	.+30     	; 0x1e2a <HLCD_voidInit+0x1b0>
    1e0c:	88 ec       	ldi	r24, 0xC8	; 200
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	98 a3       	std	Y+32, r25	; 0x20
    1e12:	8f 8f       	std	Y+31, r24	; 0x1f
    1e14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e16:	98 a1       	ldd	r25, Y+32	; 0x20
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <HLCD_voidInit+0x19e>
    1e1c:	98 a3       	std	Y+32, r25	; 0x20
    1e1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e20:	89 a1       	ldd	r24, Y+33	; 0x21
    1e22:	9a a1       	ldd	r25, Y+34	; 0x22
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	9a a3       	std	Y+34, r25	; 0x22
    1e28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	69 f7       	brne	.-38     	; 0x1e0c <HLCD_voidInit+0x192>
    1e32:	14 c0       	rjmp	.+40     	; 0x1e5c <HLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	6b a1       	ldd	r22, Y+35	; 0x23
    1e36:	7c a1       	ldd	r23, Y+36	; 0x24
    1e38:	8d a1       	ldd	r24, Y+37	; 0x25
    1e3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	9a a3       	std	Y+34, r25	; 0x22
    1e46:	89 a3       	std	Y+33, r24	; 0x21
    1e48:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <HLCD_voidInit+0x1da>
    1e58:	9e 8f       	std	Y+30, r25	; 0x1e
    1e5a:	8d 8f       	std	Y+29, r24	; 0x1d

	//Wait for 40 ms
	_delay_ms(1);

	//Display ON/OFF  0b00001111
	HLCD_voidSendCommand(0b00001111);
    1e5c:	8f e0       	ldi	r24, 0x0F	; 15
    1e5e:	0e 94 1d 0c 	call	0x183a	; 0x183a <HLCD_voidSendCommand>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e8       	ldi	r26, 0x80	; 128
    1e68:	bf e3       	ldi	r27, 0x3F	; 63
    1e6a:	89 8f       	std	Y+25, r24	; 0x19
    1e6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	69 8d       	ldd	r22, Y+25	; 0x19
    1e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a ef       	ldi	r20, 0xFA	; 250
    1e80:	54 e4       	ldi	r21, 0x44	; 68
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8d 8b       	std	Y+21, r24	; 0x15
    1e8c:	9e 8b       	std	Y+22, r25	; 0x16
    1e8e:	af 8b       	std	Y+23, r26	; 0x17
    1e90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <HLCD_voidInit+0x23a>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 8b       	std	Y+20, r25	; 0x14
    1eb0:	8b 8b       	std	Y+19, r24	; 0x13
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <HLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    1eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eba:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <HLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9c 8b       	std	Y+20, r25	; 0x14
    1ef2:	8b 8b       	std	Y+19, r24	; 0x13
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <HLCD_voidInit+0x29a>
    1ef6:	88 ec       	ldi	r24, 0xC8	; 200
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9a 8b       	std	Y+18, r25	; 0x12
    1efc:	89 8b       	std	Y+17, r24	; 0x11
    1efe:	89 89       	ldd	r24, Y+17	; 0x11
    1f00:	9a 89       	ldd	r25, Y+18	; 0x12
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <HLCD_voidInit+0x288>
    1f06:	9a 8b       	std	Y+18, r25	; 0x12
    1f08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9c 8b       	std	Y+20, r25	; 0x14
    1f12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <HLCD_voidInit+0x27c>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <HLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f20:	7e 89       	ldd	r23, Y+22	; 0x16
    1f22:	8f 89       	ldd	r24, Y+23	; 0x17
    1f24:	98 8d       	ldd	r25, Y+24	; 0x18
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c 8b       	std	Y+20, r25	; 0x14
    1f30:	8b 8b       	std	Y+19, r24	; 0x13
    1f32:	8b 89       	ldd	r24, Y+19	; 0x13
    1f34:	9c 89       	ldd	r25, Y+20	; 0x14
    1f36:	98 8b       	std	Y+16, r25	; 0x10
    1f38:	8f 87       	std	Y+15, r24	; 0x0f
    1f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3c:	98 89       	ldd	r25, Y+16	; 0x10
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <HLCD_voidInit+0x2c4>
    1f42:	98 8b       	std	Y+16, r25	; 0x10
    1f44:	8f 87       	std	Y+15, r24	; 0x0f

	//Wait for 40 ms
	_delay_ms(1);

	//Clear Display 0b0000001 -----------
	HLCD_voidSendCommand(0b00000001);
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	0e 94 1d 0c 	call	0x183a	; 0x183a <HLCD_voidSendCommand>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e0       	ldi	r26, 0x00	; 0
    1f52:	b0 e4       	ldi	r27, 0x40	; 64
    1f54:	8b 87       	std	Y+11, r24	; 0x0b
    1f56:	9c 87       	std	Y+12, r25	; 0x0c
    1f58:	ad 87       	std	Y+13, r26	; 0x0d
    1f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a ef       	ldi	r20, 0xFA	; 250
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8f 83       	std	Y+7, r24	; 0x07
    1f76:	98 87       	std	Y+8, r25	; 0x08
    1f78:	a9 87       	std	Y+9, r26	; 0x09
    1f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7e:	78 85       	ldd	r23, Y+8	; 0x08
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <HLCD_voidInit+0x324>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <HLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    1f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa0:	78 85       	ldd	r23, Y+8	; 0x08
    1fa2:	89 85       	ldd	r24, Y+9	; 0x09
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <HLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <HLCD_voidInit+0x384>
    1fe0:	88 ec       	ldi	r24, 0xC8	; 200
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <HLCD_voidInit+0x372>
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <HLCD_voidInit+0x366>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <HLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <HLCD_voidInit+0x3ae>
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01

	//wait for 2ms
	_delay_ms(2);

	//Entry mode set 0b00000110
	HLCD_voidSendCommand(0b00000110);
    2030:	86 e0       	ldi	r24, 0x06	; 6
    2032:	0e 94 1d 0c 	call	0x183a	; 0x183a <HLCD_voidSendCommand>

}
    2036:	e8 96       	adiw	r28, 0x38	; 56
    2038:	0f b6       	in	r0, 0x3f	; 63
    203a:	f8 94       	cli
    203c:	de bf       	out	0x3e, r29	; 62
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	cd bf       	out	0x3d, r28	; 61
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <HLCD_voidGoTo>:

void HLCD_voidGoTo(u8 A_u8Row, u8 A_u8Col)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <HLCD_voidGoTo+0x6>
    204e:	0f 92       	push	r0
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	8a 83       	std	Y+2, r24	; 0x02
    2056:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8DDRamAddress ;
	if(A_u8Row < 2 && A_u8Col < 16 )
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	82 30       	cpi	r24, 0x02	; 2
    205c:	90 f4       	brcc	.+36     	; 0x2082 <HLCD_voidGoTo+0x3a>
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	80 31       	cpi	r24, 0x10	; 16
    2062:	78 f4       	brcc	.+30     	; 0x2082 <HLCD_voidGoTo+0x3a>
	{
		if(A_u8Row == 0)
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	88 23       	and	r24, r24
    2068:	19 f4       	brne	.+6      	; 0x2070 <HLCD_voidGoTo+0x28>
		{
			L_u8DDRamAddress = 0x00+A_u8Col;
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	03 c0       	rjmp	.+6      	; 0x2076 <HLCD_voidGoTo+0x2e>
		}
		else
		{
			L_u8DDRamAddress = 0x40+A_u8Col;
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	80 5c       	subi	r24, 0xC0	; 192
    2074:	89 83       	std	Y+1, r24	; 0x01
		}
		SET_BIT(L_u8DDRamAddress, 7);
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	80 68       	ori	r24, 0x80	; 128
    207a:	89 83       	std	Y+1, r24	; 0x01
		HLCD_voidSendCommand(L_u8DDRamAddress);
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	0e 94 1d 0c 	call	0x183a	; 0x183a <HLCD_voidSendCommand>

	}
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <HLCD_voidSendString>:



void HLCD_voidSendString(u8 *String){
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <HLCD_voidSendString+0x6>
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	9b 83       	std	Y+3, r25	; 0x03
    209c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
    209e:	19 82       	std	Y+1, r1	; 0x01
    20a0:	0e c0       	rjmp	.+28     	; 0x20be <HLCD_voidSendString+0x30>
	while(String[i] != '\0'){
		HLCD_voidSendData(String[i]);
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	9b 81       	ldd	r25, Y+3	; 0x03
    20ac:	fc 01       	movw	r30, r24
    20ae:	e2 0f       	add	r30, r18
    20b0:	f3 1f       	adc	r31, r19
    20b2:	80 81       	ld	r24, Z
    20b4:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <HLCD_voidSendData>
		i++;
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	8f 5f       	subi	r24, 0xFF	; 255
    20bc:	89 83       	std	Y+1, r24	; 0x01



void HLCD_voidSendString(u8 *String){
	u8 i =0;
	while(String[i] != '\0'){
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	9b 81       	ldd	r25, Y+3	; 0x03
    20c8:	fc 01       	movw	r30, r24
    20ca:	e2 0f       	add	r30, r18
    20cc:	f3 1f       	adc	r31, r19
    20ce:	80 81       	ld	r24, Z
    20d0:	88 23       	and	r24, r24
    20d2:	39 f7       	brne	.-50     	; 0x20a2 <HLCD_voidSendString+0x14>
		HLCD_voidSendData(String[i]);
		i++;
	}
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <HLCD_voidDisplayNumber>:



void HLCD_voidDisplayNumber(s32 A_s32Number)
{
    20e0:	ef 92       	push	r14
    20e2:	ff 92       	push	r15
    20e4:	0f 93       	push	r16
    20e6:	1f 93       	push	r17
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	28 97       	sbiw	r28, 0x08	; 8
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	6d 83       	std	Y+5, r22	; 0x05
    20fe:	7e 83       	std	Y+6, r23	; 0x06
    2100:	8f 83       	std	Y+7, r24	; 0x07
    2102:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Number=1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a0 e0       	ldi	r26, 0x00	; 0
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	9a 83       	std	Y+2, r25	; 0x02
    2110:	ab 83       	std	Y+3, r26	; 0x03
    2112:	bc 83       	std	Y+4, r27	; 0x04
	if (A_s32Number==0)
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	af 81       	ldd	r26, Y+7	; 0x07
    211a:	b8 85       	ldd	r27, Y+8	; 0x08
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	a1 05       	cpc	r26, r1
    2120:	b1 05       	cpc	r27, r1
    2122:	19 f4       	brne	.+6      	; 0x212a <HLCD_voidDisplayNumber+0x4a>
	{
		HLCD_voidSendData('0');
    2124:	80 e3       	ldi	r24, 0x30	; 48
    2126:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <HLCD_voidSendData>
	}
	if (A_s32Number<0)
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	af 81       	ldd	r26, Y+7	; 0x07
    2130:	b8 85       	ldd	r27, Y+8	; 0x08
    2132:	bb 23       	and	r27, r27
    2134:	0c f0       	brlt	.+2      	; 0x2138 <HLCD_voidDisplayNumber+0x58>
    2136:	49 c0       	rjmp	.+146    	; 0x21ca <HLCD_voidDisplayNumber+0xea>
	{
		HLCD_voidSendData('-');
    2138:	8d e2       	ldi	r24, 0x2D	; 45
    213a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <HLCD_voidSendData>
		A_s32Number *=-1;
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	af 81       	ldd	r26, Y+7	; 0x07
    2144:	b8 85       	ldd	r27, Y+8	; 0x08
    2146:	b0 95       	com	r27
    2148:	a0 95       	com	r26
    214a:	90 95       	com	r25
    214c:	81 95       	neg	r24
    214e:	9f 4f       	sbci	r25, 0xFF	; 255
    2150:	af 4f       	sbci	r26, 0xFF	; 255
    2152:	bf 4f       	sbci	r27, 0xFF	; 255
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	9e 83       	std	Y+6, r25	; 0x06
    2158:	af 83       	std	Y+7, r26	; 0x07
    215a:	b8 87       	std	Y+8, r27	; 0x08
    215c:	36 c0       	rjmp	.+108    	; 0x21ca <HLCD_voidDisplayNumber+0xea>
	}
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	9a 81       	ldd	r25, Y+2	; 0x02
    2162:	ab 81       	ldd	r26, Y+3	; 0x03
    2164:	bc 81       	ldd	r27, Y+4	; 0x04
    2166:	2a e0       	ldi	r18, 0x0A	; 10
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__mulsi3>
    2176:	7b 01       	movw	r14, r22
    2178:	8c 01       	movw	r16, r24
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	af 81       	ldd	r26, Y+7	; 0x07
    2180:	b8 85       	ldd	r27, Y+8	; 0x08
    2182:	2a e0       	ldi	r18, 0x0A	; 10
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	50 e0       	ldi	r21, 0x00	; 0
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 9c 12 	call	0x2538	; 0x2538 <__divmodsi4>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	8e 0d       	add	r24, r14
    2198:	9f 1d       	adc	r25, r15
    219a:	a0 1f       	adc	r26, r16
    219c:	b1 1f       	adc	r27, r17
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	ab 83       	std	Y+3, r26	; 0x03
    21a4:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number = A_s32Number /10;
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	af 81       	ldd	r26, Y+7	; 0x07
    21ac:	b8 85       	ldd	r27, Y+8	; 0x08
    21ae:	2a e0       	ldi	r18, 0x0A	; 10
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	50 e0       	ldi	r21, 0x00	; 0
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 9c 12 	call	0x2538	; 0x2538 <__divmodsi4>
    21be:	da 01       	movw	r26, r20
    21c0:	c9 01       	movw	r24, r18
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	9e 83       	std	Y+6, r25	; 0x06
    21c6:	af 83       	std	Y+7, r26	; 0x07
    21c8:	b8 87       	std	Y+8, r27	; 0x08
	if (A_s32Number<0)
	{
		HLCD_voidSendData('-');
		A_s32Number *=-1;
	}
	while (A_s32Number!=0)
    21ca:	8d 81       	ldd	r24, Y+5	; 0x05
    21cc:	9e 81       	ldd	r25, Y+6	; 0x06
    21ce:	af 81       	ldd	r26, Y+7	; 0x07
    21d0:	b8 85       	ldd	r27, Y+8	; 0x08
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	a1 05       	cpc	r26, r1
    21d6:	b1 05       	cpc	r27, r1
    21d8:	11 f6       	brne	.-124    	; 0x215e <HLCD_voidDisplayNumber+0x7e>
    21da:	23 c0       	rjmp	.+70     	; 0x2222 <HLCD_voidDisplayNumber+0x142>
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
	{
		HLCD_voidSendData((local_u32Number%10)+48);
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	9a 81       	ldd	r25, Y+2	; 0x02
    21e0:	ab 81       	ldd	r26, Y+3	; 0x03
    21e2:	bc 81       	ldd	r27, Y+4	; 0x04
    21e4:	2a e0       	ldi	r18, 0x0A	; 10
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__udivmodsi4>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	80 5d       	subi	r24, 0xD0	; 208
    21fa:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <HLCD_voidSendData>
		local_u32Number=local_u32Number/10;
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	9a 81       	ldd	r25, Y+2	; 0x02
    2202:	ab 81       	ldd	r26, Y+3	; 0x03
    2204:	bc 81       	ldd	r27, Y+4	; 0x04
    2206:	2a e0       	ldi	r18, 0x0A	; 10
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__udivmodsi4>
    2216:	da 01       	movw	r26, r20
    2218:	c9 01       	movw	r24, r18
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	ab 83       	std	Y+3, r26	; 0x03
    2220:	bc 83       	std	Y+4, r27	; 0x04
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	9a 81       	ldd	r25, Y+2	; 0x02
    2226:	ab 81       	ldd	r26, Y+3	; 0x03
    2228:	bc 81       	ldd	r27, Y+4	; 0x04
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	91 05       	cpc	r25, r1
    222e:	a1 05       	cpc	r26, r1
    2230:	b1 05       	cpc	r27, r1
    2232:	a1 f6       	brne	.-88     	; 0x21dc <HLCD_voidDisplayNumber+0xfc>
	{
		HLCD_voidSendData((local_u32Number%10)+48);
		local_u32Number=local_u32Number/10;
	}
}
    2234:	28 96       	adiw	r28, 0x08	; 8
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	ff 90       	pop	r15
    224a:	ef 90       	pop	r14
    224c:	08 95       	ret

0000224e <HKPD_u8GetPressedKey>:
/*
 *
 *
 * */

u8 HKPD_u8GetPressedKey(){
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	00 d0       	rcall	.+0      	; 0x2254 <HKPD_u8GetPressedKey+0x6>
    2254:	00 d0       	rcall	.+0      	; 0x2256 <HKPD_u8GetPressedKey+0x8>
    2256:	0f 92       	push	r0
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=255, Col, Row;
    225c:	8f ef       	ldi	r24, 0xFF	; 255
    225e:	8c 83       	std	Y+4, r24	; 0x04

	for(Col = 0; Col<4; Col++){
    2260:	1b 82       	std	Y+3, r1	; 0x03
    2262:	3e c0       	rjmp	.+124    	; 0x22e0 <HKPD_u8GetPressedKey+0x92>
		/*Activate Current Col*/
		MDIO_voidSetPinValue('D',Col ,0);
    2264:	84 e4       	ldi	r24, 0x44	; 68
    2266:	6b 81       	ldd	r22, Y+3	; 0x03
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>

		for(Row = 0; Row<4; Row++){
    226e:	1a 82       	std	Y+2, r1	; 0x02
    2270:	2c c0       	rjmp	.+88     	; 0x22ca <HKPD_u8GetPressedKey+0x7c>

			u8 L_u8PinValue = MDIO_u8GetPinValue('D', (Row+4));
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	98 2f       	mov	r25, r24
    2276:	9c 5f       	subi	r25, 0xFC	; 252
    2278:	84 e4       	ldi	r24, 0x44	; 68
    227a:	69 2f       	mov	r22, r25
    227c:	0e 94 c5 0a 	call	0x158a	; 0x158a <MDIO_u8GetPinValue>
    2280:	89 83       	std	Y+1, r24	; 0x01

			/*Check If Key Is Pressed*/
			if(L_u8PinValue == 0){
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	88 23       	and	r24, r24
    2286:	f1 f4       	brne	.+60     	; 0x22c4 <HKPD_u8GetPressedKey+0x76>
				Local_u8PressedKey = G_u8KPDButtons[Row][Col];
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	48 2f       	mov	r20, r24
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	ca 01       	movw	r24, r20
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	82 0f       	add	r24, r18
    22a0:	93 1f       	adc	r25, r19
    22a2:	fc 01       	movw	r30, r24
    22a4:	e3 58       	subi	r30, 0x83	; 131
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	8c 83       	std	Y+4, r24	; 0x04

				while(MDIO_u8GetPinValue('D', (Row+4)) == 0);
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	98 2f       	mov	r25, r24
    22b0:	9c 5f       	subi	r25, 0xFC	; 252
    22b2:	84 e4       	ldi	r24, 0x44	; 68
    22b4:	69 2f       	mov	r22, r25
    22b6:	0e 94 c5 0a 	call	0x158a	; 0x158a <MDIO_u8GetPinValue>
    22ba:	88 23       	and	r24, r24
    22bc:	b9 f3       	breq	.-18     	; 0x22ac <HKPD_u8GetPressedKey+0x5e>

				return Local_u8PressedKey;
    22be:	8c 81       	ldd	r24, Y+4	; 0x04
    22c0:	8d 83       	std	Y+5, r24	; 0x05
    22c2:	14 c0       	rjmp	.+40     	; 0x22ec <HKPD_u8GetPressedKey+0x9e>

	for(Col = 0; Col<4; Col++){
		/*Activate Current Col*/
		MDIO_voidSetPinValue('D',Col ,0);

		for(Row = 0; Row<4; Row++){
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	8f 5f       	subi	r24, 0xFF	; 255
    22c8:	8a 83       	std	Y+2, r24	; 0x02
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	84 30       	cpi	r24, 0x04	; 4
    22ce:	88 f2       	brcs	.-94     	; 0x2272 <HKPD_u8GetPressedKey+0x24>

				return Local_u8PressedKey;
			}
		}
		/*Deactivate Current Col*/
		MDIO_voidSetPinValue('D',Col ,1);
    22d0:	84 e4       	ldi	r24, 0x44	; 68
    22d2:	6b 81       	ldd	r22, Y+3	; 0x03
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	0e 94 29 09 	call	0x1252	; 0x1252 <MDIO_voidSetPinValue>
 * */

u8 HKPD_u8GetPressedKey(){
	u8 Local_u8PressedKey=255, Col, Row;

	for(Col = 0; Col<4; Col++){
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	8f 5f       	subi	r24, 0xFF	; 255
    22de:	8b 83       	std	Y+3, r24	; 0x03
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	84 30       	cpi	r24, 0x04	; 4
    22e4:	08 f4       	brcc	.+2      	; 0x22e8 <HKPD_u8GetPressedKey+0x9a>
    22e6:	be cf       	rjmp	.-132    	; 0x2264 <HKPD_u8GetPressedKey+0x16>
			}
		}
		/*Deactivate Current Col*/
		MDIO_voidSetPinValue('D',Col ,1);
	}
	return Local_u8PressedKey;
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05

}
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <main>:

u16 G_counter, OnTicks, OffTicks;


int main()
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <main+0x6>
    2304:	00 d0       	rcall	.+0      	; 0x2306 <main+0x8>
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection('B', 3, 1);
    230a:	82 e4       	ldi	r24, 0x42	; 66
    230c:	63 e0       	ldi	r22, 0x03	; 3
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 11 08 	call	0x1022	; 0x1022 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection('D', 2, 0);
    2314:	84 e4       	ldi	r24, 0x44	; 68
    2316:	62 e0       	ldi	r22, 0x02	; 2
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	0e 94 11 08 	call	0x1022	; 0x1022 <MDIO_voidSetPinDirection>

	/*LCD Configrations*/

	MDIO_voidSetPortDirection('C', 0xff);
    231e:	83 e4       	ldi	r24, 0x43	; 67
    2320:	6f ef       	ldi	r22, 0xFF	; 255
    2322:	0e 94 41 0a 	call	0x1482	; 0x1482 <MDIO_voidSetPortDirection>
	MDIO_voidSetPortDirection('A', 0xff);
    2326:	81 e4       	ldi	r24, 0x41	; 65
    2328:	6f ef       	ldi	r22, 0xFF	; 255
    232a:	0e 94 41 0a 	call	0x1482	; 0x1482 <MDIO_voidSetPortDirection>


	MTimer_voidTimerInit(2);
    232e:	82 e0       	ldi	r24, 0x02	; 2
    2330:	0e 94 a3 05 	call	0xb46	; 0xb46 <MTimer_voidTimerInit>
	MTimer_voidSetPreloadValue(2, 64);
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	60 e4       	ldi	r22, 0x40	; 64
    2338:	0e 94 fe 05 	call	0xbfc	; 0xbfc <MTimer_voidSetPreloadValue>

	MEXTI_voidSenseControl(0,3);
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	63 e0       	ldi	r22, 0x03	; 3
    2340:	0e 94 a3 06 	call	0xd46	; 0xd46 <MEXTI_voidSenseControl>
	MTimer_voidStart();
    2344:	0e 94 16 06 	call	0xc2c	; 0xc2c <MTimer_voidStart>
	MTimer1_voidInit();
    2348:	0e 94 4e 06 	call	0xc9c	; 0xc9c <MTimer1_voidInit>

	HLCD_voidInit();
    234c:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <HLCD_voidInit>

	/*EXTI Enable*/
	MEXTI_voidEnable(0);
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	0e 94 a3 07 	call	0xf46	; 0xf46 <MEXTI_voidEnable>

	/*Enable Global Interrupt*/
	MGIE_voidEnable();
    2356:	0e 94 87 06 	call	0xd0e	; 0xd0e <MGIE_voidEnable>

	u8 *Str1 = "OnTicks= ";
    235a:	80 e6       	ldi	r24, 0x60	; 96
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	8b 83       	std	Y+3, r24	; 0x03
	u8 *Str2 = "OffTicks= ";
    2362:	8a e6       	ldi	r24, 0x6A	; 106
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	89 83       	std	Y+1, r24	; 0x01
	while(1){


		while(OnTicks == 0 && OffTicks==0);
    236a:	80 91 92 00 	lds	r24, 0x0092
    236e:	90 91 93 00 	lds	r25, 0x0093
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	31 f4       	brne	.+12     	; 0x2382 <main+0x84>
    2376:	80 91 90 00 	lds	r24, 0x0090
    237a:	90 91 91 00 	lds	r25, 0x0091
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	a1 f3       	breq	.-24     	; 0x236a <main+0x6c>

		HLCD_voidGoTo(0,0);
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	0e 94 24 10 	call	0x2048	; 0x2048 <HLCD_voidGoTo>
		HLCD_voidSendString(Str1);
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	0e 94 47 10 	call	0x208e	; 0x208e <HLCD_voidSendString>
		HLCD_voidDisplayNumber(OnTicks);
    2392:	80 91 92 00 	lds	r24, 0x0092
    2396:	90 91 93 00 	lds	r25, 0x0093
    239a:	cc 01       	movw	r24, r24
    239c:	a0 e0       	ldi	r26, 0x00	; 0
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 70 10 	call	0x20e0	; 0x20e0 <HLCD_voidDisplayNumber>

		HLCD_voidGoTo(1,0);
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	0e 94 24 10 	call	0x2048	; 0x2048 <HLCD_voidGoTo>
		HLCD_voidSendString(Str2);
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	0e 94 47 10 	call	0x208e	; 0x208e <HLCD_voidSendString>
		HLCD_voidDisplayNumber(OffTicks);
    23b8:	80 91 90 00 	lds	r24, 0x0090
    23bc:	90 91 91 00 	lds	r25, 0x0091
    23c0:	cc 01       	movw	r24, r24
    23c2:	a0 e0       	ldi	r26, 0x00	; 0
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 70 10 	call	0x20e0	; 0x20e0 <HLCD_voidDisplayNumber>
		while(OnTicks && OffTicks);
    23ce:	80 91 92 00 	lds	r24, 0x0092
    23d2:	90 91 93 00 	lds	r25, 0x0093
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	41 f2       	breq	.-112    	; 0x236a <main+0x6c>
    23da:	80 91 90 00 	lds	r24, 0x0090
    23de:	90 91 91 00 	lds	r25, 0x0091
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	a1 f7       	brne	.-24     	; 0x23ce <main+0xd0>
    23e6:	c1 cf       	rjmp	.-126    	; 0x236a <main+0x6c>

000023e8 <__vector_1>:
	}

}

ISR(INT0_vect){
    23e8:	1f 92       	push	r1
    23ea:	0f 92       	push	r0
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	0f 92       	push	r0
    23f0:	11 24       	eor	r1, r1
    23f2:	2f 93       	push	r18
    23f4:	3f 93       	push	r19
    23f6:	4f 93       	push	r20
    23f8:	5f 93       	push	r21
    23fa:	6f 93       	push	r22
    23fc:	7f 93       	push	r23
    23fe:	8f 93       	push	r24
    2400:	9f 93       	push	r25
    2402:	af 93       	push	r26
    2404:	bf 93       	push	r27
    2406:	ef 93       	push	r30
    2408:	ff 93       	push	r31
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62

	G_counter++;
    2412:	80 91 8e 00 	lds	r24, 0x008E
    2416:	90 91 8f 00 	lds	r25, 0x008F
    241a:	01 96       	adiw	r24, 0x01	; 1
    241c:	90 93 8f 00 	sts	0x008F, r25
    2420:	80 93 8e 00 	sts	0x008E, r24
	/*Detect Rising Edge*/
	if(G_counter == 1){
    2424:	80 91 8e 00 	lds	r24, 0x008E
    2428:	90 91 8f 00 	lds	r25, 0x008F
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	91 05       	cpc	r25, r1
    2430:	49 f4       	brne	.+18     	; 0x2444 <__vector_1+0x5c>
		MTimer1_voidSetValue(0);
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <MTimer1_voidSetValue>
		MEXTI_voidSenseControl(0,2);
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	62 e0       	ldi	r22, 0x02	; 2
    243e:	0e 94 a3 06 	call	0xd46	; 0xd46 <MEXTI_voidSenseControl>
    2442:	26 c0       	rjmp	.+76     	; 0x2490 <__vector_1+0xa8>
	}
	else if(G_counter == 2){
    2444:	80 91 8e 00 	lds	r24, 0x008E
    2448:	90 91 8f 00 	lds	r25, 0x008F
    244c:	82 30       	cpi	r24, 0x02	; 2
    244e:	91 05       	cpc	r25, r1
    2450:	79 f4       	brne	.+30     	; 0x2470 <__vector_1+0x88>
		/*Get Ton*/
		OnTicks = MTimer1_u16ReadTimer1Value();
    2452:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <MTimer1_u16ReadTimer1Value>
    2456:	90 93 93 00 	sts	0x0093, r25
    245a:	80 93 92 00 	sts	0x0092, r24
		/*Detect next Rising Edge*/
		MEXTI_voidSenseControl(0,3);
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	63 e0       	ldi	r22, 0x03	; 3
    2462:	0e 94 a3 06 	call	0xd46	; 0xd46 <MEXTI_voidSenseControl>
		/*Set Timer1 == 0*/
		MTimer1_voidSetValue(0);
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <MTimer1_voidSetValue>
    246e:	10 c0       	rjmp	.+32     	; 0x2490 <__vector_1+0xa8>
	}
	else if(G_counter == 3){
    2470:	80 91 8e 00 	lds	r24, 0x008E
    2474:	90 91 8f 00 	lds	r25, 0x008F
    2478:	83 30       	cpi	r24, 0x03	; 3
    247a:	91 05       	cpc	r25, r1
    247c:	49 f4       	brne	.+18     	; 0x2490 <__vector_1+0xa8>
		/*Get Toff*/
		OffTicks = MTimer1_u16ReadTimer1Value();
    247e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <MTimer1_u16ReadTimer1Value>
    2482:	90 93 91 00 	sts	0x0091, r25
    2486:	80 93 90 00 	sts	0x0090, r24
		/*Disable INT0*/
		MEXTI_voidDisable(0);
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <MEXTI_voidDisable>
	}
}
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	ff 91       	pop	r31
    2496:	ef 91       	pop	r30
    2498:	bf 91       	pop	r27
    249a:	af 91       	pop	r26
    249c:	9f 91       	pop	r25
    249e:	8f 91       	pop	r24
    24a0:	7f 91       	pop	r23
    24a2:	6f 91       	pop	r22
    24a4:	5f 91       	pop	r21
    24a6:	4f 91       	pop	r20
    24a8:	3f 91       	pop	r19
    24aa:	2f 91       	pop	r18
    24ac:	0f 90       	pop	r0
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	0f 90       	pop	r0
    24b2:	1f 90       	pop	r1
    24b4:	18 95       	reti

000024b6 <__mulsi3>:
    24b6:	62 9f       	mul	r22, r18
    24b8:	d0 01       	movw	r26, r0
    24ba:	73 9f       	mul	r23, r19
    24bc:	f0 01       	movw	r30, r0
    24be:	82 9f       	mul	r24, r18
    24c0:	e0 0d       	add	r30, r0
    24c2:	f1 1d       	adc	r31, r1
    24c4:	64 9f       	mul	r22, r20
    24c6:	e0 0d       	add	r30, r0
    24c8:	f1 1d       	adc	r31, r1
    24ca:	92 9f       	mul	r25, r18
    24cc:	f0 0d       	add	r31, r0
    24ce:	83 9f       	mul	r24, r19
    24d0:	f0 0d       	add	r31, r0
    24d2:	74 9f       	mul	r23, r20
    24d4:	f0 0d       	add	r31, r0
    24d6:	65 9f       	mul	r22, r21
    24d8:	f0 0d       	add	r31, r0
    24da:	99 27       	eor	r25, r25
    24dc:	72 9f       	mul	r23, r18
    24de:	b0 0d       	add	r27, r0
    24e0:	e1 1d       	adc	r30, r1
    24e2:	f9 1f       	adc	r31, r25
    24e4:	63 9f       	mul	r22, r19
    24e6:	b0 0d       	add	r27, r0
    24e8:	e1 1d       	adc	r30, r1
    24ea:	f9 1f       	adc	r31, r25
    24ec:	bd 01       	movw	r22, r26
    24ee:	cf 01       	movw	r24, r30
    24f0:	11 24       	eor	r1, r1
    24f2:	08 95       	ret

000024f4 <__udivmodsi4>:
    24f4:	a1 e2       	ldi	r26, 0x21	; 33
    24f6:	1a 2e       	mov	r1, r26
    24f8:	aa 1b       	sub	r26, r26
    24fa:	bb 1b       	sub	r27, r27
    24fc:	fd 01       	movw	r30, r26
    24fe:	0d c0       	rjmp	.+26     	; 0x251a <__udivmodsi4_ep>

00002500 <__udivmodsi4_loop>:
    2500:	aa 1f       	adc	r26, r26
    2502:	bb 1f       	adc	r27, r27
    2504:	ee 1f       	adc	r30, r30
    2506:	ff 1f       	adc	r31, r31
    2508:	a2 17       	cp	r26, r18
    250a:	b3 07       	cpc	r27, r19
    250c:	e4 07       	cpc	r30, r20
    250e:	f5 07       	cpc	r31, r21
    2510:	20 f0       	brcs	.+8      	; 0x251a <__udivmodsi4_ep>
    2512:	a2 1b       	sub	r26, r18
    2514:	b3 0b       	sbc	r27, r19
    2516:	e4 0b       	sbc	r30, r20
    2518:	f5 0b       	sbc	r31, r21

0000251a <__udivmodsi4_ep>:
    251a:	66 1f       	adc	r22, r22
    251c:	77 1f       	adc	r23, r23
    251e:	88 1f       	adc	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	1a 94       	dec	r1
    2524:	69 f7       	brne	.-38     	; 0x2500 <__udivmodsi4_loop>
    2526:	60 95       	com	r22
    2528:	70 95       	com	r23
    252a:	80 95       	com	r24
    252c:	90 95       	com	r25
    252e:	9b 01       	movw	r18, r22
    2530:	ac 01       	movw	r20, r24
    2532:	bd 01       	movw	r22, r26
    2534:	cf 01       	movw	r24, r30
    2536:	08 95       	ret

00002538 <__divmodsi4>:
    2538:	97 fb       	bst	r25, 7
    253a:	09 2e       	mov	r0, r25
    253c:	05 26       	eor	r0, r21
    253e:	0e d0       	rcall	.+28     	; 0x255c <__divmodsi4_neg1>
    2540:	57 fd       	sbrc	r21, 7
    2542:	04 d0       	rcall	.+8      	; 0x254c <__divmodsi4_neg2>
    2544:	d7 df       	rcall	.-82     	; 0x24f4 <__udivmodsi4>
    2546:	0a d0       	rcall	.+20     	; 0x255c <__divmodsi4_neg1>
    2548:	00 1c       	adc	r0, r0
    254a:	38 f4       	brcc	.+14     	; 0x255a <__divmodsi4_exit>

0000254c <__divmodsi4_neg2>:
    254c:	50 95       	com	r21
    254e:	40 95       	com	r20
    2550:	30 95       	com	r19
    2552:	21 95       	neg	r18
    2554:	3f 4f       	sbci	r19, 0xFF	; 255
    2556:	4f 4f       	sbci	r20, 0xFF	; 255
    2558:	5f 4f       	sbci	r21, 0xFF	; 255

0000255a <__divmodsi4_exit>:
    255a:	08 95       	ret

0000255c <__divmodsi4_neg1>:
    255c:	f6 f7       	brtc	.-4      	; 0x255a <__divmodsi4_exit>
    255e:	90 95       	com	r25
    2560:	80 95       	com	r24
    2562:	70 95       	com	r23
    2564:	61 95       	neg	r22
    2566:	7f 4f       	sbci	r23, 0xFF	; 255
    2568:	8f 4f       	sbci	r24, 0xFF	; 255
    256a:	9f 4f       	sbci	r25, 0xFF	; 255
    256c:	08 95       	ret

0000256e <__prologue_saves__>:
    256e:	2f 92       	push	r2
    2570:	3f 92       	push	r3
    2572:	4f 92       	push	r4
    2574:	5f 92       	push	r5
    2576:	6f 92       	push	r6
    2578:	7f 92       	push	r7
    257a:	8f 92       	push	r8
    257c:	9f 92       	push	r9
    257e:	af 92       	push	r10
    2580:	bf 92       	push	r11
    2582:	cf 92       	push	r12
    2584:	df 92       	push	r13
    2586:	ef 92       	push	r14
    2588:	ff 92       	push	r15
    258a:	0f 93       	push	r16
    258c:	1f 93       	push	r17
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	ca 1b       	sub	r28, r26
    2598:	db 0b       	sbc	r29, r27
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	09 94       	ijmp

000025a6 <__epilogue_restores__>:
    25a6:	2a 88       	ldd	r2, Y+18	; 0x12
    25a8:	39 88       	ldd	r3, Y+17	; 0x11
    25aa:	48 88       	ldd	r4, Y+16	; 0x10
    25ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    25ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    25b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    25b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    25b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    25b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25b8:	b9 84       	ldd	r11, Y+9	; 0x09
    25ba:	c8 84       	ldd	r12, Y+8	; 0x08
    25bc:	df 80       	ldd	r13, Y+7	; 0x07
    25be:	ee 80       	ldd	r14, Y+6	; 0x06
    25c0:	fd 80       	ldd	r15, Y+5	; 0x05
    25c2:	0c 81       	ldd	r16, Y+4	; 0x04
    25c4:	1b 81       	ldd	r17, Y+3	; 0x03
    25c6:	aa 81       	ldd	r26, Y+2	; 0x02
    25c8:	b9 81       	ldd	r27, Y+1	; 0x01
    25ca:	ce 0f       	add	r28, r30
    25cc:	d1 1d       	adc	r29, r1
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	ed 01       	movw	r28, r26
    25da:	08 95       	ret

000025dc <_exit>:
    25dc:	f8 94       	cli

000025de <__stop_program>:
    25de:	ff cf       	rjmp	.-2      	; 0x25de <__stop_program>
