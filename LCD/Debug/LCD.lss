
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00003f48  00003fdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080007a  0080007a  00003ff6  2**0
                  ALLOC
  3 .stab         0000381c  00000000  00000000  00003ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011be  00000000  00000000  00007814  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000089d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ad06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000be07  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cd8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cf0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000da5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <main>
      8a:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e7       	ldi	r22, 0x72	; 114
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <timer0_init>:

#include "timer.h"


void timer0_init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	    	/* Disable Timer 0 */
	    	TCCR0 = DISABLE_MODULE_VALUE;
     ca6:	e3 e5       	ldi	r30, 0x53	; 83
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	10 82       	st	Z, r1
	    	/* Setting pre scaler */
	    	TCCR0 = (PRESCLR1_VALUE);
     cac:	e3 e5       	ldi	r30, 0x53	; 83
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 83       	st	Z, r24
	    	/* Initializing the timer with zero */
	    	TCNT0 = ZER0_INITIALIZER;
     cb4:	e2 e5       	ldi	r30, 0x52	; 82
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	10 82       	st	Z, r1
				/* Timer overflow interrupt enable*/
			TIMSK |=(1<<TOIE0);
     cba:	a9 e5       	ldi	r26, 0x59	; 89
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e9 e5       	ldi	r30, 0x59	; 89
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	81 60       	ori	r24, 0x01	; 1
     cc6:	8c 93       	st	X, r24

	return;
}
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <MTimer_voidTimerInit>:
 * A_u8TimerMode-----> 0 ------> NormalMode
 * A_u8TimerMode-----> 1 ------> Compare
 * A_u8TimerMode-----> 2 ------> Fast PWM
 * */

void MTimer_voidTimerInit(u8 A_u8TimerMode){
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	0f 92       	push	r0
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	89 83       	std	Y+1, r24	; 0x01
	/*Choose Timer Mode*/
	if(A_u8TimerMode == 0){
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	88 23       	and	r24, r24
     cde:	b1 f4       	brne	.+44     	; 0xd0c <MTimer_voidTimerInit+0x3e>
		CLR_BIT(TCCR0,6);
     ce0:	a3 e5       	ldi	r26, 0x53	; 83
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e3 e5       	ldi	r30, 0x53	; 83
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	8f 7b       	andi	r24, 0xBF	; 191
     cec:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);
     cee:	a3 e5       	ldi	r26, 0x53	; 83
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e3 e5       	ldi	r30, 0x53	; 83
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	87 7f       	andi	r24, 0xF7	; 247
     cfa:	8c 93       	st	X, r24

		/*Set Timer Interrupt Enalbe*/
		SET_BIT(TIMSK, 0);
     cfc:	a9 e5       	ldi	r26, 0x59	; 89
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e9 e5       	ldi	r30, 0x59	; 89
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	81 60       	ori	r24, 0x01	; 1
     d08:	8c 93       	st	X, r24
     d0a:	38 c0       	rjmp	.+112    	; 0xd7c <MTimer_voidTimerInit+0xae>

	}
	else if (A_u8TimerMode == 1){
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	b1 f4       	brne	.+44     	; 0xd3e <MTimer_voidTimerInit+0x70>

		CLR_BIT(TCCR0,6);
     d12:	a3 e5       	ldi	r26, 0x53	; 83
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e3 e5       	ldi	r30, 0x53	; 83
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8f 7b       	andi	r24, 0xBF	; 191
     d1e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);
     d20:	a3 e5       	ldi	r26, 0x53	; 83
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e3 e5       	ldi	r30, 0x53	; 83
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	88 60       	ori	r24, 0x08	; 8
     d2c:	8c 93       	st	X, r24

		/*Set Compare Interrupt Enalbe*/
		 SET_BIT(TIMSK, 1);
     d2e:	a9 e5       	ldi	r26, 0x59	; 89
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e9 e5       	ldi	r30, 0x59	; 89
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	82 60       	ori	r24, 0x02	; 2
     d3a:	8c 93       	st	X, r24
     d3c:	1f c0       	rjmp	.+62     	; 0xd7c <MTimer_voidTimerInit+0xae>
	}
	else if(A_u8TimerMode == 2){
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	82 30       	cpi	r24, 0x02	; 2
     d42:	e1 f4       	brne	.+56     	; 0xd7c <MTimer_voidTimerInit+0xae>

		SET_BIT(TCCR0, 6);
     d44:	a3 e5       	ldi	r26, 0x53	; 83
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e3 e5       	ldi	r30, 0x53	; 83
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	80 64       	ori	r24, 0x40	; 64
     d50:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 3);
     d52:	a3 e5       	ldi	r26, 0x53	; 83
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e3 e5       	ldi	r30, 0x53	; 83
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	88 60       	ori	r24, 0x08	; 8
     d5e:	8c 93       	st	X, r24

		/*Set On Top Clear On compare
		 * */
		SET_BIT(TCCR0,5);
     d60:	a3 e5       	ldi	r26, 0x53	; 83
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e3 e5       	ldi	r30, 0x53	; 83
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	80 62       	ori	r24, 0x20	; 32
     d6c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,4);
     d6e:	a3 e5       	ldi	r26, 0x53	; 83
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e3 e5       	ldi	r30, 0x53	; 83
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	8f 7e       	andi	r24, 0xEF	; 239
     d7a:	8c 93       	st	X, r24
	}


}
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <MTimer_voidSetPreloadValue>:


void MTimer_voidSetPreloadValue(u8 A_u8Preload, u8 A_u8TimerMode){
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <MTimer_voidSetPreloadValue+0x6>
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8TimerMode == 0){
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	88 23       	and	r24, r24
     d96:	29 f4       	brne	.+10     	; 0xda2 <MTimer_voidSetPreloadValue+0x1e>
		TCNT0 = A_u8Preload;
     d98:	e2 e5       	ldi	r30, 0x52	; 82
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	80 83       	st	Z, r24
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <MTimer_voidSetPreloadValue+0x26>
	}
	else{
		/*Set Compare Reg Value*/
		OCR0 = A_u8Preload;
     da2:	ec e5       	ldi	r30, 0x5C	; 92
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	80 83       	st	Z, r24
	}
}
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <MTimer_voidStart>:



void MTimer_voidStart(){
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62

	/*Choose Prescaller 8*/
	CLR_BIT(TCCR0,0);
     dbc:	a3 e5       	ldi	r26, 0x53	; 83
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e3 e5       	ldi	r30, 0x53	; 83
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8e 7f       	andi	r24, 0xFE	; 254
     dc8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
     dca:	a3 e5       	ldi	r26, 0x53	; 83
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e3 e5       	ldi	r30, 0x53	; 83
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	82 60       	ori	r24, 0x02	; 2
     dd6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
     dd8:	a3 e5       	ldi	r26, 0x53	; 83
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e3 e5       	ldi	r30, 0x53	; 83
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	8b 7f       	andi	r24, 0xFB	; 251
     de4:	8c 93       	st	X, r24

}
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <MTimer_voidStop>:
void MTimer_voidStop(){
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,0);
     df4:	a3 e5       	ldi	r26, 0x53	; 83
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e3 e5       	ldi	r30, 0x53	; 83
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8e 7f       	andi	r24, 0xFE	; 254
     e00:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
     e02:	a3 e5       	ldi	r26, 0x53	; 83
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e3 e5       	ldi	r30, 0x53	; 83
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	8d 7f       	andi	r24, 0xFD	; 253
     e0e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
     e10:	a3 e5       	ldi	r26, 0x53	; 83
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e3 e5       	ldi	r30, 0x53	; 83
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	8b 7f       	andi	r24, 0xFB	; 251
     e1c:	8c 93       	st	X, r24

}
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <MTimer1_voidInit>:




void MTimer1_voidInit(){
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
	/*Select Ps 8* */
	CLR_BIT(TCCR1B,0);
     e2c:	ae e4       	ldi	r26, 0x4E	; 78
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	ee e4       	ldi	r30, 0x4E	; 78
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8e 7f       	andi	r24, 0xFE	; 254
     e38:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
     e3a:	ae e4       	ldi	r26, 0x4E	; 78
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	ee e4       	ldi	r30, 0x4E	; 78
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	82 60       	ori	r24, 0x02	; 2
     e46:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
     e48:	ae e4       	ldi	r26, 0x4E	; 78
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ee e4       	ldi	r30, 0x4E	; 78
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	8b 7f       	andi	r24, 0xFB	; 251
     e54:	8c 93       	st	X, r24
}
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <MTimer1_voidSetValue>:


void MTimer1_voidSetValue(u16 A_u16Value){
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	00 d0       	rcall	.+0      	; 0xe62 <MTimer1_voidSetValue+0x6>
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = A_u16Value;
     e6a:	ec e4       	ldi	r30, 0x4C	; 76
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	91 83       	std	Z+1, r25	; 0x01
     e74:	80 83       	st	Z, r24
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <MTimer1_u16ReadTimer1Value>:

u16 MTimer1_u16ReadTimer1Value(){
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
     e88:	ec e4       	ldi	r30, 0x4C	; 76
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	91 81       	ldd	r25, Z+1	; 0x01
}
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <MGIE_voidEnable>:

#include "../DIO/DIO_Interface.h"
#include"GIE_Interface.h"

void MGIE_voidEnable()
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     e9e:	af e5       	ldi	r26, 0x5F	; 95
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ef e5       	ldi	r30, 0x5F	; 95
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 68       	ori	r24, 0x80	; 128
     eaa:	8c 93       	st	X, r24


}
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <MGIE_voidDisable>:
void MGIE_voidDisable()
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG,7);
     eba:	af e5       	ldi	r26, 0x5F	; 95
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ef e5       	ldi	r30, 0x5F	; 95
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8f 77       	andi	r24, 0x7F	; 127
     ec6:	8c 93       	st	X, r24

}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <MEXTI_voidSenseControl>:
 * 2--------> Falling
 * 3--------> Rising
 */

// Function to configure the sense control of an external interrupt
void MEXTI_voidSenseControl(u8 A_u8ExtiNumber, u8 A_u8State) {
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	2a 97       	sbiw	r28, 0x0a	; 10
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8ExtiNumber) {
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3a 87       	std	Y+10, r19	; 0x0a
     eee:	29 87       	std	Y+9, r18	; 0x09
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	91 05       	cpc	r25, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <MEXTI_voidSenseControl+0x2e>
     efa:	66 c0       	rjmp	.+204    	; 0xfc8 <MEXTI_voidSenseControl+0xfa>
     efc:	29 85       	ldd	r18, Y+9	; 0x09
     efe:	3a 85       	ldd	r19, Y+10	; 0x0a
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	09 f4       	brne	.+2      	; 0xf08 <MEXTI_voidSenseControl+0x3a>
     f06:	bb c0       	rjmp	.+374    	; 0x107e <MEXTI_voidSenseControl+0x1b0>
     f08:	89 85       	ldd	r24, Y+9	; 0x09
     f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	09 f0       	breq	.+2      	; 0xf12 <MEXTI_voidSenseControl+0x44>
     f10:	d5 c0       	rjmp	.+426    	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
        /*EXTI INT0*/
        case 0:
            switch (A_u8State) {
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	38 87       	std	Y+8, r19	; 0x08
     f1a:	2f 83       	std	Y+7, r18	; 0x07
     f1c:	8f 81       	ldd	r24, Y+7	; 0x07
     f1e:	98 85       	ldd	r25, Y+8	; 0x08
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	91 05       	cpc	r25, r1
     f24:	21 f1       	breq	.+72     	; 0xf6e <MEXTI_voidSenseControl+0xa0>
     f26:	2f 81       	ldd	r18, Y+7	; 0x07
     f28:	38 85       	ldd	r19, Y+8	; 0x08
     f2a:	22 30       	cpi	r18, 0x02	; 2
     f2c:	31 05       	cpc	r19, r1
     f2e:	2c f4       	brge	.+10     	; 0xf3a <MEXTI_voidSenseControl+0x6c>
     f30:	8f 81       	ldd	r24, Y+7	; 0x07
     f32:	98 85       	ldd	r25, Y+8	; 0x08
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	61 f0       	breq	.+24     	; 0xf50 <MEXTI_voidSenseControl+0x82>
     f38:	c1 c0       	rjmp	.+386    	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
     f3a:	2f 81       	ldd	r18, Y+7	; 0x07
     f3c:	38 85       	ldd	r19, Y+8	; 0x08
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	21 f1       	breq	.+72     	; 0xf8c <MEXTI_voidSenseControl+0xbe>
     f44:	8f 81       	ldd	r24, Y+7	; 0x07
     f46:	98 85       	ldd	r25, Y+8	; 0x08
     f48:	83 30       	cpi	r24, 0x03	; 3
     f4a:	91 05       	cpc	r25, r1
     f4c:	71 f1       	breq	.+92     	; 0xfaa <MEXTI_voidSenseControl+0xdc>
     f4e:	b6 c0       	rjmp	.+364    	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
                case 0:
                    CLR_BIT(MCUCR, 0); // Clear ISC00 for low-level trigger
     f50:	a5 e5       	ldi	r26, 0x55	; 85
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e5       	ldi	r30, 0x55	; 85
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8e 7f       	andi	r24, 0xFE	; 254
     f5c:	8c 93       	st	X, r24
                    CLR_BIT(MCUCR, 1); // Clear ISC01 for low-level trigger
     f5e:	a5 e5       	ldi	r26, 0x55	; 85
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e5 e5       	ldi	r30, 0x55	; 85
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	8d 7f       	andi	r24, 0xFD	; 253
     f6a:	8c 93       	st	X, r24
     f6c:	a7 c0       	rjmp	.+334    	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
                    break;

                case 1:
                    SET_BIT(MCUCR, 0); // Set ISC00 for any logical change trigger
     f6e:	a5 e5       	ldi	r26, 0x55	; 85
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e5 e5       	ldi	r30, 0x55	; 85
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	81 60       	ori	r24, 0x01	; 1
     f7a:	8c 93       	st	X, r24
                    CLR_BIT(MCUCR, 1); // Clear ISC01 for any logical change trigger
     f7c:	a5 e5       	ldi	r26, 0x55	; 85
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e5 e5       	ldi	r30, 0x55	; 85
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8d 7f       	andi	r24, 0xFD	; 253
     f88:	8c 93       	st	X, r24
     f8a:	98 c0       	rjmp	.+304    	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
                    break;

                case 2:
                    CLR_BIT(MCUCR, 0); // Clear ISC00 for falling edge trigger
     f8c:	a5 e5       	ldi	r26, 0x55	; 85
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e5       	ldi	r30, 0x55	; 85
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8e 7f       	andi	r24, 0xFE	; 254
     f98:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, 1); // Set ISC01 for falling edge trigger
     f9a:	a5 e5       	ldi	r26, 0x55	; 85
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e5 e5       	ldi	r30, 0x55	; 85
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	82 60       	ori	r24, 0x02	; 2
     fa6:	8c 93       	st	X, r24
     fa8:	89 c0       	rjmp	.+274    	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
                    break;

                case 3:
                    SET_BIT(MCUCR, 0); // Set ISC00 for rising edge trigger
     faa:	a5 e5       	ldi	r26, 0x55	; 85
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e5 e5       	ldi	r30, 0x55	; 85
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	81 60       	ori	r24, 0x01	; 1
     fb6:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, 1); // Set ISC01 for rising edge trigger
     fb8:	a5 e5       	ldi	r26, 0x55	; 85
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e5 e5       	ldi	r30, 0x55	; 85
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	82 60       	ori	r24, 0x02	; 2
     fc4:	8c 93       	st	X, r24
     fc6:	7a c0       	rjmp	.+244    	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
                    break;
            }
            break;
        /*EXTI INT1*/
        case 1:
            switch (A_u8State) {
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	3e 83       	std	Y+6, r19	; 0x06
     fd0:	2d 83       	std	Y+5, r18	; 0x05
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	91 05       	cpc	r25, r1
     fda:	21 f1       	breq	.+72     	; 0x1024 <MEXTI_voidSenseControl+0x156>
     fdc:	2d 81       	ldd	r18, Y+5	; 0x05
     fde:	3e 81       	ldd	r19, Y+6	; 0x06
     fe0:	22 30       	cpi	r18, 0x02	; 2
     fe2:	31 05       	cpc	r19, r1
     fe4:	2c f4       	brge	.+10     	; 0xff0 <MEXTI_voidSenseControl+0x122>
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	61 f0       	breq	.+24     	; 0x1006 <MEXTI_voidSenseControl+0x138>
     fee:	66 c0       	rjmp	.+204    	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
     ff0:	2d 81       	ldd	r18, Y+5	; 0x05
     ff2:	3e 81       	ldd	r19, Y+6	; 0x06
     ff4:	22 30       	cpi	r18, 0x02	; 2
     ff6:	31 05       	cpc	r19, r1
     ff8:	21 f1       	breq	.+72     	; 0x1042 <MEXTI_voidSenseControl+0x174>
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	83 30       	cpi	r24, 0x03	; 3
    1000:	91 05       	cpc	r25, r1
    1002:	71 f1       	breq	.+92     	; 0x1060 <MEXTI_voidSenseControl+0x192>
    1004:	5b c0       	rjmp	.+182    	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
                case 0:
                    CLR_BIT(MCUCR, 2); // Clear ISC10 for low-level trigger
    1006:	a5 e5       	ldi	r26, 0x55	; 85
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e5 e5       	ldi	r30, 0x55	; 85
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8b 7f       	andi	r24, 0xFB	; 251
    1012:	8c 93       	st	X, r24
                    CLR_BIT(MCUCR, 3); // Clear ISC11 for low-level trigger
    1014:	a5 e5       	ldi	r26, 0x55	; 85
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e5 e5       	ldi	r30, 0x55	; 85
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	87 7f       	andi	r24, 0xF7	; 247
    1020:	8c 93       	st	X, r24
    1022:	4c c0       	rjmp	.+152    	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
                    break;

                case 1:
                    SET_BIT(MCUCR, 2); // Set ISC10 for any logical change trigger
    1024:	a5 e5       	ldi	r26, 0x55	; 85
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e5 e5       	ldi	r30, 0x55	; 85
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	84 60       	ori	r24, 0x04	; 4
    1030:	8c 93       	st	X, r24
                    CLR_BIT(MCUCR, 3); // Clear ISC11 for any logical change trigger
    1032:	a5 e5       	ldi	r26, 0x55	; 85
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e5 e5       	ldi	r30, 0x55	; 85
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	87 7f       	andi	r24, 0xF7	; 247
    103e:	8c 93       	st	X, r24
    1040:	3d c0       	rjmp	.+122    	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
                    break;

                case 2:
                    CLR_BIT(MCUCR, 2); // Clear ISC10 for falling edge trigger
    1042:	a5 e5       	ldi	r26, 0x55	; 85
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e5 e5       	ldi	r30, 0x55	; 85
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8b 7f       	andi	r24, 0xFB	; 251
    104e:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, 3); // Set ISC11 for falling edge trigger
    1050:	a5 e5       	ldi	r26, 0x55	; 85
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e5 e5       	ldi	r30, 0x55	; 85
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	88 60       	ori	r24, 0x08	; 8
    105c:	8c 93       	st	X, r24
    105e:	2e c0       	rjmp	.+92     	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
                    break;

                case 3:
                    SET_BIT(MCUCR, 2); // Set ISC10 for rising edge trigger
    1060:	a5 e5       	ldi	r26, 0x55	; 85
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e5 e5       	ldi	r30, 0x55	; 85
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	84 60       	ori	r24, 0x04	; 4
    106c:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, 3); // Set ISC11 for rising edge trigger
    106e:	a5 e5       	ldi	r26, 0x55	; 85
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e5       	ldi	r30, 0x55	; 85
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	88 60       	ori	r24, 0x08	; 8
    107a:	8c 93       	st	X, r24
    107c:	1f c0       	rjmp	.+62     	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
                    break;
            }
            break;
        /*EXTI INT2*/
        case 2:
            switch (A_u8State) {
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	3c 83       	std	Y+4, r19	; 0x04
    1086:	2b 83       	std	Y+3, r18	; 0x03
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	91 05       	cpc	r25, r1
    1090:	31 f0       	breq	.+12     	; 0x109e <MEXTI_voidSenseControl+0x1d0>
    1092:	2b 81       	ldd	r18, Y+3	; 0x03
    1094:	3c 81       	ldd	r19, Y+4	; 0x04
    1096:	23 30       	cpi	r18, 0x03	; 3
    1098:	31 05       	cpc	r19, r1
    109a:	49 f0       	breq	.+18     	; 0x10ae <MEXTI_voidSenseControl+0x1e0>
    109c:	0f c0       	rjmp	.+30     	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
                case 2:
                    CLR_BIT(MCUCSR, 6); // Clear ISC2 for falling edge trigger
    109e:	a4 e5       	ldi	r26, 0x54	; 84
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e4 e5       	ldi	r30, 0x54	; 84
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7b       	andi	r24, 0xBF	; 191
    10aa:	8c 93       	st	X, r24
    10ac:	07 c0       	rjmp	.+14     	; 0x10bc <MEXTI_voidSenseControl+0x1ee>
                    break;
                case 3:
                    SET_BIT(MCUCSR, 6); // Set ISC2 for rising edge trigger
    10ae:	a4 e5       	ldi	r26, 0x54	; 84
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e4 e5       	ldi	r30, 0x54	; 84
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	80 64       	ori	r24, 0x40	; 64
    10ba:	8c 93       	st	X, r24
                    break;
            }
            break;
    }

}
    10bc:	2a 96       	adiw	r28, 0x0a	; 10
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <MEXTI_voidEnable>:

// Function to enable the specified external interrupt
void MEXTI_voidEnable(u8 A_u8ExtiNumber) {
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <MEXTI_voidEnable+0x6>
    10d4:	0f 92       	push	r0
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8ExtiNumber) {
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3b 83       	std	Y+3, r19	; 0x03
    10e4:	2a 83       	std	Y+2, r18	; 0x02
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	91 05       	cpc	r25, r1
    10ee:	89 f0       	breq	.+34     	; 0x1112 <MEXTI_voidEnable+0x44>
    10f0:	2a 81       	ldd	r18, Y+2	; 0x02
    10f2:	3b 81       	ldd	r19, Y+3	; 0x03
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	a1 f0       	breq	.+40     	; 0x1122 <MEXTI_voidEnable+0x54>
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	9b 81       	ldd	r25, Y+3	; 0x03
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	b9 f4       	brne	.+46     	; 0x1130 <MEXTI_voidEnable+0x62>
        case 0:
            SET_BIT(GICR, 6); // Enable INT0
    1102:	ab e5       	ldi	r26, 0x5B	; 91
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	eb e5       	ldi	r30, 0x5B	; 91
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	80 64       	ori	r24, 0x40	; 64
    110e:	8c 93       	st	X, r24
    1110:	0f c0       	rjmp	.+30     	; 0x1130 <MEXTI_voidEnable+0x62>
            break;
        case 1:
            SET_BIT(GICR, 7); // Enable INT1
    1112:	ab e5       	ldi	r26, 0x5B	; 91
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	eb e5       	ldi	r30, 0x5B	; 91
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	80 68       	ori	r24, 0x80	; 128
    111e:	8c 93       	st	X, r24
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <MEXTI_voidEnable+0x62>
            break;
        case 2:
            SET_BIT(GICR, 5); // Enable INT2
    1122:	ab e5       	ldi	r26, 0x5B	; 91
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e5       	ldi	r30, 0x5B	; 91
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 62       	ori	r24, 0x20	; 32
    112e:	8c 93       	st	X, r24
            break;
    }
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <MEXTI_voidDisable>:

// Function to disable the specified external interrupt
void MEXTI_voidDisable(u8 A_u8ExtiNumber) {
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <MEXTI_voidDisable+0x6>
    1142:	0f 92       	push	r0
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8ExtiNumber) {
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3b 83       	std	Y+3, r19	; 0x03
    1152:	2a 83       	std	Y+2, r18	; 0x02
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	9b 81       	ldd	r25, Y+3	; 0x03
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	91 05       	cpc	r25, r1
    115c:	89 f0       	breq	.+34     	; 0x1180 <MEXTI_voidDisable+0x44>
    115e:	2a 81       	ldd	r18, Y+2	; 0x02
    1160:	3b 81       	ldd	r19, Y+3	; 0x03
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	a1 f0       	breq	.+40     	; 0x1190 <MEXTI_voidDisable+0x54>
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	9b 81       	ldd	r25, Y+3	; 0x03
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	b9 f4       	brne	.+46     	; 0x119e <MEXTI_voidDisable+0x62>
        case 0:
            CLR_BIT(GICR, 6); // Disable INT0
    1170:	ab e5       	ldi	r26, 0x5B	; 91
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	eb e5       	ldi	r30, 0x5B	; 91
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8f 7b       	andi	r24, 0xBF	; 191
    117c:	8c 93       	st	X, r24
    117e:	0f c0       	rjmp	.+30     	; 0x119e <MEXTI_voidDisable+0x62>
            break;
        case 1:
            CLR_BIT(GICR, 7); // Disable INT1
    1180:	ab e5       	ldi	r26, 0x5B	; 91
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	eb e5       	ldi	r30, 0x5B	; 91
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8f 77       	andi	r24, 0x7F	; 127
    118c:	8c 93       	st	X, r24
    118e:	07 c0       	rjmp	.+14     	; 0x119e <MEXTI_voidDisable+0x62>
            break;
        case 2:
            CLR_BIT(GICR, 5); // Disable INT2
    1190:	ab e5       	ldi	r26, 0x5B	; 91
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	eb e5       	ldi	r30, 0x5B	; 91
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	8f 7d       	andi	r24, 0xDF	; 223
    119c:	8c 93       	st	X, r24
            break;
    }
}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <MDIO_voidSetPinDirection>:
#include<avr/io.h>
#include"DIO_Interface.h"



void  MDIO_voidSetPinDirection(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Dir){
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	2d 97       	sbiw	r28, 0x0d	; 13
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	6a 83       	std	Y+2, r22	; 0x02
    11c2:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortNumber){
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	3d 87       	std	Y+13, r19	; 0x0d
    11cc:	2c 87       	std	Y+12, r18	; 0x0c
    11ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    11d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    11d2:	82 34       	cpi	r24, 0x42	; 66
    11d4:	91 05       	cpc	r25, r1
    11d6:	09 f4       	brne	.+2      	; 0x11da <MDIO_voidSetPinDirection+0x30>
    11d8:	50 c0       	rjmp	.+160    	; 0x127a <MDIO_voidSetPinDirection+0xd0>
    11da:	2c 85       	ldd	r18, Y+12	; 0x0c
    11dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    11de:	23 34       	cpi	r18, 0x43	; 67
    11e0:	31 05       	cpc	r19, r1
    11e2:	34 f4       	brge	.+12     	; 0x11f0 <MDIO_voidSetPinDirection+0x46>
    11e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    11e8:	81 34       	cpi	r24, 0x41	; 65
    11ea:	91 05       	cpc	r25, r1
    11ec:	71 f0       	breq	.+28     	; 0x120a <MDIO_voidSetPinDirection+0x60>
    11ee:	ec c0       	rjmp	.+472    	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
    11f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    11f2:	3d 85       	ldd	r19, Y+13	; 0x0d
    11f4:	23 34       	cpi	r18, 0x43	; 67
    11f6:	31 05       	cpc	r19, r1
    11f8:	09 f4       	brne	.+2      	; 0x11fc <MDIO_voidSetPinDirection+0x52>
    11fa:	77 c0       	rjmp	.+238    	; 0x12ea <MDIO_voidSetPinDirection+0x140>
    11fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    11fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1200:	84 34       	cpi	r24, 0x44	; 68
    1202:	91 05       	cpc	r25, r1
    1204:	09 f4       	brne	.+2      	; 0x1208 <MDIO_voidSetPinDirection+0x5e>
    1206:	a9 c0       	rjmp	.+338    	; 0x135a <MDIO_voidSetPinDirection+0x1b0>
    1208:	df c0       	rjmp	.+446    	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
		case 'A':
			switch(A_u8Dir){
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3b 87       	std	Y+11, r19	; 0x0b
    1212:	2a 87       	std	Y+10, r18	; 0x0a
    1214:	8a 85       	ldd	r24, Y+10	; 0x0a
    1216:	9b 85       	ldd	r25, Y+11	; 0x0b
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	31 f0       	breq	.+12     	; 0x1228 <MDIO_voidSetPinDirection+0x7e>
    121c:	2a 85       	ldd	r18, Y+10	; 0x0a
    121e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1220:	21 30       	cpi	r18, 0x01	; 1
    1222:	31 05       	cpc	r19, r1
    1224:	b1 f0       	breq	.+44     	; 0x1252 <MDIO_voidSetPinDirection+0xa8>
    1226:	d0 c0       	rjmp	.+416    	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRA , A_u8PinNumber);break;
    1228:	aa e3       	ldi	r26, 0x3A	; 58
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ea e3       	ldi	r30, 0x3A	; 58
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <MDIO_voidSetPinDirection+0x9c>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <MDIO_voidSetPinDirection+0x98>
    124a:	80 95       	com	r24
    124c:	84 23       	and	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	bb c0       	rjmp	.+374    	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRA, A_u8PinNumber); break;
    1252:	aa e3       	ldi	r26, 0x3A	; 58
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ea e3       	ldi	r30, 0x3A	; 58
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <MDIO_voidSetPinDirection+0xc6>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <MDIO_voidSetPinDirection+0xc2>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	a7 c0       	rjmp	.+334    	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'B':
			switch(A_u8Dir){
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	39 87       	std	Y+9, r19	; 0x09
    1282:	28 87       	std	Y+8, r18	; 0x08
    1284:	88 85       	ldd	r24, Y+8	; 0x08
    1286:	99 85       	ldd	r25, Y+9	; 0x09
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	31 f0       	breq	.+12     	; 0x1298 <MDIO_voidSetPinDirection+0xee>
    128c:	28 85       	ldd	r18, Y+8	; 0x08
    128e:	39 85       	ldd	r19, Y+9	; 0x09
    1290:	21 30       	cpi	r18, 0x01	; 1
    1292:	31 05       	cpc	r19, r1
    1294:	b1 f0       	breq	.+44     	; 0x12c2 <MDIO_voidSetPinDirection+0x118>
    1296:	98 c0       	rjmp	.+304    	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRB , A_u8PinNumber);break;
    1298:	a7 e3       	ldi	r26, 0x37	; 55
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e7 e3       	ldi	r30, 0x37	; 55
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <MDIO_voidSetPinDirection+0x10c>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <MDIO_voidSetPinDirection+0x108>
    12ba:	80 95       	com	r24
    12bc:	84 23       	and	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	83 c0       	rjmp	.+262    	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRB, A_u8PinNumber); break;
    12c2:	a7 e3       	ldi	r26, 0x37	; 55
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e7 e3       	ldi	r30, 0x37	; 55
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <MDIO_voidSetPinDirection+0x136>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <MDIO_voidSetPinDirection+0x132>
    12e4:	84 2b       	or	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	6f c0       	rjmp	.+222    	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'C':
			switch(A_u8Dir){
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3f 83       	std	Y+7, r19	; 0x07
    12f2:	2e 83       	std	Y+6, r18	; 0x06
    12f4:	8e 81       	ldd	r24, Y+6	; 0x06
    12f6:	9f 81       	ldd	r25, Y+7	; 0x07
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	31 f0       	breq	.+12     	; 0x1308 <MDIO_voidSetPinDirection+0x15e>
    12fc:	2e 81       	ldd	r18, Y+6	; 0x06
    12fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1300:	21 30       	cpi	r18, 0x01	; 1
    1302:	31 05       	cpc	r19, r1
    1304:	b1 f0       	breq	.+44     	; 0x1332 <MDIO_voidSetPinDirection+0x188>
    1306:	60 c0       	rjmp	.+192    	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRC , A_u8PinNumber);break;
    1308:	a4 e3       	ldi	r26, 0x34	; 52
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e4 e3       	ldi	r30, 0x34	; 52
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <MDIO_voidSetPinDirection+0x17c>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <MDIO_voidSetPinDirection+0x178>
    132a:	80 95       	com	r24
    132c:	84 23       	and	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	4b c0       	rjmp	.+150    	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRC, A_u8PinNumber); break;
    1332:	a4 e3       	ldi	r26, 0x34	; 52
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e4 e3       	ldi	r30, 0x34	; 52
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <MDIO_voidSetPinDirection+0x1a6>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <MDIO_voidSetPinDirection+0x1a2>
    1354:	84 2b       	or	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	37 c0       	rjmp	.+110    	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'D':
			switch(A_u8Dir){
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3d 83       	std	Y+5, r19	; 0x05
    1362:	2c 83       	std	Y+4, r18	; 0x04
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	31 f0       	breq	.+12     	; 0x1378 <MDIO_voidSetPinDirection+0x1ce>
    136c:	2c 81       	ldd	r18, Y+4	; 0x04
    136e:	3d 81       	ldd	r19, Y+5	; 0x05
    1370:	21 30       	cpi	r18, 0x01	; 1
    1372:	31 05       	cpc	r19, r1
    1374:	b1 f0       	breq	.+44     	; 0x13a2 <MDIO_voidSetPinDirection+0x1f8>
    1376:	28 c0       	rjmp	.+80     	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRD , A_u8PinNumber);break;
    1378:	a1 e3       	ldi	r26, 0x31	; 49
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e1 e3       	ldi	r30, 0x31	; 49
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <MDIO_voidSetPinDirection+0x1ec>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <MDIO_voidSetPinDirection+0x1e8>
    139a:	80 95       	com	r24
    139c:	84 23       	and	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	13 c0       	rjmp	.+38     	; 0x13c8 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRD, A_u8PinNumber); break;
    13a2:	a1 e3       	ldi	r26, 0x31	; 49
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e1 e3       	ldi	r30, 0x31	; 49
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <MDIO_voidSetPinDirection+0x216>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <MDIO_voidSetPinDirection+0x212>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
			}
		break;
	}

}
    13c8:	2d 96       	adiw	r28, 0x0d	; 13
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8PinValue){
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	2d 97       	sbiw	r28, 0x0d	; 13
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	6a 83       	std	Y+2, r22	; 0x02
    13f2:	4b 83       	std	Y+3, r20	; 0x03

	switch(A_u8PortNumber){
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3d 87       	std	Y+13, r19	; 0x0d
    13fc:	2c 87       	std	Y+12, r18	; 0x0c
    13fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1400:	9d 85       	ldd	r25, Y+13	; 0x0d
    1402:	82 34       	cpi	r24, 0x42	; 66
    1404:	91 05       	cpc	r25, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <MDIO_voidSetPinValue+0x30>
    1408:	50 c0       	rjmp	.+160    	; 0x14aa <MDIO_voidSetPinValue+0xd0>
    140a:	2c 85       	ldd	r18, Y+12	; 0x0c
    140c:	3d 85       	ldd	r19, Y+13	; 0x0d
    140e:	23 34       	cpi	r18, 0x43	; 67
    1410:	31 05       	cpc	r19, r1
    1412:	34 f4       	brge	.+12     	; 0x1420 <MDIO_voidSetPinValue+0x46>
    1414:	8c 85       	ldd	r24, Y+12	; 0x0c
    1416:	9d 85       	ldd	r25, Y+13	; 0x0d
    1418:	81 34       	cpi	r24, 0x41	; 65
    141a:	91 05       	cpc	r25, r1
    141c:	71 f0       	breq	.+28     	; 0x143a <MDIO_voidSetPinValue+0x60>
    141e:	ec c0       	rjmp	.+472    	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
    1420:	2c 85       	ldd	r18, Y+12	; 0x0c
    1422:	3d 85       	ldd	r19, Y+13	; 0x0d
    1424:	23 34       	cpi	r18, 0x43	; 67
    1426:	31 05       	cpc	r19, r1
    1428:	09 f4       	brne	.+2      	; 0x142c <MDIO_voidSetPinValue+0x52>
    142a:	77 c0       	rjmp	.+238    	; 0x151a <MDIO_voidSetPinValue+0x140>
    142c:	8c 85       	ldd	r24, Y+12	; 0x0c
    142e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1430:	84 34       	cpi	r24, 0x44	; 68
    1432:	91 05       	cpc	r25, r1
    1434:	09 f4       	brne	.+2      	; 0x1438 <MDIO_voidSetPinValue+0x5e>
    1436:	a9 c0       	rjmp	.+338    	; 0x158a <MDIO_voidSetPinValue+0x1b0>
    1438:	df c0       	rjmp	.+446    	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
		case 'A':
			switch(A_u8PinValue){
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3b 87       	std	Y+11, r19	; 0x0b
    1442:	2a 87       	std	Y+10, r18	; 0x0a
    1444:	8a 85       	ldd	r24, Y+10	; 0x0a
    1446:	9b 85       	ldd	r25, Y+11	; 0x0b
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	31 f0       	breq	.+12     	; 0x1458 <MDIO_voidSetPinValue+0x7e>
    144c:	2a 85       	ldd	r18, Y+10	; 0x0a
    144e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1450:	21 30       	cpi	r18, 0x01	; 1
    1452:	31 05       	cpc	r19, r1
    1454:	b1 f0       	breq	.+44     	; 0x1482 <MDIO_voidSetPinValue+0xa8>
    1456:	d0 c0       	rjmp	.+416    	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTA , A_u8PinNumber); break;
    1458:	ab e3       	ldi	r26, 0x3B	; 59
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	eb e3       	ldi	r30, 0x3B	; 59
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <MDIO_voidSetPinValue+0x9c>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <MDIO_voidSetPinValue+0x98>
    147a:	80 95       	com	r24
    147c:	84 23       	and	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	bb c0       	rjmp	.+374    	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTA, A_u8PinNumber); break;
    1482:	ab e3       	ldi	r26, 0x3B	; 59
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	eb e3       	ldi	r30, 0x3B	; 59
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <MDIO_voidSetPinValue+0xc6>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <MDIO_voidSetPinValue+0xc2>
    14a4:	84 2b       	or	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	a7 c0       	rjmp	.+334    	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'B':
			switch(A_u8PinValue){
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	39 87       	std	Y+9, r19	; 0x09
    14b2:	28 87       	std	Y+8, r18	; 0x08
    14b4:	88 85       	ldd	r24, Y+8	; 0x08
    14b6:	99 85       	ldd	r25, Y+9	; 0x09
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	31 f0       	breq	.+12     	; 0x14c8 <MDIO_voidSetPinValue+0xee>
    14bc:	28 85       	ldd	r18, Y+8	; 0x08
    14be:	39 85       	ldd	r19, Y+9	; 0x09
    14c0:	21 30       	cpi	r18, 0x01	; 1
    14c2:	31 05       	cpc	r19, r1
    14c4:	b1 f0       	breq	.+44     	; 0x14f2 <MDIO_voidSetPinValue+0x118>
    14c6:	98 c0       	rjmp	.+304    	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTB , A_u8PinNumber); break;
    14c8:	a8 e3       	ldi	r26, 0x38	; 56
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e8 e3       	ldi	r30, 0x38	; 56
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <MDIO_voidSetPinValue+0x10c>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <MDIO_voidSetPinValue+0x108>
    14ea:	80 95       	com	r24
    14ec:	84 23       	and	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	83 c0       	rjmp	.+262    	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTB, A_u8PinNumber); break;
    14f2:	a8 e3       	ldi	r26, 0x38	; 56
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e8 e3       	ldi	r30, 0x38	; 56
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <MDIO_voidSetPinValue+0x136>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <MDIO_voidSetPinValue+0x132>
    1514:	84 2b       	or	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	6f c0       	rjmp	.+222    	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
			}

		break;

		case 'C':
			switch(A_u8PinValue){
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	3f 83       	std	Y+7, r19	; 0x07
    1522:	2e 83       	std	Y+6, r18	; 0x06
    1524:	8e 81       	ldd	r24, Y+6	; 0x06
    1526:	9f 81       	ldd	r25, Y+7	; 0x07
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	31 f0       	breq	.+12     	; 0x1538 <MDIO_voidSetPinValue+0x15e>
    152c:	2e 81       	ldd	r18, Y+6	; 0x06
    152e:	3f 81       	ldd	r19, Y+7	; 0x07
    1530:	21 30       	cpi	r18, 0x01	; 1
    1532:	31 05       	cpc	r19, r1
    1534:	b1 f0       	breq	.+44     	; 0x1562 <MDIO_voidSetPinValue+0x188>
    1536:	60 c0       	rjmp	.+192    	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTC , A_u8PinNumber); break;
    1538:	a5 e3       	ldi	r26, 0x35	; 53
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e5 e3       	ldi	r30, 0x35	; 53
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <MDIO_voidSetPinValue+0x17c>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <MDIO_voidSetPinValue+0x178>
    155a:	80 95       	com	r24
    155c:	84 23       	and	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	4b c0       	rjmp	.+150    	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTC, A_u8PinNumber); break;
    1562:	a5 e3       	ldi	r26, 0x35	; 53
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e3       	ldi	r30, 0x35	; 53
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <MDIO_voidSetPinValue+0x1a6>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <MDIO_voidSetPinValue+0x1a2>
    1584:	84 2b       	or	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	37 c0       	rjmp	.+110    	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'D':
			switch(A_u8PinValue){
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	3d 83       	std	Y+5, r19	; 0x05
    1592:	2c 83       	std	Y+4, r18	; 0x04
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	9d 81       	ldd	r25, Y+5	; 0x05
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	31 f0       	breq	.+12     	; 0x15a8 <MDIO_voidSetPinValue+0x1ce>
    159c:	2c 81       	ldd	r18, Y+4	; 0x04
    159e:	3d 81       	ldd	r19, Y+5	; 0x05
    15a0:	21 30       	cpi	r18, 0x01	; 1
    15a2:	31 05       	cpc	r19, r1
    15a4:	b1 f0       	breq	.+44     	; 0x15d2 <MDIO_voidSetPinValue+0x1f8>
    15a6:	28 c0       	rjmp	.+80     	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTD , A_u8PinNumber); break;
    15a8:	a2 e3       	ldi	r26, 0x32	; 50
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e2 e3       	ldi	r30, 0x32	; 50
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <MDIO_voidSetPinValue+0x1ec>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <MDIO_voidSetPinValue+0x1e8>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	13 c0       	rjmp	.+38     	; 0x15f8 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTD, A_u8PinNumber); break;
    15d2:	a2 e3       	ldi	r26, 0x32	; 50
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e2 e3       	ldi	r30, 0x32	; 50
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <MDIO_voidSetPinValue+0x216>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <MDIO_voidSetPinValue+0x212>
    15f4:	84 2b       	or	r24, r20
    15f6:	8c 93       	st	X, r24
			}
		break;
	}
}
    15f8:	2d 96       	adiw	r28, 0x0d	; 13
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <MDIO_voidSetPortDirection>:



void MDIO_voidSetPortDirection(u8 A_u8PortNumber, u8 A_u8PortDir){
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <MDIO_voidSetPortDirection+0x6>
    1610:	00 d0       	rcall	.+0      	; 0x1612 <MDIO_voidSetPortDirection+0x8>
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3c 83       	std	Y+4, r19	; 0x04
    1622:	2b 83       	std	Y+3, r18	; 0x03
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	82 34       	cpi	r24, 0x42	; 66
    162a:	91 05       	cpc	r25, r1
    162c:	d9 f0       	breq	.+54     	; 0x1664 <MDIO_voidSetPortDirection+0x5a>
    162e:	2b 81       	ldd	r18, Y+3	; 0x03
    1630:	3c 81       	ldd	r19, Y+4	; 0x04
    1632:	23 34       	cpi	r18, 0x43	; 67
    1634:	31 05       	cpc	r19, r1
    1636:	34 f4       	brge	.+12     	; 0x1644 <MDIO_voidSetPortDirection+0x3a>
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	81 34       	cpi	r24, 0x41	; 65
    163e:	91 05       	cpc	r25, r1
    1640:	61 f0       	breq	.+24     	; 0x165a <MDIO_voidSetPortDirection+0x50>
    1642:	1e c0       	rjmp	.+60     	; 0x1680 <MDIO_voidSetPortDirection+0x76>
    1644:	2b 81       	ldd	r18, Y+3	; 0x03
    1646:	3c 81       	ldd	r19, Y+4	; 0x04
    1648:	23 34       	cpi	r18, 0x43	; 67
    164a:	31 05       	cpc	r19, r1
    164c:	81 f0       	breq	.+32     	; 0x166e <MDIO_voidSetPortDirection+0x64>
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	84 34       	cpi	r24, 0x44	; 68
    1654:	91 05       	cpc	r25, r1
    1656:	81 f0       	breq	.+32     	; 0x1678 <MDIO_voidSetPortDirection+0x6e>
    1658:	13 c0       	rjmp	.+38     	; 0x1680 <MDIO_voidSetPortDirection+0x76>
		case 'A': DDRA = A_u8PortDir; break;
    165a:	ea e3       	ldi	r30, 0x3A	; 58
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	80 83       	st	Z, r24
    1662:	0e c0       	rjmp	.+28     	; 0x1680 <MDIO_voidSetPortDirection+0x76>
		case 'B': DDRB = A_u8PortDir; break;
    1664:	e7 e3       	ldi	r30, 0x37	; 55
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	80 83       	st	Z, r24
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <MDIO_voidSetPortDirection+0x76>
		case 'C': DDRC = A_u8PortDir; break;
    166e:	e4 e3       	ldi	r30, 0x34	; 52
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	80 83       	st	Z, r24
    1676:	04 c0       	rjmp	.+8      	; 0x1680 <MDIO_voidSetPortDirection+0x76>
		case 'D': DDRD = A_u8PortDir; break;
    1678:	e1 e3       	ldi	r30, 0x31	; 49
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	80 83       	st	Z, r24
	}
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortNumber, u8 A_u8PortValue){
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	00 d0       	rcall	.+0      	; 0x1694 <MDIO_voidSetPortValue+0x6>
    1694:	00 d0       	rcall	.+0      	; 0x1696 <MDIO_voidSetPortValue+0x8>
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	3c 83       	std	Y+4, r19	; 0x04
    16a6:	2b 83       	std	Y+3, r18	; 0x03
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	9c 81       	ldd	r25, Y+4	; 0x04
    16ac:	82 34       	cpi	r24, 0x42	; 66
    16ae:	91 05       	cpc	r25, r1
    16b0:	d9 f0       	breq	.+54     	; 0x16e8 <MDIO_voidSetPortValue+0x5a>
    16b2:	2b 81       	ldd	r18, Y+3	; 0x03
    16b4:	3c 81       	ldd	r19, Y+4	; 0x04
    16b6:	23 34       	cpi	r18, 0x43	; 67
    16b8:	31 05       	cpc	r19, r1
    16ba:	34 f4       	brge	.+12     	; 0x16c8 <MDIO_voidSetPortValue+0x3a>
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	81 34       	cpi	r24, 0x41	; 65
    16c2:	91 05       	cpc	r25, r1
    16c4:	61 f0       	breq	.+24     	; 0x16de <MDIO_voidSetPortValue+0x50>
    16c6:	1e c0       	rjmp	.+60     	; 0x1704 <MDIO_voidSetPortValue+0x76>
    16c8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ca:	3c 81       	ldd	r19, Y+4	; 0x04
    16cc:	23 34       	cpi	r18, 0x43	; 67
    16ce:	31 05       	cpc	r19, r1
    16d0:	81 f0       	breq	.+32     	; 0x16f2 <MDIO_voidSetPortValue+0x64>
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	84 34       	cpi	r24, 0x44	; 68
    16d8:	91 05       	cpc	r25, r1
    16da:	81 f0       	breq	.+32     	; 0x16fc <MDIO_voidSetPortValue+0x6e>
    16dc:	13 c0       	rjmp	.+38     	; 0x1704 <MDIO_voidSetPortValue+0x76>
		case 'A':PORTA = A_u8PortValue; break;
    16de:	eb e3       	ldi	r30, 0x3B	; 59
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	80 83       	st	Z, r24
    16e6:	0e c0       	rjmp	.+28     	; 0x1704 <MDIO_voidSetPortValue+0x76>
		case 'B':PORTB = A_u8PortValue; break;
    16e8:	e8 e3       	ldi	r30, 0x38	; 56
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	80 83       	st	Z, r24
    16f0:	09 c0       	rjmp	.+18     	; 0x1704 <MDIO_voidSetPortValue+0x76>
		case 'C':PORTC = A_u8PortValue; break;
    16f2:	e5 e3       	ldi	r30, 0x35	; 53
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	80 83       	st	Z, r24
    16fa:	04 c0       	rjmp	.+8      	; 0x1704 <MDIO_voidSetPortValue+0x76>
		case 'D':PORTD = A_u8PortValue; break;
    16fc:	e2 e3       	ldi	r30, 0x32	; 50
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	80 83       	st	Z, r24
	}
}
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <MDIO_u8GetPinValue>:





u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber){
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	00 d0       	rcall	.+0      	; 0x1718 <MDIO_u8GetPinValue+0x6>
    1718:	00 d0       	rcall	.+0      	; 0x171a <MDIO_u8GetPinValue+0x8>
    171a:	0f 92       	push	r0
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	8a 83       	std	Y+2, r24	; 0x02
    1722:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Result;

	if(A_u8PinNumber < 8){
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	88 30       	cpi	r24, 0x08	; 8
    1728:	08 f0       	brcs	.+2      	; 0x172c <MDIO_u8GetPinValue+0x1a>
    172a:	68 c0       	rjmp	.+208    	; 0x17fc <MDIO_u8GetPinValue+0xea>
		switch(A_u8PortNumber){
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	3d 83       	std	Y+5, r19	; 0x05
    1734:	2c 83       	std	Y+4, r18	; 0x04
    1736:	4c 81       	ldd	r20, Y+4	; 0x04
    1738:	5d 81       	ldd	r21, Y+5	; 0x05
    173a:	42 34       	cpi	r20, 0x42	; 66
    173c:	51 05       	cpc	r21, r1
    173e:	41 f1       	breq	.+80     	; 0x1790 <MDIO_u8GetPinValue+0x7e>
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	9d 81       	ldd	r25, Y+5	; 0x05
    1744:	83 34       	cpi	r24, 0x43	; 67
    1746:	91 05       	cpc	r25, r1
    1748:	34 f4       	brge	.+12     	; 0x1756 <MDIO_u8GetPinValue+0x44>
    174a:	2c 81       	ldd	r18, Y+4	; 0x04
    174c:	3d 81       	ldd	r19, Y+5	; 0x05
    174e:	21 34       	cpi	r18, 0x41	; 65
    1750:	31 05       	cpc	r19, r1
    1752:	61 f0       	breq	.+24     	; 0x176c <MDIO_u8GetPinValue+0x5a>
    1754:	55 c0       	rjmp	.+170    	; 0x1800 <MDIO_u8GetPinValue+0xee>
    1756:	4c 81       	ldd	r20, Y+4	; 0x04
    1758:	5d 81       	ldd	r21, Y+5	; 0x05
    175a:	43 34       	cpi	r20, 0x43	; 67
    175c:	51 05       	cpc	r21, r1
    175e:	51 f1       	breq	.+84     	; 0x17b4 <MDIO_u8GetPinValue+0xa2>
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	9d 81       	ldd	r25, Y+5	; 0x05
    1764:	84 34       	cpi	r24, 0x44	; 68
    1766:	91 05       	cpc	r25, r1
    1768:	b9 f1       	breq	.+110    	; 0x17d8 <MDIO_u8GetPinValue+0xc6>
    176a:	4a c0       	rjmp	.+148    	; 0x1800 <MDIO_u8GetPinValue+0xee>
			case 'A':Local_u8Result =  GET_BIT(PINA, A_u8PinNumber);break;
    176c:	e9 e3       	ldi	r30, 0x39	; 57
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	88 2f       	mov	r24, r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a9 01       	movw	r20, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <MDIO_u8GetPinValue+0x72>
    1780:	55 95       	asr	r21
    1782:	47 95       	ror	r20
    1784:	8a 95       	dec	r24
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <MDIO_u8GetPinValue+0x6e>
    1788:	ca 01       	movw	r24, r20
    178a:	81 70       	andi	r24, 0x01	; 1
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	38 c0       	rjmp	.+112    	; 0x1800 <MDIO_u8GetPinValue+0xee>
			case 'B':Local_u8Result =  GET_BIT(PINB, A_u8PinNumber); break;
    1790:	e6 e3       	ldi	r30, 0x36	; 54
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a9 01       	movw	r20, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <MDIO_u8GetPinValue+0x96>
    17a4:	55 95       	asr	r21
    17a6:	47 95       	ror	r20
    17a8:	8a 95       	dec	r24
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <MDIO_u8GetPinValue+0x92>
    17ac:	ca 01       	movw	r24, r20
    17ae:	81 70       	andi	r24, 0x01	; 1
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	26 c0       	rjmp	.+76     	; 0x1800 <MDIO_u8GetPinValue+0xee>
			case 'C':Local_u8Result =  GET_BIT(PINC, A_u8PinNumber); break;
    17b4:	e3 e3       	ldi	r30, 0x33	; 51
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	88 2f       	mov	r24, r24
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a9 01       	movw	r20, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <MDIO_u8GetPinValue+0xba>
    17c8:	55 95       	asr	r21
    17ca:	47 95       	ror	r20
    17cc:	8a 95       	dec	r24
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <MDIO_u8GetPinValue+0xb6>
    17d0:	ca 01       	movw	r24, r20
    17d2:	81 70       	andi	r24, 0x01	; 1
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	14 c0       	rjmp	.+40     	; 0x1800 <MDIO_u8GetPinValue+0xee>
			case 'D':Local_u8Result =  GET_BIT(PIND, A_u8PinNumber); break;
    17d8:	e0 e3       	ldi	r30, 0x30	; 48
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	a9 01       	movw	r20, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <MDIO_u8GetPinValue+0xde>
    17ec:	55 95       	asr	r21
    17ee:	47 95       	ror	r20
    17f0:	8a 95       	dec	r24
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <MDIO_u8GetPinValue+0xda>
    17f4:	ca 01       	movw	r24, r20
    17f6:	81 70       	andi	r24, 0x01	; 1
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <MDIO_u8GetPinValue+0xee>
		}
	}
	else {
		Local_u8Result = 255;
    17fc:	8f ef       	ldi	r24, 0xFF	; 255
    17fe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
    1800:	89 81       	ldd	r24, Y+1	; 0x01
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <lcd_init>:
*purpose       	: initialize LCD pins as output
*				 		and seting up the operation mode(4-bit)
*						default setting (cursor on)
*/
void lcd_init(void)
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	e8 97       	sbiw	r28, 0x38	; 56
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61

	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
    1826:	ea e3       	ldi	r30, 0x3A	; 58
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 ef       	ldi	r24, 0xF0	; 240
    182c:	80 83       	st	Z, r24
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
    182e:	a7 e3       	ldi	r26, 0x37	; 55
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e7 e3       	ldi	r30, 0x37	; 55
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	8e 60       	ori	r24, 0x0E	; 14
    183a:	8c 93       	st	X, r24

	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
    183c:	eb e3       	ldi	r30, 0x3B	; 59
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 e2       	ldi	r24, 0x20	; 32
    1842:	80 83       	st	Z, r24
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
    1844:	a8 e3       	ldi	r26, 0x38	; 56
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e8 e3       	ldi	r30, 0x38	; 56
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	88 60       	ori	r24, 0x08	; 8
    1850:	8c 93       	st	X, r24
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a0 ea       	ldi	r26, 0xA0	; 160
    1858:	b0 e4       	ldi	r27, 0x40	; 64
    185a:	8d ab       	std	Y+53, r24	; 0x35
    185c:	9e ab       	std	Y+54, r25	; 0x36
    185e:	af ab       	std	Y+55, r26	; 0x37
    1860:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1862:	6d a9       	ldd	r22, Y+53	; 0x35
    1864:	7e a9       	ldd	r23, Y+54	; 0x36
    1866:	8f a9       	ldd	r24, Y+55	; 0x37
    1868:	98 ad       	ldd	r25, Y+56	; 0x38
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	4a ef       	ldi	r20, 0xFA	; 250
    1870:	54 e4       	ldi	r21, 0x44	; 68
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	89 ab       	std	Y+49, r24	; 0x31
    187c:	9a ab       	std	Y+50, r25	; 0x32
    187e:	ab ab       	std	Y+51, r26	; 0x33
    1880:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1882:	69 a9       	ldd	r22, Y+49	; 0x31
    1884:	7a a9       	ldd	r23, Y+50	; 0x32
    1886:	8b a9       	ldd	r24, Y+51	; 0x33
    1888:	9c a9       	ldd	r25, Y+52	; 0x34
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	5f e3       	ldi	r21, 0x3F	; 63
    1892:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1896:	88 23       	and	r24, r24
    1898:	2c f4       	brge	.+10     	; 0x18a4 <lcd_init+0x92>
		__ticks = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	98 ab       	std	Y+48, r25	; 0x30
    18a0:	8f a7       	std	Y+47, r24	; 0x2f
    18a2:	3f c0       	rjmp	.+126    	; 0x1922 <lcd_init+0x110>
	else if (__tmp > 65535)
    18a4:	69 a9       	ldd	r22, Y+49	; 0x31
    18a6:	7a a9       	ldd	r23, Y+50	; 0x32
    18a8:	8b a9       	ldd	r24, Y+51	; 0x33
    18aa:	9c a9       	ldd	r25, Y+52	; 0x34
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	3f ef       	ldi	r19, 0xFF	; 255
    18b0:	4f e7       	ldi	r20, 0x7F	; 127
    18b2:	57 e4       	ldi	r21, 0x47	; 71
    18b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	4c f5       	brge	.+82     	; 0x190e <lcd_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18bc:	6d a9       	ldd	r22, Y+53	; 0x35
    18be:	7e a9       	ldd	r23, Y+54	; 0x36
    18c0:	8f a9       	ldd	r24, Y+55	; 0x37
    18c2:	98 ad       	ldd	r25, Y+56	; 0x38
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e2       	ldi	r20, 0x20	; 32
    18ca:	51 e4       	ldi	r21, 0x41	; 65
    18cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	98 ab       	std	Y+48, r25	; 0x30
    18e2:	8f a7       	std	Y+47, r24	; 0x2f
    18e4:	0f c0       	rjmp	.+30     	; 0x1904 <lcd_init+0xf2>
    18e6:	88 ec       	ldi	r24, 0xC8	; 200
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9e a7       	std	Y+46, r25	; 0x2e
    18ec:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    18f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <lcd_init+0xe0>
    18f6:	9e a7       	std	Y+46, r25	; 0x2e
    18f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    18fc:	98 a9       	ldd	r25, Y+48	; 0x30
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	98 ab       	std	Y+48, r25	; 0x30
    1902:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1904:	8f a5       	ldd	r24, Y+47	; 0x2f
    1906:	98 a9       	ldd	r25, Y+48	; 0x30
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	69 f7       	brne	.-38     	; 0x18e6 <lcd_init+0xd4>
    190c:	14 c0       	rjmp	.+40     	; 0x1936 <lcd_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190e:	69 a9       	ldd	r22, Y+49	; 0x31
    1910:	7a a9       	ldd	r23, Y+50	; 0x32
    1912:	8b a9       	ldd	r24, Y+51	; 0x33
    1914:	9c a9       	ldd	r25, Y+52	; 0x34
    1916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	98 ab       	std	Y+48, r25	; 0x30
    1920:	8f a7       	std	Y+47, r24	; 0x2f
    1922:	8f a5       	ldd	r24, Y+47	; 0x2f
    1924:	98 a9       	ldd	r25, Y+48	; 0x30
    1926:	9c a7       	std	Y+44, r25	; 0x2c
    1928:	8b a7       	std	Y+43, r24	; 0x2b
    192a:	8b a5       	ldd	r24, Y+43	; 0x2b
    192c:	9c a5       	ldd	r25, Y+44	; 0x2c
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <lcd_init+0x11c>
    1932:	9c a7       	std	Y+44, r25	; 0x2c
    1934:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    1936:	a8 e3       	ldi	r26, 0x38	; 56
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e8 e3       	ldi	r30, 0x38	; 56
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	87 7f       	andi	r24, 0xF7	; 247
    1942:	8c 93       	st	X, r24
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	a0 ea       	ldi	r26, 0xA0	; 160
    194a:	b0 e4       	ldi	r27, 0x40	; 64
    194c:	8f a3       	std	Y+39, r24	; 0x27
    194e:	98 a7       	std	Y+40, r25	; 0x28
    1950:	a9 a7       	std	Y+41, r26	; 0x29
    1952:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1954:	6f a1       	ldd	r22, Y+39	; 0x27
    1956:	78 a5       	ldd	r23, Y+40	; 0x28
    1958:	89 a5       	ldd	r24, Y+41	; 0x29
    195a:	9a a5       	ldd	r25, Y+42	; 0x2a
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	4a ef       	ldi	r20, 0xFA	; 250
    1962:	54 e4       	ldi	r21, 0x44	; 68
    1964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	8b a3       	std	Y+35, r24	; 0x23
    196e:	9c a3       	std	Y+36, r25	; 0x24
    1970:	ad a3       	std	Y+37, r26	; 0x25
    1972:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1974:	6b a1       	ldd	r22, Y+35	; 0x23
    1976:	7c a1       	ldd	r23, Y+36	; 0x24
    1978:	8d a1       	ldd	r24, Y+37	; 0x25
    197a:	9e a1       	ldd	r25, Y+38	; 0x26
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e8       	ldi	r20, 0x80	; 128
    1982:	5f e3       	ldi	r21, 0x3F	; 63
    1984:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1988:	88 23       	and	r24, r24
    198a:	2c f4       	brge	.+10     	; 0x1996 <lcd_init+0x184>
		__ticks = 1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9a a3       	std	Y+34, r25	; 0x22
    1992:	89 a3       	std	Y+33, r24	; 0x21
    1994:	3f c0       	rjmp	.+126    	; 0x1a14 <lcd_init+0x202>
	else if (__tmp > 65535)
    1996:	6b a1       	ldd	r22, Y+35	; 0x23
    1998:	7c a1       	ldd	r23, Y+36	; 0x24
    199a:	8d a1       	ldd	r24, Y+37	; 0x25
    199c:	9e a1       	ldd	r25, Y+38	; 0x26
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	3f ef       	ldi	r19, 0xFF	; 255
    19a2:	4f e7       	ldi	r20, 0x7F	; 127
    19a4:	57 e4       	ldi	r21, 0x47	; 71
    19a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19aa:	18 16       	cp	r1, r24
    19ac:	4c f5       	brge	.+82     	; 0x1a00 <lcd_init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ae:	6f a1       	ldd	r22, Y+39	; 0x27
    19b0:	78 a5       	ldd	r23, Y+40	; 0x28
    19b2:	89 a5       	ldd	r24, Y+41	; 0x29
    19b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e2       	ldi	r20, 0x20	; 32
    19bc:	51 e4       	ldi	r21, 0x41	; 65
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	bc 01       	movw	r22, r24
    19c8:	cd 01       	movw	r24, r26
    19ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	9a a3       	std	Y+34, r25	; 0x22
    19d4:	89 a3       	std	Y+33, r24	; 0x21
    19d6:	0f c0       	rjmp	.+30     	; 0x19f6 <lcd_init+0x1e4>
    19d8:	88 ec       	ldi	r24, 0xC8	; 200
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	98 a3       	std	Y+32, r25	; 0x20
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
    19e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19e2:	98 a1       	ldd	r25, Y+32	; 0x20
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <lcd_init+0x1d2>
    19e8:	98 a3       	std	Y+32, r25	; 0x20
    19ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ec:	89 a1       	ldd	r24, Y+33	; 0x21
    19ee:	9a a1       	ldd	r25, Y+34	; 0x22
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	9a a3       	std	Y+34, r25	; 0x22
    19f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f6:	89 a1       	ldd	r24, Y+33	; 0x21
    19f8:	9a a1       	ldd	r25, Y+34	; 0x22
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	69 f7       	brne	.-38     	; 0x19d8 <lcd_init+0x1c6>
    19fe:	14 c0       	rjmp	.+40     	; 0x1a28 <lcd_init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a00:	6b a1       	ldd	r22, Y+35	; 0x23
    1a02:	7c a1       	ldd	r23, Y+36	; 0x24
    1a04:	8d a1       	ldd	r24, Y+37	; 0x25
    1a06:	9e a1       	ldd	r25, Y+38	; 0x26
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9a a3       	std	Y+34, r25	; 0x22
    1a12:	89 a3       	std	Y+33, r24	; 0x21
    1a14:	89 a1       	ldd	r24, Y+33	; 0x21
    1a16:	9a a1       	ldd	r25, Y+34	; 0x22
    1a18:	9e 8f       	std	Y+30, r25	; 0x1e
    1a1a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <lcd_init+0x20e>
    1a24:	9e 8f       	std	Y+30, r25	; 0x1e
    1a26:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
    1a28:	88 e2       	ldi	r24, 0x28	; 40
    1a2a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <lcd_send_command>
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a0 ea       	ldi	r26, 0xA0	; 160
    1a34:	b0 e4       	ldi	r27, 0x40	; 64
    1a36:	89 8f       	std	Y+25, r24	; 0x19
    1a38:	9a 8f       	std	Y+26, r25	; 0x1a
    1a3a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a ef       	ldi	r20, 0xFA	; 250
    1a4c:	54 e4       	ldi	r21, 0x44	; 68
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	8d 8b       	std	Y+21, r24	; 0x15
    1a58:	9e 8b       	std	Y+22, r25	; 0x16
    1a5a:	af 8b       	std	Y+23, r26	; 0x17
    1a5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a60:	7e 89       	ldd	r23, Y+22	; 0x16
    1a62:	8f 89       	ldd	r24, Y+23	; 0x17
    1a64:	98 8d       	ldd	r25, Y+24	; 0x18
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <lcd_init+0x26e>
		__ticks = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9c 8b       	std	Y+20, r25	; 0x14
    1a7c:	8b 8b       	std	Y+19, r24	; 0x13
    1a7e:	3f c0       	rjmp	.+126    	; 0x1afe <lcd_init+0x2ec>
	else if (__tmp > 65535)
    1a80:	6d 89       	ldd	r22, Y+21	; 0x15
    1a82:	7e 89       	ldd	r23, Y+22	; 0x16
    1a84:	8f 89       	ldd	r24, Y+23	; 0x17
    1a86:	98 8d       	ldd	r25, Y+24	; 0x18
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	4f e7       	ldi	r20, 0x7F	; 127
    1a8e:	57 e4       	ldi	r21, 0x47	; 71
    1a90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	4c f5       	brge	.+82     	; 0x1aea <lcd_init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a98:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e2       	ldi	r20, 0x20	; 32
    1aa6:	51 e4       	ldi	r21, 0x41	; 65
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9c 8b       	std	Y+20, r25	; 0x14
    1abe:	8b 8b       	std	Y+19, r24	; 0x13
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <lcd_init+0x2ce>
    1ac2:	88 ec       	ldi	r24, 0xC8	; 200
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9a 8b       	std	Y+18, r25	; 0x12
    1ac8:	89 8b       	std	Y+17, r24	; 0x11
    1aca:	89 89       	ldd	r24, Y+17	; 0x11
    1acc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <lcd_init+0x2bc>
    1ad2:	9a 8b       	std	Y+18, r25	; 0x12
    1ad4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	9c 8b       	std	Y+20, r25	; 0x14
    1ade:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	69 f7       	brne	.-38     	; 0x1ac2 <lcd_init+0x2b0>
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <lcd_init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aea:	6d 89       	ldd	r22, Y+21	; 0x15
    1aec:	7e 89       	ldd	r23, Y+22	; 0x16
    1aee:	8f 89       	ldd	r24, Y+23	; 0x17
    1af0:	98 8d       	ldd	r25, Y+24	; 0x18
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9c 8b       	std	Y+20, r25	; 0x14
    1afc:	8b 8b       	std	Y+19, r24	; 0x13
    1afe:	8b 89       	ldd	r24, Y+19	; 0x13
    1b00:	9c 89       	ldd	r25, Y+20	; 0x14
    1b02:	98 8b       	std	Y+16, r25	; 0x10
    1b04:	8f 87       	std	Y+15, r24	; 0x0f
    1b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b08:	98 89       	ldd	r25, Y+16	; 0x10
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <lcd_init+0x2f8>
    1b0e:	98 8b       	std	Y+16, r25	; 0x10
    1b10:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	lcd_send_command(LCD_CMD_DISPLAY_CURSOR_BLINK);
    1b12:	8f e0       	ldi	r24, 0x0F	; 15
    1b14:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <lcd_send_command>
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a0 ea       	ldi	r26, 0xA0	; 160
    1b1e:	b0 e4       	ldi	r27, 0x40	; 64
    1b20:	8b 87       	std	Y+11, r24	; 0x0b
    1b22:	9c 87       	std	Y+12, r25	; 0x0c
    1b24:	ad 87       	std	Y+13, r26	; 0x0d
    1b26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	4a ef       	ldi	r20, 0xFA	; 250
    1b36:	54 e4       	ldi	r21, 0x44	; 68
    1b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	8f 83       	std	Y+7, r24	; 0x07
    1b42:	98 87       	std	Y+8, r25	; 0x08
    1b44:	a9 87       	std	Y+9, r26	; 0x09
    1b46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b48:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4a:	78 85       	ldd	r23, Y+8	; 0x08
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e8       	ldi	r20, 0x80	; 128
    1b56:	5f e3       	ldi	r21, 0x3F	; 63
    1b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b5c:	88 23       	and	r24, r24
    1b5e:	2c f4       	brge	.+10     	; 0x1b6a <lcd_init+0x358>
		__ticks = 1;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	3f c0       	rjmp	.+126    	; 0x1be8 <lcd_init+0x3d6>
	else if (__tmp > 65535)
    1b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6c:	78 85       	ldd	r23, Y+8	; 0x08
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	3f ef       	ldi	r19, 0xFF	; 255
    1b76:	4f e7       	ldi	r20, 0x7F	; 127
    1b78:	57 e4       	ldi	r21, 0x47	; 71
    1b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b7e:	18 16       	cp	r1, r24
    1b80:	4c f5       	brge	.+82     	; 0x1bd4 <lcd_init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	51 e4       	ldi	r21, 0x41	; 65
    1b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	9e 83       	std	Y+6, r25	; 0x06
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
    1baa:	0f c0       	rjmp	.+30     	; 0x1bca <lcd_init+0x3b8>
    1bac:	88 ec       	ldi	r24, 0xC8	; 200
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <lcd_init+0x3a6>
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	69 f7       	brne	.-38     	; 0x1bac <lcd_init+0x39a>
    1bd2:	14 c0       	rjmp	.+40     	; 0x1bfc <lcd_init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <lcd_init+0x3e2>
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	lcd_send_command(0x80);
    1bfc:	80 e8       	ldi	r24, 0x80	; 128
    1bfe:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <lcd_send_command>

}
    1c02:	e8 96       	adiw	r28, 0x38	; 56
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <lcd_send_command>:
*purpose       	: sending a command to LCD by sending
*				 		the first nibble then the second nibble
*						enabling and disabling the LCD in between
*/
void lcd_send_command (uint8_t command)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	e9 97       	sbiw	r28, 0x39	; 57
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	89 af       	std	Y+57, r24	; 0x39
	DATA_BUS=((command&0b11110000));
    1c2a:	eb e3       	ldi	r30, 0x3B	; 59
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c30:	80 7f       	andi	r24, 0xF0	; 240
    1c32:	80 83       	st	Z, r24
	CTL_BUS &=~(1<<LCD_RS);
    1c34:	a8 e3       	ldi	r26, 0x38	; 56
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e8 e3       	ldi	r30, 0x38	; 56
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8d 7f       	andi	r24, 0xFD	; 253
    1c40:	8c 93       	st	X, r24
	CTL_BUS |=(1<<LCD_EN);
    1c42:	a8 e3       	ldi	r26, 0x38	; 56
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e8 e3       	ldi	r30, 0x38	; 56
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	88 60       	ori	r24, 0x08	; 8
    1c4e:	8c 93       	st	X, r24
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a0 ea       	ldi	r26, 0xA0	; 160
    1c56:	b0 e4       	ldi	r27, 0x40	; 64
    1c58:	8d ab       	std	Y+53, r24	; 0x35
    1c5a:	9e ab       	std	Y+54, r25	; 0x36
    1c5c:	af ab       	std	Y+55, r26	; 0x37
    1c5e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c60:	6d a9       	ldd	r22, Y+53	; 0x35
    1c62:	7e a9       	ldd	r23, Y+54	; 0x36
    1c64:	8f a9       	ldd	r24, Y+55	; 0x37
    1c66:	98 ad       	ldd	r25, Y+56	; 0x38
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	4a ef       	ldi	r20, 0xFA	; 250
    1c6e:	54 e4       	ldi	r21, 0x44	; 68
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	89 ab       	std	Y+49, r24	; 0x31
    1c7a:	9a ab       	std	Y+50, r25	; 0x32
    1c7c:	ab ab       	std	Y+51, r26	; 0x33
    1c7e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c80:	69 a9       	ldd	r22, Y+49	; 0x31
    1c82:	7a a9       	ldd	r23, Y+50	; 0x32
    1c84:	8b a9       	ldd	r24, Y+51	; 0x33
    1c86:	9c a9       	ldd	r25, Y+52	; 0x34
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <lcd_send_command+0x8e>
		__ticks = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	98 ab       	std	Y+48, r25	; 0x30
    1c9e:	8f a7       	std	Y+47, r24	; 0x2f
    1ca0:	3f c0       	rjmp	.+126    	; 0x1d20 <lcd_send_command+0x10c>
	else if (__tmp > 65535)
    1ca2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca8:	9c a9       	ldd	r25, Y+52	; 0x34
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	4c f5       	brge	.+82     	; 0x1d0c <lcd_send_command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cba:	6d a9       	ldd	r22, Y+53	; 0x35
    1cbc:	7e a9       	ldd	r23, Y+54	; 0x36
    1cbe:	8f a9       	ldd	r24, Y+55	; 0x37
    1cc0:	98 ad       	ldd	r25, Y+56	; 0x38
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	98 ab       	std	Y+48, r25	; 0x30
    1ce0:	8f a7       	std	Y+47, r24	; 0x2f
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <lcd_send_command+0xee>
    1ce4:	88 ec       	ldi	r24, 0xC8	; 200
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9e a7       	std	Y+46, r25	; 0x2e
    1cea:	8d a7       	std	Y+45, r24	; 0x2d
    1cec:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cee:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <lcd_send_command+0xdc>
    1cf4:	9e a7       	std	Y+46, r25	; 0x2e
    1cf6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cfa:	98 a9       	ldd	r25, Y+48	; 0x30
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	98 ab       	std	Y+48, r25	; 0x30
    1d00:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d04:	98 a9       	ldd	r25, Y+48	; 0x30
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <lcd_send_command+0xd0>
    1d0a:	14 c0       	rjmp	.+40     	; 0x1d34 <lcd_send_command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d10:	8b a9       	ldd	r24, Y+51	; 0x33
    1d12:	9c a9       	ldd	r25, Y+52	; 0x34
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	98 ab       	std	Y+48, r25	; 0x30
    1d1e:	8f a7       	std	Y+47, r24	; 0x2f
    1d20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d22:	98 a9       	ldd	r25, Y+48	; 0x30
    1d24:	9c a7       	std	Y+44, r25	; 0x2c
    1d26:	8b a7       	std	Y+43, r24	; 0x2b
    1d28:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <lcd_send_command+0x118>
    1d30:	9c a7       	std	Y+44, r25	; 0x2c
    1d32:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    1d34:	a8 e3       	ldi	r26, 0x38	; 56
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e8 e3       	ldi	r30, 0x38	; 56
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	87 7f       	andi	r24, 0xF7	; 247
    1d40:	8c 93       	st	X, r24
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a0 ea       	ldi	r26, 0xA0	; 160
    1d48:	b0 e4       	ldi	r27, 0x40	; 64
    1d4a:	8f a3       	std	Y+39, r24	; 0x27
    1d4c:	98 a7       	std	Y+40, r25	; 0x28
    1d4e:	a9 a7       	std	Y+41, r26	; 0x29
    1d50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	6f a1       	ldd	r22, Y+39	; 0x27
    1d54:	78 a5       	ldd	r23, Y+40	; 0x28
    1d56:	89 a5       	ldd	r24, Y+41	; 0x29
    1d58:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a ef       	ldi	r20, 0xFA	; 250
    1d60:	54 e4       	ldi	r21, 0x44	; 68
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8b a3       	std	Y+35, r24	; 0x23
    1d6c:	9c a3       	std	Y+36, r25	; 0x24
    1d6e:	ad a3       	std	Y+37, r26	; 0x25
    1d70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d72:	6b a1       	ldd	r22, Y+35	; 0x23
    1d74:	7c a1       	ldd	r23, Y+36	; 0x24
    1d76:	8d a1       	ldd	r24, Y+37	; 0x25
    1d78:	9e a1       	ldd	r25, Y+38	; 0x26
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <lcd_send_command+0x180>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9a a3       	std	Y+34, r25	; 0x22
    1d90:	89 a3       	std	Y+33, r24	; 0x21
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <lcd_send_command+0x1fe>
	else if (__tmp > 65535)
    1d94:	6b a1       	ldd	r22, Y+35	; 0x23
    1d96:	7c a1       	ldd	r23, Y+36	; 0x24
    1d98:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <lcd_send_command+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	6f a1       	ldd	r22, Y+39	; 0x27
    1dae:	78 a5       	ldd	r23, Y+40	; 0x28
    1db0:	89 a5       	ldd	r24, Y+41	; 0x29
    1db2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9a a3       	std	Y+34, r25	; 0x22
    1dd2:	89 a3       	std	Y+33, r24	; 0x21
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <lcd_send_command+0x1e0>
    1dd6:	88 ec       	ldi	r24, 0xC8	; 200
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	98 a3       	std	Y+32, r25	; 0x20
    1ddc:	8f 8f       	std	Y+31, r24	; 0x1f
    1dde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de0:	98 a1       	ldd	r25, Y+32	; 0x20
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <lcd_send_command+0x1ce>
    1de6:	98 a3       	std	Y+32, r25	; 0x20
    1de8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	89 a1       	ldd	r24, Y+33	; 0x21
    1dec:	9a a1       	ldd	r25, Y+34	; 0x22
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	9a a3       	std	Y+34, r25	; 0x22
    1df2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	89 a1       	ldd	r24, Y+33	; 0x21
    1df6:	9a a1       	ldd	r25, Y+34	; 0x22
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <lcd_send_command+0x1c2>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <lcd_send_command+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1e00:	7c a1       	ldd	r23, Y+36	; 0x24
    1e02:	8d a1       	ldd	r24, Y+37	; 0x25
    1e04:	9e a1       	ldd	r25, Y+38	; 0x26
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9a a3       	std	Y+34, r25	; 0x22
    1e10:	89 a3       	std	Y+33, r24	; 0x21
    1e12:	89 a1       	ldd	r24, Y+33	; 0x21
    1e14:	9a a1       	ldd	r25, Y+34	; 0x22
    1e16:	9e 8f       	std	Y+30, r25	; 0x1e
    1e18:	8d 8f       	std	Y+29, r24	; 0x1d
    1e1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <lcd_send_command+0x20a>
    1e22:	9e 8f       	std	Y+30, r25	; 0x1e
    1e24:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DATA_BUS=((command&0b00001111)<<4);
    1e26:	eb e3       	ldi	r30, 0x3B	; 59
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	89 ad       	ldd	r24, Y+57	; 0x39
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	82 95       	swap	r24
    1e32:	92 95       	swap	r25
    1e34:	90 7f       	andi	r25, 0xF0	; 240
    1e36:	98 27       	eor	r25, r24
    1e38:	80 7f       	andi	r24, 0xF0	; 240
    1e3a:	98 27       	eor	r25, r24
    1e3c:	80 83       	st	Z, r24
	CTL_BUS |=(1<<LCD_EN);
    1e3e:	a8 e3       	ldi	r26, 0x38	; 56
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e8 e3       	ldi	r30, 0x38	; 56
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	88 60       	ori	r24, 0x08	; 8
    1e4a:	8c 93       	st	X, r24
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a0 ea       	ldi	r26, 0xA0	; 160
    1e52:	b0 e4       	ldi	r27, 0x40	; 64
    1e54:	89 8f       	std	Y+25, r24	; 0x19
    1e56:	9a 8f       	std	Y+26, r25	; 0x1a
    1e58:	ab 8f       	std	Y+27, r26	; 0x1b
    1e5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	4a ef       	ldi	r20, 0xFA	; 250
    1e6a:	54 e4       	ldi	r21, 0x44	; 68
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8d 8b       	std	Y+21, r24	; 0x15
    1e76:	9e 8b       	std	Y+22, r25	; 0x16
    1e78:	af 8b       	std	Y+23, r26	; 0x17
    1e7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e80:	8f 89       	ldd	r24, Y+23	; 0x17
    1e82:	98 8d       	ldd	r25, Y+24	; 0x18
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e90:	88 23       	and	r24, r24
    1e92:	2c f4       	brge	.+10     	; 0x1e9e <lcd_send_command+0x28a>
		__ticks = 1;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c 8b       	std	Y+20, r25	; 0x14
    1e9a:	8b 8b       	std	Y+19, r24	; 0x13
    1e9c:	3f c0       	rjmp	.+126    	; 0x1f1c <lcd_send_command+0x308>
	else if (__tmp > 65535)
    1e9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	3f ef       	ldi	r19, 0xFF	; 255
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	57 e4       	ldi	r21, 0x47	; 71
    1eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	4c f5       	brge	.+82     	; 0x1f08 <lcd_send_command+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ebc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e2       	ldi	r20, 0x20	; 32
    1ec4:	51 e4       	ldi	r21, 0x41	; 65
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
    1ede:	0f c0       	rjmp	.+30     	; 0x1efe <lcd_send_command+0x2ea>
    1ee0:	88 ec       	ldi	r24, 0xC8	; 200
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9a 8b       	std	Y+18, r25	; 0x12
    1ee6:	89 8b       	std	Y+17, r24	; 0x11
    1ee8:	89 89       	ldd	r24, Y+17	; 0x11
    1eea:	9a 89       	ldd	r25, Y+18	; 0x12
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <lcd_send_command+0x2d8>
    1ef0:	9a 8b       	std	Y+18, r25	; 0x12
    1ef2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	9c 8b       	std	Y+20, r25	; 0x14
    1efc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	69 f7       	brne	.-38     	; 0x1ee0 <lcd_send_command+0x2cc>
    1f06:	14 c0       	rjmp	.+40     	; 0x1f30 <lcd_send_command+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f08:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9c 8b       	std	Y+20, r25	; 0x14
    1f1a:	8b 8b       	std	Y+19, r24	; 0x13
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	98 8b       	std	Y+16, r25	; 0x10
    1f22:	8f 87       	std	Y+15, r24	; 0x0f
    1f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f26:	98 89       	ldd	r25, Y+16	; 0x10
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <lcd_send_command+0x314>
    1f2c:	98 8b       	std	Y+16, r25	; 0x10
    1f2e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    1f30:	a8 e3       	ldi	r26, 0x38	; 56
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e8 e3       	ldi	r30, 0x38	; 56
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	87 7f       	andi	r24, 0xF7	; 247
    1f3c:	8c 93       	st	X, r24
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a0 ea       	ldi	r26, 0xA0	; 160
    1f44:	b0 e4       	ldi	r27, 0x40	; 64
    1f46:	8b 87       	std	Y+11, r24	; 0x0b
    1f48:	9c 87       	std	Y+12, r25	; 0x0c
    1f4a:	ad 87       	std	Y+13, r26	; 0x0d
    1f4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	4a ef       	ldi	r20, 0xFA	; 250
    1f5c:	54 e4       	ldi	r21, 0x44	; 68
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	8f 83       	std	Y+7, r24	; 0x07
    1f68:	98 87       	std	Y+8, r25	; 0x08
    1f6a:	a9 87       	std	Y+9, r26	; 0x09
    1f6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f70:	78 85       	ldd	r23, Y+8	; 0x08
    1f72:	89 85       	ldd	r24, Y+9	; 0x09
    1f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <lcd_send_command+0x37c>
		__ticks = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	3f c0       	rjmp	.+126    	; 0x200e <lcd_send_command+0x3fa>
	else if (__tmp > 65535)
    1f90:	6f 81       	ldd	r22, Y+7	; 0x07
    1f92:	78 85       	ldd	r23, Y+8	; 0x08
    1f94:	89 85       	ldd	r24, Y+9	; 0x09
    1f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	4f e7       	ldi	r20, 0x7F	; 127
    1f9e:	57 e4       	ldi	r21, 0x47	; 71
    1fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	4c f5       	brge	.+82     	; 0x1ffa <lcd_send_command+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <lcd_send_command+0x3dc>
    1fd2:	88 ec       	ldi	r24, 0xC8	; 200
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9c 83       	std	Y+4, r25	; 0x04
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <lcd_send_command+0x3ca>
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <lcd_send_command+0x3be>
    1ff8:	14 c0       	rjmp	.+40     	; 0x2022 <lcd_send_command+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffc:	78 85       	ldd	r23, Y+8	; 0x08
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <lcd_send_command+0x406>
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2022:	e9 96       	adiw	r28, 0x39	; 57
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <lcd_write_word>:
*return		   		: void
*purpose       	: printing a full word to the
*				 		LCD (Maximun 20 characters)
*/
void lcd_write_word(uint8_t word[20])
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	00 d0       	rcall	.+0      	; 0x203a <lcd_write_word+0x6>
    203a:	00 d0       	rcall	.+0      	; 0x203c <lcd_write_word+0x8>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	9c 83       	std	Y+4, r25	; 0x04
    2042:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    2044:	1a 82       	std	Y+2, r1	; 0x02
    2046:	19 82       	std	Y+1, r1	; 0x01
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <lcd_write_word+0x34>
	while(word[i]!='\0')
	{
		lcd_write_character(word[i]);
    204a:	29 81       	ldd	r18, Y+1	; 0x01
    204c:	3a 81       	ldd	r19, Y+2	; 0x02
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	9c 81       	ldd	r25, Y+4	; 0x04
    2052:	fc 01       	movw	r30, r24
    2054:	e2 0f       	add	r30, r18
    2056:	f3 1f       	adc	r31, r19
    2058:	80 81       	ld	r24, Z
    205a:	0e 94 45 10 	call	0x208a	; 0x208a <lcd_write_character>
		i++;
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	9a 81       	ldd	r25, Y+2	; 0x02
    2062:	01 96       	adiw	r24, 0x01	; 1
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
*				 		LCD (Maximun 20 characters)
*/
void lcd_write_word(uint8_t word[20])
{
	int i=0;
	while(word[i]!='\0')
    2068:	29 81       	ldd	r18, Y+1	; 0x01
    206a:	3a 81       	ldd	r19, Y+2	; 0x02
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	fc 01       	movw	r30, r24
    2072:	e2 0f       	add	r30, r18
    2074:	f3 1f       	adc	r31, r19
    2076:	80 81       	ld	r24, Z
    2078:	88 23       	and	r24, r24
    207a:	39 f7       	brne	.-50     	; 0x204a <lcd_write_word+0x16>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <lcd_write_character>:
*purpose       	: sending one characterto LCD by sending
*				 		 the first nibble first then the second nibble
*						 enabling and disabling the LCD in between
*/
void lcd_write_character(uint8_t character)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	e9 97       	sbiw	r28, 0x39	; 57
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	89 af       	std	Y+57, r24	; 0x39

	DATA_BUS=((character & 0b11110000));
    20a0:	eb e3       	ldi	r30, 0x3B	; 59
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	89 ad       	ldd	r24, Y+57	; 0x39
    20a6:	80 7f       	andi	r24, 0xF0	; 240
    20a8:	80 83       	st	Z, r24
	CTL_BUS|=(1<<LCD_RS);
    20aa:	a8 e3       	ldi	r26, 0x38	; 56
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e8 e3       	ldi	r30, 0x38	; 56
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	82 60       	ori	r24, 0x02	; 2
    20b6:	8c 93       	st	X, r24
	CTL_BUS |=(1<<LCD_EN);
    20b8:	a8 e3       	ldi	r26, 0x38	; 56
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e8 e3       	ldi	r30, 0x38	; 56
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	88 60       	ori	r24, 0x08	; 8
    20c4:	8c 93       	st	X, r24
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	a0 ea       	ldi	r26, 0xA0	; 160
    20cc:	b0 e4       	ldi	r27, 0x40	; 64
    20ce:	8d ab       	std	Y+53, r24	; 0x35
    20d0:	9e ab       	std	Y+54, r25	; 0x36
    20d2:	af ab       	std	Y+55, r26	; 0x37
    20d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d6:	6d a9       	ldd	r22, Y+53	; 0x35
    20d8:	7e a9       	ldd	r23, Y+54	; 0x36
    20da:	8f a9       	ldd	r24, Y+55	; 0x37
    20dc:	98 ad       	ldd	r25, Y+56	; 0x38
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	4a ef       	ldi	r20, 0xFA	; 250
    20e4:	54 e4       	ldi	r21, 0x44	; 68
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	89 ab       	std	Y+49, r24	; 0x31
    20f0:	9a ab       	std	Y+50, r25	; 0x32
    20f2:	ab ab       	std	Y+51, r26	; 0x33
    20f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20f6:	69 a9       	ldd	r22, Y+49	; 0x31
    20f8:	7a a9       	ldd	r23, Y+50	; 0x32
    20fa:	8b a9       	ldd	r24, Y+51	; 0x33
    20fc:	9c a9       	ldd	r25, Y+52	; 0x34
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e8       	ldi	r20, 0x80	; 128
    2104:	5f e3       	ldi	r21, 0x3F	; 63
    2106:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    210a:	88 23       	and	r24, r24
    210c:	2c f4       	brge	.+10     	; 0x2118 <lcd_write_character+0x8e>
		__ticks = 1;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	98 ab       	std	Y+48, r25	; 0x30
    2114:	8f a7       	std	Y+47, r24	; 0x2f
    2116:	3f c0       	rjmp	.+126    	; 0x2196 <lcd_write_character+0x10c>
	else if (__tmp > 65535)
    2118:	69 a9       	ldd	r22, Y+49	; 0x31
    211a:	7a a9       	ldd	r23, Y+50	; 0x32
    211c:	8b a9       	ldd	r24, Y+51	; 0x33
    211e:	9c a9       	ldd	r25, Y+52	; 0x34
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	3f ef       	ldi	r19, 0xFF	; 255
    2124:	4f e7       	ldi	r20, 0x7F	; 127
    2126:	57 e4       	ldi	r21, 0x47	; 71
    2128:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    212c:	18 16       	cp	r1, r24
    212e:	4c f5       	brge	.+82     	; 0x2182 <lcd_write_character+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2130:	6d a9       	ldd	r22, Y+53	; 0x35
    2132:	7e a9       	ldd	r23, Y+54	; 0x36
    2134:	8f a9       	ldd	r24, Y+55	; 0x37
    2136:	98 ad       	ldd	r25, Y+56	; 0x38
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e2       	ldi	r20, 0x20	; 32
    213e:	51 e4       	ldi	r21, 0x41	; 65
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	bc 01       	movw	r22, r24
    214a:	cd 01       	movw	r24, r26
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	98 ab       	std	Y+48, r25	; 0x30
    2156:	8f a7       	std	Y+47, r24	; 0x2f
    2158:	0f c0       	rjmp	.+30     	; 0x2178 <lcd_write_character+0xee>
    215a:	88 ec       	ldi	r24, 0xC8	; 200
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9e a7       	std	Y+46, r25	; 0x2e
    2160:	8d a7       	std	Y+45, r24	; 0x2d
    2162:	8d a5       	ldd	r24, Y+45	; 0x2d
    2164:	9e a5       	ldd	r25, Y+46	; 0x2e
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <lcd_write_character+0xdc>
    216a:	9e a7       	std	Y+46, r25	; 0x2e
    216c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2170:	98 a9       	ldd	r25, Y+48	; 0x30
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	98 ab       	std	Y+48, r25	; 0x30
    2176:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2178:	8f a5       	ldd	r24, Y+47	; 0x2f
    217a:	98 a9       	ldd	r25, Y+48	; 0x30
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	69 f7       	brne	.-38     	; 0x215a <lcd_write_character+0xd0>
    2180:	14 c0       	rjmp	.+40     	; 0x21aa <lcd_write_character+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2182:	69 a9       	ldd	r22, Y+49	; 0x31
    2184:	7a a9       	ldd	r23, Y+50	; 0x32
    2186:	8b a9       	ldd	r24, Y+51	; 0x33
    2188:	9c a9       	ldd	r25, Y+52	; 0x34
    218a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	98 ab       	std	Y+48, r25	; 0x30
    2194:	8f a7       	std	Y+47, r24	; 0x2f
    2196:	8f a5       	ldd	r24, Y+47	; 0x2f
    2198:	98 a9       	ldd	r25, Y+48	; 0x30
    219a:	9c a7       	std	Y+44, r25	; 0x2c
    219c:	8b a7       	std	Y+43, r24	; 0x2b
    219e:	8b a5       	ldd	r24, Y+43	; 0x2b
    21a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <lcd_write_character+0x118>
    21a6:	9c a7       	std	Y+44, r25	; 0x2c
    21a8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    21aa:	a8 e3       	ldi	r26, 0x38	; 56
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e8 e3       	ldi	r30, 0x38	; 56
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	87 7f       	andi	r24, 0xF7	; 247
    21b6:	8c 93       	st	X, r24
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	a0 ea       	ldi	r26, 0xA0	; 160
    21be:	b0 e4       	ldi	r27, 0x40	; 64
    21c0:	8f a3       	std	Y+39, r24	; 0x27
    21c2:	98 a7       	std	Y+40, r25	; 0x28
    21c4:	a9 a7       	std	Y+41, r26	; 0x29
    21c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c8:	6f a1       	ldd	r22, Y+39	; 0x27
    21ca:	78 a5       	ldd	r23, Y+40	; 0x28
    21cc:	89 a5       	ldd	r24, Y+41	; 0x29
    21ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	4a ef       	ldi	r20, 0xFA	; 250
    21d6:	54 e4       	ldi	r21, 0x44	; 68
    21d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	8b a3       	std	Y+35, r24	; 0x23
    21e2:	9c a3       	std	Y+36, r25	; 0x24
    21e4:	ad a3       	std	Y+37, r26	; 0x25
    21e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21e8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ea:	7c a1       	ldd	r23, Y+36	; 0x24
    21ec:	8d a1       	ldd	r24, Y+37	; 0x25
    21ee:	9e a1       	ldd	r25, Y+38	; 0x26
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e8       	ldi	r20, 0x80	; 128
    21f6:	5f e3       	ldi	r21, 0x3F	; 63
    21f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21fc:	88 23       	and	r24, r24
    21fe:	2c f4       	brge	.+10     	; 0x220a <lcd_write_character+0x180>
		__ticks = 1;
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9a a3       	std	Y+34, r25	; 0x22
    2206:	89 a3       	std	Y+33, r24	; 0x21
    2208:	3f c0       	rjmp	.+126    	; 0x2288 <lcd_write_character+0x1fe>
	else if (__tmp > 65535)
    220a:	6b a1       	ldd	r22, Y+35	; 0x23
    220c:	7c a1       	ldd	r23, Y+36	; 0x24
    220e:	8d a1       	ldd	r24, Y+37	; 0x25
    2210:	9e a1       	ldd	r25, Y+38	; 0x26
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	3f ef       	ldi	r19, 0xFF	; 255
    2216:	4f e7       	ldi	r20, 0x7F	; 127
    2218:	57 e4       	ldi	r21, 0x47	; 71
    221a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    221e:	18 16       	cp	r1, r24
    2220:	4c f5       	brge	.+82     	; 0x2274 <lcd_write_character+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2222:	6f a1       	ldd	r22, Y+39	; 0x27
    2224:	78 a5       	ldd	r23, Y+40	; 0x28
    2226:	89 a5       	ldd	r24, Y+41	; 0x29
    2228:	9a a5       	ldd	r25, Y+42	; 0x2a
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e2       	ldi	r20, 0x20	; 32
    2230:	51 e4       	ldi	r21, 0x41	; 65
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9a a3       	std	Y+34, r25	; 0x22
    2248:	89 a3       	std	Y+33, r24	; 0x21
    224a:	0f c0       	rjmp	.+30     	; 0x226a <lcd_write_character+0x1e0>
    224c:	88 ec       	ldi	r24, 0xC8	; 200
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	98 a3       	std	Y+32, r25	; 0x20
    2252:	8f 8f       	std	Y+31, r24	; 0x1f
    2254:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2256:	98 a1       	ldd	r25, Y+32	; 0x20
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <lcd_write_character+0x1ce>
    225c:	98 a3       	std	Y+32, r25	; 0x20
    225e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2260:	89 a1       	ldd	r24, Y+33	; 0x21
    2262:	9a a1       	ldd	r25, Y+34	; 0x22
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	9a a3       	std	Y+34, r25	; 0x22
    2268:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226a:	89 a1       	ldd	r24, Y+33	; 0x21
    226c:	9a a1       	ldd	r25, Y+34	; 0x22
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	69 f7       	brne	.-38     	; 0x224c <lcd_write_character+0x1c2>
    2272:	14 c0       	rjmp	.+40     	; 0x229c <lcd_write_character+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2274:	6b a1       	ldd	r22, Y+35	; 0x23
    2276:	7c a1       	ldd	r23, Y+36	; 0x24
    2278:	8d a1       	ldd	r24, Y+37	; 0x25
    227a:	9e a1       	ldd	r25, Y+38	; 0x26
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9a a3       	std	Y+34, r25	; 0x22
    2286:	89 a3       	std	Y+33, r24	; 0x21
    2288:	89 a1       	ldd	r24, Y+33	; 0x21
    228a:	9a a1       	ldd	r25, Y+34	; 0x22
    228c:	9e 8f       	std	Y+30, r25	; 0x1e
    228e:	8d 8f       	std	Y+29, r24	; 0x1d
    2290:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2292:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <lcd_write_character+0x20a>
    2298:	9e 8f       	std	Y+30, r25	; 0x1e
    229a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DATA_BUS=((character & 0b00001111)<<4);
    229c:	eb e3       	ldi	r30, 0x3B	; 59
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	89 ad       	ldd	r24, Y+57	; 0x39
    22a2:	88 2f       	mov	r24, r24
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	82 95       	swap	r24
    22a8:	92 95       	swap	r25
    22aa:	90 7f       	andi	r25, 0xF0	; 240
    22ac:	98 27       	eor	r25, r24
    22ae:	80 7f       	andi	r24, 0xF0	; 240
    22b0:	98 27       	eor	r25, r24
    22b2:	80 83       	st	Z, r24
	CTL_BUS |=(1<<LCD_EN);
    22b4:	a8 e3       	ldi	r26, 0x38	; 56
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e8 e3       	ldi	r30, 0x38	; 56
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	88 60       	ori	r24, 0x08	; 8
    22c0:	8c 93       	st	X, r24
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a0 ea       	ldi	r26, 0xA0	; 160
    22c8:	b0 e4       	ldi	r27, 0x40	; 64
    22ca:	89 8f       	std	Y+25, r24	; 0x19
    22cc:	9a 8f       	std	Y+26, r25	; 0x1a
    22ce:	ab 8f       	std	Y+27, r26	; 0x1b
    22d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	69 8d       	ldd	r22, Y+25	; 0x19
    22d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a ef       	ldi	r20, 0xFA	; 250
    22e0:	54 e4       	ldi	r21, 0x44	; 68
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8d 8b       	std	Y+21, r24	; 0x15
    22ec:	9e 8b       	std	Y+22, r25	; 0x16
    22ee:	af 8b       	std	Y+23, r26	; 0x17
    22f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22f2:	6d 89       	ldd	r22, Y+21	; 0x15
    22f4:	7e 89       	ldd	r23, Y+22	; 0x16
    22f6:	8f 89       	ldd	r24, Y+23	; 0x17
    22f8:	98 8d       	ldd	r25, Y+24	; 0x18
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	2c f4       	brge	.+10     	; 0x2314 <lcd_write_character+0x28a>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9c 8b       	std	Y+20, r25	; 0x14
    2310:	8b 8b       	std	Y+19, r24	; 0x13
    2312:	3f c0       	rjmp	.+126    	; 0x2392 <lcd_write_character+0x308>
	else if (__tmp > 65535)
    2314:	6d 89       	ldd	r22, Y+21	; 0x15
    2316:	7e 89       	ldd	r23, Y+22	; 0x16
    2318:	8f 89       	ldd	r24, Y+23	; 0x17
    231a:	98 8d       	ldd	r25, Y+24	; 0x18
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	57 e4       	ldi	r21, 0x47	; 71
    2324:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	4c f5       	brge	.+82     	; 0x237e <lcd_write_character+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232c:	69 8d       	ldd	r22, Y+25	; 0x19
    232e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2330:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2332:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e2       	ldi	r20, 0x20	; 32
    233a:	51 e4       	ldi	r21, 0x41	; 65
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9c 8b       	std	Y+20, r25	; 0x14
    2352:	8b 8b       	std	Y+19, r24	; 0x13
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <lcd_write_character+0x2ea>
    2356:	88 ec       	ldi	r24, 0xC8	; 200
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9a 8b       	std	Y+18, r25	; 0x12
    235c:	89 8b       	std	Y+17, r24	; 0x11
    235e:	89 89       	ldd	r24, Y+17	; 0x11
    2360:	9a 89       	ldd	r25, Y+18	; 0x12
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <lcd_write_character+0x2d8>
    2366:	9a 8b       	std	Y+18, r25	; 0x12
    2368:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236a:	8b 89       	ldd	r24, Y+19	; 0x13
    236c:	9c 89       	ldd	r25, Y+20	; 0x14
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9c 8b       	std	Y+20, r25	; 0x14
    2372:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2374:	8b 89       	ldd	r24, Y+19	; 0x13
    2376:	9c 89       	ldd	r25, Y+20	; 0x14
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	69 f7       	brne	.-38     	; 0x2356 <lcd_write_character+0x2cc>
    237c:	14 c0       	rjmp	.+40     	; 0x23a6 <lcd_write_character+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237e:	6d 89       	ldd	r22, Y+21	; 0x15
    2380:	7e 89       	ldd	r23, Y+22	; 0x16
    2382:	8f 89       	ldd	r24, Y+23	; 0x17
    2384:	98 8d       	ldd	r25, Y+24	; 0x18
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9c 8b       	std	Y+20, r25	; 0x14
    2390:	8b 8b       	std	Y+19, r24	; 0x13
    2392:	8b 89       	ldd	r24, Y+19	; 0x13
    2394:	9c 89       	ldd	r25, Y+20	; 0x14
    2396:	98 8b       	std	Y+16, r25	; 0x10
    2398:	8f 87       	std	Y+15, r24	; 0x0f
    239a:	8f 85       	ldd	r24, Y+15	; 0x0f
    239c:	98 89       	ldd	r25, Y+16	; 0x10
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <lcd_write_character+0x314>
    23a2:	98 8b       	std	Y+16, r25	; 0x10
    23a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    23a6:	a8 e3       	ldi	r26, 0x38	; 56
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e8 e3       	ldi	r30, 0x38	; 56
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	87 7f       	andi	r24, 0xF7	; 247
    23b2:	8c 93       	st	X, r24
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a0 ea       	ldi	r26, 0xA0	; 160
    23ba:	b0 e4       	ldi	r27, 0x40	; 64
    23bc:	8b 87       	std	Y+11, r24	; 0x0b
    23be:	9c 87       	std	Y+12, r25	; 0x0c
    23c0:	ad 87       	std	Y+13, r26	; 0x0d
    23c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	4a ef       	ldi	r20, 0xFA	; 250
    23d2:	54 e4       	ldi	r21, 0x44	; 68
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	8f 83       	std	Y+7, r24	; 0x07
    23de:	98 87       	std	Y+8, r25	; 0x08
    23e0:	a9 87       	std	Y+9, r26	; 0x09
    23e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e4:	6f 81       	ldd	r22, Y+7	; 0x07
    23e6:	78 85       	ldd	r23, Y+8	; 0x08
    23e8:	89 85       	ldd	r24, Y+9	; 0x09
    23ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	2c f4       	brge	.+10     	; 0x2406 <lcd_write_character+0x37c>
		__ticks = 1;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
    2404:	3f c0       	rjmp	.+126    	; 0x2484 <lcd_write_character+0x3fa>
	else if (__tmp > 65535)
    2406:	6f 81       	ldd	r22, Y+7	; 0x07
    2408:	78 85       	ldd	r23, Y+8	; 0x08
    240a:	89 85       	ldd	r24, Y+9	; 0x09
    240c:	9a 85       	ldd	r25, Y+10	; 0x0a
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	3f ef       	ldi	r19, 0xFF	; 255
    2412:	4f e7       	ldi	r20, 0x7F	; 127
    2414:	57 e4       	ldi	r21, 0x47	; 71
    2416:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    241a:	18 16       	cp	r1, r24
    241c:	4c f5       	brge	.+82     	; 0x2470 <lcd_write_character+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2420:	7c 85       	ldd	r23, Y+12	; 0x0c
    2422:	8d 85       	ldd	r24, Y+13	; 0x0d
    2424:	9e 85       	ldd	r25, Y+14	; 0x0e
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e2       	ldi	r20, 0x20	; 32
    242c:	51 e4       	ldi	r21, 0x41	; 65
    242e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	8d 83       	std	Y+5, r24	; 0x05
    2446:	0f c0       	rjmp	.+30     	; 0x2466 <lcd_write_character+0x3dc>
    2448:	88 ec       	ldi	r24, 0xC8	; 200
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9c 83       	std	Y+4, r25	; 0x04
    244e:	8b 83       	std	Y+3, r24	; 0x03
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	9c 81       	ldd	r25, Y+4	; 0x04
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <lcd_write_character+0x3ca>
    2458:	9c 83       	std	Y+4, r25	; 0x04
    245a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	9e 83       	std	Y+6, r25	; 0x06
    2464:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2466:	8d 81       	ldd	r24, Y+5	; 0x05
    2468:	9e 81       	ldd	r25, Y+6	; 0x06
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	69 f7       	brne	.-38     	; 0x2448 <lcd_write_character+0x3be>
    246e:	14 c0       	rjmp	.+40     	; 0x2498 <lcd_write_character+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2470:	6f 81       	ldd	r22, Y+7	; 0x07
    2472:	78 85       	ldd	r23, Y+8	; 0x08
    2474:	89 85       	ldd	r24, Y+9	; 0x09
    2476:	9a 85       	ldd	r25, Y+10	; 0x0a
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9e 83       	std	Y+6, r25	; 0x06
    2482:	8d 83       	std	Y+5, r24	; 0x05
    2484:	8d 81       	ldd	r24, Y+5	; 0x05
    2486:	9e 81       	ldd	r25, Y+6	; 0x06
    2488:	9a 83       	std	Y+2, r25	; 0x02
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	9a 81       	ldd	r25, Y+2	; 0x02
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <lcd_write_character+0x406>
    2494:	9a 83       	std	Y+2, r25	; 0x02
    2496:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2498:	e9 96       	adiw	r28, 0x39	; 57
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <lcd_clear>:
*return		   		: void
*purpose       	: Clearing the lcd screen by sending
*				 	the LCD_CMD_CLEAR_DISPLAY command to LCD
*/
void lcd_clear(void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	2e 97       	sbiw	r28, 0x0e	; 14
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <lcd_send_command>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 ea       	ldi	r26, 0xA0	; 160
    24ca:	b0 e4       	ldi	r27, 0x40	; 64
    24cc:	8b 87       	std	Y+11, r24	; 0x0b
    24ce:	9c 87       	std	Y+12, r25	; 0x0c
    24d0:	ad 87       	std	Y+13, r26	; 0x0d
    24d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24da:	9e 85       	ldd	r25, Y+14	; 0x0e
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4a ef       	ldi	r20, 0xFA	; 250
    24e2:	54 e4       	ldi	r21, 0x44	; 68
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8f 83       	std	Y+7, r24	; 0x07
    24ee:	98 87       	std	Y+8, r25	; 0x08
    24f0:	a9 87       	std	Y+9, r26	; 0x09
    24f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	2c f4       	brge	.+10     	; 0x2516 <lcd_clear+0x6c>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
    2514:	3f c0       	rjmp	.+126    	; 0x2594 <lcd_clear+0xea>
	else if (__tmp > 65535)
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	4c f5       	brge	.+82     	; 0x2580 <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2530:	7c 85       	ldd	r23, Y+12	; 0x0c
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	9e 85       	ldd	r25, Y+14	; 0x0e
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <lcd_clear+0xcc>
    2558:	88 ec       	ldi	r24, 0xC8	; 200
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9c 83       	std	Y+4, r25	; 0x04
    255e:	8b 83       	std	Y+3, r24	; 0x03
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <lcd_clear+0xba>
    2568:	9c 83       	std	Y+4, r25	; 0x04
    256a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
    256e:	9e 81       	ldd	r25, Y+6	; 0x06
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	69 f7       	brne	.-38     	; 0x2558 <lcd_clear+0xae>
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <lcd_clear+0xf6>
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    25a8:	2e 96       	adiw	r28, 0x0e	; 14
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <lcd_goto_xy>:
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	6a 97       	sbiw	r28, 0x1a	; 26
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	89 8f       	std	Y+25, r24	; 0x19
    25d0:	6a 8f       	std	Y+26, r22	; 0x1a
	lcd_send_command((0x80|(line<<6))+pos);
    25d2:	89 8d       	ldd	r24, Y+25	; 0x19
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	00 24       	eor	r0, r0
    25da:	96 95       	lsr	r25
    25dc:	87 95       	ror	r24
    25de:	07 94       	ror	r0
    25e0:	96 95       	lsr	r25
    25e2:	87 95       	ror	r24
    25e4:	07 94       	ror	r0
    25e6:	98 2f       	mov	r25, r24
    25e8:	80 2d       	mov	r24, r0
    25ea:	80 68       	ori	r24, 0x80	; 128
    25ec:	98 2f       	mov	r25, r24
    25ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25f0:	89 0f       	add	r24, r25
    25f2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <lcd_send_command>
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	a8 e4       	ldi	r26, 0x48	; 72
    25fc:	b2 e4       	ldi	r27, 0x42	; 66
    25fe:	8d 8b       	std	Y+21, r24	; 0x15
    2600:	9e 8b       	std	Y+22, r25	; 0x16
    2602:	af 8b       	std	Y+23, r26	; 0x17
    2604:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2606:	6d 89       	ldd	r22, Y+21	; 0x15
    2608:	7e 89       	ldd	r23, Y+22	; 0x16
    260a:	8f 89       	ldd	r24, Y+23	; 0x17
    260c:	98 8d       	ldd	r25, Y+24	; 0x18
    260e:	2b ea       	ldi	r18, 0xAB	; 171
    2610:	3a ea       	ldi	r19, 0xAA	; 170
    2612:	4a e2       	ldi	r20, 0x2A	; 42
    2614:	50 e4       	ldi	r21, 0x40	; 64
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	89 8b       	std	Y+17, r24	; 0x11
    2620:	9a 8b       	std	Y+18, r25	; 0x12
    2622:	ab 8b       	std	Y+19, r26	; 0x13
    2624:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2626:	69 89       	ldd	r22, Y+17	; 0x11
    2628:	7a 89       	ldd	r23, Y+18	; 0x12
    262a:	8b 89       	ldd	r24, Y+19	; 0x13
    262c:	9c 89       	ldd	r25, Y+20	; 0x14
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f e3       	ldi	r21, 0x3F	; 63
    2636:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263a:	88 23       	and	r24, r24
    263c:	1c f4       	brge	.+6      	; 0x2644 <lcd_goto_xy+0x8a>
		__ticks = 1;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	88 8b       	std	Y+16, r24	; 0x10
    2642:	91 c0       	rjmp	.+290    	; 0x2766 <lcd_goto_xy+0x1ac>
	else if (__tmp > 255)
    2644:	69 89       	ldd	r22, Y+17	; 0x11
    2646:	7a 89       	ldd	r23, Y+18	; 0x12
    2648:	8b 89       	ldd	r24, Y+19	; 0x13
    264a:	9c 89       	ldd	r25, Y+20	; 0x14
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	4f e7       	ldi	r20, 0x7F	; 127
    2652:	53 e4       	ldi	r21, 0x43	; 67
    2654:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2658:	18 16       	cp	r1, r24
    265a:	0c f0       	brlt	.+2      	; 0x265e <lcd_goto_xy+0xa4>
    265c:	7b c0       	rjmp	.+246    	; 0x2754 <lcd_goto_xy+0x19a>
	{
		_delay_ms(__us / 1000.0);
    265e:	6d 89       	ldd	r22, Y+21	; 0x15
    2660:	7e 89       	ldd	r23, Y+22	; 0x16
    2662:	8f 89       	ldd	r24, Y+23	; 0x17
    2664:	98 8d       	ldd	r25, Y+24	; 0x18
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	54 e4       	ldi	r21, 0x44	; 68
    266e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8c 87       	std	Y+12, r24	; 0x0c
    2678:	9d 87       	std	Y+13, r25	; 0x0d
    267a:	ae 87       	std	Y+14, r26	; 0x0e
    267c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2680:	7d 85       	ldd	r23, Y+13	; 0x0d
    2682:	8e 85       	ldd	r24, Y+14	; 0x0e
    2684:	9f 85       	ldd	r25, Y+15	; 0x0f
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a ef       	ldi	r20, 0xFA	; 250
    268c:	54 e4       	ldi	r21, 0x44	; 68
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	88 87       	std	Y+8, r24	; 0x08
    2698:	99 87       	std	Y+9, r25	; 0x09
    269a:	aa 87       	std	Y+10, r26	; 0x0a
    269c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    269e:	68 85       	ldd	r22, Y+8	; 0x08
    26a0:	79 85       	ldd	r23, Y+9	; 0x09
    26a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    26a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <lcd_goto_xy+0x106>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9f 83       	std	Y+7, r25	; 0x07
    26bc:	8e 83       	std	Y+6, r24	; 0x06
    26be:	3f c0       	rjmp	.+126    	; 0x273e <lcd_goto_xy+0x184>
	else if (__tmp > 65535)
    26c0:	68 85       	ldd	r22, Y+8	; 0x08
    26c2:	79 85       	ldd	r23, Y+9	; 0x09
    26c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    26c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	4f e7       	ldi	r20, 0x7F	; 127
    26ce:	57 e4       	ldi	r21, 0x47	; 71
    26d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d4:	18 16       	cp	r1, r24
    26d6:	4c f5       	brge	.+82     	; 0x272a <lcd_goto_xy+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    26da:	7d 85       	ldd	r23, Y+13	; 0x0d
    26dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    26de:	9f 85       	ldd	r25, Y+15	; 0x0f
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9f 83       	std	Y+7, r25	; 0x07
    26fe:	8e 83       	std	Y+6, r24	; 0x06
    2700:	0f c0       	rjmp	.+30     	; 0x2720 <lcd_goto_xy+0x166>
    2702:	88 ec       	ldi	r24, 0xC8	; 200
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9d 83       	std	Y+5, r25	; 0x05
    2708:	8c 83       	std	Y+4, r24	; 0x04
    270a:	8c 81       	ldd	r24, Y+4	; 0x04
    270c:	9d 81       	ldd	r25, Y+5	; 0x05
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <lcd_goto_xy+0x154>
    2712:	9d 83       	std	Y+5, r25	; 0x05
    2714:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	8e 81       	ldd	r24, Y+6	; 0x06
    2718:	9f 81       	ldd	r25, Y+7	; 0x07
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	9f 83       	std	Y+7, r25	; 0x07
    271e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	8e 81       	ldd	r24, Y+6	; 0x06
    2722:	9f 81       	ldd	r25, Y+7	; 0x07
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	69 f7       	brne	.-38     	; 0x2702 <lcd_goto_xy+0x148>
    2728:	24 c0       	rjmp	.+72     	; 0x2772 <lcd_goto_xy+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272a:	68 85       	ldd	r22, Y+8	; 0x08
    272c:	79 85       	ldd	r23, Y+9	; 0x09
    272e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2730:	9b 85       	ldd	r25, Y+11	; 0x0b
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9f 83       	std	Y+7, r25	; 0x07
    273c:	8e 83       	std	Y+6, r24	; 0x06
    273e:	8e 81       	ldd	r24, Y+6	; 0x06
    2740:	9f 81       	ldd	r25, Y+7	; 0x07
    2742:	9b 83       	std	Y+3, r25	; 0x03
    2744:	8a 83       	std	Y+2, r24	; 0x02
    2746:	8a 81       	ldd	r24, Y+2	; 0x02
    2748:	9b 81       	ldd	r25, Y+3	; 0x03
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <lcd_goto_xy+0x190>
    274e:	9b 83       	std	Y+3, r25	; 0x03
    2750:	8a 83       	std	Y+2, r24	; 0x02
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <lcd_goto_xy+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2754:	69 89       	ldd	r22, Y+17	; 0x11
    2756:	7a 89       	ldd	r23, Y+18	; 0x12
    2758:	8b 89       	ldd	r24, Y+19	; 0x13
    275a:	9c 89       	ldd	r25, Y+20	; 0x14
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	88 8b       	std	Y+16, r24	; 0x10
    2766:	88 89       	ldd	r24, Y+16	; 0x10
    2768:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	8a 95       	dec	r24
    276e:	f1 f7       	brne	.-4      	; 0x276c <lcd_goto_xy+0x1b2>
    2770:	89 83       	std	Y+1, r24	; 0x01
	_delay_us (50);
}
    2772:	6a 96       	adiw	r28, 0x1a	; 26
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	cd bf       	out	0x3d, r28	; 61
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	08 95       	ret

00002784 <HLCD_voidSendString>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "LCD.h"
#include <avr/io.h>
#include <util/delay.h>

void HLCD_voidSendString(uint8_t word[20]) {
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	00 d0       	rcall	.+0      	; 0x278a <HLCD_voidSendString+0x6>
    278a:	00 d0       	rcall	.+0      	; 0x278c <HLCD_voidSendString+0x8>
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	9c 83       	std	Y+4, r25	; 0x04
    2792:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    2794:	1a 82       	std	Y+2, r1	; 0x02
    2796:	19 82       	std	Y+1, r1	; 0x01
    2798:	0f c0       	rjmp	.+30     	; 0x27b8 <HLCD_voidSendString+0x34>
		while(word[i]!='\0')
		{
			HLCD_voidSendData(word[i]);
    279a:	29 81       	ldd	r18, Y+1	; 0x01
    279c:	3a 81       	ldd	r19, Y+2	; 0x02
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9c 81       	ldd	r25, Y+4	; 0x04
    27a2:	fc 01       	movw	r30, r24
    27a4:	e2 0f       	add	r30, r18
    27a6:	f3 1f       	adc	r31, r19
    27a8:	80 81       	ld	r24, Z
    27aa:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <HLCD_voidSendData>
			i++;
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
    27b2:	01 96       	adiw	r24, 0x01	; 1
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	89 83       	std	Y+1, r24	; 0x01
#include <avr/io.h>
#include <util/delay.h>

void HLCD_voidSendString(uint8_t word[20]) {
	int i=0;
		while(word[i]!='\0')
    27b8:	29 81       	ldd	r18, Y+1	; 0x01
    27ba:	3a 81       	ldd	r19, Y+2	; 0x02
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	9c 81       	ldd	r25, Y+4	; 0x04
    27c0:	fc 01       	movw	r30, r24
    27c2:	e2 0f       	add	r30, r18
    27c4:	f3 1f       	adc	r31, r19
    27c6:	80 81       	ld	r24, Z
    27c8:	88 23       	and	r24, r24
    27ca:	39 f7       	brne	.-50     	; 0x279a <HLCD_voidSendString+0x16>
		{
			HLCD_voidSendData(word[i]);
			i++;
		}
}
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <HLCD_voidSendCommand>:


void HLCD_voidSendCommand(u8 A_u8Cmd)

{
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	e9 97       	sbiw	r28, 0x39	; 57
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	89 af       	std	Y+57, r24	; 0x39
	DATA_BUS=((A_u8Cmd&0b11110000));
    27f0:	eb e3       	ldi	r30, 0x3B	; 59
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	89 ad       	ldd	r24, Y+57	; 0x39
    27f6:	80 7f       	andi	r24, 0xF0	; 240
    27f8:	80 83       	st	Z, r24
		CTL_BUS &=~(1<<LCD_RS);
    27fa:	a8 e3       	ldi	r26, 0x38	; 56
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e8 e3       	ldi	r30, 0x38	; 56
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	8d 7f       	andi	r24, 0xFD	; 253
    2806:	8c 93       	st	X, r24
		CTL_BUS |=(1<<LCD_EN);
    2808:	a8 e3       	ldi	r26, 0x38	; 56
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e8 e3       	ldi	r30, 0x38	; 56
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	88 60       	ori	r24, 0x08	; 8
    2814:	8c 93       	st	X, r24
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	a0 ea       	ldi	r26, 0xA0	; 160
    281c:	b0 e4       	ldi	r27, 0x40	; 64
    281e:	8d ab       	std	Y+53, r24	; 0x35
    2820:	9e ab       	std	Y+54, r25	; 0x36
    2822:	af ab       	std	Y+55, r26	; 0x37
    2824:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2826:	6d a9       	ldd	r22, Y+53	; 0x35
    2828:	7e a9       	ldd	r23, Y+54	; 0x36
    282a:	8f a9       	ldd	r24, Y+55	; 0x37
    282c:	98 ad       	ldd	r25, Y+56	; 0x38
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	4a ef       	ldi	r20, 0xFA	; 250
    2834:	54 e4       	ldi	r21, 0x44	; 68
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	89 ab       	std	Y+49, r24	; 0x31
    2840:	9a ab       	std	Y+50, r25	; 0x32
    2842:	ab ab       	std	Y+51, r26	; 0x33
    2844:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2846:	69 a9       	ldd	r22, Y+49	; 0x31
    2848:	7a a9       	ldd	r23, Y+50	; 0x32
    284a:	8b a9       	ldd	r24, Y+51	; 0x33
    284c:	9c a9       	ldd	r25, Y+52	; 0x34
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e8       	ldi	r20, 0x80	; 128
    2854:	5f e3       	ldi	r21, 0x3F	; 63
    2856:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    285a:	88 23       	and	r24, r24
    285c:	2c f4       	brge	.+10     	; 0x2868 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	98 ab       	std	Y+48, r25	; 0x30
    2864:	8f a7       	std	Y+47, r24	; 0x2f
    2866:	3f c0       	rjmp	.+126    	; 0x28e6 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2868:	69 a9       	ldd	r22, Y+49	; 0x31
    286a:	7a a9       	ldd	r23, Y+50	; 0x32
    286c:	8b a9       	ldd	r24, Y+51	; 0x33
    286e:	9c a9       	ldd	r25, Y+52	; 0x34
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	3f ef       	ldi	r19, 0xFF	; 255
    2874:	4f e7       	ldi	r20, 0x7F	; 127
    2876:	57 e4       	ldi	r21, 0x47	; 71
    2878:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    287c:	18 16       	cp	r1, r24
    287e:	4c f5       	brge	.+82     	; 0x28d2 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2880:	6d a9       	ldd	r22, Y+53	; 0x35
    2882:	7e a9       	ldd	r23, Y+54	; 0x36
    2884:	8f a9       	ldd	r24, Y+55	; 0x37
    2886:	98 ad       	ldd	r25, Y+56	; 0x38
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e2       	ldi	r20, 0x20	; 32
    288e:	51 e4       	ldi	r21, 0x41	; 65
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	98 ab       	std	Y+48, r25	; 0x30
    28a6:	8f a7       	std	Y+47, r24	; 0x2f
    28a8:	0f c0       	rjmp	.+30     	; 0x28c8 <HLCD_voidSendCommand+0xee>
    28aa:	88 ec       	ldi	r24, 0xC8	; 200
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	9e a7       	std	Y+46, r25	; 0x2e
    28b0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    28b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <HLCD_voidSendCommand+0xdc>
    28ba:	9e a7       	std	Y+46, r25	; 0x2e
    28bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28be:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c0:	98 a9       	ldd	r25, Y+48	; 0x30
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	98 ab       	std	Y+48, r25	; 0x30
    28c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ca:	98 a9       	ldd	r25, Y+48	; 0x30
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	69 f7       	brne	.-38     	; 0x28aa <HLCD_voidSendCommand+0xd0>
    28d0:	14 c0       	rjmp	.+40     	; 0x28fa <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d2:	69 a9       	ldd	r22, Y+49	; 0x31
    28d4:	7a a9       	ldd	r23, Y+50	; 0x32
    28d6:	8b a9       	ldd	r24, Y+51	; 0x33
    28d8:	9c a9       	ldd	r25, Y+52	; 0x34
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	98 ab       	std	Y+48, r25	; 0x30
    28e4:	8f a7       	std	Y+47, r24	; 0x2f
    28e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ea:	9c a7       	std	Y+44, r25	; 0x2c
    28ec:	8b a7       	std	Y+43, r24	; 0x2b
    28ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    28f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <HLCD_voidSendCommand+0x118>
    28f6:	9c a7       	std	Y+44, r25	; 0x2c
    28f8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);
		CTL_BUS &=~(1<<LCD_EN);
    28fa:	a8 e3       	ldi	r26, 0x38	; 56
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e8 e3       	ldi	r30, 0x38	; 56
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	87 7f       	andi	r24, 0xF7	; 247
    2906:	8c 93       	st	X, r24
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	a0 ea       	ldi	r26, 0xA0	; 160
    290e:	b0 e4       	ldi	r27, 0x40	; 64
    2910:	8f a3       	std	Y+39, r24	; 0x27
    2912:	98 a7       	std	Y+40, r25	; 0x28
    2914:	a9 a7       	std	Y+41, r26	; 0x29
    2916:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2918:	6f a1       	ldd	r22, Y+39	; 0x27
    291a:	78 a5       	ldd	r23, Y+40	; 0x28
    291c:	89 a5       	ldd	r24, Y+41	; 0x29
    291e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	4a ef       	ldi	r20, 0xFA	; 250
    2926:	54 e4       	ldi	r21, 0x44	; 68
    2928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	8b a3       	std	Y+35, r24	; 0x23
    2932:	9c a3       	std	Y+36, r25	; 0x24
    2934:	ad a3       	std	Y+37, r26	; 0x25
    2936:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2938:	6b a1       	ldd	r22, Y+35	; 0x23
    293a:	7c a1       	ldd	r23, Y+36	; 0x24
    293c:	8d a1       	ldd	r24, Y+37	; 0x25
    293e:	9e a1       	ldd	r25, Y+38	; 0x26
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e8       	ldi	r20, 0x80	; 128
    2946:	5f e3       	ldi	r21, 0x3F	; 63
    2948:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    294c:	88 23       	and	r24, r24
    294e:	2c f4       	brge	.+10     	; 0x295a <HLCD_voidSendCommand+0x180>
		__ticks = 1;
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9a a3       	std	Y+34, r25	; 0x22
    2956:	89 a3       	std	Y+33, r24	; 0x21
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <HLCD_voidSendCommand+0x1fe>
	else if (__tmp > 65535)
    295a:	6b a1       	ldd	r22, Y+35	; 0x23
    295c:	7c a1       	ldd	r23, Y+36	; 0x24
    295e:	8d a1       	ldd	r24, Y+37	; 0x25
    2960:	9e a1       	ldd	r25, Y+38	; 0x26
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	3f ef       	ldi	r19, 0xFF	; 255
    2966:	4f e7       	ldi	r20, 0x7F	; 127
    2968:	57 e4       	ldi	r21, 0x47	; 71
    296a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    296e:	18 16       	cp	r1, r24
    2970:	4c f5       	brge	.+82     	; 0x29c4 <HLCD_voidSendCommand+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2972:	6f a1       	ldd	r22, Y+39	; 0x27
    2974:	78 a5       	ldd	r23, Y+40	; 0x28
    2976:	89 a5       	ldd	r24, Y+41	; 0x29
    2978:	9a a5       	ldd	r25, Y+42	; 0x2a
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e2       	ldi	r20, 0x20	; 32
    2980:	51 e4       	ldi	r21, 0x41	; 65
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	9a a3       	std	Y+34, r25	; 0x22
    2998:	89 a3       	std	Y+33, r24	; 0x21
    299a:	0f c0       	rjmp	.+30     	; 0x29ba <HLCD_voidSendCommand+0x1e0>
    299c:	88 ec       	ldi	r24, 0xC8	; 200
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	98 a3       	std	Y+32, r25	; 0x20
    29a2:	8f 8f       	std	Y+31, r24	; 0x1f
    29a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29a6:	98 a1       	ldd	r25, Y+32	; 0x20
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <HLCD_voidSendCommand+0x1ce>
    29ac:	98 a3       	std	Y+32, r25	; 0x20
    29ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b0:	89 a1       	ldd	r24, Y+33	; 0x21
    29b2:	9a a1       	ldd	r25, Y+34	; 0x22
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	9a a3       	std	Y+34, r25	; 0x22
    29b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ba:	89 a1       	ldd	r24, Y+33	; 0x21
    29bc:	9a a1       	ldd	r25, Y+34	; 0x22
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	69 f7       	brne	.-38     	; 0x299c <HLCD_voidSendCommand+0x1c2>
    29c2:	14 c0       	rjmp	.+40     	; 0x29ec <HLCD_voidSendCommand+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c4:	6b a1       	ldd	r22, Y+35	; 0x23
    29c6:	7c a1       	ldd	r23, Y+36	; 0x24
    29c8:	8d a1       	ldd	r24, Y+37	; 0x25
    29ca:	9e a1       	ldd	r25, Y+38	; 0x26
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	9a a3       	std	Y+34, r25	; 0x22
    29d6:	89 a3       	std	Y+33, r24	; 0x21
    29d8:	89 a1       	ldd	r24, Y+33	; 0x21
    29da:	9a a1       	ldd	r25, Y+34	; 0x22
    29dc:	9e 8f       	std	Y+30, r25	; 0x1e
    29de:	8d 8f       	std	Y+29, r24	; 0x1d
    29e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <HLCD_voidSendCommand+0x20a>
    29e8:	9e 8f       	std	Y+30, r25	; 0x1e
    29ea:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);
		DATA_BUS=((A_u8Cmd&0b00001111)<<4);
    29ec:	eb e3       	ldi	r30, 0x3B	; 59
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	89 ad       	ldd	r24, Y+57	; 0x39
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	82 95       	swap	r24
    29f8:	92 95       	swap	r25
    29fa:	90 7f       	andi	r25, 0xF0	; 240
    29fc:	98 27       	eor	r25, r24
    29fe:	80 7f       	andi	r24, 0xF0	; 240
    2a00:	98 27       	eor	r25, r24
    2a02:	80 83       	st	Z, r24
		CTL_BUS |=(1<<LCD_EN);
    2a04:	a8 e3       	ldi	r26, 0x38	; 56
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e8 e3       	ldi	r30, 0x38	; 56
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	88 60       	ori	r24, 0x08	; 8
    2a10:	8c 93       	st	X, r24
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	a0 ea       	ldi	r26, 0xA0	; 160
    2a18:	b0 e4       	ldi	r27, 0x40	; 64
    2a1a:	89 8f       	std	Y+25, r24	; 0x19
    2a1c:	9a 8f       	std	Y+26, r25	; 0x1a
    2a1e:	ab 8f       	std	Y+27, r26	; 0x1b
    2a20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a22:	69 8d       	ldd	r22, Y+25	; 0x19
    2a24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	4a ef       	ldi	r20, 0xFA	; 250
    2a30:	54 e4       	ldi	r21, 0x44	; 68
    2a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	8d 8b       	std	Y+21, r24	; 0x15
    2a3c:	9e 8b       	std	Y+22, r25	; 0x16
    2a3e:	af 8b       	std	Y+23, r26	; 0x17
    2a40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a42:	6d 89       	ldd	r22, Y+21	; 0x15
    2a44:	7e 89       	ldd	r23, Y+22	; 0x16
    2a46:	8f 89       	ldd	r24, Y+23	; 0x17
    2a48:	98 8d       	ldd	r25, Y+24	; 0x18
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 e8       	ldi	r20, 0x80	; 128
    2a50:	5f e3       	ldi	r21, 0x3F	; 63
    2a52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a56:	88 23       	and	r24, r24
    2a58:	2c f4       	brge	.+10     	; 0x2a64 <HLCD_voidSendCommand+0x28a>
		__ticks = 1;
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	9c 8b       	std	Y+20, r25	; 0x14
    2a60:	8b 8b       	std	Y+19, r24	; 0x13
    2a62:	3f c0       	rjmp	.+126    	; 0x2ae2 <HLCD_voidSendCommand+0x308>
	else if (__tmp > 65535)
    2a64:	6d 89       	ldd	r22, Y+21	; 0x15
    2a66:	7e 89       	ldd	r23, Y+22	; 0x16
    2a68:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	3f ef       	ldi	r19, 0xFF	; 255
    2a70:	4f e7       	ldi	r20, 0x7F	; 127
    2a72:	57 e4       	ldi	r21, 0x47	; 71
    2a74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a78:	18 16       	cp	r1, r24
    2a7a:	4c f5       	brge	.+82     	; 0x2ace <HLCD_voidSendCommand+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e2       	ldi	r20, 0x20	; 32
    2a8a:	51 e4       	ldi	r21, 0x41	; 65
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	bc 01       	movw	r22, r24
    2a96:	cd 01       	movw	r24, r26
    2a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	9c 8b       	std	Y+20, r25	; 0x14
    2aa2:	8b 8b       	std	Y+19, r24	; 0x13
    2aa4:	0f c0       	rjmp	.+30     	; 0x2ac4 <HLCD_voidSendCommand+0x2ea>
    2aa6:	88 ec       	ldi	r24, 0xC8	; 200
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	9a 8b       	std	Y+18, r25	; 0x12
    2aac:	89 8b       	std	Y+17, r24	; 0x11
    2aae:	89 89       	ldd	r24, Y+17	; 0x11
    2ab0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <HLCD_voidSendCommand+0x2d8>
    2ab6:	9a 8b       	std	Y+18, r25	; 0x12
    2ab8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aba:	8b 89       	ldd	r24, Y+19	; 0x13
    2abc:	9c 89       	ldd	r25, Y+20	; 0x14
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	9c 8b       	std	Y+20, r25	; 0x14
    2ac2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac8:	00 97       	sbiw	r24, 0x00	; 0
    2aca:	69 f7       	brne	.-38     	; 0x2aa6 <HLCD_voidSendCommand+0x2cc>
    2acc:	14 c0       	rjmp	.+40     	; 0x2af6 <HLCD_voidSendCommand+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ace:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	9c 8b       	std	Y+20, r25	; 0x14
    2ae0:	8b 8b       	std	Y+19, r24	; 0x13
    2ae2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae6:	98 8b       	std	Y+16, r25	; 0x10
    2ae8:	8f 87       	std	Y+15, r24	; 0x0f
    2aea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aec:	98 89       	ldd	r25, Y+16	; 0x10
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <HLCD_voidSendCommand+0x314>
    2af2:	98 8b       	std	Y+16, r25	; 0x10
    2af4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		CTL_BUS &=~(1<<LCD_EN);
    2af6:	a8 e3       	ldi	r26, 0x38	; 56
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e8 e3       	ldi	r30, 0x38	; 56
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	87 7f       	andi	r24, 0xF7	; 247
    2b02:	8c 93       	st	X, r24
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	a0 ea       	ldi	r26, 0xA0	; 160
    2b0a:	b0 e4       	ldi	r27, 0x40	; 64
    2b0c:	8b 87       	std	Y+11, r24	; 0x0b
    2b0e:	9c 87       	std	Y+12, r25	; 0x0c
    2b10:	ad 87       	std	Y+13, r26	; 0x0d
    2b12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4a ef       	ldi	r20, 0xFA	; 250
    2b22:	54 e4       	ldi	r21, 0x44	; 68
    2b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	8f 83       	std	Y+7, r24	; 0x07
    2b2e:	98 87       	std	Y+8, r25	; 0x08
    2b30:	a9 87       	std	Y+9, r26	; 0x09
    2b32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b34:	6f 81       	ldd	r22, Y+7	; 0x07
    2b36:	78 85       	ldd	r23, Y+8	; 0x08
    2b38:	89 85       	ldd	r24, Y+9	; 0x09
    2b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e8       	ldi	r20, 0x80	; 128
    2b42:	5f e3       	ldi	r21, 0x3F	; 63
    2b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b48:	88 23       	and	r24, r24
    2b4a:	2c f4       	brge	.+10     	; 0x2b56 <HLCD_voidSendCommand+0x37c>
		__ticks = 1;
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	9e 83       	std	Y+6, r25	; 0x06
    2b52:	8d 83       	std	Y+5, r24	; 0x05
    2b54:	3f c0       	rjmp	.+126    	; 0x2bd4 <HLCD_voidSendCommand+0x3fa>
	else if (__tmp > 65535)
    2b56:	6f 81       	ldd	r22, Y+7	; 0x07
    2b58:	78 85       	ldd	r23, Y+8	; 0x08
    2b5a:	89 85       	ldd	r24, Y+9	; 0x09
    2b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	3f ef       	ldi	r19, 0xFF	; 255
    2b62:	4f e7       	ldi	r20, 0x7F	; 127
    2b64:	57 e4       	ldi	r21, 0x47	; 71
    2b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b6a:	18 16       	cp	r1, r24
    2b6c:	4c f5       	brge	.+82     	; 0x2bc0 <HLCD_voidSendCommand+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e2       	ldi	r20, 0x20	; 32
    2b7c:	51 e4       	ldi	r21, 0x41	; 65
    2b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	8d 83       	std	Y+5, r24	; 0x05
    2b96:	0f c0       	rjmp	.+30     	; 0x2bb6 <HLCD_voidSendCommand+0x3dc>
    2b98:	88 ec       	ldi	r24, 0xC8	; 200
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	9c 83       	std	Y+4, r25	; 0x04
    2b9e:	8b 83       	std	Y+3, r24	; 0x03
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <HLCD_voidSendCommand+0x3ca>
    2ba8:	9c 83       	std	Y+4, r25	; 0x04
    2baa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bac:	8d 81       	ldd	r24, Y+5	; 0x05
    2bae:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	9e 83       	std	Y+6, r25	; 0x06
    2bb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bba:	00 97       	sbiw	r24, 0x00	; 0
    2bbc:	69 f7       	brne	.-38     	; 0x2b98 <HLCD_voidSendCommand+0x3be>
    2bbe:	14 c0       	rjmp	.+40     	; 0x2be8 <HLCD_voidSendCommand+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc2:	78 85       	ldd	r23, Y+8	; 0x08
    2bc4:	89 85       	ldd	r24, Y+9	; 0x09
    2bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9e 83       	std	Y+6, r25	; 0x06
    2bd2:	8d 83       	std	Y+5, r24	; 0x05
    2bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd8:	9a 83       	std	Y+2, r25	; 0x02
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <HLCD_voidSendCommand+0x406>
    2be4:	9a 83       	std	Y+2, r25	; 0x02
    2be6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
}
    2be8:	e9 96       	adiw	r28, 0x39	; 57
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)

{
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	e9 97       	sbiw	r28, 0x39	; 57
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	89 af       	std	Y+57, r24	; 0x39

	DATA_BUS=(( A_u8Data & 0b11110000));
    2c10:	eb e3       	ldi	r30, 0x3B	; 59
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	89 ad       	ldd	r24, Y+57	; 0x39
    2c16:	80 7f       	andi	r24, 0xF0	; 240
    2c18:	80 83       	st	Z, r24
		CTL_BUS|=(1<<LCD_RS);
    2c1a:	a8 e3       	ldi	r26, 0x38	; 56
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e8 e3       	ldi	r30, 0x38	; 56
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	82 60       	ori	r24, 0x02	; 2
    2c26:	8c 93       	st	X, r24
		CTL_BUS |=(1<<LCD_EN);
    2c28:	a8 e3       	ldi	r26, 0x38	; 56
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	e8 e3       	ldi	r30, 0x38	; 56
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	88 60       	ori	r24, 0x08	; 8
    2c34:	8c 93       	st	X, r24
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	a0 ea       	ldi	r26, 0xA0	; 160
    2c3c:	b0 e4       	ldi	r27, 0x40	; 64
    2c3e:	8d ab       	std	Y+53, r24	; 0x35
    2c40:	9e ab       	std	Y+54, r25	; 0x36
    2c42:	af ab       	std	Y+55, r26	; 0x37
    2c44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c46:	6d a9       	ldd	r22, Y+53	; 0x35
    2c48:	7e a9       	ldd	r23, Y+54	; 0x36
    2c4a:	8f a9       	ldd	r24, Y+55	; 0x37
    2c4c:	98 ad       	ldd	r25, Y+56	; 0x38
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	4a ef       	ldi	r20, 0xFA	; 250
    2c54:	54 e4       	ldi	r21, 0x44	; 68
    2c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	89 ab       	std	Y+49, r24	; 0x31
    2c60:	9a ab       	std	Y+50, r25	; 0x32
    2c62:	ab ab       	std	Y+51, r26	; 0x33
    2c64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c66:	69 a9       	ldd	r22, Y+49	; 0x31
    2c68:	7a a9       	ldd	r23, Y+50	; 0x32
    2c6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e8       	ldi	r20, 0x80	; 128
    2c74:	5f e3       	ldi	r21, 0x3F	; 63
    2c76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7a:	88 23       	and	r24, r24
    2c7c:	2c f4       	brge	.+10     	; 0x2c88 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	98 ab       	std	Y+48, r25	; 0x30
    2c84:	8f a7       	std	Y+47, r24	; 0x2f
    2c86:	3f c0       	rjmp	.+126    	; 0x2d06 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    2c88:	69 a9       	ldd	r22, Y+49	; 0x31
    2c8a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c8c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c8e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	3f ef       	ldi	r19, 0xFF	; 255
    2c94:	4f e7       	ldi	r20, 0x7F	; 127
    2c96:	57 e4       	ldi	r21, 0x47	; 71
    2c98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9c:	18 16       	cp	r1, r24
    2c9e:	4c f5       	brge	.+82     	; 0x2cf2 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ca2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ca4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ca6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e2       	ldi	r20, 0x20	; 32
    2cae:	51 e4       	ldi	r21, 0x41	; 65
    2cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	98 ab       	std	Y+48, r25	; 0x30
    2cc6:	8f a7       	std	Y+47, r24	; 0x2f
    2cc8:	0f c0       	rjmp	.+30     	; 0x2ce8 <HLCD_voidSendData+0xee>
    2cca:	88 ec       	ldi	r24, 0xC8	; 200
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	9e a7       	std	Y+46, r25	; 0x2e
    2cd0:	8d a7       	std	Y+45, r24	; 0x2d
    2cd2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cd4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <HLCD_voidSendData+0xdc>
    2cda:	9e a7       	std	Y+46, r25	; 0x2e
    2cdc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cde:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	98 ab       	std	Y+48, r25	; 0x30
    2ce6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cea:	98 a9       	ldd	r25, Y+48	; 0x30
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	69 f7       	brne	.-38     	; 0x2cca <HLCD_voidSendData+0xd0>
    2cf0:	14 c0       	rjmp	.+40     	; 0x2d1a <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf2:	69 a9       	ldd	r22, Y+49	; 0x31
    2cf4:	7a a9       	ldd	r23, Y+50	; 0x32
    2cf6:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf8:	9c a9       	ldd	r25, Y+52	; 0x34
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	98 ab       	std	Y+48, r25	; 0x30
    2d04:	8f a7       	std	Y+47, r24	; 0x2f
    2d06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d08:	98 a9       	ldd	r25, Y+48	; 0x30
    2d0a:	9c a7       	std	Y+44, r25	; 0x2c
    2d0c:	8b a7       	std	Y+43, r24	; 0x2b
    2d0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d10:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <HLCD_voidSendData+0x118>
    2d16:	9c a7       	std	Y+44, r25	; 0x2c
    2d18:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);
		CTL_BUS &=~(1<<LCD_EN);
    2d1a:	a8 e3       	ldi	r26, 0x38	; 56
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	e8 e3       	ldi	r30, 0x38	; 56
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	87 7f       	andi	r24, 0xF7	; 247
    2d26:	8c 93       	st	X, r24
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	a0 ea       	ldi	r26, 0xA0	; 160
    2d2e:	b0 e4       	ldi	r27, 0x40	; 64
    2d30:	8f a3       	std	Y+39, r24	; 0x27
    2d32:	98 a7       	std	Y+40, r25	; 0x28
    2d34:	a9 a7       	std	Y+41, r26	; 0x29
    2d36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d38:	6f a1       	ldd	r22, Y+39	; 0x27
    2d3a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d3c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	4a ef       	ldi	r20, 0xFA	; 250
    2d46:	54 e4       	ldi	r21, 0x44	; 68
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	8b a3       	std	Y+35, r24	; 0x23
    2d52:	9c a3       	std	Y+36, r25	; 0x24
    2d54:	ad a3       	std	Y+37, r26	; 0x25
    2d56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d58:	6b a1       	ldd	r22, Y+35	; 0x23
    2d5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	5f e3       	ldi	r21, 0x3F	; 63
    2d68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d6c:	88 23       	and	r24, r24
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <HLCD_voidSendData+0x180>
		__ticks = 1;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9a a3       	std	Y+34, r25	; 0x22
    2d76:	89 a3       	std	Y+33, r24	; 0x21
    2d78:	3f c0       	rjmp	.+126    	; 0x2df8 <HLCD_voidSendData+0x1fe>
	else if (__tmp > 65535)
    2d7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d80:	9e a1       	ldd	r25, Y+38	; 0x26
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	3f ef       	ldi	r19, 0xFF	; 255
    2d86:	4f e7       	ldi	r20, 0x7F	; 127
    2d88:	57 e4       	ldi	r21, 0x47	; 71
    2d8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d8e:	18 16       	cp	r1, r24
    2d90:	4c f5       	brge	.+82     	; 0x2de4 <HLCD_voidSendData+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d92:	6f a1       	ldd	r22, Y+39	; 0x27
    2d94:	78 a5       	ldd	r23, Y+40	; 0x28
    2d96:	89 a5       	ldd	r24, Y+41	; 0x29
    2d98:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e2       	ldi	r20, 0x20	; 32
    2da0:	51 e4       	ldi	r21, 0x41	; 65
    2da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9a a3       	std	Y+34, r25	; 0x22
    2db8:	89 a3       	std	Y+33, r24	; 0x21
    2dba:	0f c0       	rjmp	.+30     	; 0x2dda <HLCD_voidSendData+0x1e0>
    2dbc:	88 ec       	ldi	r24, 0xC8	; 200
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	98 a3       	std	Y+32, r25	; 0x20
    2dc2:	8f 8f       	std	Y+31, r24	; 0x1f
    2dc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dc6:	98 a1       	ldd	r25, Y+32	; 0x20
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <HLCD_voidSendData+0x1ce>
    2dcc:	98 a3       	std	Y+32, r25	; 0x20
    2dce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd0:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd2:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	9a a3       	std	Y+34, r25	; 0x22
    2dd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dda:	89 a1       	ldd	r24, Y+33	; 0x21
    2ddc:	9a a1       	ldd	r25, Y+34	; 0x22
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	69 f7       	brne	.-38     	; 0x2dbc <HLCD_voidSendData+0x1c2>
    2de2:	14 c0       	rjmp	.+40     	; 0x2e0c <HLCD_voidSendData+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de4:	6b a1       	ldd	r22, Y+35	; 0x23
    2de6:	7c a1       	ldd	r23, Y+36	; 0x24
    2de8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dea:	9e a1       	ldd	r25, Y+38	; 0x26
    2dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9a a3       	std	Y+34, r25	; 0x22
    2df6:	89 a3       	std	Y+33, r24	; 0x21
    2df8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dfa:	9a a1       	ldd	r25, Y+34	; 0x22
    2dfc:	9e 8f       	std	Y+30, r25	; 0x1e
    2dfe:	8d 8f       	std	Y+29, r24	; 0x1d
    2e00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <HLCD_voidSendData+0x20a>
    2e08:	9e 8f       	std	Y+30, r25	; 0x1e
    2e0a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);
		DATA_BUS=(( A_u8Data & 0b00001111)<<4);
    2e0c:	eb e3       	ldi	r30, 0x3B	; 59
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	89 ad       	ldd	r24, Y+57	; 0x39
    2e12:	88 2f       	mov	r24, r24
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	82 95       	swap	r24
    2e18:	92 95       	swap	r25
    2e1a:	90 7f       	andi	r25, 0xF0	; 240
    2e1c:	98 27       	eor	r25, r24
    2e1e:	80 7f       	andi	r24, 0xF0	; 240
    2e20:	98 27       	eor	r25, r24
    2e22:	80 83       	st	Z, r24
		CTL_BUS |=(1<<LCD_EN);
    2e24:	a8 e3       	ldi	r26, 0x38	; 56
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	e8 e3       	ldi	r30, 0x38	; 56
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	88 60       	ori	r24, 0x08	; 8
    2e30:	8c 93       	st	X, r24
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	a0 ea       	ldi	r26, 0xA0	; 160
    2e38:	b0 e4       	ldi	r27, 0x40	; 64
    2e3a:	89 8f       	std	Y+25, r24	; 0x19
    2e3c:	9a 8f       	std	Y+26, r25	; 0x1a
    2e3e:	ab 8f       	std	Y+27, r26	; 0x1b
    2e40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e42:	69 8d       	ldd	r22, Y+25	; 0x19
    2e44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	4a ef       	ldi	r20, 0xFA	; 250
    2e50:	54 e4       	ldi	r21, 0x44	; 68
    2e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	8d 8b       	std	Y+21, r24	; 0x15
    2e5c:	9e 8b       	std	Y+22, r25	; 0x16
    2e5e:	af 8b       	std	Y+23, r26	; 0x17
    2e60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e62:	6d 89       	ldd	r22, Y+21	; 0x15
    2e64:	7e 89       	ldd	r23, Y+22	; 0x16
    2e66:	8f 89       	ldd	r24, Y+23	; 0x17
    2e68:	98 8d       	ldd	r25, Y+24	; 0x18
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e8       	ldi	r20, 0x80	; 128
    2e70:	5f e3       	ldi	r21, 0x3F	; 63
    2e72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e76:	88 23       	and	r24, r24
    2e78:	2c f4       	brge	.+10     	; 0x2e84 <HLCD_voidSendData+0x28a>
		__ticks = 1;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	9c 8b       	std	Y+20, r25	; 0x14
    2e80:	8b 8b       	std	Y+19, r24	; 0x13
    2e82:	3f c0       	rjmp	.+126    	; 0x2f02 <HLCD_voidSendData+0x308>
	else if (__tmp > 65535)
    2e84:	6d 89       	ldd	r22, Y+21	; 0x15
    2e86:	7e 89       	ldd	r23, Y+22	; 0x16
    2e88:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	3f ef       	ldi	r19, 0xFF	; 255
    2e90:	4f e7       	ldi	r20, 0x7F	; 127
    2e92:	57 e4       	ldi	r21, 0x47	; 71
    2e94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e98:	18 16       	cp	r1, r24
    2e9a:	4c f5       	brge	.+82     	; 0x2eee <HLCD_voidSendData+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ea0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ea2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e2       	ldi	r20, 0x20	; 32
    2eaa:	51 e4       	ldi	r21, 0x41	; 65
    2eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	bc 01       	movw	r22, r24
    2eb6:	cd 01       	movw	r24, r26
    2eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	9c 8b       	std	Y+20, r25	; 0x14
    2ec2:	8b 8b       	std	Y+19, r24	; 0x13
    2ec4:	0f c0       	rjmp	.+30     	; 0x2ee4 <HLCD_voidSendData+0x2ea>
    2ec6:	88 ec       	ldi	r24, 0xC8	; 200
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	9a 8b       	std	Y+18, r25	; 0x12
    2ecc:	89 8b       	std	Y+17, r24	; 0x11
    2ece:	89 89       	ldd	r24, Y+17	; 0x11
    2ed0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	f1 f7       	brne	.-4      	; 0x2ed2 <HLCD_voidSendData+0x2d8>
    2ed6:	9a 8b       	std	Y+18, r25	; 0x12
    2ed8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eda:	8b 89       	ldd	r24, Y+19	; 0x13
    2edc:	9c 89       	ldd	r25, Y+20	; 0x14
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	9c 8b       	std	Y+20, r25	; 0x14
    2ee2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	69 f7       	brne	.-38     	; 0x2ec6 <HLCD_voidSendData+0x2cc>
    2eec:	14 c0       	rjmp	.+40     	; 0x2f16 <HLCD_voidSendData+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eee:	6d 89       	ldd	r22, Y+21	; 0x15
    2ef0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	9c 8b       	std	Y+20, r25	; 0x14
    2f00:	8b 8b       	std	Y+19, r24	; 0x13
    2f02:	8b 89       	ldd	r24, Y+19	; 0x13
    2f04:	9c 89       	ldd	r25, Y+20	; 0x14
    2f06:	98 8b       	std	Y+16, r25	; 0x10
    2f08:	8f 87       	std	Y+15, r24	; 0x0f
    2f0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f0c:	98 89       	ldd	r25, Y+16	; 0x10
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <HLCD_voidSendData+0x314>
    2f12:	98 8b       	std	Y+16, r25	; 0x10
    2f14:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		CTL_BUS &=~(1<<LCD_EN);
    2f16:	a8 e3       	ldi	r26, 0x38	; 56
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	e8 e3       	ldi	r30, 0x38	; 56
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	87 7f       	andi	r24, 0xF7	; 247
    2f22:	8c 93       	st	X, r24
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a0 ea       	ldi	r26, 0xA0	; 160
    2f2a:	b0 e4       	ldi	r27, 0x40	; 64
    2f2c:	8b 87       	std	Y+11, r24	; 0x0b
    2f2e:	9c 87       	std	Y+12, r25	; 0x0c
    2f30:	ad 87       	std	Y+13, r26	; 0x0d
    2f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	4a ef       	ldi	r20, 0xFA	; 250
    2f42:	54 e4       	ldi	r21, 0x44	; 68
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	8f 83       	std	Y+7, r24	; 0x07
    2f4e:	98 87       	std	Y+8, r25	; 0x08
    2f50:	a9 87       	std	Y+9, r26	; 0x09
    2f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f54:	6f 81       	ldd	r22, Y+7	; 0x07
    2f56:	78 85       	ldd	r23, Y+8	; 0x08
    2f58:	89 85       	ldd	r24, Y+9	; 0x09
    2f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e8       	ldi	r20, 0x80	; 128
    2f62:	5f e3       	ldi	r21, 0x3F	; 63
    2f64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f68:	88 23       	and	r24, r24
    2f6a:	2c f4       	brge	.+10     	; 0x2f76 <HLCD_voidSendData+0x37c>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
    2f74:	3f c0       	rjmp	.+126    	; 0x2ff4 <HLCD_voidSendData+0x3fa>
	else if (__tmp > 65535)
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	3f ef       	ldi	r19, 0xFF	; 255
    2f82:	4f e7       	ldi	r20, 0x7F	; 127
    2f84:	57 e4       	ldi	r21, 0x47	; 71
    2f86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f8a:	18 16       	cp	r1, r24
    2f8c:	4c f5       	brge	.+82     	; 0x2fe0 <HLCD_voidSendData+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e2       	ldi	r20, 0x20	; 32
    2f9c:	51 e4       	ldi	r21, 0x41	; 65
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	9e 83       	std	Y+6, r25	; 0x06
    2fb4:	8d 83       	std	Y+5, r24	; 0x05
    2fb6:	0f c0       	rjmp	.+30     	; 0x2fd6 <HLCD_voidSendData+0x3dc>
    2fb8:	88 ec       	ldi	r24, 0xC8	; 200
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	9c 83       	std	Y+4, r25	; 0x04
    2fbe:	8b 83       	std	Y+3, r24	; 0x03
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <HLCD_voidSendData+0x3ca>
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	9e 83       	std	Y+6, r25	; 0x06
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	69 f7       	brne	.-38     	; 0x2fb8 <HLCD_voidSendData+0x3be>
    2fde:	14 c0       	rjmp	.+40     	; 0x3008 <HLCD_voidSendData+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe2:	78 85       	ldd	r23, Y+8	; 0x08
    2fe4:	89 85       	ldd	r24, Y+9	; 0x09
    2fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff8:	9a 83       	std	Y+2, r25	; 0x02
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <HLCD_voidSendData+0x406>
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
}
    3008:	e9 96       	adiw	r28, 0x39	; 57
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <HLCD_voidInit>:

void HLCD_voidInit() {
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	e8 97       	sbiw	r28, 0x38	; 56
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
    302e:	ea e3       	ldi	r30, 0x3A	; 58
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 ef       	ldi	r24, 0xF0	; 240
    3034:	80 83       	st	Z, r24
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
    3036:	a7 e3       	ldi	r26, 0x37	; 55
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	e7 e3       	ldi	r30, 0x37	; 55
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	8e 60       	ori	r24, 0x0E	; 14
    3042:	8c 93       	st	X, r24

	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
    3044:	eb e3       	ldi	r30, 0x3B	; 59
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 e2       	ldi	r24, 0x20	; 32
    304a:	80 83       	st	Z, r24
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
    304c:	a8 e3       	ldi	r26, 0x38	; 56
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	e8 e3       	ldi	r30, 0x38	; 56
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	88 60       	ori	r24, 0x08	; 8
    3058:	8c 93       	st	X, r24
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	a0 ea       	ldi	r26, 0xA0	; 160
    3060:	b0 e4       	ldi	r27, 0x40	; 64
    3062:	8d ab       	std	Y+53, r24	; 0x35
    3064:	9e ab       	std	Y+54, r25	; 0x36
    3066:	af ab       	std	Y+55, r26	; 0x37
    3068:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306a:	6d a9       	ldd	r22, Y+53	; 0x35
    306c:	7e a9       	ldd	r23, Y+54	; 0x36
    306e:	8f a9       	ldd	r24, Y+55	; 0x37
    3070:	98 ad       	ldd	r25, Y+56	; 0x38
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	4a ef       	ldi	r20, 0xFA	; 250
    3078:	54 e4       	ldi	r21, 0x44	; 68
    307a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	89 ab       	std	Y+49, r24	; 0x31
    3084:	9a ab       	std	Y+50, r25	; 0x32
    3086:	ab ab       	std	Y+51, r26	; 0x33
    3088:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    308a:	69 a9       	ldd	r22, Y+49	; 0x31
    308c:	7a a9       	ldd	r23, Y+50	; 0x32
    308e:	8b a9       	ldd	r24, Y+51	; 0x33
    3090:	9c a9       	ldd	r25, Y+52	; 0x34
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e8       	ldi	r20, 0x80	; 128
    3098:	5f e3       	ldi	r21, 0x3F	; 63
    309a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    309e:	88 23       	and	r24, r24
    30a0:	2c f4       	brge	.+10     	; 0x30ac <HLCD_voidInit+0x92>
		__ticks = 1;
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	98 ab       	std	Y+48, r25	; 0x30
    30a8:	8f a7       	std	Y+47, r24	; 0x2f
    30aa:	3f c0       	rjmp	.+126    	; 0x312a <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    30ac:	69 a9       	ldd	r22, Y+49	; 0x31
    30ae:	7a a9       	ldd	r23, Y+50	; 0x32
    30b0:	8b a9       	ldd	r24, Y+51	; 0x33
    30b2:	9c a9       	ldd	r25, Y+52	; 0x34
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	3f ef       	ldi	r19, 0xFF	; 255
    30b8:	4f e7       	ldi	r20, 0x7F	; 127
    30ba:	57 e4       	ldi	r21, 0x47	; 71
    30bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c0:	18 16       	cp	r1, r24
    30c2:	4c f5       	brge	.+82     	; 0x3116 <HLCD_voidInit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c4:	6d a9       	ldd	r22, Y+53	; 0x35
    30c6:	7e a9       	ldd	r23, Y+54	; 0x36
    30c8:	8f a9       	ldd	r24, Y+55	; 0x37
    30ca:	98 ad       	ldd	r25, Y+56	; 0x38
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e2       	ldi	r20, 0x20	; 32
    30d2:	51 e4       	ldi	r21, 0x41	; 65
    30d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	bc 01       	movw	r22, r24
    30de:	cd 01       	movw	r24, r26
    30e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	98 ab       	std	Y+48, r25	; 0x30
    30ea:	8f a7       	std	Y+47, r24	; 0x2f
    30ec:	0f c0       	rjmp	.+30     	; 0x310c <HLCD_voidInit+0xf2>
    30ee:	88 ec       	ldi	r24, 0xC8	; 200
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	9e a7       	std	Y+46, r25	; 0x2e
    30f4:	8d a7       	std	Y+45, r24	; 0x2d
    30f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    30f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	f1 f7       	brne	.-4      	; 0x30fa <HLCD_voidInit+0xe0>
    30fe:	9e a7       	std	Y+46, r25	; 0x2e
    3100:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3102:	8f a5       	ldd	r24, Y+47	; 0x2f
    3104:	98 a9       	ldd	r25, Y+48	; 0x30
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	98 ab       	std	Y+48, r25	; 0x30
    310a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310c:	8f a5       	ldd	r24, Y+47	; 0x2f
    310e:	98 a9       	ldd	r25, Y+48	; 0x30
    3110:	00 97       	sbiw	r24, 0x00	; 0
    3112:	69 f7       	brne	.-38     	; 0x30ee <HLCD_voidInit+0xd4>
    3114:	14 c0       	rjmp	.+40     	; 0x313e <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3116:	69 a9       	ldd	r22, Y+49	; 0x31
    3118:	7a a9       	ldd	r23, Y+50	; 0x32
    311a:	8b a9       	ldd	r24, Y+51	; 0x33
    311c:	9c a9       	ldd	r25, Y+52	; 0x34
    311e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	98 ab       	std	Y+48, r25	; 0x30
    3128:	8f a7       	std	Y+47, r24	; 0x2f
    312a:	8f a5       	ldd	r24, Y+47	; 0x2f
    312c:	98 a9       	ldd	r25, Y+48	; 0x30
    312e:	9c a7       	std	Y+44, r25	; 0x2c
    3130:	8b a7       	std	Y+43, r24	; 0x2b
    3132:	8b a5       	ldd	r24, Y+43	; 0x2b
    3134:	9c a5       	ldd	r25, Y+44	; 0x2c
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	f1 f7       	brne	.-4      	; 0x3136 <HLCD_voidInit+0x11c>
    313a:	9c a7       	std	Y+44, r25	; 0x2c
    313c:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(5);
		CTL_BUS &=~(1<<LCD_EN);
    313e:	a8 e3       	ldi	r26, 0x38	; 56
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	e8 e3       	ldi	r30, 0x38	; 56
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	87 7f       	andi	r24, 0xF7	; 247
    314a:	8c 93       	st	X, r24
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	a0 ea       	ldi	r26, 0xA0	; 160
    3152:	b0 e4       	ldi	r27, 0x40	; 64
    3154:	8f a3       	std	Y+39, r24	; 0x27
    3156:	98 a7       	std	Y+40, r25	; 0x28
    3158:	a9 a7       	std	Y+41, r26	; 0x29
    315a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315c:	6f a1       	ldd	r22, Y+39	; 0x27
    315e:	78 a5       	ldd	r23, Y+40	; 0x28
    3160:	89 a5       	ldd	r24, Y+41	; 0x29
    3162:	9a a5       	ldd	r25, Y+42	; 0x2a
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	4a ef       	ldi	r20, 0xFA	; 250
    316a:	54 e4       	ldi	r21, 0x44	; 68
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	8b a3       	std	Y+35, r24	; 0x23
    3176:	9c a3       	std	Y+36, r25	; 0x24
    3178:	ad a3       	std	Y+37, r26	; 0x25
    317a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    317c:	6b a1       	ldd	r22, Y+35	; 0x23
    317e:	7c a1       	ldd	r23, Y+36	; 0x24
    3180:	8d a1       	ldd	r24, Y+37	; 0x25
    3182:	9e a1       	ldd	r25, Y+38	; 0x26
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e8       	ldi	r20, 0x80	; 128
    318a:	5f e3       	ldi	r21, 0x3F	; 63
    318c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3190:	88 23       	and	r24, r24
    3192:	2c f4       	brge	.+10     	; 0x319e <HLCD_voidInit+0x184>
		__ticks = 1;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9a a3       	std	Y+34, r25	; 0x22
    319a:	89 a3       	std	Y+33, r24	; 0x21
    319c:	3f c0       	rjmp	.+126    	; 0x321c <HLCD_voidInit+0x202>
	else if (__tmp > 65535)
    319e:	6b a1       	ldd	r22, Y+35	; 0x23
    31a0:	7c a1       	ldd	r23, Y+36	; 0x24
    31a2:	8d a1       	ldd	r24, Y+37	; 0x25
    31a4:	9e a1       	ldd	r25, Y+38	; 0x26
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	3f ef       	ldi	r19, 0xFF	; 255
    31aa:	4f e7       	ldi	r20, 0x7F	; 127
    31ac:	57 e4       	ldi	r21, 0x47	; 71
    31ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31b2:	18 16       	cp	r1, r24
    31b4:	4c f5       	brge	.+82     	; 0x3208 <HLCD_voidInit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	6f a1       	ldd	r22, Y+39	; 0x27
    31b8:	78 a5       	ldd	r23, Y+40	; 0x28
    31ba:	89 a5       	ldd	r24, Y+41	; 0x29
    31bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e2       	ldi	r20, 0x20	; 32
    31c4:	51 e4       	ldi	r21, 0x41	; 65
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9a a3       	std	Y+34, r25	; 0x22
    31dc:	89 a3       	std	Y+33, r24	; 0x21
    31de:	0f c0       	rjmp	.+30     	; 0x31fe <HLCD_voidInit+0x1e4>
    31e0:	88 ec       	ldi	r24, 0xC8	; 200
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	98 a3       	std	Y+32, r25	; 0x20
    31e6:	8f 8f       	std	Y+31, r24	; 0x1f
    31e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31ea:	98 a1       	ldd	r25, Y+32	; 0x20
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <HLCD_voidInit+0x1d2>
    31f0:	98 a3       	std	Y+32, r25	; 0x20
    31f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f4:	89 a1       	ldd	r24, Y+33	; 0x21
    31f6:	9a a1       	ldd	r25, Y+34	; 0x22
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	9a a3       	std	Y+34, r25	; 0x22
    31fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3200:	9a a1       	ldd	r25, Y+34	; 0x22
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	69 f7       	brne	.-38     	; 0x31e0 <HLCD_voidInit+0x1c6>
    3206:	14 c0       	rjmp	.+40     	; 0x3230 <HLCD_voidInit+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3208:	6b a1       	ldd	r22, Y+35	; 0x23
    320a:	7c a1       	ldd	r23, Y+36	; 0x24
    320c:	8d a1       	ldd	r24, Y+37	; 0x25
    320e:	9e a1       	ldd	r25, Y+38	; 0x26
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	9a a3       	std	Y+34, r25	; 0x22
    321a:	89 a3       	std	Y+33, r24	; 0x21
    321c:	89 a1       	ldd	r24, Y+33	; 0x21
    321e:	9a a1       	ldd	r25, Y+34	; 0x22
    3220:	9e 8f       	std	Y+30, r25	; 0x1e
    3222:	8d 8f       	std	Y+29, r24	; 0x1d
    3224:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3226:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	f1 f7       	brne	.-4      	; 0x3228 <HLCD_voidInit+0x20e>
    322c:	9e 8f       	std	Y+30, r25	; 0x1e
    322e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);

		 HLCD_voidSendCommand(LCD_CMD_4BIT_2ROW_5X7);
    3230:	88 e2       	ldi	r24, 0x28	; 40
    3232:	0e 94 ed 13 	call	0x27da	; 0x27da <HLCD_voidSendCommand>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	a0 ea       	ldi	r26, 0xA0	; 160
    323c:	b0 e4       	ldi	r27, 0x40	; 64
    323e:	89 8f       	std	Y+25, r24	; 0x19
    3240:	9a 8f       	std	Y+26, r25	; 0x1a
    3242:	ab 8f       	std	Y+27, r26	; 0x1b
    3244:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3246:	69 8d       	ldd	r22, Y+25	; 0x19
    3248:	7a 8d       	ldd	r23, Y+26	; 0x1a
    324a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    324c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	4a ef       	ldi	r20, 0xFA	; 250
    3254:	54 e4       	ldi	r21, 0x44	; 68
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	8d 8b       	std	Y+21, r24	; 0x15
    3260:	9e 8b       	std	Y+22, r25	; 0x16
    3262:	af 8b       	std	Y+23, r26	; 0x17
    3264:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3266:	6d 89       	ldd	r22, Y+21	; 0x15
    3268:	7e 89       	ldd	r23, Y+22	; 0x16
    326a:	8f 89       	ldd	r24, Y+23	; 0x17
    326c:	98 8d       	ldd	r25, Y+24	; 0x18
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e8       	ldi	r20, 0x80	; 128
    3274:	5f e3       	ldi	r21, 0x3F	; 63
    3276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    327a:	88 23       	and	r24, r24
    327c:	2c f4       	brge	.+10     	; 0x3288 <HLCD_voidInit+0x26e>
		__ticks = 1;
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9c 8b       	std	Y+20, r25	; 0x14
    3284:	8b 8b       	std	Y+19, r24	; 0x13
    3286:	3f c0       	rjmp	.+126    	; 0x3306 <HLCD_voidInit+0x2ec>
	else if (__tmp > 65535)
    3288:	6d 89       	ldd	r22, Y+21	; 0x15
    328a:	7e 89       	ldd	r23, Y+22	; 0x16
    328c:	8f 89       	ldd	r24, Y+23	; 0x17
    328e:	98 8d       	ldd	r25, Y+24	; 0x18
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	3f ef       	ldi	r19, 0xFF	; 255
    3294:	4f e7       	ldi	r20, 0x7F	; 127
    3296:	57 e4       	ldi	r21, 0x47	; 71
    3298:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    329c:	18 16       	cp	r1, r24
    329e:	4c f5       	brge	.+82     	; 0x32f2 <HLCD_voidInit+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a0:	69 8d       	ldd	r22, Y+25	; 0x19
    32a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e2       	ldi	r20, 0x20	; 32
    32ae:	51 e4       	ldi	r21, 0x41	; 65
    32b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	9c 8b       	std	Y+20, r25	; 0x14
    32c6:	8b 8b       	std	Y+19, r24	; 0x13
    32c8:	0f c0       	rjmp	.+30     	; 0x32e8 <HLCD_voidInit+0x2ce>
    32ca:	88 ec       	ldi	r24, 0xC8	; 200
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	9a 8b       	std	Y+18, r25	; 0x12
    32d0:	89 8b       	std	Y+17, r24	; 0x11
    32d2:	89 89       	ldd	r24, Y+17	; 0x11
    32d4:	9a 89       	ldd	r25, Y+18	; 0x12
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <HLCD_voidInit+0x2bc>
    32da:	9a 8b       	std	Y+18, r25	; 0x12
    32dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32de:	8b 89       	ldd	r24, Y+19	; 0x13
    32e0:	9c 89       	ldd	r25, Y+20	; 0x14
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	9c 8b       	std	Y+20, r25	; 0x14
    32e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e8:	8b 89       	ldd	r24, Y+19	; 0x13
    32ea:	9c 89       	ldd	r25, Y+20	; 0x14
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	69 f7       	brne	.-38     	; 0x32ca <HLCD_voidInit+0x2b0>
    32f0:	14 c0       	rjmp	.+40     	; 0x331a <HLCD_voidInit+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f2:	6d 89       	ldd	r22, Y+21	; 0x15
    32f4:	7e 89       	ldd	r23, Y+22	; 0x16
    32f6:	8f 89       	ldd	r24, Y+23	; 0x17
    32f8:	98 8d       	ldd	r25, Y+24	; 0x18
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	9c 8b       	std	Y+20, r25	; 0x14
    3304:	8b 8b       	std	Y+19, r24	; 0x13
    3306:	8b 89       	ldd	r24, Y+19	; 0x13
    3308:	9c 89       	ldd	r25, Y+20	; 0x14
    330a:	98 8b       	std	Y+16, r25	; 0x10
    330c:	8f 87       	std	Y+15, r24	; 0x0f
    330e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3310:	98 89       	ldd	r25, Y+16	; 0x10
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <HLCD_voidInit+0x2f8>
    3316:	98 8b       	std	Y+16, r25	; 0x10
    3318:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		 HLCD_voidSendCommand(LCD_CMD_DISPLAY_CURSOR_BLINK);
    331a:	8f e0       	ldi	r24, 0x0F	; 15
    331c:	0e 94 ed 13 	call	0x27da	; 0x27da <HLCD_voidSendCommand>
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	a0 ea       	ldi	r26, 0xA0	; 160
    3326:	b0 e4       	ldi	r27, 0x40	; 64
    3328:	8b 87       	std	Y+11, r24	; 0x0b
    332a:	9c 87       	std	Y+12, r25	; 0x0c
    332c:	ad 87       	std	Y+13, r26	; 0x0d
    332e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3330:	6b 85       	ldd	r22, Y+11	; 0x0b
    3332:	7c 85       	ldd	r23, Y+12	; 0x0c
    3334:	8d 85       	ldd	r24, Y+13	; 0x0d
    3336:	9e 85       	ldd	r25, Y+14	; 0x0e
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	4a ef       	ldi	r20, 0xFA	; 250
    333e:	54 e4       	ldi	r21, 0x44	; 68
    3340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	8f 83       	std	Y+7, r24	; 0x07
    334a:	98 87       	std	Y+8, r25	; 0x08
    334c:	a9 87       	std	Y+9, r26	; 0x09
    334e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3350:	6f 81       	ldd	r22, Y+7	; 0x07
    3352:	78 85       	ldd	r23, Y+8	; 0x08
    3354:	89 85       	ldd	r24, Y+9	; 0x09
    3356:	9a 85       	ldd	r25, Y+10	; 0x0a
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e8       	ldi	r20, 0x80	; 128
    335e:	5f e3       	ldi	r21, 0x3F	; 63
    3360:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3364:	88 23       	and	r24, r24
    3366:	2c f4       	brge	.+10     	; 0x3372 <HLCD_voidInit+0x358>
		__ticks = 1;
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	9e 83       	std	Y+6, r25	; 0x06
    336e:	8d 83       	std	Y+5, r24	; 0x05
    3370:	3f c0       	rjmp	.+126    	; 0x33f0 <HLCD_voidInit+0x3d6>
	else if (__tmp > 65535)
    3372:	6f 81       	ldd	r22, Y+7	; 0x07
    3374:	78 85       	ldd	r23, Y+8	; 0x08
    3376:	89 85       	ldd	r24, Y+9	; 0x09
    3378:	9a 85       	ldd	r25, Y+10	; 0x0a
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	3f ef       	ldi	r19, 0xFF	; 255
    337e:	4f e7       	ldi	r20, 0x7F	; 127
    3380:	57 e4       	ldi	r21, 0x47	; 71
    3382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3386:	18 16       	cp	r1, r24
    3388:	4c f5       	brge	.+82     	; 0x33dc <HLCD_voidInit+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338a:	6b 85       	ldd	r22, Y+11	; 0x0b
    338c:	7c 85       	ldd	r23, Y+12	; 0x0c
    338e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3390:	9e 85       	ldd	r25, Y+14	; 0x0e
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	40 e2       	ldi	r20, 0x20	; 32
    3398:	51 e4       	ldi	r21, 0x41	; 65
    339a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	bc 01       	movw	r22, r24
    33a4:	cd 01       	movw	r24, r26
    33a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	9e 83       	std	Y+6, r25	; 0x06
    33b0:	8d 83       	std	Y+5, r24	; 0x05
    33b2:	0f c0       	rjmp	.+30     	; 0x33d2 <HLCD_voidInit+0x3b8>
    33b4:	88 ec       	ldi	r24, 0xC8	; 200
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	9c 83       	std	Y+4, r25	; 0x04
    33ba:	8b 83       	std	Y+3, r24	; 0x03
    33bc:	8b 81       	ldd	r24, Y+3	; 0x03
    33be:	9c 81       	ldd	r25, Y+4	; 0x04
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	f1 f7       	brne	.-4      	; 0x33c0 <HLCD_voidInit+0x3a6>
    33c4:	9c 83       	std	Y+4, r25	; 0x04
    33c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ca:	9e 81       	ldd	r25, Y+6	; 0x06
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	9e 83       	std	Y+6, r25	; 0x06
    33d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d2:	8d 81       	ldd	r24, Y+5	; 0x05
    33d4:	9e 81       	ldd	r25, Y+6	; 0x06
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	69 f7       	brne	.-38     	; 0x33b4 <HLCD_voidInit+0x39a>
    33da:	14 c0       	rjmp	.+40     	; 0x3404 <HLCD_voidInit+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33dc:	6f 81       	ldd	r22, Y+7	; 0x07
    33de:	78 85       	ldd	r23, Y+8	; 0x08
    33e0:	89 85       	ldd	r24, Y+9	; 0x09
    33e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	9e 83       	std	Y+6, r25	; 0x06
    33ee:	8d 83       	std	Y+5, r24	; 0x05
    33f0:	8d 81       	ldd	r24, Y+5	; 0x05
    33f2:	9e 81       	ldd	r25, Y+6	; 0x06
    33f4:	9a 83       	std	Y+2, r25	; 0x02
    33f6:	89 83       	std	Y+1, r24	; 0x01
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	9a 81       	ldd	r25, Y+2	; 0x02
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	f1 f7       	brne	.-4      	; 0x33fc <HLCD_voidInit+0x3e2>
    3400:	9a 83       	std	Y+2, r25	; 0x02
    3402:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
		 HLCD_voidSendCommand(0x80);
    3404:	80 e8       	ldi	r24, 0x80	; 128
    3406:	0e 94 ed 13 	call	0x27da	; 0x27da <HLCD_voidSendCommand>
}
    340a:	e8 96       	adiw	r28, 0x38	; 56
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	08 95       	ret

0000341c <HLCD_voidClearScreen>:



void HLCD_voidClearScreen() {
    341c:	df 93       	push	r29
    341e:	cf 93       	push	r28
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
    3424:	2e 97       	sbiw	r28, 0x0e	; 14
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61

	 HLCD_voidSendCommand(LCD_CMD_CLEAR_DISPLAY);
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	0e 94 ed 13 	call	0x27da	; 0x27da <HLCD_voidSendCommand>
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	a0 ea       	ldi	r26, 0xA0	; 160
    343c:	b0 e4       	ldi	r27, 0x40	; 64
    343e:	8b 87       	std	Y+11, r24	; 0x0b
    3440:	9c 87       	std	Y+12, r25	; 0x0c
    3442:	ad 87       	std	Y+13, r26	; 0x0d
    3444:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3446:	6b 85       	ldd	r22, Y+11	; 0x0b
    3448:	7c 85       	ldd	r23, Y+12	; 0x0c
    344a:	8d 85       	ldd	r24, Y+13	; 0x0d
    344c:	9e 85       	ldd	r25, Y+14	; 0x0e
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	4a ef       	ldi	r20, 0xFA	; 250
    3454:	54 e4       	ldi	r21, 0x44	; 68
    3456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	8f 83       	std	Y+7, r24	; 0x07
    3460:	98 87       	std	Y+8, r25	; 0x08
    3462:	a9 87       	std	Y+9, r26	; 0x09
    3464:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3466:	6f 81       	ldd	r22, Y+7	; 0x07
    3468:	78 85       	ldd	r23, Y+8	; 0x08
    346a:	89 85       	ldd	r24, Y+9	; 0x09
    346c:	9a 85       	ldd	r25, Y+10	; 0x0a
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	40 e8       	ldi	r20, 0x80	; 128
    3474:	5f e3       	ldi	r21, 0x3F	; 63
    3476:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    347a:	88 23       	and	r24, r24
    347c:	2c f4       	brge	.+10     	; 0x3488 <HLCD_voidClearScreen+0x6c>
		__ticks = 1;
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	9e 83       	std	Y+6, r25	; 0x06
    3484:	8d 83       	std	Y+5, r24	; 0x05
    3486:	3f c0       	rjmp	.+126    	; 0x3506 <HLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    3488:	6f 81       	ldd	r22, Y+7	; 0x07
    348a:	78 85       	ldd	r23, Y+8	; 0x08
    348c:	89 85       	ldd	r24, Y+9	; 0x09
    348e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	3f ef       	ldi	r19, 0xFF	; 255
    3494:	4f e7       	ldi	r20, 0x7F	; 127
    3496:	57 e4       	ldi	r21, 0x47	; 71
    3498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    349c:	18 16       	cp	r1, r24
    349e:	4c f5       	brge	.+82     	; 0x34f2 <HLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34a8:	20 e0       	ldi	r18, 0x00	; 0
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	40 e2       	ldi	r20, 0x20	; 32
    34ae:	51 e4       	ldi	r21, 0x41	; 65
    34b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	bc 01       	movw	r22, r24
    34ba:	cd 01       	movw	r24, r26
    34bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	9e 83       	std	Y+6, r25	; 0x06
    34c6:	8d 83       	std	Y+5, r24	; 0x05
    34c8:	0f c0       	rjmp	.+30     	; 0x34e8 <HLCD_voidClearScreen+0xcc>
    34ca:	88 ec       	ldi	r24, 0xC8	; 200
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	9c 83       	std	Y+4, r25	; 0x04
    34d0:	8b 83       	std	Y+3, r24	; 0x03
    34d2:	8b 81       	ldd	r24, Y+3	; 0x03
    34d4:	9c 81       	ldd	r25, Y+4	; 0x04
    34d6:	01 97       	sbiw	r24, 0x01	; 1
    34d8:	f1 f7       	brne	.-4      	; 0x34d6 <HLCD_voidClearScreen+0xba>
    34da:	9c 83       	std	Y+4, r25	; 0x04
    34dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34de:	8d 81       	ldd	r24, Y+5	; 0x05
    34e0:	9e 81       	ldd	r25, Y+6	; 0x06
    34e2:	01 97       	sbiw	r24, 0x01	; 1
    34e4:	9e 83       	std	Y+6, r25	; 0x06
    34e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ea:	9e 81       	ldd	r25, Y+6	; 0x06
    34ec:	00 97       	sbiw	r24, 0x00	; 0
    34ee:	69 f7       	brne	.-38     	; 0x34ca <HLCD_voidClearScreen+0xae>
    34f0:	14 c0       	rjmp	.+40     	; 0x351a <HLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f2:	6f 81       	ldd	r22, Y+7	; 0x07
    34f4:	78 85       	ldd	r23, Y+8	; 0x08
    34f6:	89 85       	ldd	r24, Y+9	; 0x09
    34f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	9e 83       	std	Y+6, r25	; 0x06
    3504:	8d 83       	std	Y+5, r24	; 0x05
    3506:	8d 81       	ldd	r24, Y+5	; 0x05
    3508:	9e 81       	ldd	r25, Y+6	; 0x06
    350a:	9a 83       	std	Y+2, r25	; 0x02
    350c:	89 83       	std	Y+1, r24	; 0x01
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	9a 81       	ldd	r25, Y+2	; 0x02
    3512:	01 97       	sbiw	r24, 0x01	; 1
    3514:	f1 f7       	brne	.-4      	; 0x3512 <HLCD_voidClearScreen+0xf6>
    3516:	9a 83       	std	Y+2, r25	; 0x02
    3518:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
}
    351a:	2e 96       	adiw	r28, 0x0e	; 14
    351c:	0f b6       	in	r0, 0x3f	; 63
    351e:	f8 94       	cli
    3520:	de bf       	out	0x3e, r29	; 62
    3522:	0f be       	out	0x3f, r0	; 63
    3524:	cd bf       	out	0x3d, r28	; 61
    3526:	cf 91       	pop	r28
    3528:	df 91       	pop	r29
    352a:	08 95       	ret

0000352c <HLCD_voidGoTo>:

void HLCD_voidGoTo(u8 A_u8Row, u8 A_u8Col) {
    352c:	df 93       	push	r29
    352e:	cf 93       	push	r28
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	6a 97       	sbiw	r28, 0x1a	; 26
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	f8 94       	cli
    353a:	de bf       	out	0x3e, r29	; 62
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	cd bf       	out	0x3d, r28	; 61
    3540:	89 8f       	std	Y+25, r24	; 0x19
    3542:	6a 8f       	std	Y+26, r22	; 0x1a
	 HLCD_voidSendCommand((0x80|(A_u8Row<<6))+A_u8Col);
    3544:	89 8d       	ldd	r24, Y+25	; 0x19
    3546:	88 2f       	mov	r24, r24
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	00 24       	eor	r0, r0
    354c:	96 95       	lsr	r25
    354e:	87 95       	ror	r24
    3550:	07 94       	ror	r0
    3552:	96 95       	lsr	r25
    3554:	87 95       	ror	r24
    3556:	07 94       	ror	r0
    3558:	98 2f       	mov	r25, r24
    355a:	80 2d       	mov	r24, r0
    355c:	80 68       	ori	r24, 0x80	; 128
    355e:	98 2f       	mov	r25, r24
    3560:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3562:	89 0f       	add	r24, r25
    3564:	0e 94 ed 13 	call	0x27da	; 0x27da <HLCD_voidSendCommand>
    3568:	80 e0       	ldi	r24, 0x00	; 0
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	a8 e4       	ldi	r26, 0x48	; 72
    356e:	b2 e4       	ldi	r27, 0x42	; 66
    3570:	8d 8b       	std	Y+21, r24	; 0x15
    3572:	9e 8b       	std	Y+22, r25	; 0x16
    3574:	af 8b       	std	Y+23, r26	; 0x17
    3576:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3578:	6d 89       	ldd	r22, Y+21	; 0x15
    357a:	7e 89       	ldd	r23, Y+22	; 0x16
    357c:	8f 89       	ldd	r24, Y+23	; 0x17
    357e:	98 8d       	ldd	r25, Y+24	; 0x18
    3580:	2b ea       	ldi	r18, 0xAB	; 171
    3582:	3a ea       	ldi	r19, 0xAA	; 170
    3584:	4a e2       	ldi	r20, 0x2A	; 42
    3586:	50 e4       	ldi	r21, 0x40	; 64
    3588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	89 8b       	std	Y+17, r24	; 0x11
    3592:	9a 8b       	std	Y+18, r25	; 0x12
    3594:	ab 8b       	std	Y+19, r26	; 0x13
    3596:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3598:	69 89       	ldd	r22, Y+17	; 0x11
    359a:	7a 89       	ldd	r23, Y+18	; 0x12
    359c:	8b 89       	ldd	r24, Y+19	; 0x13
    359e:	9c 89       	ldd	r25, Y+20	; 0x14
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e8       	ldi	r20, 0x80	; 128
    35a6:	5f e3       	ldi	r21, 0x3F	; 63
    35a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ac:	88 23       	and	r24, r24
    35ae:	1c f4       	brge	.+6      	; 0x35b6 <HLCD_voidGoTo+0x8a>
		__ticks = 1;
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	88 8b       	std	Y+16, r24	; 0x10
    35b4:	91 c0       	rjmp	.+290    	; 0x36d8 <HLCD_voidGoTo+0x1ac>
	else if (__tmp > 255)
    35b6:	69 89       	ldd	r22, Y+17	; 0x11
    35b8:	7a 89       	ldd	r23, Y+18	; 0x12
    35ba:	8b 89       	ldd	r24, Y+19	; 0x13
    35bc:	9c 89       	ldd	r25, Y+20	; 0x14
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	4f e7       	ldi	r20, 0x7F	; 127
    35c4:	53 e4       	ldi	r21, 0x43	; 67
    35c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ca:	18 16       	cp	r1, r24
    35cc:	0c f0       	brlt	.+2      	; 0x35d0 <HLCD_voidGoTo+0xa4>
    35ce:	7b c0       	rjmp	.+246    	; 0x36c6 <HLCD_voidGoTo+0x19a>
	{
		_delay_ms(__us / 1000.0);
    35d0:	6d 89       	ldd	r22, Y+21	; 0x15
    35d2:	7e 89       	ldd	r23, Y+22	; 0x16
    35d4:	8f 89       	ldd	r24, Y+23	; 0x17
    35d6:	98 8d       	ldd	r25, Y+24	; 0x18
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	4a e7       	ldi	r20, 0x7A	; 122
    35de:	54 e4       	ldi	r21, 0x44	; 68
    35e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	8c 87       	std	Y+12, r24	; 0x0c
    35ea:	9d 87       	std	Y+13, r25	; 0x0d
    35ec:	ae 87       	std	Y+14, r26	; 0x0e
    35ee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    35f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    35f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    35f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	4a ef       	ldi	r20, 0xFA	; 250
    35fe:	54 e4       	ldi	r21, 0x44	; 68
    3600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	88 87       	std	Y+8, r24	; 0x08
    360a:	99 87       	std	Y+9, r25	; 0x09
    360c:	aa 87       	std	Y+10, r26	; 0x0a
    360e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3610:	68 85       	ldd	r22, Y+8	; 0x08
    3612:	79 85       	ldd	r23, Y+9	; 0x09
    3614:	8a 85       	ldd	r24, Y+10	; 0x0a
    3616:	9b 85       	ldd	r25, Y+11	; 0x0b
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	40 e8       	ldi	r20, 0x80	; 128
    361e:	5f e3       	ldi	r21, 0x3F	; 63
    3620:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3624:	88 23       	and	r24, r24
    3626:	2c f4       	brge	.+10     	; 0x3632 <HLCD_voidGoTo+0x106>
		__ticks = 1;
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	9f 83       	std	Y+7, r25	; 0x07
    362e:	8e 83       	std	Y+6, r24	; 0x06
    3630:	3f c0       	rjmp	.+126    	; 0x36b0 <HLCD_voidGoTo+0x184>
	else if (__tmp > 65535)
    3632:	68 85       	ldd	r22, Y+8	; 0x08
    3634:	79 85       	ldd	r23, Y+9	; 0x09
    3636:	8a 85       	ldd	r24, Y+10	; 0x0a
    3638:	9b 85       	ldd	r25, Y+11	; 0x0b
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	3f ef       	ldi	r19, 0xFF	; 255
    363e:	4f e7       	ldi	r20, 0x7F	; 127
    3640:	57 e4       	ldi	r21, 0x47	; 71
    3642:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3646:	18 16       	cp	r1, r24
    3648:	4c f5       	brge	.+82     	; 0x369c <HLCD_voidGoTo+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364a:	6c 85       	ldd	r22, Y+12	; 0x0c
    364c:	7d 85       	ldd	r23, Y+13	; 0x0d
    364e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3650:	9f 85       	ldd	r25, Y+15	; 0x0f
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	40 e2       	ldi	r20, 0x20	; 32
    3658:	51 e4       	ldi	r21, 0x41	; 65
    365a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	9f 83       	std	Y+7, r25	; 0x07
    3670:	8e 83       	std	Y+6, r24	; 0x06
    3672:	0f c0       	rjmp	.+30     	; 0x3692 <HLCD_voidGoTo+0x166>
    3674:	88 ec       	ldi	r24, 0xC8	; 200
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	9d 83       	std	Y+5, r25	; 0x05
    367a:	8c 83       	std	Y+4, r24	; 0x04
    367c:	8c 81       	ldd	r24, Y+4	; 0x04
    367e:	9d 81       	ldd	r25, Y+5	; 0x05
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	f1 f7       	brne	.-4      	; 0x3680 <HLCD_voidGoTo+0x154>
    3684:	9d 83       	std	Y+5, r25	; 0x05
    3686:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3688:	8e 81       	ldd	r24, Y+6	; 0x06
    368a:	9f 81       	ldd	r25, Y+7	; 0x07
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	9f 83       	std	Y+7, r25	; 0x07
    3690:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3692:	8e 81       	ldd	r24, Y+6	; 0x06
    3694:	9f 81       	ldd	r25, Y+7	; 0x07
    3696:	00 97       	sbiw	r24, 0x00	; 0
    3698:	69 f7       	brne	.-38     	; 0x3674 <HLCD_voidGoTo+0x148>
    369a:	24 c0       	rjmp	.+72     	; 0x36e4 <HLCD_voidGoTo+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369c:	68 85       	ldd	r22, Y+8	; 0x08
    369e:	79 85       	ldd	r23, Y+9	; 0x09
    36a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    36a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    36a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	9f 83       	std	Y+7, r25	; 0x07
    36ae:	8e 83       	std	Y+6, r24	; 0x06
    36b0:	8e 81       	ldd	r24, Y+6	; 0x06
    36b2:	9f 81       	ldd	r25, Y+7	; 0x07
    36b4:	9b 83       	std	Y+3, r25	; 0x03
    36b6:	8a 83       	std	Y+2, r24	; 0x02
    36b8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ba:	9b 81       	ldd	r25, Y+3	; 0x03
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	f1 f7       	brne	.-4      	; 0x36bc <HLCD_voidGoTo+0x190>
    36c0:	9b 83       	std	Y+3, r25	; 0x03
    36c2:	8a 83       	std	Y+2, r24	; 0x02
    36c4:	0f c0       	rjmp	.+30     	; 0x36e4 <HLCD_voidGoTo+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    36c6:	69 89       	ldd	r22, Y+17	; 0x11
    36c8:	7a 89       	ldd	r23, Y+18	; 0x12
    36ca:	8b 89       	ldd	r24, Y+19	; 0x13
    36cc:	9c 89       	ldd	r25, Y+20	; 0x14
    36ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	88 8b       	std	Y+16, r24	; 0x10
    36d8:	88 89       	ldd	r24, Y+16	; 0x10
    36da:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	8a 95       	dec	r24
    36e0:	f1 f7       	brne	.-4      	; 0x36de <HLCD_voidGoTo+0x1b2>
    36e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us (50);
}
    36e4:	6a 96       	adiw	r28, 0x1a	; 26
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	cf 91       	pop	r28
    36f2:	df 91       	pop	r29
    36f4:	08 95       	ret

000036f6 <main>:
#include  "../LCD/LCD.h"
#include  "../ultrasonic.h"

int main(){
    36f6:	df 93       	push	r29
    36f8:	cf 93       	push	r28
    36fa:	cd b7       	in	r28, 0x3d	; 61
    36fc:	de b7       	in	r29, 0x3e	; 62
    36fe:	6c 97       	sbiw	r28, 0x1c	; 28
    3700:	0f b6       	in	r0, 0x3f	; 63
    3702:	f8 94       	cli
    3704:	de bf       	out	0x3e, r29	; 62
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	cd bf       	out	0x3d, r28	; 61

lcd_init();
    370a:	0e 94 09 0c 	call	0x1812	; 0x1812 <lcd_init>
ultrasonic_init();
    370e:	0e 94 75 1c 	call	0x38ea	; 0x38ea <ultrasonic_init>
sei();
    3712:	78 94       	sei

lcd_write_word("Distance is ");
    3714:	80 e6       	ldi	r24, 0x60	; 96
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	0e 94 1a 10 	call	0x2034	; 0x2034 <lcd_write_word>
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	a0 e2       	ldi	r26, 0x20	; 32
    3722:	b1 e4       	ldi	r27, 0x41	; 65
    3724:	89 8f       	std	Y+25, r24	; 0x19
    3726:	9a 8f       	std	Y+26, r25	; 0x1a
    3728:	ab 8f       	std	Y+27, r26	; 0x1b
    372a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    372c:	69 8d       	ldd	r22, Y+25	; 0x19
    372e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3730:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3732:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	4a ef       	ldi	r20, 0xFA	; 250
    373a:	54 e4       	ldi	r21, 0x44	; 68
    373c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	8d 8b       	std	Y+21, r24	; 0x15
    3746:	9e 8b       	std	Y+22, r25	; 0x16
    3748:	af 8b       	std	Y+23, r26	; 0x17
    374a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    374c:	6d 89       	ldd	r22, Y+21	; 0x15
    374e:	7e 89       	ldd	r23, Y+22	; 0x16
    3750:	8f 89       	ldd	r24, Y+23	; 0x17
    3752:	98 8d       	ldd	r25, Y+24	; 0x18
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e8       	ldi	r20, 0x80	; 128
    375a:	5f e3       	ldi	r21, 0x3F	; 63
    375c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3760:	88 23       	and	r24, r24
    3762:	2c f4       	brge	.+10     	; 0x376e <main+0x78>
		__ticks = 1;
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	9c 8b       	std	Y+20, r25	; 0x14
    376a:	8b 8b       	std	Y+19, r24	; 0x13
    376c:	3f c0       	rjmp	.+126    	; 0x37ec <main+0xf6>
	else if (__tmp > 65535)
    376e:	6d 89       	ldd	r22, Y+21	; 0x15
    3770:	7e 89       	ldd	r23, Y+22	; 0x16
    3772:	8f 89       	ldd	r24, Y+23	; 0x17
    3774:	98 8d       	ldd	r25, Y+24	; 0x18
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	3f ef       	ldi	r19, 0xFF	; 255
    377a:	4f e7       	ldi	r20, 0x7F	; 127
    377c:	57 e4       	ldi	r21, 0x47	; 71
    377e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3782:	18 16       	cp	r1, r24
    3784:	4c f5       	brge	.+82     	; 0x37d8 <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3786:	69 8d       	ldd	r22, Y+25	; 0x19
    3788:	7a 8d       	ldd	r23, Y+26	; 0x1a
    378a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    378c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e2       	ldi	r20, 0x20	; 32
    3794:	51 e4       	ldi	r21, 0x41	; 65
    3796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	bc 01       	movw	r22, r24
    37a0:	cd 01       	movw	r24, r26
    37a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	9c 8b       	std	Y+20, r25	; 0x14
    37ac:	8b 8b       	std	Y+19, r24	; 0x13
    37ae:	0f c0       	rjmp	.+30     	; 0x37ce <main+0xd8>
    37b0:	88 ec       	ldi	r24, 0xC8	; 200
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	9a 8b       	std	Y+18, r25	; 0x12
    37b6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37b8:	89 89       	ldd	r24, Y+17	; 0x11
    37ba:	9a 89       	ldd	r25, Y+18	; 0x12
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <main+0xc6>
    37c0:	9a 8b       	std	Y+18, r25	; 0x12
    37c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c4:	8b 89       	ldd	r24, Y+19	; 0x13
    37c6:	9c 89       	ldd	r25, Y+20	; 0x14
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	9c 8b       	std	Y+20, r25	; 0x14
    37cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ce:	8b 89       	ldd	r24, Y+19	; 0x13
    37d0:	9c 89       	ldd	r25, Y+20	; 0x14
    37d2:	00 97       	sbiw	r24, 0x00	; 0
    37d4:	69 f7       	brne	.-38     	; 0x37b0 <main+0xba>
    37d6:	14 c0       	rjmp	.+40     	; 0x3800 <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d8:	6d 89       	ldd	r22, Y+21	; 0x15
    37da:	7e 89       	ldd	r23, Y+22	; 0x16
    37dc:	8f 89       	ldd	r24, Y+23	; 0x17
    37de:	98 8d       	ldd	r25, Y+24	; 0x18
    37e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9c 8b       	std	Y+20, r25	; 0x14
    37ea:	8b 8b       	std	Y+19, r24	; 0x13
    37ec:	8b 89       	ldd	r24, Y+19	; 0x13
    37ee:	9c 89       	ldd	r25, Y+20	; 0x14
    37f0:	98 8b       	std	Y+16, r25	; 0x10
    37f2:	8f 87       	std	Y+15, r24	; 0x0f
    37f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    37f6:	98 89       	ldd	r25, Y+16	; 0x10
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <main+0x102>
    37fc:	98 8b       	std	Y+16, r25	; 0x10
    37fe:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(10);
while(1){
  ultra_triger();
    3800:	0e 94 aa 1c 	call	0x3954	; 0x3954 <ultra_triger>
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	a0 e7       	ldi	r26, 0x70	; 112
    380a:	b1 e4       	ldi	r27, 0x41	; 65
    380c:	8b 87       	std	Y+11, r24	; 0x0b
    380e:	9c 87       	std	Y+12, r25	; 0x0c
    3810:	ad 87       	std	Y+13, r26	; 0x0d
    3812:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3814:	6b 85       	ldd	r22, Y+11	; 0x0b
    3816:	7c 85       	ldd	r23, Y+12	; 0x0c
    3818:	8d 85       	ldd	r24, Y+13	; 0x0d
    381a:	9e 85       	ldd	r25, Y+14	; 0x0e
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	4a ef       	ldi	r20, 0xFA	; 250
    3822:	54 e4       	ldi	r21, 0x44	; 68
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	8f 83       	std	Y+7, r24	; 0x07
    382e:	98 87       	std	Y+8, r25	; 0x08
    3830:	a9 87       	std	Y+9, r26	; 0x09
    3832:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3834:	6f 81       	ldd	r22, Y+7	; 0x07
    3836:	78 85       	ldd	r23, Y+8	; 0x08
    3838:	89 85       	ldd	r24, Y+9	; 0x09
    383a:	9a 85       	ldd	r25, Y+10	; 0x0a
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	40 e8       	ldi	r20, 0x80	; 128
    3842:	5f e3       	ldi	r21, 0x3F	; 63
    3844:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3848:	88 23       	and	r24, r24
    384a:	2c f4       	brge	.+10     	; 0x3856 <main+0x160>
		__ticks = 1;
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	9e 83       	std	Y+6, r25	; 0x06
    3852:	8d 83       	std	Y+5, r24	; 0x05
    3854:	3f c0       	rjmp	.+126    	; 0x38d4 <main+0x1de>
	else if (__tmp > 65535)
    3856:	6f 81       	ldd	r22, Y+7	; 0x07
    3858:	78 85       	ldd	r23, Y+8	; 0x08
    385a:	89 85       	ldd	r24, Y+9	; 0x09
    385c:	9a 85       	ldd	r25, Y+10	; 0x0a
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	3f ef       	ldi	r19, 0xFF	; 255
    3862:	4f e7       	ldi	r20, 0x7F	; 127
    3864:	57 e4       	ldi	r21, 0x47	; 71
    3866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    386a:	18 16       	cp	r1, r24
    386c:	4c f5       	brge	.+82     	; 0x38c0 <main+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    386e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3870:	7c 85       	ldd	r23, Y+12	; 0x0c
    3872:	8d 85       	ldd	r24, Y+13	; 0x0d
    3874:	9e 85       	ldd	r25, Y+14	; 0x0e
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e2       	ldi	r20, 0x20	; 32
    387c:	51 e4       	ldi	r21, 0x41	; 65
    387e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <main+0x1c0>
    3898:	88 ec       	ldi	r24, 0xC8	; 200
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	9c 83       	std	Y+4, r25	; 0x04
    389e:	8b 83       	std	Y+3, r24	; 0x03
    38a0:	8b 81       	ldd	r24, Y+3	; 0x03
    38a2:	9c 81       	ldd	r25, Y+4	; 0x04
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	f1 f7       	brne	.-4      	; 0x38a4 <main+0x1ae>
    38a8:	9c 83       	std	Y+4, r25	; 0x04
    38aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ac:	8d 81       	ldd	r24, Y+5	; 0x05
    38ae:	9e 81       	ldd	r25, Y+6	; 0x06
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	9e 83       	std	Y+6, r25	; 0x06
    38b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b6:	8d 81       	ldd	r24, Y+5	; 0x05
    38b8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ba:	00 97       	sbiw	r24, 0x00	; 0
    38bc:	69 f7       	brne	.-38     	; 0x3898 <main+0x1a2>
    38be:	a0 cf       	rjmp	.-192    	; 0x3800 <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c0:	6f 81       	ldd	r22, Y+7	; 0x07
    38c2:	78 85       	ldd	r23, Y+8	; 0x08
    38c4:	89 85       	ldd	r24, Y+9	; 0x09
    38c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	9e 83       	std	Y+6, r25	; 0x06
    38d2:	8d 83       	std	Y+5, r24	; 0x05
    38d4:	8d 81       	ldd	r24, Y+5	; 0x05
    38d6:	9e 81       	ldd	r25, Y+6	; 0x06
    38d8:	9a 83       	std	Y+2, r25	; 0x02
    38da:	89 83       	std	Y+1, r24	; 0x01
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	9a 81       	ldd	r25, Y+2	; 0x02
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <main+0x1ea>
    38e4:	9a 83       	std	Y+2, r25	; 0x02
    38e6:	89 83       	std	Y+1, r24	; 0x01
    38e8:	8b cf       	rjmp	.-234    	; 0x3800 <main+0x10a>

000038ea <ultrasonic_init>:
uint8_t rising_edge=0;
uint32_t timer_counter=0;
uint32_t distance;
uint8_t distance_str[10];

void ultrasonic_init(void){
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62

  TRIGER_DDR|=(1<<TRIGER);
    38f2:	a1 e3       	ldi	r26, 0x31	; 49
    38f4:	b0 e0       	ldi	r27, 0x00	; 0
    38f6:	e1 e3       	ldi	r30, 0x31	; 49
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	80 81       	ld	r24, Z
    38fc:	81 60       	ori	r24, 0x01	; 1
    38fe:	8c 93       	st	X, r24
  ECHO_DDR&=~(1<<ECHO);
    3900:	a1 e3       	ldi	r26, 0x31	; 49
    3902:	b0 e0       	ldi	r27, 0x00	; 0
    3904:	e1 e3       	ldi	r30, 0x31	; 49
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	80 81       	ld	r24, Z
    390a:	87 7f       	andi	r24, 0xF7	; 247
    390c:	8c 93       	st	X, r24
  ECHO_PULLUP|=(1<<ECHO);
    390e:	a2 e3       	ldi	r26, 0x32	; 50
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e2 e3       	ldi	r30, 0x32	; 50
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	88 60       	ori	r24, 0x08	; 8
    391a:	8c 93       	st	X, r24
  enable_ex_interrupt();
    391c:	0e 94 95 1c 	call	0x392a	; 0x392a <enable_ex_interrupt>
  timer0_init();
    3920:	0e 94 4f 06 	call	0xc9e	; 0xc9e <timer0_init>
  return;
}
    3924:	cf 91       	pop	r28
    3926:	df 91       	pop	r29
    3928:	08 95       	ret

0000392a <enable_ex_interrupt>:

void enable_ex_interrupt(void){
    392a:	df 93       	push	r29
    392c:	cf 93       	push	r28
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62

  MCUCR |= (1<<ISC10);		// Trigger INT1 on any logic change.
    3932:	a5 e5       	ldi	r26, 0x55	; 85
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	e5 e5       	ldi	r30, 0x55	; 85
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	80 81       	ld	r24, Z
    393c:	84 60       	ori	r24, 0x04	; 4
    393e:	8c 93       	st	X, r24
  GICR  |= (1<<INT1);			// Enable INT1 interrupts.
    3940:	ab e5       	ldi	r26, 0x5B	; 91
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	eb e5       	ldi	r30, 0x5B	; 91
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	80 68       	ori	r24, 0x80	; 128
    394c:	8c 93       	st	X, r24

  return;
}
    394e:	cf 91       	pop	r28
    3950:	df 91       	pop	r29
    3952:	08 95       	ret

00003954 <ultra_triger>:

void ultra_triger(void){
    3954:	df 93       	push	r29
    3956:	cf 93       	push	r28
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
    395c:	68 97       	sbiw	r28, 0x18	; 24
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	de bf       	out	0x3e, r29	; 62
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	cd bf       	out	0x3d, r28	; 61
  if(!sensor_working){
    3968:	80 91 7a 00 	lds	r24, 0x007A
    396c:	88 23       	and	r24, r24
    396e:	09 f0       	breq	.+2      	; 0x3972 <ultra_triger+0x1e>
    3970:	cf c0       	rjmp	.+414    	; 0x3b10 <ultra_triger+0x1bc>
    TRIGER_PORT|=(1<<TRIGER);
    3972:	a2 e3       	ldi	r26, 0x32	; 50
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	e2 e3       	ldi	r30, 0x32	; 50
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	81 60       	ori	r24, 0x01	; 1
    397e:	8c 93       	st	X, r24
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	a0 e7       	ldi	r26, 0x70	; 112
    3986:	b1 e4       	ldi	r27, 0x41	; 65
    3988:	8d 8b       	std	Y+21, r24	; 0x15
    398a:	9e 8b       	std	Y+22, r25	; 0x16
    398c:	af 8b       	std	Y+23, r26	; 0x17
    398e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3990:	6d 89       	ldd	r22, Y+21	; 0x15
    3992:	7e 89       	ldd	r23, Y+22	; 0x16
    3994:	8f 89       	ldd	r24, Y+23	; 0x17
    3996:	98 8d       	ldd	r25, Y+24	; 0x18
    3998:	2b ea       	ldi	r18, 0xAB	; 171
    399a:	3a ea       	ldi	r19, 0xAA	; 170
    399c:	4a e2       	ldi	r20, 0x2A	; 42
    399e:	50 e4       	ldi	r21, 0x40	; 64
    39a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	89 8b       	std	Y+17, r24	; 0x11
    39aa:	9a 8b       	std	Y+18, r25	; 0x12
    39ac:	ab 8b       	std	Y+19, r26	; 0x13
    39ae:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    39b0:	69 89       	ldd	r22, Y+17	; 0x11
    39b2:	7a 89       	ldd	r23, Y+18	; 0x12
    39b4:	8b 89       	ldd	r24, Y+19	; 0x13
    39b6:	9c 89       	ldd	r25, Y+20	; 0x14
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	40 e8       	ldi	r20, 0x80	; 128
    39be:	5f e3       	ldi	r21, 0x3F	; 63
    39c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39c4:	88 23       	and	r24, r24
    39c6:	1c f4       	brge	.+6      	; 0x39ce <ultra_triger+0x7a>
		__ticks = 1;
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	88 8b       	std	Y+16, r24	; 0x10
    39cc:	91 c0       	rjmp	.+290    	; 0x3af0 <ultra_triger+0x19c>
	else if (__tmp > 255)
    39ce:	69 89       	ldd	r22, Y+17	; 0x11
    39d0:	7a 89       	ldd	r23, Y+18	; 0x12
    39d2:	8b 89       	ldd	r24, Y+19	; 0x13
    39d4:	9c 89       	ldd	r25, Y+20	; 0x14
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	4f e7       	ldi	r20, 0x7F	; 127
    39dc:	53 e4       	ldi	r21, 0x43	; 67
    39de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39e2:	18 16       	cp	r1, r24
    39e4:	0c f0       	brlt	.+2      	; 0x39e8 <ultra_triger+0x94>
    39e6:	7b c0       	rjmp	.+246    	; 0x3ade <ultra_triger+0x18a>
	{
		_delay_ms(__us / 1000.0);
    39e8:	6d 89       	ldd	r22, Y+21	; 0x15
    39ea:	7e 89       	ldd	r23, Y+22	; 0x16
    39ec:	8f 89       	ldd	r24, Y+23	; 0x17
    39ee:	98 8d       	ldd	r25, Y+24	; 0x18
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	4a e7       	ldi	r20, 0x7A	; 122
    39f6:	54 e4       	ldi	r21, 0x44	; 68
    39f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	8c 87       	std	Y+12, r24	; 0x0c
    3a02:	9d 87       	std	Y+13, r25	; 0x0d
    3a04:	ae 87       	std	Y+14, r26	; 0x0e
    3a06:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a08:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a0a:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	4a ef       	ldi	r20, 0xFA	; 250
    3a16:	54 e4       	ldi	r21, 0x44	; 68
    3a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	88 87       	std	Y+8, r24	; 0x08
    3a22:	99 87       	std	Y+9, r25	; 0x09
    3a24:	aa 87       	std	Y+10, r26	; 0x0a
    3a26:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3a28:	68 85       	ldd	r22, Y+8	; 0x08
    3a2a:	79 85       	ldd	r23, Y+9	; 0x09
    3a2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	40 e8       	ldi	r20, 0x80	; 128
    3a36:	5f e3       	ldi	r21, 0x3F	; 63
    3a38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a3c:	88 23       	and	r24, r24
    3a3e:	2c f4       	brge	.+10     	; 0x3a4a <ultra_triger+0xf6>
		__ticks = 1;
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	9f 83       	std	Y+7, r25	; 0x07
    3a46:	8e 83       	std	Y+6, r24	; 0x06
    3a48:	3f c0       	rjmp	.+126    	; 0x3ac8 <ultra_triger+0x174>
	else if (__tmp > 65535)
    3a4a:	68 85       	ldd	r22, Y+8	; 0x08
    3a4c:	79 85       	ldd	r23, Y+9	; 0x09
    3a4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a50:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	3f ef       	ldi	r19, 0xFF	; 255
    3a56:	4f e7       	ldi	r20, 0x7F	; 127
    3a58:	57 e4       	ldi	r21, 0x47	; 71
    3a5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a5e:	18 16       	cp	r1, r24
    3a60:	4c f5       	brge	.+82     	; 0x3ab4 <ultra_triger+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a62:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a64:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a66:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a68:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	40 e2       	ldi	r20, 0x20	; 32
    3a70:	51 e4       	ldi	r21, 0x41	; 65
    3a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a76:	dc 01       	movw	r26, r24
    3a78:	cb 01       	movw	r24, r22
    3a7a:	bc 01       	movw	r22, r24
    3a7c:	cd 01       	movw	r24, r26
    3a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	9f 83       	std	Y+7, r25	; 0x07
    3a88:	8e 83       	std	Y+6, r24	; 0x06
    3a8a:	0f c0       	rjmp	.+30     	; 0x3aaa <ultra_triger+0x156>
    3a8c:	88 ec       	ldi	r24, 0xC8	; 200
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	9d 83       	std	Y+5, r25	; 0x05
    3a92:	8c 83       	std	Y+4, r24	; 0x04
    3a94:	8c 81       	ldd	r24, Y+4	; 0x04
    3a96:	9d 81       	ldd	r25, Y+5	; 0x05
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <ultra_triger+0x144>
    3a9c:	9d 83       	std	Y+5, r25	; 0x05
    3a9e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa0:	8e 81       	ldd	r24, Y+6	; 0x06
    3aa2:	9f 81       	ldd	r25, Y+7	; 0x07
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	9f 83       	std	Y+7, r25	; 0x07
    3aa8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aaa:	8e 81       	ldd	r24, Y+6	; 0x06
    3aac:	9f 81       	ldd	r25, Y+7	; 0x07
    3aae:	00 97       	sbiw	r24, 0x00	; 0
    3ab0:	69 f7       	brne	.-38     	; 0x3a8c <ultra_triger+0x138>
    3ab2:	24 c0       	rjmp	.+72     	; 0x3afc <ultra_triger+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab4:	68 85       	ldd	r22, Y+8	; 0x08
    3ab6:	79 85       	ldd	r23, Y+9	; 0x09
    3ab8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aba:	9b 85       	ldd	r25, Y+11	; 0x0b
    3abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	9f 83       	std	Y+7, r25	; 0x07
    3ac6:	8e 83       	std	Y+6, r24	; 0x06
    3ac8:	8e 81       	ldd	r24, Y+6	; 0x06
    3aca:	9f 81       	ldd	r25, Y+7	; 0x07
    3acc:	9b 83       	std	Y+3, r25	; 0x03
    3ace:	8a 83       	std	Y+2, r24	; 0x02
    3ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	f1 f7       	brne	.-4      	; 0x3ad4 <ultra_triger+0x180>
    3ad8:	9b 83       	std	Y+3, r25	; 0x03
    3ada:	8a 83       	std	Y+2, r24	; 0x02
    3adc:	0f c0       	rjmp	.+30     	; 0x3afc <ultra_triger+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ade:	69 89       	ldd	r22, Y+17	; 0x11
    3ae0:	7a 89       	ldd	r23, Y+18	; 0x12
    3ae2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	88 8b       	std	Y+16, r24	; 0x10
    3af0:	88 89       	ldd	r24, Y+16	; 0x10
    3af2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	8a 95       	dec	r24
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <ultra_triger+0x1a2>
    3afa:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);
    TRIGER_PORT&=~(1<<TRIGER);
    3afc:	a2 e3       	ldi	r26, 0x32	; 50
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	e2 e3       	ldi	r30, 0x32	; 50
    3b02:	f0 e0       	ldi	r31, 0x00	; 0
    3b04:	80 81       	ld	r24, Z
    3b06:	8e 7f       	andi	r24, 0xFE	; 254
    3b08:	8c 93       	st	X, r24
    sensor_working=1;
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	80 93 7a 00 	sts	0x007A, r24
  }
}
    3b10:	68 96       	adiw	r28, 0x18	; 24
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	f8 94       	cli
    3b16:	de bf       	out	0x3e, r29	; 62
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	cd bf       	out	0x3d, r28	; 61
    3b1c:	cf 91       	pop	r28
    3b1e:	df 91       	pop	r29
    3b20:	08 95       	ret

00003b22 <__vector_2>:

ISR(INT1_vect){
    3b22:	1f 92       	push	r1
    3b24:	0f 92       	push	r0
    3b26:	0f b6       	in	r0, 0x3f	; 63
    3b28:	0f 92       	push	r0
    3b2a:	11 24       	eor	r1, r1
    3b2c:	2f 93       	push	r18
    3b2e:	3f 93       	push	r19
    3b30:	4f 93       	push	r20
    3b32:	5f 93       	push	r21
    3b34:	6f 93       	push	r22
    3b36:	7f 93       	push	r23
    3b38:	8f 93       	push	r24
    3b3a:	9f 93       	push	r25
    3b3c:	af 93       	push	r26
    3b3e:	bf 93       	push	r27
    3b40:	ef 93       	push	r30
    3b42:	ff 93       	push	r31
    3b44:	df 93       	push	r29
    3b46:	cf 93       	push	r28
    3b48:	cd b7       	in	r28, 0x3d	; 61
    3b4a:	de b7       	in	r29, 0x3e	; 62
    3b4c:	2e 97       	sbiw	r28, 0x0e	; 14
    3b4e:	de bf       	out	0x3e, r29	; 62
    3b50:	cd bf       	out	0x3d, r28	; 61
  if(sensor_working==1){
    3b52:	80 91 7a 00 	lds	r24, 0x007A
    3b56:	81 30       	cpi	r24, 0x01	; 1
    3b58:	09 f0       	breq	.+2      	; 0x3b5c <__vector_2+0x3a>
    3b5a:	de c0       	rjmp	.+444    	; 0x3d18 <__vector_2+0x1f6>
    if(rising_edge==0){
    3b5c:	80 91 7b 00 	lds	r24, 0x007B
    3b60:	88 23       	and	r24, r24
    3b62:	79 f4       	brne	.+30     	; 0x3b82 <__vector_2+0x60>
      TCNT0=0x00;
    3b64:	e2 e5       	ldi	r30, 0x52	; 82
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	10 82       	st	Z, r1
      rising_edge=1;
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	80 93 7b 00 	sts	0x007B, r24
      timer_counter=0;
    3b70:	10 92 7c 00 	sts	0x007C, r1
    3b74:	10 92 7d 00 	sts	0x007D, r1
    3b78:	10 92 7e 00 	sts	0x007E, r1
    3b7c:	10 92 7f 00 	sts	0x007F, r1
    3b80:	cb c0       	rjmp	.+406    	; 0x3d18 <__vector_2+0x1f6>
    }
  else{
    distance=(timer_counter*256+TCNT0)/466;
    3b82:	80 91 7c 00 	lds	r24, 0x007C
    3b86:	90 91 7d 00 	lds	r25, 0x007D
    3b8a:	a0 91 7e 00 	lds	r26, 0x007E
    3b8e:	b0 91 7f 00 	lds	r27, 0x007F
    3b92:	22 27       	eor	r18, r18
    3b94:	38 2f       	mov	r19, r24
    3b96:	49 2f       	mov	r20, r25
    3b98:	5a 2f       	mov	r21, r26
    3b9a:	e2 e5       	ldi	r30, 0x52	; 82
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	80 81       	ld	r24, Z
    3ba0:	88 2f       	mov	r24, r24
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	a0 e0       	ldi	r26, 0x00	; 0
    3ba6:	b0 e0       	ldi	r27, 0x00	; 0
    3ba8:	82 0f       	add	r24, r18
    3baa:	93 1f       	adc	r25, r19
    3bac:	a4 1f       	adc	r26, r20
    3bae:	b5 1f       	adc	r27, r21
    3bb0:	22 ed       	ldi	r18, 0xD2	; 210
    3bb2:	31 e0       	ldi	r19, 0x01	; 1
    3bb4:	40 e0       	ldi	r20, 0x00	; 0
    3bb6:	50 e0       	ldi	r21, 0x00	; 0
    3bb8:	bc 01       	movw	r22, r24
    3bba:	cd 01       	movw	r24, r26
    3bbc:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <__udivmodsi4>
    3bc0:	da 01       	movw	r26, r20
    3bc2:	c9 01       	movw	r24, r18
    3bc4:	80 93 80 00 	sts	0x0080, r24
    3bc8:	90 93 81 00 	sts	0x0081, r25
    3bcc:	a0 93 82 00 	sts	0x0082, r26
    3bd0:	b0 93 83 00 	sts	0x0083, r27
    lcd_goto_xy(1,0);
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	60 e0       	ldi	r22, 0x00	; 0
    3bda:	70 e0       	ldi	r23, 0x00	; 0
    3bdc:	0e 94 dd 12 	call	0x25ba	; 0x25ba <lcd_goto_xy>
  	itoa(distance,distance_str,10);
    3be0:	80 91 80 00 	lds	r24, 0x0080
    3be4:	90 91 81 00 	lds	r25, 0x0081
    3be8:	a0 91 82 00 	lds	r26, 0x0082
    3bec:	b0 91 83 00 	lds	r27, 0x0083
    3bf0:	24 e8       	ldi	r18, 0x84	; 132
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	b9 01       	movw	r22, r18
    3bf6:	4a e0       	ldi	r20, 0x0A	; 10
    3bf8:	50 e0       	ldi	r21, 0x00	; 0
    3bfa:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <itoa>
  	strcat(distance_str, " cm ");
    3bfe:	84 e8       	ldi	r24, 0x84	; 132
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <strlen>
    3c06:	8c 57       	subi	r24, 0x7C	; 124
    3c08:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0a:	2d e6       	ldi	r18, 0x6D	; 109
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	b9 01       	movw	r22, r18
    3c10:	45 e0       	ldi	r20, 0x05	; 5
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <memcpy>
  	lcd_write_word(distance_str);
    3c18:	84 e8       	ldi	r24, 0x84	; 132
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	0e 94 1a 10 	call	0x2034	; 0x2034 <lcd_write_word>
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	a0 e2       	ldi	r26, 0x20	; 32
    3c26:	b2 e4       	ldi	r27, 0x42	; 66
    3c28:	8b 87       	std	Y+11, r24	; 0x0b
    3c2a:	9c 87       	std	Y+12, r25	; 0x0c
    3c2c:	ad 87       	std	Y+13, r26	; 0x0d
    3c2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	4a ef       	ldi	r20, 0xFA	; 250
    3c3e:	54 e4       	ldi	r21, 0x44	; 68
    3c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	8f 83       	std	Y+7, r24	; 0x07
    3c4a:	98 87       	std	Y+8, r25	; 0x08
    3c4c:	a9 87       	std	Y+9, r26	; 0x09
    3c4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c50:	6f 81       	ldd	r22, Y+7	; 0x07
    3c52:	78 85       	ldd	r23, Y+8	; 0x08
    3c54:	89 85       	ldd	r24, Y+9	; 0x09
    3c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	40 e8       	ldi	r20, 0x80	; 128
    3c5e:	5f e3       	ldi	r21, 0x3F	; 63
    3c60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c64:	88 23       	and	r24, r24
    3c66:	2c f4       	brge	.+10     	; 0x3c72 <__vector_2+0x150>
		__ticks = 1;
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	9e 83       	std	Y+6, r25	; 0x06
    3c6e:	8d 83       	std	Y+5, r24	; 0x05
    3c70:	3f c0       	rjmp	.+126    	; 0x3cf0 <__vector_2+0x1ce>
	else if (__tmp > 65535)
    3c72:	6f 81       	ldd	r22, Y+7	; 0x07
    3c74:	78 85       	ldd	r23, Y+8	; 0x08
    3c76:	89 85       	ldd	r24, Y+9	; 0x09
    3c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	3f ef       	ldi	r19, 0xFF	; 255
    3c7e:	4f e7       	ldi	r20, 0x7F	; 127
    3c80:	57 e4       	ldi	r21, 0x47	; 71
    3c82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c86:	18 16       	cp	r1, r24
    3c88:	4c f5       	brge	.+82     	; 0x3cdc <__vector_2+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	40 e2       	ldi	r20, 0x20	; 32
    3c98:	51 e4       	ldi	r21, 0x41	; 65
    3c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	bc 01       	movw	r22, r24
    3ca4:	cd 01       	movw	r24, r26
    3ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	9e 83       	std	Y+6, r25	; 0x06
    3cb0:	8d 83       	std	Y+5, r24	; 0x05
    3cb2:	0f c0       	rjmp	.+30     	; 0x3cd2 <__vector_2+0x1b0>
    3cb4:	88 ec       	ldi	r24, 0xC8	; 200
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	9c 83       	std	Y+4, r25	; 0x04
    3cba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc0:	01 97       	sbiw	r24, 0x01	; 1
    3cc2:	f1 f7       	brne	.-4      	; 0x3cc0 <__vector_2+0x19e>
    3cc4:	9c 83       	std	Y+4, r25	; 0x04
    3cc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cca:	9e 81       	ldd	r25, Y+6	; 0x06
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	9e 83       	std	Y+6, r25	; 0x06
    3cd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd6:	00 97       	sbiw	r24, 0x00	; 0
    3cd8:	69 f7       	brne	.-38     	; 0x3cb4 <__vector_2+0x192>
    3cda:	14 c0       	rjmp	.+40     	; 0x3d04 <__vector_2+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    3cde:	78 85       	ldd	r23, Y+8	; 0x08
    3ce0:	89 85       	ldd	r24, Y+9	; 0x09
    3ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	9e 83       	std	Y+6, r25	; 0x06
    3cee:	8d 83       	std	Y+5, r24	; 0x05
    3cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf4:	9a 83       	std	Y+2, r25	; 0x02
    3cf6:	89 83       	std	Y+1, r24	; 0x01
    3cf8:	89 81       	ldd	r24, Y+1	; 0x01
    3cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfc:	01 97       	sbiw	r24, 0x01	; 1
    3cfe:	f1 f7       	brne	.-4      	; 0x3cfc <__vector_2+0x1da>
    3d00:	9a 83       	std	Y+2, r25	; 0x02
    3d02:	89 83       	std	Y+1, r24	; 0x01
  	_delay_ms(40);
    timer_counter=0;
    3d04:	10 92 7c 00 	sts	0x007C, r1
    3d08:	10 92 7d 00 	sts	0x007D, r1
    3d0c:	10 92 7e 00 	sts	0x007E, r1
    3d10:	10 92 7f 00 	sts	0x007F, r1
    rising_edge=0;
    3d14:	10 92 7b 00 	sts	0x007B, r1
  }
}}
    3d18:	2e 96       	adiw	r28, 0x0e	; 14
    3d1a:	de bf       	out	0x3e, r29	; 62
    3d1c:	cd bf       	out	0x3d, r28	; 61
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	ff 91       	pop	r31
    3d24:	ef 91       	pop	r30
    3d26:	bf 91       	pop	r27
    3d28:	af 91       	pop	r26
    3d2a:	9f 91       	pop	r25
    3d2c:	8f 91       	pop	r24
    3d2e:	7f 91       	pop	r23
    3d30:	6f 91       	pop	r22
    3d32:	5f 91       	pop	r21
    3d34:	4f 91       	pop	r20
    3d36:	3f 91       	pop	r19
    3d38:	2f 91       	pop	r18
    3d3a:	0f 90       	pop	r0
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	0f 90       	pop	r0
    3d40:	1f 90       	pop	r1
    3d42:	18 95       	reti

00003d44 <__vector_11>:

ISR(TIMER0_OVF_vect){
    3d44:	1f 92       	push	r1
    3d46:	0f 92       	push	r0
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	0f 92       	push	r0
    3d4c:	11 24       	eor	r1, r1
    3d4e:	2f 93       	push	r18
    3d50:	8f 93       	push	r24
    3d52:	9f 93       	push	r25
    3d54:	af 93       	push	r26
    3d56:	bf 93       	push	r27
    3d58:	ef 93       	push	r30
    3d5a:	ff 93       	push	r31
    3d5c:	df 93       	push	r29
    3d5e:	cf 93       	push	r28
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
    timer_counter++;
    3d64:	80 91 7c 00 	lds	r24, 0x007C
    3d68:	90 91 7d 00 	lds	r25, 0x007D
    3d6c:	a0 91 7e 00 	lds	r26, 0x007E
    3d70:	b0 91 7f 00 	lds	r27, 0x007F
    3d74:	01 96       	adiw	r24, 0x01	; 1
    3d76:	a1 1d       	adc	r26, r1
    3d78:	b1 1d       	adc	r27, r1
    3d7a:	80 93 7c 00 	sts	0x007C, r24
    3d7e:	90 93 7d 00 	sts	0x007D, r25
    3d82:	a0 93 7e 00 	sts	0x007E, r26
    3d86:	b0 93 7f 00 	sts	0x007F, r27
    if(timer_counter >730){
    3d8a:	80 91 7c 00 	lds	r24, 0x007C
    3d8e:	90 91 7d 00 	lds	r25, 0x007D
    3d92:	a0 91 7e 00 	lds	r26, 0x007E
    3d96:	b0 91 7f 00 	lds	r27, 0x007F
    3d9a:	8b 3d       	cpi	r24, 0xDB	; 219
    3d9c:	22 e0       	ldi	r18, 0x02	; 2
    3d9e:	92 07       	cpc	r25, r18
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	a2 07       	cpc	r26, r18
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	b2 07       	cpc	r27, r18
    3da8:	78 f0       	brcs	.+30     	; 0x3dc8 <__vector_11+0x84>
      TCNT0=0x00;
    3daa:	e2 e5       	ldi	r30, 0x52	; 82
    3dac:	f0 e0       	ldi	r31, 0x00	; 0
    3dae:	10 82       	st	Z, r1
      sensor_working=0;
    3db0:	10 92 7a 00 	sts	0x007A, r1
      rising_edge=0;
    3db4:	10 92 7b 00 	sts	0x007B, r1
      timer_counter=0;
    3db8:	10 92 7c 00 	sts	0x007C, r1
    3dbc:	10 92 7d 00 	sts	0x007D, r1
    3dc0:	10 92 7e 00 	sts	0x007E, r1
    3dc4:	10 92 7f 00 	sts	0x007F, r1
    }
}
    3dc8:	cf 91       	pop	r28
    3dca:	df 91       	pop	r29
    3dcc:	ff 91       	pop	r31
    3dce:	ef 91       	pop	r30
    3dd0:	bf 91       	pop	r27
    3dd2:	af 91       	pop	r26
    3dd4:	9f 91       	pop	r25
    3dd6:	8f 91       	pop	r24
    3dd8:	2f 91       	pop	r18
    3dda:	0f 90       	pop	r0
    3ddc:	0f be       	out	0x3f, r0	; 63
    3dde:	0f 90       	pop	r0
    3de0:	1f 90       	pop	r1
    3de2:	18 95       	reti

00003de4 <__udivmodsi4>:
    3de4:	a1 e2       	ldi	r26, 0x21	; 33
    3de6:	1a 2e       	mov	r1, r26
    3de8:	aa 1b       	sub	r26, r26
    3dea:	bb 1b       	sub	r27, r27
    3dec:	fd 01       	movw	r30, r26
    3dee:	0d c0       	rjmp	.+26     	; 0x3e0a <__udivmodsi4_ep>

00003df0 <__udivmodsi4_loop>:
    3df0:	aa 1f       	adc	r26, r26
    3df2:	bb 1f       	adc	r27, r27
    3df4:	ee 1f       	adc	r30, r30
    3df6:	ff 1f       	adc	r31, r31
    3df8:	a2 17       	cp	r26, r18
    3dfa:	b3 07       	cpc	r27, r19
    3dfc:	e4 07       	cpc	r30, r20
    3dfe:	f5 07       	cpc	r31, r21
    3e00:	20 f0       	brcs	.+8      	; 0x3e0a <__udivmodsi4_ep>
    3e02:	a2 1b       	sub	r26, r18
    3e04:	b3 0b       	sbc	r27, r19
    3e06:	e4 0b       	sbc	r30, r20
    3e08:	f5 0b       	sbc	r31, r21

00003e0a <__udivmodsi4_ep>:
    3e0a:	66 1f       	adc	r22, r22
    3e0c:	77 1f       	adc	r23, r23
    3e0e:	88 1f       	adc	r24, r24
    3e10:	99 1f       	adc	r25, r25
    3e12:	1a 94       	dec	r1
    3e14:	69 f7       	brne	.-38     	; 0x3df0 <__udivmodsi4_loop>
    3e16:	60 95       	com	r22
    3e18:	70 95       	com	r23
    3e1a:	80 95       	com	r24
    3e1c:	90 95       	com	r25
    3e1e:	9b 01       	movw	r18, r22
    3e20:	ac 01       	movw	r20, r24
    3e22:	bd 01       	movw	r22, r26
    3e24:	cf 01       	movw	r24, r30
    3e26:	08 95       	ret

00003e28 <__prologue_saves__>:
    3e28:	2f 92       	push	r2
    3e2a:	3f 92       	push	r3
    3e2c:	4f 92       	push	r4
    3e2e:	5f 92       	push	r5
    3e30:	6f 92       	push	r6
    3e32:	7f 92       	push	r7
    3e34:	8f 92       	push	r8
    3e36:	9f 92       	push	r9
    3e38:	af 92       	push	r10
    3e3a:	bf 92       	push	r11
    3e3c:	cf 92       	push	r12
    3e3e:	df 92       	push	r13
    3e40:	ef 92       	push	r14
    3e42:	ff 92       	push	r15
    3e44:	0f 93       	push	r16
    3e46:	1f 93       	push	r17
    3e48:	cf 93       	push	r28
    3e4a:	df 93       	push	r29
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	ca 1b       	sub	r28, r26
    3e52:	db 0b       	sbc	r29, r27
    3e54:	0f b6       	in	r0, 0x3f	; 63
    3e56:	f8 94       	cli
    3e58:	de bf       	out	0x3e, r29	; 62
    3e5a:	0f be       	out	0x3f, r0	; 63
    3e5c:	cd bf       	out	0x3d, r28	; 61
    3e5e:	09 94       	ijmp

00003e60 <__epilogue_restores__>:
    3e60:	2a 88       	ldd	r2, Y+18	; 0x12
    3e62:	39 88       	ldd	r3, Y+17	; 0x11
    3e64:	48 88       	ldd	r4, Y+16	; 0x10
    3e66:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e68:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e70:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e72:	b9 84       	ldd	r11, Y+9	; 0x09
    3e74:	c8 84       	ldd	r12, Y+8	; 0x08
    3e76:	df 80       	ldd	r13, Y+7	; 0x07
    3e78:	ee 80       	ldd	r14, Y+6	; 0x06
    3e7a:	fd 80       	ldd	r15, Y+5	; 0x05
    3e7c:	0c 81       	ldd	r16, Y+4	; 0x04
    3e7e:	1b 81       	ldd	r17, Y+3	; 0x03
    3e80:	aa 81       	ldd	r26, Y+2	; 0x02
    3e82:	b9 81       	ldd	r27, Y+1	; 0x01
    3e84:	ce 0f       	add	r28, r30
    3e86:	d1 1d       	adc	r29, r1
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	f8 94       	cli
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	cd bf       	out	0x3d, r28	; 61
    3e92:	ed 01       	movw	r28, r26
    3e94:	08 95       	ret

00003e96 <memcpy>:
    3e96:	fb 01       	movw	r30, r22
    3e98:	dc 01       	movw	r26, r24
    3e9a:	02 c0       	rjmp	.+4      	; 0x3ea0 <memcpy+0xa>
    3e9c:	01 90       	ld	r0, Z+
    3e9e:	0d 92       	st	X+, r0
    3ea0:	41 50       	subi	r20, 0x01	; 1
    3ea2:	50 40       	sbci	r21, 0x00	; 0
    3ea4:	d8 f7       	brcc	.-10     	; 0x3e9c <memcpy+0x6>
    3ea6:	08 95       	ret

00003ea8 <strlen>:
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	01 90       	ld	r0, Z+
    3eac:	00 20       	and	r0, r0
    3eae:	e9 f7       	brne	.-6      	; 0x3eaa <strlen+0x2>
    3eb0:	80 95       	com	r24
    3eb2:	90 95       	com	r25
    3eb4:	8e 0f       	add	r24, r30
    3eb6:	9f 1f       	adc	r25, r31
    3eb8:	08 95       	ret

00003eba <itoa>:
    3eba:	fb 01       	movw	r30, r22
    3ebc:	9f 01       	movw	r18, r30
    3ebe:	e8 94       	clt
    3ec0:	42 30       	cpi	r20, 0x02	; 2
    3ec2:	c4 f0       	brlt	.+48     	; 0x3ef4 <itoa+0x3a>
    3ec4:	45 32       	cpi	r20, 0x25	; 37
    3ec6:	b4 f4       	brge	.+44     	; 0x3ef4 <itoa+0x3a>
    3ec8:	4a 30       	cpi	r20, 0x0A	; 10
    3eca:	29 f4       	brne	.+10     	; 0x3ed6 <itoa+0x1c>
    3ecc:	97 fb       	bst	r25, 7
    3ece:	1e f4       	brtc	.+6      	; 0x3ed6 <itoa+0x1c>
    3ed0:	90 95       	com	r25
    3ed2:	81 95       	neg	r24
    3ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed6:	64 2f       	mov	r22, r20
    3ed8:	77 27       	eor	r23, r23
    3eda:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__udivmodhi4>
    3ede:	80 5d       	subi	r24, 0xD0	; 208
    3ee0:	8a 33       	cpi	r24, 0x3A	; 58
    3ee2:	0c f0       	brlt	.+2      	; 0x3ee6 <itoa+0x2c>
    3ee4:	89 5d       	subi	r24, 0xD9	; 217
    3ee6:	81 93       	st	Z+, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	00 97       	sbiw	r24, 0x00	; 0
    3eec:	a1 f7       	brne	.-24     	; 0x3ed6 <itoa+0x1c>
    3eee:	16 f4       	brtc	.+4      	; 0x3ef4 <itoa+0x3a>
    3ef0:	5d e2       	ldi	r21, 0x2D	; 45
    3ef2:	51 93       	st	Z+, r21
    3ef4:	10 82       	st	Z, r1
    3ef6:	c9 01       	movw	r24, r18
    3ef8:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <strrev>

00003efc <strrev>:
    3efc:	dc 01       	movw	r26, r24
    3efe:	fc 01       	movw	r30, r24
    3f00:	67 2f       	mov	r22, r23
    3f02:	71 91       	ld	r23, Z+
    3f04:	77 23       	and	r23, r23
    3f06:	e1 f7       	brne	.-8      	; 0x3f00 <strrev+0x4>
    3f08:	32 97       	sbiw	r30, 0x02	; 2
    3f0a:	04 c0       	rjmp	.+8      	; 0x3f14 <strrev+0x18>
    3f0c:	7c 91       	ld	r23, X
    3f0e:	6d 93       	st	X+, r22
    3f10:	70 83       	st	Z, r23
    3f12:	62 91       	ld	r22, -Z
    3f14:	ae 17       	cp	r26, r30
    3f16:	bf 07       	cpc	r27, r31
    3f18:	c8 f3       	brcs	.-14     	; 0x3f0c <strrev+0x10>
    3f1a:	08 95       	ret

00003f1c <__udivmodhi4>:
    3f1c:	aa 1b       	sub	r26, r26
    3f1e:	bb 1b       	sub	r27, r27
    3f20:	51 e1       	ldi	r21, 0x11	; 17
    3f22:	07 c0       	rjmp	.+14     	; 0x3f32 <__udivmodhi4_ep>

00003f24 <__udivmodhi4_loop>:
    3f24:	aa 1f       	adc	r26, r26
    3f26:	bb 1f       	adc	r27, r27
    3f28:	a6 17       	cp	r26, r22
    3f2a:	b7 07       	cpc	r27, r23
    3f2c:	10 f0       	brcs	.+4      	; 0x3f32 <__udivmodhi4_ep>
    3f2e:	a6 1b       	sub	r26, r22
    3f30:	b7 0b       	sbc	r27, r23

00003f32 <__udivmodhi4_ep>:
    3f32:	88 1f       	adc	r24, r24
    3f34:	99 1f       	adc	r25, r25
    3f36:	5a 95       	dec	r21
    3f38:	a9 f7       	brne	.-22     	; 0x3f24 <__udivmodhi4_loop>
    3f3a:	80 95       	com	r24
    3f3c:	90 95       	com	r25
    3f3e:	bc 01       	movw	r22, r24
    3f40:	cd 01       	movw	r24, r26
    3f42:	08 95       	ret

00003f44 <_exit>:
    3f44:	f8 94       	cli

00003f46 <__stop_program>:
    3f46:	ff cf       	rjmp	.-2      	; 0x3f46 <__stop_program>
