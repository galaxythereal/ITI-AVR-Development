
ADC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e0c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00002e0c  00002e80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021fc  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f83  00000000  00000000  00005198  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000611b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  000062bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000064ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  000088b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00009c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000ae14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000afd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b2ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bc38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6f 12 	call	0x24de	; 0x24de <main>
      7a:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e7       	ldi	r26, 0x74	; 116
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 47 14 	jmp	0x288e	; 0x288e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 47 14 	jmp	0x288e	; 0x288e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e7       	ldi	r24, 0x74	; 116
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	64 e7       	ldi	r22, 0x74	; 116
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 47 14 	jmp	0x288e	; 0x288e <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 47 14 	jmp	0x288e	; 0x288e <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 47 14 	jmp	0x288e	; 0x288e <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e4 58       	subi	r30, 0x84	; 132
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <MGIE_voidEnable>:

#include "../DIO/DIO_Interface.h"
#include"GIE_Interface.h"

void MGIE_voidEnable()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     e26:	af e5       	ldi	r26, 0x5F	; 95
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ef e5       	ldi	r30, 0x5F	; 95
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	80 68       	ori	r24, 0x80	; 128
     e32:	8c 93       	st	X, r24


}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <MGIE_voidDisable>:
void MGIE_voidDisable()
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG,7);
     e42:	af e5       	ldi	r26, 0x5F	; 95
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ef e5       	ldi	r30, 0x5F	; 95
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	8c 93       	st	X, r24

}
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <MEXTI_voidSenseControl>:
 * 3--------> Rising
 *
 * */


void MEXTI_voidSenseControl(u8 A_u8ExtiNumber, u8 A_u8State){
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	2a 97       	sbiw	r28, 0x0a	; 10
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	6a 83       	std	Y+2, r22	; 0x02


	switch(A_u8ExtiNumber){
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	3a 87       	std	Y+10, r19	; 0x0a
     e76:	29 87       	std	Y+9, r18	; 0x09
     e78:	89 85       	ldd	r24, Y+9	; 0x09
     e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	91 05       	cpc	r25, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <MEXTI_voidSenseControl+0x2e>
     e82:	66 c0       	rjmp	.+204    	; 0xf50 <MEXTI_voidSenseControl+0xfa>
     e84:	29 85       	ldd	r18, Y+9	; 0x09
     e86:	3a 85       	ldd	r19, Y+10	; 0x0a
     e88:	22 30       	cpi	r18, 0x02	; 2
     e8a:	31 05       	cpc	r19, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <MEXTI_voidSenseControl+0x3a>
     e8e:	bb c0       	rjmp	.+374    	; 0x1006 <MEXTI_voidSenseControl+0x1b0>
     e90:	89 85       	ldd	r24, Y+9	; 0x09
     e92:	9a 85       	ldd	r25, Y+10	; 0x0a
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	09 f0       	breq	.+2      	; 0xe9a <MEXTI_voidSenseControl+0x44>
     e98:	d5 c0       	rjmp	.+426    	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
		/*EXTI INT0*/
		case 0:
			switch(A_u8State){
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	38 87       	std	Y+8, r19	; 0x08
     ea2:	2f 83       	std	Y+7, r18	; 0x07
     ea4:	8f 81       	ldd	r24, Y+7	; 0x07
     ea6:	98 85       	ldd	r25, Y+8	; 0x08
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	21 f1       	breq	.+72     	; 0xef6 <MEXTI_voidSenseControl+0xa0>
     eae:	2f 81       	ldd	r18, Y+7	; 0x07
     eb0:	38 85       	ldd	r19, Y+8	; 0x08
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <MEXTI_voidSenseControl+0x6c>
     eb8:	8f 81       	ldd	r24, Y+7	; 0x07
     eba:	98 85       	ldd	r25, Y+8	; 0x08
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	61 f0       	breq	.+24     	; 0xed8 <MEXTI_voidSenseControl+0x82>
     ec0:	c1 c0       	rjmp	.+386    	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
     ec2:	2f 81       	ldd	r18, Y+7	; 0x07
     ec4:	38 85       	ldd	r19, Y+8	; 0x08
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	21 f1       	breq	.+72     	; 0xf14 <MEXTI_voidSenseControl+0xbe>
     ecc:	8f 81       	ldd	r24, Y+7	; 0x07
     ece:	98 85       	ldd	r25, Y+8	; 0x08
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	91 05       	cpc	r25, r1
     ed4:	71 f1       	breq	.+92     	; 0xf32 <MEXTI_voidSenseControl+0xdc>
     ed6:	b6 c0       	rjmp	.+364    	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
				case 0:
					CLR_BIT(MCUCR,0);
     ed8:	a5 e5       	ldi	r26, 0x55	; 85
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e5 e5       	ldi	r30, 0x55	; 85
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8e 7f       	andi	r24, 0xFE	; 254
     ee4:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
     ee6:	a5 e5       	ldi	r26, 0x55	; 85
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e5 e5       	ldi	r30, 0x55	; 85
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8d 7f       	andi	r24, 0xFD	; 253
     ef2:	8c 93       	st	X, r24
     ef4:	a7 c0       	rjmp	.+334    	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 0);
     ef6:	a5 e5       	ldi	r26, 0x55	; 85
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e5 e5       	ldi	r30, 0x55	; 85
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	81 60       	ori	r24, 0x01	; 1
     f02:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 1);
     f04:	a5 e5       	ldi	r26, 0x55	; 85
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e5 e5       	ldi	r30, 0x55	; 85
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8d 7f       	andi	r24, 0xFD	; 253
     f10:	8c 93       	st	X, r24
     f12:	98 c0       	rjmp	.+304    	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 0);
     f14:	a5 e5       	ldi	r26, 0x55	; 85
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e5 e5       	ldi	r30, 0x55	; 85
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8e 7f       	andi	r24, 0xFE	; 254
     f20:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
     f22:	a5 e5       	ldi	r26, 0x55	; 85
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e5 e5       	ldi	r30, 0x55	; 85
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	82 60       	ori	r24, 0x02	; 2
     f2e:	8c 93       	st	X, r24
     f30:	89 c0       	rjmp	.+274    	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 0);
     f32:	a5 e5       	ldi	r26, 0x55	; 85
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e5 e5       	ldi	r30, 0x55	; 85
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
     f40:	a5 e5       	ldi	r26, 0x55	; 85
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e5 e5       	ldi	r30, 0x55	; 85
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	82 60       	ori	r24, 0x02	; 2
     f4c:	8c 93       	st	X, r24
     f4e:	7a c0       	rjmp	.+244    	; 0x1044 <MEXTI_voidSenseControl+0x1ee>

			}
		break;
		/*EXTI INT1*/
		case 1:
			switch(A_u8State){
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3e 83       	std	Y+6, r19	; 0x06
     f58:	2d 83       	std	Y+5, r18	; 0x05
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	91 05       	cpc	r25, r1
     f62:	21 f1       	breq	.+72     	; 0xfac <MEXTI_voidSenseControl+0x156>
     f64:	2d 81       	ldd	r18, Y+5	; 0x05
     f66:	3e 81       	ldd	r19, Y+6	; 0x06
     f68:	22 30       	cpi	r18, 0x02	; 2
     f6a:	31 05       	cpc	r19, r1
     f6c:	2c f4       	brge	.+10     	; 0xf78 <MEXTI_voidSenseControl+0x122>
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	9e 81       	ldd	r25, Y+6	; 0x06
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	61 f0       	breq	.+24     	; 0xf8e <MEXTI_voidSenseControl+0x138>
     f76:	66 c0       	rjmp	.+204    	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
     f78:	2d 81       	ldd	r18, Y+5	; 0x05
     f7a:	3e 81       	ldd	r19, Y+6	; 0x06
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	21 f1       	breq	.+72     	; 0xfca <MEXTI_voidSenseControl+0x174>
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
     f84:	9e 81       	ldd	r25, Y+6	; 0x06
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	91 05       	cpc	r25, r1
     f8a:	71 f1       	breq	.+92     	; 0xfe8 <MEXTI_voidSenseControl+0x192>
     f8c:	5b c0       	rjmp	.+182    	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
				case 0:
					CLR_BIT(MCUCR,2);
     f8e:	a5 e5       	ldi	r26, 0x55	; 85
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e5 e5       	ldi	r30, 0x55	; 85
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8b 7f       	andi	r24, 0xFB	; 251
     f9a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
     f9c:	a5 e5       	ldi	r26, 0x55	; 85
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e5 e5       	ldi	r30, 0x55	; 85
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	87 7f       	andi	r24, 0xF7	; 247
     fa8:	8c 93       	st	X, r24
     faa:	4c c0       	rjmp	.+152    	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 2);
     fac:	a5 e5       	ldi	r26, 0x55	; 85
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e5 e5       	ldi	r30, 0x55	; 85
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	84 60       	ori	r24, 0x04	; 4
     fb8:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 3);
     fba:	a5 e5       	ldi	r26, 0x55	; 85
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e5 e5       	ldi	r30, 0x55	; 85
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	87 7f       	andi	r24, 0xF7	; 247
     fc6:	8c 93       	st	X, r24
     fc8:	3d c0       	rjmp	.+122    	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 2);
     fca:	a5 e5       	ldi	r26, 0x55	; 85
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e5 e5       	ldi	r30, 0x55	; 85
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8b 7f       	andi	r24, 0xFB	; 251
     fd6:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
     fd8:	a5 e5       	ldi	r26, 0x55	; 85
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e5 e5       	ldi	r30, 0x55	; 85
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	88 60       	ori	r24, 0x08	; 8
     fe4:	8c 93       	st	X, r24
     fe6:	2e c0       	rjmp	.+92     	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 2);
     fe8:	a5 e5       	ldi	r26, 0x55	; 85
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e5 e5       	ldi	r30, 0x55	; 85
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	84 60       	ori	r24, 0x04	; 4
     ff4:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
     ff6:	a5 e5       	ldi	r26, 0x55	; 85
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e5 e5       	ldi	r30, 0x55	; 85
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	88 60       	ori	r24, 0x08	; 8
    1002:	8c 93       	st	X, r24
    1004:	1f c0       	rjmp	.+62     	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
			}
		break;

		/*EXTI INT2*/
		case 2:
			switch(A_u8State){
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	3c 83       	std	Y+4, r19	; 0x04
    100e:	2b 83       	std	Y+3, r18	; 0x03
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	82 30       	cpi	r24, 0x02	; 2
    1016:	91 05       	cpc	r25, r1
    1018:	31 f0       	breq	.+12     	; 0x1026 <MEXTI_voidSenseControl+0x1d0>
    101a:	2b 81       	ldd	r18, Y+3	; 0x03
    101c:	3c 81       	ldd	r19, Y+4	; 0x04
    101e:	23 30       	cpi	r18, 0x03	; 3
    1020:	31 05       	cpc	r19, r1
    1022:	49 f0       	breq	.+18     	; 0x1036 <MEXTI_voidSenseControl+0x1e0>
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
			case 2: CLR_BIT(MCUCSR, 6);break;
    1026:	a4 e5       	ldi	r26, 0x54	; 84
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e4 e5       	ldi	r30, 0x54	; 84
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8f 7b       	andi	r24, 0xBF	; 191
    1032:	8c 93       	st	X, r24
    1034:	07 c0       	rjmp	.+14     	; 0x1044 <MEXTI_voidSenseControl+0x1ee>
			case 3: SET_BIT(MCUCSR, 6);break;
    1036:	a4 e5       	ldi	r26, 0x54	; 84
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e4 e5       	ldi	r30, 0x54	; 84
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	80 64       	ori	r24, 0x40	; 64
    1042:	8c 93       	st	X, r24
			}
		break;

	}
}
    1044:	2a 96       	adiw	r28, 0x0a	; 10
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <MEXTI_voidEnable>:


void MEXTI_voidEnable(u8 A_u8ExtiNumber){
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <MEXTI_voidEnable+0x6>
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiNumber){
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3b 83       	std	Y+3, r19	; 0x03
    106c:	2a 83       	std	Y+2, r18	; 0x02
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	9b 81       	ldd	r25, Y+3	; 0x03
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	89 f0       	breq	.+34     	; 0x109a <MEXTI_voidEnable+0x44>
    1078:	2a 81       	ldd	r18, Y+2	; 0x02
    107a:	3b 81       	ldd	r19, Y+3	; 0x03
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	a1 f0       	breq	.+40     	; 0x10aa <MEXTI_voidEnable+0x54>
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	b9 f4       	brne	.+46     	; 0x10b8 <MEXTI_voidEnable+0x62>
		case 0: SET_BIT( GICR, 6); break;
    108a:	ab e5       	ldi	r26, 0x5B	; 91
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	eb e5       	ldi	r30, 0x5B	; 91
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 64       	ori	r24, 0x40	; 64
    1096:	8c 93       	st	X, r24
    1098:	0f c0       	rjmp	.+30     	; 0x10b8 <MEXTI_voidEnable+0x62>
		case 1: SET_BIT( GICR, 7); break;
    109a:	ab e5       	ldi	r26, 0x5B	; 91
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	eb e5       	ldi	r30, 0x5B	; 91
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 68       	ori	r24, 0x80	; 128
    10a6:	8c 93       	st	X, r24
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <MEXTI_voidEnable+0x62>
		case 2: SET_BIT(GICR, 5); break;
    10aa:	ab e5       	ldi	r26, 0x5B	; 91
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	eb e5       	ldi	r30, 0x5B	; 91
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 62       	ori	r24, 0x20	; 32
    10b6:	8c 93       	st	X, r24
	}

}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <MEXTI_voidDisable>:

void MEXTI_voidDisable(u8 A_u8ExtiNumber){
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <MEXTI_voidDisable+0x6>
    10ca:	0f 92       	push	r0
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiNumber){
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	3b 83       	std	Y+3, r19	; 0x03
    10da:	2a 83       	std	Y+2, r18	; 0x02
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	9b 81       	ldd	r25, Y+3	; 0x03
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	91 05       	cpc	r25, r1
    10e4:	89 f0       	breq	.+34     	; 0x1108 <MEXTI_voidDisable+0x44>
    10e6:	2a 81       	ldd	r18, Y+2	; 0x02
    10e8:	3b 81       	ldd	r19, Y+3	; 0x03
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	a1 f0       	breq	.+40     	; 0x1118 <MEXTI_voidDisable+0x54>
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	9b 81       	ldd	r25, Y+3	; 0x03
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	b9 f4       	brne	.+46     	; 0x1126 <MEXTI_voidDisable+0x62>
		case 0: CLR_BIT( GICR, 6); break;
    10f8:	ab e5       	ldi	r26, 0x5B	; 91
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	eb e5       	ldi	r30, 0x5B	; 91
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	8f 7b       	andi	r24, 0xBF	; 191
    1104:	8c 93       	st	X, r24
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <MEXTI_voidDisable+0x62>
		case 1: CLR_BIT( GICR, 7); break;
    1108:	ab e5       	ldi	r26, 0x5B	; 91
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	eb e5       	ldi	r30, 0x5B	; 91
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8f 77       	andi	r24, 0x7F	; 127
    1114:	8c 93       	st	X, r24
    1116:	07 c0       	rjmp	.+14     	; 0x1126 <MEXTI_voidDisable+0x62>
		case 2: CLR_BIT(GICR, 5); break;
    1118:	ab e5       	ldi	r26, 0x5B	; 91
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	eb e5       	ldi	r30, 0x5B	; 91
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8f 7d       	andi	r24, 0xDF	; 223
    1124:	8c 93       	st	X, r24
	}
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <MDIO_voidSetPinDirection>:
#include<avr/io.h>
#include"DIO_Interface.h"



void  MDIO_voidSetPinDirection(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Dir){
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	2d 97       	sbiw	r28, 0x0d	; 13
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	6a 83       	std	Y+2, r22	; 0x02
    114a:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortNumber){
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3d 87       	std	Y+13, r19	; 0x0d
    1154:	2c 87       	std	Y+12, r18	; 0x0c
    1156:	8c 85       	ldd	r24, Y+12	; 0x0c
    1158:	9d 85       	ldd	r25, Y+13	; 0x0d
    115a:	82 34       	cpi	r24, 0x42	; 66
    115c:	91 05       	cpc	r25, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <MDIO_voidSetPinDirection+0x30>
    1160:	50 c0       	rjmp	.+160    	; 0x1202 <MDIO_voidSetPinDirection+0xd0>
    1162:	2c 85       	ldd	r18, Y+12	; 0x0c
    1164:	3d 85       	ldd	r19, Y+13	; 0x0d
    1166:	23 34       	cpi	r18, 0x43	; 67
    1168:	31 05       	cpc	r19, r1
    116a:	34 f4       	brge	.+12     	; 0x1178 <MDIO_voidSetPinDirection+0x46>
    116c:	8c 85       	ldd	r24, Y+12	; 0x0c
    116e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1170:	81 34       	cpi	r24, 0x41	; 65
    1172:	91 05       	cpc	r25, r1
    1174:	71 f0       	breq	.+28     	; 0x1192 <MDIO_voidSetPinDirection+0x60>
    1176:	ec c0       	rjmp	.+472    	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
    1178:	2c 85       	ldd	r18, Y+12	; 0x0c
    117a:	3d 85       	ldd	r19, Y+13	; 0x0d
    117c:	23 34       	cpi	r18, 0x43	; 67
    117e:	31 05       	cpc	r19, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <MDIO_voidSetPinDirection+0x52>
    1182:	77 c0       	rjmp	.+238    	; 0x1272 <MDIO_voidSetPinDirection+0x140>
    1184:	8c 85       	ldd	r24, Y+12	; 0x0c
    1186:	9d 85       	ldd	r25, Y+13	; 0x0d
    1188:	84 34       	cpi	r24, 0x44	; 68
    118a:	91 05       	cpc	r25, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <MDIO_voidSetPinDirection+0x5e>
    118e:	a9 c0       	rjmp	.+338    	; 0x12e2 <MDIO_voidSetPinDirection+0x1b0>
    1190:	df c0       	rjmp	.+446    	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
		case 'A':
			switch(A_u8Dir){
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3b 87       	std	Y+11, r19	; 0x0b
    119a:	2a 87       	std	Y+10, r18	; 0x0a
    119c:	8a 85       	ldd	r24, Y+10	; 0x0a
    119e:	9b 85       	ldd	r25, Y+11	; 0x0b
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	31 f0       	breq	.+12     	; 0x11b0 <MDIO_voidSetPinDirection+0x7e>
    11a4:	2a 85       	ldd	r18, Y+10	; 0x0a
    11a6:	3b 85       	ldd	r19, Y+11	; 0x0b
    11a8:	21 30       	cpi	r18, 0x01	; 1
    11aa:	31 05       	cpc	r19, r1
    11ac:	b1 f0       	breq	.+44     	; 0x11da <MDIO_voidSetPinDirection+0xa8>
    11ae:	d0 c0       	rjmp	.+416    	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRA , A_u8PinNumber);break;
    11b0:	aa e3       	ldi	r26, 0x3A	; 58
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ea e3       	ldi	r30, 0x3A	; 58
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <MDIO_voidSetPinDirection+0x9c>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <MDIO_voidSetPinDirection+0x98>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	bb c0       	rjmp	.+374    	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRA, A_u8PinNumber); break;
    11da:	aa e3       	ldi	r26, 0x3A	; 58
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ea e3       	ldi	r30, 0x3A	; 58
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <MDIO_voidSetPinDirection+0xc6>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <MDIO_voidSetPinDirection+0xc2>
    11fc:	84 2b       	or	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	a7 c0       	rjmp	.+334    	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'B':
			switch(A_u8Dir){
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	39 87       	std	Y+9, r19	; 0x09
    120a:	28 87       	std	Y+8, r18	; 0x08
    120c:	88 85       	ldd	r24, Y+8	; 0x08
    120e:	99 85       	ldd	r25, Y+9	; 0x09
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	31 f0       	breq	.+12     	; 0x1220 <MDIO_voidSetPinDirection+0xee>
    1214:	28 85       	ldd	r18, Y+8	; 0x08
    1216:	39 85       	ldd	r19, Y+9	; 0x09
    1218:	21 30       	cpi	r18, 0x01	; 1
    121a:	31 05       	cpc	r19, r1
    121c:	b1 f0       	breq	.+44     	; 0x124a <MDIO_voidSetPinDirection+0x118>
    121e:	98 c0       	rjmp	.+304    	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRB , A_u8PinNumber);break;
    1220:	a7 e3       	ldi	r26, 0x37	; 55
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e7 e3       	ldi	r30, 0x37	; 55
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <MDIO_voidSetPinDirection+0x10c>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <MDIO_voidSetPinDirection+0x108>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	83 c0       	rjmp	.+262    	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRB, A_u8PinNumber); break;
    124a:	a7 e3       	ldi	r26, 0x37	; 55
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e7 e3       	ldi	r30, 0x37	; 55
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <MDIO_voidSetPinDirection+0x136>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <MDIO_voidSetPinDirection+0x132>
    126c:	84 2b       	or	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	6f c0       	rjmp	.+222    	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'C':
			switch(A_u8Dir){
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3f 83       	std	Y+7, r19	; 0x07
    127a:	2e 83       	std	Y+6, r18	; 0x06
    127c:	8e 81       	ldd	r24, Y+6	; 0x06
    127e:	9f 81       	ldd	r25, Y+7	; 0x07
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	31 f0       	breq	.+12     	; 0x1290 <MDIO_voidSetPinDirection+0x15e>
    1284:	2e 81       	ldd	r18, Y+6	; 0x06
    1286:	3f 81       	ldd	r19, Y+7	; 0x07
    1288:	21 30       	cpi	r18, 0x01	; 1
    128a:	31 05       	cpc	r19, r1
    128c:	b1 f0       	breq	.+44     	; 0x12ba <MDIO_voidSetPinDirection+0x188>
    128e:	60 c0       	rjmp	.+192    	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRC , A_u8PinNumber);break;
    1290:	a4 e3       	ldi	r26, 0x34	; 52
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e4 e3       	ldi	r30, 0x34	; 52
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <MDIO_voidSetPinDirection+0x17c>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <MDIO_voidSetPinDirection+0x178>
    12b2:	80 95       	com	r24
    12b4:	84 23       	and	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	4b c0       	rjmp	.+150    	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRC, A_u8PinNumber); break;
    12ba:	a4 e3       	ldi	r26, 0x34	; 52
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e4 e3       	ldi	r30, 0x34	; 52
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <MDIO_voidSetPinDirection+0x1a6>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <MDIO_voidSetPinDirection+0x1a2>
    12dc:	84 2b       	or	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	37 c0       	rjmp	.+110    	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'D':
			switch(A_u8Dir){
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3d 83       	std	Y+5, r19	; 0x05
    12ea:	2c 83       	std	Y+4, r18	; 0x04
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	31 f0       	breq	.+12     	; 0x1300 <MDIO_voidSetPinDirection+0x1ce>
    12f4:	2c 81       	ldd	r18, Y+4	; 0x04
    12f6:	3d 81       	ldd	r19, Y+5	; 0x05
    12f8:	21 30       	cpi	r18, 0x01	; 1
    12fa:	31 05       	cpc	r19, r1
    12fc:	b1 f0       	breq	.+44     	; 0x132a <MDIO_voidSetPinDirection+0x1f8>
    12fe:	28 c0       	rjmp	.+80     	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRD , A_u8PinNumber);break;
    1300:	a1 e3       	ldi	r26, 0x31	; 49
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e1 e3       	ldi	r30, 0x31	; 49
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <MDIO_voidSetPinDirection+0x1ec>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <MDIO_voidSetPinDirection+0x1e8>
    1322:	80 95       	com	r24
    1324:	84 23       	and	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	13 c0       	rjmp	.+38     	; 0x1350 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRD, A_u8PinNumber); break;
    132a:	a1 e3       	ldi	r26, 0x31	; 49
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e1 e3       	ldi	r30, 0x31	; 49
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <MDIO_voidSetPinDirection+0x216>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <MDIO_voidSetPinDirection+0x212>
    134c:	84 2b       	or	r24, r20
    134e:	8c 93       	st	X, r24
			}
		break;
	}

}
    1350:	2d 96       	adiw	r28, 0x0d	; 13
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8PinValue){
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	2d 97       	sbiw	r28, 0x0d	; 13
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	6a 83       	std	Y+2, r22	; 0x02
    137a:	4b 83       	std	Y+3, r20	; 0x03

	switch(A_u8PortNumber){
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3d 87       	std	Y+13, r19	; 0x0d
    1384:	2c 87       	std	Y+12, r18	; 0x0c
    1386:	8c 85       	ldd	r24, Y+12	; 0x0c
    1388:	9d 85       	ldd	r25, Y+13	; 0x0d
    138a:	82 34       	cpi	r24, 0x42	; 66
    138c:	91 05       	cpc	r25, r1
    138e:	09 f4       	brne	.+2      	; 0x1392 <MDIO_voidSetPinValue+0x30>
    1390:	50 c0       	rjmp	.+160    	; 0x1432 <MDIO_voidSetPinValue+0xd0>
    1392:	2c 85       	ldd	r18, Y+12	; 0x0c
    1394:	3d 85       	ldd	r19, Y+13	; 0x0d
    1396:	23 34       	cpi	r18, 0x43	; 67
    1398:	31 05       	cpc	r19, r1
    139a:	34 f4       	brge	.+12     	; 0x13a8 <MDIO_voidSetPinValue+0x46>
    139c:	8c 85       	ldd	r24, Y+12	; 0x0c
    139e:	9d 85       	ldd	r25, Y+13	; 0x0d
    13a0:	81 34       	cpi	r24, 0x41	; 65
    13a2:	91 05       	cpc	r25, r1
    13a4:	71 f0       	breq	.+28     	; 0x13c2 <MDIO_voidSetPinValue+0x60>
    13a6:	ec c0       	rjmp	.+472    	; 0x1580 <MDIO_voidSetPinValue+0x21e>
    13a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    13ac:	23 34       	cpi	r18, 0x43	; 67
    13ae:	31 05       	cpc	r19, r1
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <MDIO_voidSetPinValue+0x52>
    13b2:	77 c0       	rjmp	.+238    	; 0x14a2 <MDIO_voidSetPinValue+0x140>
    13b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    13b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    13b8:	84 34       	cpi	r24, 0x44	; 68
    13ba:	91 05       	cpc	r25, r1
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <MDIO_voidSetPinValue+0x5e>
    13be:	a9 c0       	rjmp	.+338    	; 0x1512 <MDIO_voidSetPinValue+0x1b0>
    13c0:	df c0       	rjmp	.+446    	; 0x1580 <MDIO_voidSetPinValue+0x21e>
		case 'A':
			switch(A_u8PinValue){
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3b 87       	std	Y+11, r19	; 0x0b
    13ca:	2a 87       	std	Y+10, r18	; 0x0a
    13cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	31 f0       	breq	.+12     	; 0x13e0 <MDIO_voidSetPinValue+0x7e>
    13d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    13d6:	3b 85       	ldd	r19, Y+11	; 0x0b
    13d8:	21 30       	cpi	r18, 0x01	; 1
    13da:	31 05       	cpc	r19, r1
    13dc:	b1 f0       	breq	.+44     	; 0x140a <MDIO_voidSetPinValue+0xa8>
    13de:	d0 c0       	rjmp	.+416    	; 0x1580 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTA , A_u8PinNumber); break;
    13e0:	ab e3       	ldi	r26, 0x3B	; 59
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <MDIO_voidSetPinValue+0x9c>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <MDIO_voidSetPinValue+0x98>
    1402:	80 95       	com	r24
    1404:	84 23       	and	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	bb c0       	rjmp	.+374    	; 0x1580 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTA, A_u8PinNumber); break;
    140a:	ab e3       	ldi	r26, 0x3B	; 59
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	eb e3       	ldi	r30, 0x3B	; 59
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <MDIO_voidSetPinValue+0xc6>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <MDIO_voidSetPinValue+0xc2>
    142c:	84 2b       	or	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	a7 c0       	rjmp	.+334    	; 0x1580 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'B':
			switch(A_u8PinValue){
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	39 87       	std	Y+9, r19	; 0x09
    143a:	28 87       	std	Y+8, r18	; 0x08
    143c:	88 85       	ldd	r24, Y+8	; 0x08
    143e:	99 85       	ldd	r25, Y+9	; 0x09
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	31 f0       	breq	.+12     	; 0x1450 <MDIO_voidSetPinValue+0xee>
    1444:	28 85       	ldd	r18, Y+8	; 0x08
    1446:	39 85       	ldd	r19, Y+9	; 0x09
    1448:	21 30       	cpi	r18, 0x01	; 1
    144a:	31 05       	cpc	r19, r1
    144c:	b1 f0       	breq	.+44     	; 0x147a <MDIO_voidSetPinValue+0x118>
    144e:	98 c0       	rjmp	.+304    	; 0x1580 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTB , A_u8PinNumber); break;
    1450:	a8 e3       	ldi	r26, 0x38	; 56
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e8 e3       	ldi	r30, 0x38	; 56
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <MDIO_voidSetPinValue+0x10c>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <MDIO_voidSetPinValue+0x108>
    1472:	80 95       	com	r24
    1474:	84 23       	and	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	83 c0       	rjmp	.+262    	; 0x1580 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTB, A_u8PinNumber); break;
    147a:	a8 e3       	ldi	r26, 0x38	; 56
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e8 e3       	ldi	r30, 0x38	; 56
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <MDIO_voidSetPinValue+0x136>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <MDIO_voidSetPinValue+0x132>
    149c:	84 2b       	or	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	6f c0       	rjmp	.+222    	; 0x1580 <MDIO_voidSetPinValue+0x21e>
			}

		break;

		case 'C':
			switch(A_u8PinValue){
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3f 83       	std	Y+7, r19	; 0x07
    14aa:	2e 83       	std	Y+6, r18	; 0x06
    14ac:	8e 81       	ldd	r24, Y+6	; 0x06
    14ae:	9f 81       	ldd	r25, Y+7	; 0x07
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	31 f0       	breq	.+12     	; 0x14c0 <MDIO_voidSetPinValue+0x15e>
    14b4:	2e 81       	ldd	r18, Y+6	; 0x06
    14b6:	3f 81       	ldd	r19, Y+7	; 0x07
    14b8:	21 30       	cpi	r18, 0x01	; 1
    14ba:	31 05       	cpc	r19, r1
    14bc:	b1 f0       	breq	.+44     	; 0x14ea <MDIO_voidSetPinValue+0x188>
    14be:	60 c0       	rjmp	.+192    	; 0x1580 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTC , A_u8PinNumber); break;
    14c0:	a5 e3       	ldi	r26, 0x35	; 53
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e5 e3       	ldi	r30, 0x35	; 53
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <MDIO_voidSetPinValue+0x17c>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <MDIO_voidSetPinValue+0x178>
    14e2:	80 95       	com	r24
    14e4:	84 23       	and	r24, r20
    14e6:	8c 93       	st	X, r24
    14e8:	4b c0       	rjmp	.+150    	; 0x1580 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTC, A_u8PinNumber); break;
    14ea:	a5 e3       	ldi	r26, 0x35	; 53
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e3       	ldi	r30, 0x35	; 53
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <MDIO_voidSetPinValue+0x1a6>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <MDIO_voidSetPinValue+0x1a2>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	37 c0       	rjmp	.+110    	; 0x1580 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'D':
			switch(A_u8PinValue){
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3d 83       	std	Y+5, r19	; 0x05
    151a:	2c 83       	std	Y+4, r18	; 0x04
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	31 f0       	breq	.+12     	; 0x1530 <MDIO_voidSetPinValue+0x1ce>
    1524:	2c 81       	ldd	r18, Y+4	; 0x04
    1526:	3d 81       	ldd	r19, Y+5	; 0x05
    1528:	21 30       	cpi	r18, 0x01	; 1
    152a:	31 05       	cpc	r19, r1
    152c:	b1 f0       	breq	.+44     	; 0x155a <MDIO_voidSetPinValue+0x1f8>
    152e:	28 c0       	rjmp	.+80     	; 0x1580 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTD , A_u8PinNumber); break;
    1530:	a2 e3       	ldi	r26, 0x32	; 50
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e2 e3       	ldi	r30, 0x32	; 50
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 2e       	mov	r0, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <MDIO_voidSetPinValue+0x1ec>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <MDIO_voidSetPinValue+0x1e8>
    1552:	80 95       	com	r24
    1554:	84 23       	and	r24, r20
    1556:	8c 93       	st	X, r24
    1558:	13 c0       	rjmp	.+38     	; 0x1580 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTD, A_u8PinNumber); break;
    155a:	a2 e3       	ldi	r26, 0x32	; 50
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e2 e3       	ldi	r30, 0x32	; 50
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <MDIO_voidSetPinValue+0x216>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <MDIO_voidSetPinValue+0x212>
    157c:	84 2b       	or	r24, r20
    157e:	8c 93       	st	X, r24
			}
		break;
	}
}
    1580:	2d 96       	adiw	r28, 0x0d	; 13
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <MDIO_voidSetPortDirection>:



void MDIO_voidSetPortDirection(u8 A_u8PortNumber, u8 A_u8PortDir){
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	00 d0       	rcall	.+0      	; 0x1598 <MDIO_voidSetPortDirection+0x6>
    1598:	00 d0       	rcall	.+0      	; 0x159a <MDIO_voidSetPortDirection+0x8>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3c 83       	std	Y+4, r19	; 0x04
    15aa:	2b 83       	std	Y+3, r18	; 0x03
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	82 34       	cpi	r24, 0x42	; 66
    15b2:	91 05       	cpc	r25, r1
    15b4:	d9 f0       	breq	.+54     	; 0x15ec <MDIO_voidSetPortDirection+0x5a>
    15b6:	2b 81       	ldd	r18, Y+3	; 0x03
    15b8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ba:	23 34       	cpi	r18, 0x43	; 67
    15bc:	31 05       	cpc	r19, r1
    15be:	34 f4       	brge	.+12     	; 0x15cc <MDIO_voidSetPortDirection+0x3a>
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	81 34       	cpi	r24, 0x41	; 65
    15c6:	91 05       	cpc	r25, r1
    15c8:	61 f0       	breq	.+24     	; 0x15e2 <MDIO_voidSetPortDirection+0x50>
    15ca:	1e c0       	rjmp	.+60     	; 0x1608 <MDIO_voidSetPortDirection+0x76>
    15cc:	2b 81       	ldd	r18, Y+3	; 0x03
    15ce:	3c 81       	ldd	r19, Y+4	; 0x04
    15d0:	23 34       	cpi	r18, 0x43	; 67
    15d2:	31 05       	cpc	r19, r1
    15d4:	81 f0       	breq	.+32     	; 0x15f6 <MDIO_voidSetPortDirection+0x64>
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	84 34       	cpi	r24, 0x44	; 68
    15dc:	91 05       	cpc	r25, r1
    15de:	81 f0       	breq	.+32     	; 0x1600 <MDIO_voidSetPortDirection+0x6e>
    15e0:	13 c0       	rjmp	.+38     	; 0x1608 <MDIO_voidSetPortDirection+0x76>
		case 'A': DDRA = A_u8PortDir; break;
    15e2:	ea e3       	ldi	r30, 0x3A	; 58
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	80 83       	st	Z, r24
    15ea:	0e c0       	rjmp	.+28     	; 0x1608 <MDIO_voidSetPortDirection+0x76>
		case 'B': DDRB = A_u8PortDir; break;
    15ec:	e7 e3       	ldi	r30, 0x37	; 55
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	80 83       	st	Z, r24
    15f4:	09 c0       	rjmp	.+18     	; 0x1608 <MDIO_voidSetPortDirection+0x76>
		case 'C': DDRC = A_u8PortDir; break;
    15f6:	e4 e3       	ldi	r30, 0x34	; 52
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	80 83       	st	Z, r24
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <MDIO_voidSetPortDirection+0x76>
		case 'D': DDRD = A_u8PortDir; break;
    1600:	e1 e3       	ldi	r30, 0x31	; 49
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	80 83       	st	Z, r24
	}
}
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortNumber, u8 A_u8PortValue){
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <MDIO_voidSetPortValue+0x6>
    161c:	00 d0       	rcall	.+0      	; 0x161e <MDIO_voidSetPortValue+0x8>
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3c 83       	std	Y+4, r19	; 0x04
    162e:	2b 83       	std	Y+3, r18	; 0x03
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	82 34       	cpi	r24, 0x42	; 66
    1636:	91 05       	cpc	r25, r1
    1638:	d9 f0       	breq	.+54     	; 0x1670 <MDIO_voidSetPortValue+0x5a>
    163a:	2b 81       	ldd	r18, Y+3	; 0x03
    163c:	3c 81       	ldd	r19, Y+4	; 0x04
    163e:	23 34       	cpi	r18, 0x43	; 67
    1640:	31 05       	cpc	r19, r1
    1642:	34 f4       	brge	.+12     	; 0x1650 <MDIO_voidSetPortValue+0x3a>
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	81 34       	cpi	r24, 0x41	; 65
    164a:	91 05       	cpc	r25, r1
    164c:	61 f0       	breq	.+24     	; 0x1666 <MDIO_voidSetPortValue+0x50>
    164e:	1e c0       	rjmp	.+60     	; 0x168c <MDIO_voidSetPortValue+0x76>
    1650:	2b 81       	ldd	r18, Y+3	; 0x03
    1652:	3c 81       	ldd	r19, Y+4	; 0x04
    1654:	23 34       	cpi	r18, 0x43	; 67
    1656:	31 05       	cpc	r19, r1
    1658:	81 f0       	breq	.+32     	; 0x167a <MDIO_voidSetPortValue+0x64>
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	84 34       	cpi	r24, 0x44	; 68
    1660:	91 05       	cpc	r25, r1
    1662:	81 f0       	breq	.+32     	; 0x1684 <MDIO_voidSetPortValue+0x6e>
    1664:	13 c0       	rjmp	.+38     	; 0x168c <MDIO_voidSetPortValue+0x76>
		case 'A':PORTA = A_u8PortValue; break;
    1666:	eb e3       	ldi	r30, 0x3B	; 59
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	80 83       	st	Z, r24
    166e:	0e c0       	rjmp	.+28     	; 0x168c <MDIO_voidSetPortValue+0x76>
		case 'B':PORTB = A_u8PortValue; break;
    1670:	e8 e3       	ldi	r30, 0x38	; 56
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	80 83       	st	Z, r24
    1678:	09 c0       	rjmp	.+18     	; 0x168c <MDIO_voidSetPortValue+0x76>
		case 'C':PORTC = A_u8PortValue; break;
    167a:	e5 e3       	ldi	r30, 0x35	; 53
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	80 83       	st	Z, r24
    1682:	04 c0       	rjmp	.+8      	; 0x168c <MDIO_voidSetPortValue+0x76>
		case 'D':PORTD = A_u8PortValue; break;
    1684:	e2 e3       	ldi	r30, 0x32	; 50
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	80 83       	st	Z, r24
	}
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <MDIO_u8GetPinValue>:





u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber){
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <MDIO_u8GetPinValue+0x6>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <MDIO_u8GetPinValue+0x8>
    16a2:	0f 92       	push	r0
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	8a 83       	std	Y+2, r24	; 0x02
    16aa:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Result;

	if(A_u8PinNumber < 8){
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	88 30       	cpi	r24, 0x08	; 8
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <MDIO_u8GetPinValue+0x1a>
    16b2:	68 c0       	rjmp	.+208    	; 0x1784 <MDIO_u8GetPinValue+0xea>
		switch(A_u8PortNumber){
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	3d 83       	std	Y+5, r19	; 0x05
    16bc:	2c 83       	std	Y+4, r18	; 0x04
    16be:	4c 81       	ldd	r20, Y+4	; 0x04
    16c0:	5d 81       	ldd	r21, Y+5	; 0x05
    16c2:	42 34       	cpi	r20, 0x42	; 66
    16c4:	51 05       	cpc	r21, r1
    16c6:	41 f1       	breq	.+80     	; 0x1718 <MDIO_u8GetPinValue+0x7e>
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	9d 81       	ldd	r25, Y+5	; 0x05
    16cc:	83 34       	cpi	r24, 0x43	; 67
    16ce:	91 05       	cpc	r25, r1
    16d0:	34 f4       	brge	.+12     	; 0x16de <MDIO_u8GetPinValue+0x44>
    16d2:	2c 81       	ldd	r18, Y+4	; 0x04
    16d4:	3d 81       	ldd	r19, Y+5	; 0x05
    16d6:	21 34       	cpi	r18, 0x41	; 65
    16d8:	31 05       	cpc	r19, r1
    16da:	61 f0       	breq	.+24     	; 0x16f4 <MDIO_u8GetPinValue+0x5a>
    16dc:	55 c0       	rjmp	.+170    	; 0x1788 <MDIO_u8GetPinValue+0xee>
    16de:	4c 81       	ldd	r20, Y+4	; 0x04
    16e0:	5d 81       	ldd	r21, Y+5	; 0x05
    16e2:	43 34       	cpi	r20, 0x43	; 67
    16e4:	51 05       	cpc	r21, r1
    16e6:	51 f1       	breq	.+84     	; 0x173c <MDIO_u8GetPinValue+0xa2>
    16e8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ea:	9d 81       	ldd	r25, Y+5	; 0x05
    16ec:	84 34       	cpi	r24, 0x44	; 68
    16ee:	91 05       	cpc	r25, r1
    16f0:	b9 f1       	breq	.+110    	; 0x1760 <MDIO_u8GetPinValue+0xc6>
    16f2:	4a c0       	rjmp	.+148    	; 0x1788 <MDIO_u8GetPinValue+0xee>
			case 'A':Local_u8Result =  GET_BIT(PINA, A_u8PinNumber);break;
    16f4:	e9 e3       	ldi	r30, 0x39	; 57
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	88 2f       	mov	r24, r24
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	a9 01       	movw	r20, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <MDIO_u8GetPinValue+0x72>
    1708:	55 95       	asr	r21
    170a:	47 95       	ror	r20
    170c:	8a 95       	dec	r24
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <MDIO_u8GetPinValue+0x6e>
    1710:	ca 01       	movw	r24, r20
    1712:	81 70       	andi	r24, 0x01	; 1
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	38 c0       	rjmp	.+112    	; 0x1788 <MDIO_u8GetPinValue+0xee>
			case 'B':Local_u8Result =  GET_BIT(PINB, A_u8PinNumber); break;
    1718:	e6 e3       	ldi	r30, 0x36	; 54
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a9 01       	movw	r20, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <MDIO_u8GetPinValue+0x96>
    172c:	55 95       	asr	r21
    172e:	47 95       	ror	r20
    1730:	8a 95       	dec	r24
    1732:	e2 f7       	brpl	.-8      	; 0x172c <MDIO_u8GetPinValue+0x92>
    1734:	ca 01       	movw	r24, r20
    1736:	81 70       	andi	r24, 0x01	; 1
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	26 c0       	rjmp	.+76     	; 0x1788 <MDIO_u8GetPinValue+0xee>
			case 'C':Local_u8Result =  GET_BIT(PINC, A_u8PinNumber); break;
    173c:	e3 e3       	ldi	r30, 0x33	; 51
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a9 01       	movw	r20, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <MDIO_u8GetPinValue+0xba>
    1750:	55 95       	asr	r21
    1752:	47 95       	ror	r20
    1754:	8a 95       	dec	r24
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <MDIO_u8GetPinValue+0xb6>
    1758:	ca 01       	movw	r24, r20
    175a:	81 70       	andi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	14 c0       	rjmp	.+40     	; 0x1788 <MDIO_u8GetPinValue+0xee>
			case 'D':Local_u8Result =  GET_BIT(PIND, A_u8PinNumber); break;
    1760:	e0 e3       	ldi	r30, 0x30	; 48
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a9 01       	movw	r20, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <MDIO_u8GetPinValue+0xde>
    1774:	55 95       	asr	r21
    1776:	47 95       	ror	r20
    1778:	8a 95       	dec	r24
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <MDIO_u8GetPinValue+0xda>
    177c:	ca 01       	movw	r24, r20
    177e:	81 70       	andi	r24, 0x01	; 1
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <MDIO_u8GetPinValue+0xee>
		}
	}
	else {
		Local_u8Result = 255;
    1784:	8f ef       	ldi	r24, 0xFF	; 255
    1786:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
    1788:	89 81       	ldd	r24, Y+1	; 0x01
}
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <MADC_voidInit>:
 * Internal     2
 *
 * */


void MADC_voidInit(u8 A_u8Vref){
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <MADC_voidInit+0x6>
    17a0:	0f 92       	push	r0
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	89 83       	std	Y+1, r24	; 0x01

	switch(A_u8Vref){
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	3b 83       	std	Y+3, r19	; 0x03
    17b0:	2a 83       	std	Y+2, r18	; 0x02
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	9b 81       	ldd	r25, Y+3	; 0x03
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	91 05       	cpc	r25, r1
    17ba:	c1 f0       	breq	.+48     	; 0x17ec <MADC_voidInit+0x52>
    17bc:	2a 81       	ldd	r18, Y+2	; 0x02
    17be:	3b 81       	ldd	r19, Y+3	; 0x03
    17c0:	22 30       	cpi	r18, 0x02	; 2
    17c2:	31 05       	cpc	r19, r1
    17c4:	11 f1       	breq	.+68     	; 0x180a <MADC_voidInit+0x70>
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	61 f5       	brne	.+88     	; 0x1826 <MADC_voidInit+0x8c>
		case 0:
			CLR_BIT(ADMUX, 6);
    17ce:	a7 e2       	ldi	r26, 0x27	; 39
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e7 e2       	ldi	r30, 0x27	; 39
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8f 7b       	andi	r24, 0xBF	; 191
    17da:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, 7);
    17dc:	a7 e2       	ldi	r26, 0x27	; 39
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e7 e2       	ldi	r30, 0x27	; 39
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8f 77       	andi	r24, 0x7F	; 127
    17e8:	8c 93       	st	X, r24
    17ea:	1d c0       	rjmp	.+58     	; 0x1826 <MADC_voidInit+0x8c>
		break;

		case 1:
			SET_BIT(ADMUX, 6);
    17ec:	a7 e2       	ldi	r26, 0x27	; 39
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e7 e2       	ldi	r30, 0x27	; 39
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	80 64       	ori	r24, 0x40	; 64
    17f8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, 7);
    17fa:	a7 e2       	ldi	r26, 0x27	; 39
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e7 e2       	ldi	r30, 0x27	; 39
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	8f 77       	andi	r24, 0x7F	; 127
    1806:	8c 93       	st	X, r24
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <MADC_voidInit+0x8c>
		break;

		case 2:
			SET_BIT(ADMUX, 6);
    180a:	a7 e2       	ldi	r26, 0x27	; 39
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e7 e2       	ldi	r30, 0x27	; 39
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	80 64       	ori	r24, 0x40	; 64
    1816:	8c 93       	st	X, r24
			SET_BIT(ADMUX, 7);
    1818:	a7 e2       	ldi	r26, 0x27	; 39
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e7 e2       	ldi	r30, 0x27	; 39
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	80 68       	ori	r24, 0x80	; 128
    1824:	8c 93       	st	X, r24
		break;
	}
	/*Left|Right Adjust*/
	SET_BIT(ADMUX, 5);
    1826:	a7 e2       	ldi	r26, 0x27	; 39
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e7 e2       	ldi	r30, 0x27	; 39
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	80 62       	ori	r24, 0x20	; 32
    1832:	8c 93       	st	X, r24

	/*128 Prescaller*/
	SET_BIT(ADCSRA, 0);
    1834:	a6 e2       	ldi	r26, 0x26	; 38
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e6 e2       	ldi	r30, 0x26	; 38
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	81 60       	ori	r24, 0x01	; 1
    1840:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
    1842:	a6 e2       	ldi	r26, 0x26	; 38
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e6 e2       	ldi	r30, 0x26	; 38
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	82 60       	ori	r24, 0x02	; 2
    184e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 2);
    1850:	a6 e2       	ldi	r26, 0x26	; 38
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e6 e2       	ldi	r30, 0x26	; 38
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	84 60       	ori	r24, 0x04	; 4
    185c:	8c 93       	st	X, r24

	/*ADC Enable*/
	SET_BIT(ADCSRA, 7);
    185e:	a6 e2       	ldi	r26, 0x26	; 38
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e6 e2       	ldi	r30, 0x26	; 38
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	80 68       	ori	r24, 0x80	; 128
    186a:	8c 93       	st	X, r24
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <MADC_u8GetChannelReading>:


u8 MADC_u8GetChannelReading(u8 A_u8Channel){
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	0f 92       	push	r0
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = ADMUX & 0b11100000;
    1884:	a7 e2       	ldi	r26, 0x27	; 39
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e7 e2       	ldi	r30, 0x27	; 39
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	80 7e       	andi	r24, 0xE0	; 224
    1890:	8c 93       	st	X, r24
	ADMUX = ADMUX|A_u8Channel;
    1892:	a7 e2       	ldi	r26, 0x27	; 39
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e7 e2       	ldi	r30, 0x27	; 39
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	90 81       	ld	r25, Z
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	89 2b       	or	r24, r25
    18a0:	8c 93       	st	X, r24

	/*Start Conversion*/
	SET_BIT(ADCSRA, 6);
    18a2:	a6 e2       	ldi	r26, 0x26	; 38
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e6 e2       	ldi	r30, 0x26	; 38
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	80 64       	ori	r24, 0x40	; 64
    18ae:	8c 93       	st	X, r24

	/*Wait Till Adc Flag Is Fired (1) */
	while(GET_BIT(ADCSRA, 4) == 0);
    18b0:	e6 e2       	ldi	r30, 0x26	; 38
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	82 95       	swap	r24
    18b8:	8f 70       	andi	r24, 0x0F	; 15
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	81 70       	andi	r24, 0x01	; 1
    18c0:	90 70       	andi	r25, 0x00	; 0
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	a9 f3       	breq	.-22     	; 0x18b0 <MADC_u8GetChannelReading+0x38>
	/*Clear ADC FLAG*/
	SET_BIT(ADCSRA, 4);
    18c6:	a6 e2       	ldi	r26, 0x26	; 38
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e6 e2       	ldi	r30, 0x26	; 38
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	80 61       	ori	r24, 0x10	; 16
    18d2:	8c 93       	st	X, r24

	return ADCH;
    18d4:	e5 e2       	ldi	r30, 0x25	; 37
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z

}
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <motorReverse>:
#include"motorInterface.h"
#include<util/delay.h>
#include<avr/io.h>

void motorReverse(void)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62

	MDIO_voidSetPinValue(port,backwardPin,1);
    18ea:	83 e4       	ldi	r24, 0x43	; 67
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	41 e0       	ldi	r20, 0x01	; 1
    18f0:	0e 94 b1 09 	call	0x1362	; 0x1362 <MDIO_voidSetPinValue>

}
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <motorForward>:

void motorForward(void)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62

	MDIO_voidSetPinValue(port,forwardPin,1);
    1902:	83 e4       	ldi	r24, 0x43	; 67
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	0e 94 b1 09 	call	0x1362	; 0x1362 <MDIO_voidSetPinValue>

}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <motorStop>:

void motorStop(void)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62

	MDIO_voidSetPinValue(port,forwardPin,0);
    191a:	83 e4       	ldi	r24, 0x43	; 67
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	0e 94 b1 09 	call	0x1362	; 0x1362 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(port,backwardPin,0);
    1924:	83 e4       	ldi	r24, 0x43	; 67
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	0e 94 b1 09 	call	0x1362	; 0x1362 <MDIO_voidSetPinValue>

}
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <motorInit>:


void motorInit(void)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62


	MDIO_voidSetPortDirection(port,0xFF);
    193c:	83 e4       	ldi	r24, 0x43	; 67
    193e:	6f ef       	ldi	r22, 0xFF	; 255
    1940:	0e 94 c9 0a 	call	0x1592	; 0x1592 <MDIO_voidSetPortDirection>

}
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <HLCD_voidSendString>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "LCD.h"
#include <avr/io.h>
#include <util/delay.h>

void HLCD_voidSendString(const char *str) {
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <HLCD_voidSendString+0x6>
    1950:	0f 92       	push	r0
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	9b 83       	std	Y+3, r25	; 0x03
    1958:	8a 83       	std	Y+2, r24	; 0x02
    for (u8 i = 0; str[i] != '\0'; i++) {
    195a:	19 82       	std	Y+1, r1	; 0x01
    195c:	0e c0       	rjmp	.+28     	; 0x197a <HLCD_voidSendString+0x30>
        HLCD_voidSendData(str[i]);
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	9b 81       	ldd	r25, Y+3	; 0x03
    1968:	fc 01       	movw	r30, r24
    196a:	e2 0f       	add	r30, r18
    196c:	f3 1f       	adc	r31, r19
    196e:	80 81       	ld	r24, Z
    1970:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <HLCD_voidSendData>
#include "LCD.h"
#include <avr/io.h>
#include <util/delay.h>

void HLCD_voidSendString(const char *str) {
    for (u8 i = 0; str[i] != '\0'; i++) {
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	9b 81       	ldd	r25, Y+3	; 0x03
    1984:	fc 01       	movw	r30, r24
    1986:	e2 0f       	add	r30, r18
    1988:	f3 1f       	adc	r31, r19
    198a:	80 81       	ld	r24, Z
    198c:	88 23       	and	r24, r24
    198e:	39 f7       	brne	.-50     	; 0x195e <HLCD_voidSendString+0x14>
        HLCD_voidSendData(str[i]);
    }
}
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <HLCD_voidSendCommand>:


void HLCD_voidSendCommand(u8 A_u8Cmd)

{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	6d 97       	sbiw	r28, 0x1d	; 29
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	8d 8f       	std	Y+29, r24	; 0x1d
  //	Initialize control Pins
  MDIO_voidSetPinValue('C', 0, 0);
    19b2:	83 e4       	ldi	r24, 0x43	; 67
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	0e 94 b1 09 	call	0x1362	; 0x1362 <MDIO_voidSetPinValue>
  MDIO_voidSetPinValue('C', 1, 0);
    19bc:	83 e4       	ldi	r24, 0x43	; 67
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	0e 94 b1 09 	call	0x1362	; 0x1362 <MDIO_voidSetPinValue>
// write command on Data Pins
  MDIO_voidSetPortValue('D', A_u8Cmd);
    19c6:	84 e4       	ldi	r24, 0x44	; 68
    19c8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19ca:	0e 94 0b 0b 	call	0x1616	; 0x1616 <MDIO_voidSetPortValue>
  MDIO_voidSetPinValue('C', 2, 1);
    19ce:	83 e4       	ldi	r24, 0x43	; 67
    19d0:	62 e0       	ldi	r22, 0x02	; 2
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	0e 94 b1 09 	call	0x1362	; 0x1362 <MDIO_voidSetPinValue>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	a0 e2       	ldi	r26, 0x20	; 32
    19de:	b2 e4       	ldi	r27, 0x42	; 66
    19e0:	89 8f       	std	Y+25, r24	; 0x19
    19e2:	9a 8f       	std	Y+26, r25	; 0x1a
    19e4:	ab 8f       	std	Y+27, r26	; 0x1b
    19e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4a ef       	ldi	r20, 0xFA	; 250
    19f6:	54 e4       	ldi	r21, 0x44	; 68
    19f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8d 8b       	std	Y+21, r24	; 0x15
    1a02:	9e 8b       	std	Y+22, r25	; 0x16
    1a04:	af 8b       	std	Y+23, r26	; 0x17
    1a06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a08:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9c 8b       	std	Y+20, r25	; 0x14
    1a26:	8b 8b       	std	Y+19, r24	; 0x13
    1a28:	3f c0       	rjmp	.+126    	; 0x1aa8 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a30:	98 8d       	ldd	r25, Y+24	; 0x18
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	4c f5       	brge	.+82     	; 0x1a94 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a42:	69 8d       	ldd	r22, Y+25	; 0x19
    1a44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9c 8b       	std	Y+20, r25	; 0x14
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <HLCD_voidSendCommand+0xee>
    1a6c:	88 ec       	ldi	r24, 0xC8	; 200
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9a 8b       	std	Y+18, r25	; 0x12
    1a72:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a74:	89 89       	ldd	r24, Y+17	; 0x11
    1a76:	9a 89       	ldd	r25, Y+18	; 0x12
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <HLCD_voidSendCommand+0xdc>
    1a7c:	9a 8b       	std	Y+18, r25	; 0x12
    1a7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	8b 89       	ldd	r24, Y+19	; 0x13
    1a82:	9c 89       	ldd	r25, Y+20	; 0x14
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	9c 8b       	std	Y+20, r25	; 0x14
    1a88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <HLCD_voidSendCommand+0xd0>
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a94:	6d 89       	ldd	r22, Y+21	; 0x15
    1a96:	7e 89       	ldd	r23, Y+22	; 0x16
    1a98:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9c 8b       	std	Y+20, r25	; 0x14
    1aa6:	8b 8b       	std	Y+19, r24	; 0x13
    1aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1aac:	98 8b       	std	Y+16, r25	; 0x10
    1aae:	8f 87       	std	Y+15, r24	; 0x0f
    1ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab2:	98 89       	ldd	r25, Y+16	; 0x10
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <HLCD_voidSendCommand+0x118>
    1ab8:	98 8b       	std	Y+16, r25	; 0x10
    1aba:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(40);
  MDIO_voidSetPinValue('C', 2, 0);
    1abc:	83 e4       	ldi	r24, 0x43	; 67
    1abe:	62 e0       	ldi	r22, 0x02	; 2
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	0e 94 b1 09 	call	0x1362	; 0x1362 <MDIO_voidSetPinValue>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	a0 e2       	ldi	r26, 0x20	; 32
    1acc:	b2 e4       	ldi	r27, 0x42	; 66
    1ace:	8b 87       	std	Y+11, r24	; 0x0b
    1ad0:	9c 87       	std	Y+12, r25	; 0x0c
    1ad2:	ad 87       	std	Y+13, r26	; 0x0d
    1ad4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a ef       	ldi	r20, 0xFA	; 250
    1ae4:	54 e4       	ldi	r21, 0x44	; 68
    1ae6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8f 83       	std	Y+7, r24	; 0x07
    1af0:	98 87       	std	Y+8, r25	; 0x08
    1af2:	a9 87       	std	Y+9, r26	; 0x09
    1af4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	2c f4       	brge	.+10     	; 0x1b18 <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	3f c0       	rjmp	.+126    	; 0x1b96 <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1b18:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1a:	78 85       	ldd	r23, Y+8	; 0x08
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	3f ef       	ldi	r19, 0xFF	; 255
    1b24:	4f e7       	ldi	r20, 0x7F	; 127
    1b26:	57 e4       	ldi	r21, 0x47	; 71
    1b28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b2c:	18 16       	cp	r1, r24
    1b2e:	4c f5       	brge	.+82     	; 0x1b82 <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <HLCD_voidSendCommand+0x1dc>
    1b5a:	88 ec       	ldi	r24, 0xC8	; 200
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9c 83       	std	Y+4, r25	; 0x04
    1b60:	8b 83       	std	Y+3, r24	; 0x03
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <HLCD_voidSendCommand+0x1ca>
    1b6a:	9c 83       	std	Y+4, r25	; 0x04
    1b6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b78:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	69 f7       	brne	.-38     	; 0x1b5a <HLCD_voidSendCommand+0x1be>
    1b80:	14 c0       	rjmp	.+40     	; 0x1baa <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	9e 83       	std	Y+6, r25	; 0x06
    1b94:	8d 83       	std	Y+5, r24	; 0x05
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <HLCD_voidSendCommand+0x206>
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(40);
}
    1baa:	6d 96       	adiw	r28, 0x1d	; 29
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)

{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	6d 97       	sbiw	r28, 0x1d	; 29
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	8d 8f       	std	Y+29, r24	; 0x1d

  // Initialize control  Pins
  MDIO_voidSetPinValue('C', 0, 1);
    1bd2:	83 e4       	ldi	r24, 0x43	; 67
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	41 e0       	ldi	r20, 0x01	; 1
    1bd8:	0e 94 b1 09 	call	0x1362	; 0x1362 <MDIO_voidSetPinValue>
  MDIO_voidSetPinValue('C', 1, 0);
    1bdc:	83 e4       	ldi	r24, 0x43	; 67
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	0e 94 b1 09 	call	0x1362	; 0x1362 <MDIO_voidSetPinValue>
  // write command on Data Pins
  MDIO_voidSetPortValue('D', A_u8Data);
    1be6:	84 e4       	ldi	r24, 0x44	; 68
    1be8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bea:	0e 94 0b 0b 	call	0x1616	; 0x1616 <MDIO_voidSetPortValue>
  MDIO_voidSetPinValue('C', 2, 1);
    1bee:	83 e4       	ldi	r24, 0x43	; 67
    1bf0:	62 e0       	ldi	r22, 0x02	; 2
    1bf2:	41 e0       	ldi	r20, 0x01	; 1
    1bf4:	0e 94 b1 09 	call	0x1362	; 0x1362 <MDIO_voidSetPinValue>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a0 e8       	ldi	r26, 0x80	; 128
    1bfe:	bf e3       	ldi	r27, 0x3F	; 63
    1c00:	89 8f       	std	Y+25, r24	; 0x19
    1c02:	9a 8f       	std	Y+26, r25	; 0x1a
    1c04:	ab 8f       	std	Y+27, r26	; 0x1b
    1c06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c08:	69 8d       	ldd	r22, Y+25	; 0x19
    1c0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a ef       	ldi	r20, 0xFA	; 250
    1c16:	54 e4       	ldi	r21, 0x44	; 68
    1c18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8d 8b       	std	Y+21, r24	; 0x15
    1c22:	9e 8b       	std	Y+22, r25	; 0x16
    1c24:	af 8b       	std	Y+23, r26	; 0x17
    1c26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c28:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c3c:	88 23       	and	r24, r24
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9c 8b       	std	Y+20, r25	; 0x14
    1c46:	8b 8b       	std	Y+19, r24	; 0x13
    1c48:	3f c0       	rjmp	.+126    	; 0x1cc8 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c50:	98 8d       	ldd	r25, Y+24	; 0x18
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	57 e4       	ldi	r21, 0x47	; 71
    1c5a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c5e:	18 16       	cp	r1, r24
    1c60:	4c f5       	brge	.+82     	; 0x1cb4 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	69 8d       	ldd	r22, Y+25	; 0x19
    1c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <HLCD_voidSendData+0xee>
    1c8c:	88 ec       	ldi	r24, 0xC8	; 200
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9a 8b       	std	Y+18, r25	; 0x12
    1c92:	89 8b       	std	Y+17, r24	; 0x11
    1c94:	89 89       	ldd	r24, Y+17	; 0x11
    1c96:	9a 89       	ldd	r25, Y+18	; 0x12
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <HLCD_voidSendData+0xdc>
    1c9c:	9a 8b       	std	Y+18, r25	; 0x12
    1c9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	9c 8b       	std	Y+20, r25	; 0x14
    1ca8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cac:	9c 89       	ldd	r25, Y+20	; 0x14
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <HLCD_voidSendData+0xd0>
    1cb2:	14 c0       	rjmp	.+40     	; 0x1cdc <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cba:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9c 8b       	std	Y+20, r25	; 0x14
    1cc6:	8b 8b       	std	Y+19, r24	; 0x13
    1cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ccc:	98 8b       	std	Y+16, r25	; 0x10
    1cce:	8f 87       	std	Y+15, r24	; 0x0f
    1cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd2:	98 89       	ldd	r25, Y+16	; 0x10
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <HLCD_voidSendData+0x118>
    1cd8:	98 8b       	std	Y+16, r25	; 0x10
    1cda:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  MDIO_voidSetPinValue('C', 2, 0);
    1cdc:	83 e4       	ldi	r24, 0x43	; 67
    1cde:	62 e0       	ldi	r22, 0x02	; 2
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	0e 94 b1 09 	call	0x1362	; 0x1362 <MDIO_voidSetPinValue>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	a0 e8       	ldi	r26, 0x80	; 128
    1cec:	bf e3       	ldi	r27, 0x3F	; 63
    1cee:	8b 87       	std	Y+11, r24	; 0x0b
    1cf0:	9c 87       	std	Y+12, r25	; 0x0c
    1cf2:	ad 87       	std	Y+13, r26	; 0x0d
    1cf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4a ef       	ldi	r20, 0xFA	; 250
    1d04:	54 e4       	ldi	r21, 0x44	; 68
    1d06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	8f 83       	std	Y+7, r24	; 0x07
    1d10:	98 87       	std	Y+8, r25	; 0x08
    1d12:	a9 87       	std	Y+9, r26	; 0x09
    1d14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d16:	6f 81       	ldd	r22, Y+7	; 0x07
    1d18:	78 85       	ldd	r23, Y+8	; 0x08
    1d1a:	89 85       	ldd	r24, Y+9	; 0x09
    1d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d2a:	88 23       	and	r24, r24
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <HLCD_voidSendData+0x17c>
		__ticks = 1;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	3f c0       	rjmp	.+126    	; 0x1db6 <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    1d38:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3a:	78 85       	ldd	r23, Y+8	; 0x08
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	4c f5       	brge	.+82     	; 0x1da2 <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	51 e4       	ldi	r21, 0x41	; 65
    1d60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <HLCD_voidSendData+0x1dc>
    1d7a:	88 ec       	ldi	r24, 0xC8	; 200
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	8b 83       	std	Y+3, r24	; 0x03
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <HLCD_voidSendData+0x1ca>
    1d8a:	9c 83       	std	Y+4, r25	; 0x04
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	69 f7       	brne	.-38     	; 0x1d7a <HLCD_voidSendData+0x1be>
    1da0:	14 c0       	rjmp	.+40     	; 0x1dca <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <HLCD_voidSendData+0x206>
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    1dca:	6d 96       	adiw	r28, 0x1d	; 29
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <HLCD_voidInit>:

void HLCD_voidInit() {
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	c6 54       	subi	r28, 0x46	; 70
    1dea:	d0 40       	sbci	r29, 0x00	; 0
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	fe 01       	movw	r30, r28
    1df8:	ed 5b       	subi	r30, 0xBD	; 189
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a0 e2       	ldi	r26, 0x20	; 32
    1e02:	b2 e4       	ldi	r27, 0x42	; 66
    1e04:	80 83       	st	Z, r24
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	a2 83       	std	Z+2, r26	; 0x02
    1e0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0c:	8e 01       	movw	r16, r28
    1e0e:	01 5c       	subi	r16, 0xC1	; 193
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	fe 01       	movw	r30, r28
    1e14:	ed 5b       	subi	r30, 0xBD	; 189
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	60 81       	ld	r22, Z
    1e1a:	71 81       	ldd	r23, Z+1	; 0x01
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	4a ef       	ldi	r20, 0xFA	; 250
    1e26:	54 e4       	ldi	r21, 0x44	; 68
    1e28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	f8 01       	movw	r30, r16
    1e32:	80 83       	st	Z, r24
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	a2 83       	std	Z+2, r26	; 0x02
    1e38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	ff 96       	adiw	r30, 0x3f	; 63
    1e3e:	60 81       	ld	r22, Z
    1e40:	71 81       	ldd	r23, Z+1	; 0x01
    1e42:	82 81       	ldd	r24, Z+2	; 0x02
    1e44:	93 81       	ldd	r25, Z+3	; 0x03
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	5f e3       	ldi	r21, 0x3F	; 63
    1e4e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e52:	88 23       	and	r24, r24
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <HLCD_voidInit+0x84>
		__ticks = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9e af       	std	Y+62, r25	; 0x3e
    1e5c:	8d af       	std	Y+61, r24	; 0x3d
    1e5e:	46 c0       	rjmp	.+140    	; 0x1eec <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    1e60:	fe 01       	movw	r30, r28
    1e62:	ff 96       	adiw	r30, 0x3f	; 63
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	3f ef       	ldi	r19, 0xFF	; 255
    1e70:	4f e7       	ldi	r20, 0x7F	; 127
    1e72:	57 e4       	ldi	r21, 0x47	; 71
    1e74:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e78:	18 16       	cp	r1, r24
    1e7a:	64 f5       	brge	.+88     	; 0x1ed4 <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ed 5b       	subi	r30, 0xBD	; 189
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9e af       	std	Y+62, r25	; 0x3e
    1ea8:	8d af       	std	Y+61, r24	; 0x3d
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <HLCD_voidInit+0xee>
    1eac:	88 ec       	ldi	r24, 0xC8	; 200
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9c af       	std	Y+60, r25	; 0x3c
    1eb2:	8b af       	std	Y+59, r24	; 0x3b
    1eb4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1eb6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <HLCD_voidInit+0xdc>
    1ebc:	9c af       	std	Y+60, r25	; 0x3c
    1ebe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ec2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	9e af       	std	Y+62, r25	; 0x3e
    1ec8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ecc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <HLCD_voidInit+0xd0>
    1ed2:	16 c0       	rjmp	.+44     	; 0x1f00 <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ff 96       	adiw	r30, 0x3f	; 63
    1ed8:	60 81       	ld	r22, Z
    1eda:	71 81       	ldd	r23, Z+1	; 0x01
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9e af       	std	Y+62, r25	; 0x3e
    1eea:	8d af       	std	Y+61, r24	; 0x3d
    1eec:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eee:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ef0:	9a af       	std	Y+58, r25	; 0x3a
    1ef2:	89 af       	std	Y+57, r24	; 0x39
    1ef4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ef6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <HLCD_voidInit+0x11c>
    1efc:	9a af       	std	Y+58, r25	; 0x3a
    1efe:	89 af       	std	Y+57, r24	; 0x39

  // wait for more than 30ms
  _delay_ms(40);

  // function set0b00111000
  HLCD_voidSendCommand(0b00111000);
    1f00:	88 e3       	ldi	r24, 0x38	; 56
    1f02:	0e 94 ce 0c 	call	0x199c	; 0x199c <HLCD_voidSendCommand>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a0 e8       	ldi	r26, 0x80	; 128
    1f0c:	bf e3       	ldi	r27, 0x3F	; 63
    1f0e:	8d ab       	std	Y+53, r24	; 0x35
    1f10:	9e ab       	std	Y+54, r25	; 0x36
    1f12:	af ab       	std	Y+55, r26	; 0x37
    1f14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f16:	6d a9       	ldd	r22, Y+53	; 0x35
    1f18:	7e a9       	ldd	r23, Y+54	; 0x36
    1f1a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f1c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a ef       	ldi	r20, 0xFA	; 250
    1f24:	54 e4       	ldi	r21, 0x44	; 68
    1f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	89 ab       	std	Y+49, r24	; 0x31
    1f30:	9a ab       	std	Y+50, r25	; 0x32
    1f32:	ab ab       	std	Y+51, r26	; 0x33
    1f34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f36:	69 a9       	ldd	r22, Y+49	; 0x31
    1f38:	7a a9       	ldd	r23, Y+50	; 0x32
    1f3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	5f e3       	ldi	r21, 0x3F	; 63
    1f46:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f4a:	88 23       	and	r24, r24
    1f4c:	2c f4       	brge	.+10     	; 0x1f58 <HLCD_voidInit+0x17c>
		__ticks = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	98 ab       	std	Y+48, r25	; 0x30
    1f54:	8f a7       	std	Y+47, r24	; 0x2f
    1f56:	3f c0       	rjmp	.+126    	; 0x1fd6 <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    1f58:	69 a9       	ldd	r22, Y+49	; 0x31
    1f5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	3f ef       	ldi	r19, 0xFF	; 255
    1f64:	4f e7       	ldi	r20, 0x7F	; 127
    1f66:	57 e4       	ldi	r21, 0x47	; 71
    1f68:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f6c:	18 16       	cp	r1, r24
    1f6e:	4c f5       	brge	.+82     	; 0x1fc2 <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f70:	6d a9       	ldd	r22, Y+53	; 0x35
    1f72:	7e a9       	ldd	r23, Y+54	; 0x36
    1f74:	8f a9       	ldd	r24, Y+55	; 0x37
    1f76:	98 ad       	ldd	r25, Y+56	; 0x38
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e2       	ldi	r20, 0x20	; 32
    1f7e:	51 e4       	ldi	r21, 0x41	; 65
    1f80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	98 ab       	std	Y+48, r25	; 0x30
    1f96:	8f a7       	std	Y+47, r24	; 0x2f
    1f98:	0f c0       	rjmp	.+30     	; 0x1fb8 <HLCD_voidInit+0x1dc>
    1f9a:	88 ec       	ldi	r24, 0xC8	; 200
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9e a7       	std	Y+46, r25	; 0x2e
    1fa0:	8d a7       	std	Y+45, r24	; 0x2d
    1fa2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fa4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <HLCD_voidInit+0x1ca>
    1faa:	9e a7       	std	Y+46, r25	; 0x2e
    1fac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	98 ab       	std	Y+48, r25	; 0x30
    1fb6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fba:	98 a9       	ldd	r25, Y+48	; 0x30
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	69 f7       	brne	.-38     	; 0x1f9a <HLCD_voidInit+0x1be>
    1fc0:	14 c0       	rjmp	.+40     	; 0x1fea <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	98 ab       	std	Y+48, r25	; 0x30
    1fd4:	8f a7       	std	Y+47, r24	; 0x2f
    1fd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fda:	9c a7       	std	Y+44, r25	; 0x2c
    1fdc:	8b a7       	std	Y+43, r24	; 0x2b
    1fde:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <HLCD_voidInit+0x206>
    1fe6:	9c a7       	std	Y+44, r25	; 0x2c
    1fe8:	8b a7       	std	Y+43, r24	; 0x2b
  // wait for 40us
  _delay_ms(1);
  // display on/off control
  HLCD_voidSendCommand(0b00001111);
    1fea:	8f e0       	ldi	r24, 0x0F	; 15
    1fec:	0e 94 ce 0c 	call	0x199c	; 0x199c <HLCD_voidSendCommand>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 e8       	ldi	r26, 0x80	; 128
    1ff6:	bf e3       	ldi	r27, 0x3F	; 63
    1ff8:	8f a3       	std	Y+39, r24	; 0x27
    1ffa:	98 a7       	std	Y+40, r25	; 0x28
    1ffc:	a9 a7       	std	Y+41, r26	; 0x29
    1ffe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2000:	6f a1       	ldd	r22, Y+39	; 0x27
    2002:	78 a5       	ldd	r23, Y+40	; 0x28
    2004:	89 a5       	ldd	r24, Y+41	; 0x29
    2006:	9a a5       	ldd	r25, Y+42	; 0x2a
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a ef       	ldi	r20, 0xFA	; 250
    200e:	54 e4       	ldi	r21, 0x44	; 68
    2010:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8b a3       	std	Y+35, r24	; 0x23
    201a:	9c a3       	std	Y+36, r25	; 0x24
    201c:	ad a3       	std	Y+37, r26	; 0x25
    201e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2020:	6b a1       	ldd	r22, Y+35	; 0x23
    2022:	7c a1       	ldd	r23, Y+36	; 0x24
    2024:	8d a1       	ldd	r24, Y+37	; 0x25
    2026:	9e a1       	ldd	r25, Y+38	; 0x26
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	2c f4       	brge	.+10     	; 0x2042 <HLCD_voidInit+0x266>
		__ticks = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9a a3       	std	Y+34, r25	; 0x22
    203e:	89 a3       	std	Y+33, r24	; 0x21
    2040:	3f c0       	rjmp	.+126    	; 0x20c0 <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    2042:	6b a1       	ldd	r22, Y+35	; 0x23
    2044:	7c a1       	ldd	r23, Y+36	; 0x24
    2046:	8d a1       	ldd	r24, Y+37	; 0x25
    2048:	9e a1       	ldd	r25, Y+38	; 0x26
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	4c f5       	brge	.+82     	; 0x20ac <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	6f a1       	ldd	r22, Y+39	; 0x27
    205c:	78 a5       	ldd	r23, Y+40	; 0x28
    205e:	89 a5       	ldd	r24, Y+41	; 0x29
    2060:	9a a5       	ldd	r25, Y+42	; 0x2a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e2       	ldi	r20, 0x20	; 32
    2068:	51 e4       	ldi	r21, 0x41	; 65
    206a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9a a3       	std	Y+34, r25	; 0x22
    2080:	89 a3       	std	Y+33, r24	; 0x21
    2082:	0f c0       	rjmp	.+30     	; 0x20a2 <HLCD_voidInit+0x2c6>
    2084:	88 ec       	ldi	r24, 0xC8	; 200
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	98 a3       	std	Y+32, r25	; 0x20
    208a:	8f 8f       	std	Y+31, r24	; 0x1f
    208c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    208e:	98 a1       	ldd	r25, Y+32	; 0x20
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <HLCD_voidInit+0x2b4>
    2094:	98 a3       	std	Y+32, r25	; 0x20
    2096:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2098:	89 a1       	ldd	r24, Y+33	; 0x21
    209a:	9a a1       	ldd	r25, Y+34	; 0x22
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9a a3       	std	Y+34, r25	; 0x22
    20a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	89 a1       	ldd	r24, Y+33	; 0x21
    20a4:	9a a1       	ldd	r25, Y+34	; 0x22
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	69 f7       	brne	.-38     	; 0x2084 <HLCD_voidInit+0x2a8>
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ac:	6b a1       	ldd	r22, Y+35	; 0x23
    20ae:	7c a1       	ldd	r23, Y+36	; 0x24
    20b0:	8d a1       	ldd	r24, Y+37	; 0x25
    20b2:	9e a1       	ldd	r25, Y+38	; 0x26
    20b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9a a3       	std	Y+34, r25	; 0x22
    20be:	89 a3       	std	Y+33, r24	; 0x21
    20c0:	89 a1       	ldd	r24, Y+33	; 0x21
    20c2:	9a a1       	ldd	r25, Y+34	; 0x22
    20c4:	9e 8f       	std	Y+30, r25	; 0x1e
    20c6:	8d 8f       	std	Y+29, r24	; 0x1d
    20c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <HLCD_voidInit+0x2f0>
    20d0:	9e 8f       	std	Y+30, r25	; 0x1e
    20d2:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);
  // display clear
  HLCD_voidSendCommand(0b00000001);
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	0e 94 ce 0c 	call	0x199c	; 0x199c <HLCD_voidSendCommand>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a0 e8       	ldi	r26, 0x80	; 128
    20e0:	bf e3       	ldi	r27, 0x3F	; 63
    20e2:	89 8f       	std	Y+25, r24	; 0x19
    20e4:	9a 8f       	std	Y+26, r25	; 0x1a
    20e6:	ab 8f       	std	Y+27, r26	; 0x1b
    20e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	69 8d       	ldd	r22, Y+25	; 0x19
    20ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a ef       	ldi	r20, 0xFA	; 250
    20f8:	54 e4       	ldi	r21, 0x44	; 68
    20fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	8d 8b       	std	Y+21, r24	; 0x15
    2104:	9e 8b       	std	Y+22, r25	; 0x16
    2106:	af 8b       	std	Y+23, r26	; 0x17
    2108:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    210a:	6d 89       	ldd	r22, Y+21	; 0x15
    210c:	7e 89       	ldd	r23, Y+22	; 0x16
    210e:	8f 89       	ldd	r24, Y+23	; 0x17
    2110:	98 8d       	ldd	r25, Y+24	; 0x18
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	2c f4       	brge	.+10     	; 0x212c <HLCD_voidInit+0x350>
		__ticks = 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9c 8b       	std	Y+20, r25	; 0x14
    2128:	8b 8b       	std	Y+19, r24	; 0x13
    212a:	3f c0       	rjmp	.+126    	; 0x21aa <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    212c:	6d 89       	ldd	r22, Y+21	; 0x15
    212e:	7e 89       	ldd	r23, Y+22	; 0x16
    2130:	8f 89       	ldd	r24, Y+23	; 0x17
    2132:	98 8d       	ldd	r25, Y+24	; 0x18
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	4c f5       	brge	.+82     	; 0x2196 <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	69 8d       	ldd	r22, Y+25	; 0x19
    2146:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    214a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e2       	ldi	r20, 0x20	; 32
    2152:	51 e4       	ldi	r21, 0x41	; 65
    2154:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9c 8b       	std	Y+20, r25	; 0x14
    216a:	8b 8b       	std	Y+19, r24	; 0x13
    216c:	0f c0       	rjmp	.+30     	; 0x218c <HLCD_voidInit+0x3b0>
    216e:	88 ec       	ldi	r24, 0xC8	; 200
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9a 8b       	std	Y+18, r25	; 0x12
    2174:	89 8b       	std	Y+17, r24	; 0x11
    2176:	89 89       	ldd	r24, Y+17	; 0x11
    2178:	9a 89       	ldd	r25, Y+18	; 0x12
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <HLCD_voidInit+0x39e>
    217e:	9a 8b       	std	Y+18, r25	; 0x12
    2180:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2182:	8b 89       	ldd	r24, Y+19	; 0x13
    2184:	9c 89       	ldd	r25, Y+20	; 0x14
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	9c 8b       	std	Y+20, r25	; 0x14
    218a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218c:	8b 89       	ldd	r24, Y+19	; 0x13
    218e:	9c 89       	ldd	r25, Y+20	; 0x14
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	69 f7       	brne	.-38     	; 0x216e <HLCD_voidInit+0x392>
    2194:	14 c0       	rjmp	.+40     	; 0x21be <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2196:	6d 89       	ldd	r22, Y+21	; 0x15
    2198:	7e 89       	ldd	r23, Y+22	; 0x16
    219a:	8f 89       	ldd	r24, Y+23	; 0x17
    219c:	98 8d       	ldd	r25, Y+24	; 0x18
    219e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
    21aa:	8b 89       	ldd	r24, Y+19	; 0x13
    21ac:	9c 89       	ldd	r25, Y+20	; 0x14
    21ae:	98 8b       	std	Y+16, r25	; 0x10
    21b0:	8f 87       	std	Y+15, r24	; 0x0f
    21b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b4:	98 89       	ldd	r25, Y+16	; 0x10
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <HLCD_voidInit+0x3da>
    21ba:	98 8b       	std	Y+16, r25	; 0x10
    21bc:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  // entry mode set
  HLCD_voidSendCommand(0b000001);
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	0e 94 ce 0c 	call	0x199c	; 0x199c <HLCD_voidSendCommand>
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a0 e8       	ldi	r26, 0x80	; 128
    21ca:	bf e3       	ldi	r27, 0x3F	; 63
    21cc:	8b 87       	std	Y+11, r24	; 0x0b
    21ce:	9c 87       	std	Y+12, r25	; 0x0c
    21d0:	ad 87       	std	Y+13, r26	; 0x0d
    21d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21da:	9e 85       	ldd	r25, Y+14	; 0x0e
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	4a ef       	ldi	r20, 0xFA	; 250
    21e2:	54 e4       	ldi	r21, 0x44	; 68
    21e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8f 83       	std	Y+7, r24	; 0x07
    21ee:	98 87       	std	Y+8, r25	; 0x08
    21f0:	a9 87       	std	Y+9, r26	; 0x09
    21f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f4:	6f 81       	ldd	r22, Y+7	; 0x07
    21f6:	78 85       	ldd	r23, Y+8	; 0x08
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e8       	ldi	r20, 0x80	; 128
    2202:	5f e3       	ldi	r21, 0x3F	; 63
    2204:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2208:	88 23       	and	r24, r24
    220a:	2c f4       	brge	.+10     	; 0x2216 <HLCD_voidInit+0x43a>
		__ticks = 1;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
    2214:	3f c0       	rjmp	.+126    	; 0x2294 <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	3f ef       	ldi	r19, 0xFF	; 255
    2222:	4f e7       	ldi	r20, 0x7F	; 127
    2224:	57 e4       	ldi	r21, 0x47	; 71
    2226:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    222a:	18 16       	cp	r1, r24
    222c:	4c f5       	brge	.+82     	; 0x2280 <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2230:	7c 85       	ldd	r23, Y+12	; 0x0c
    2232:	8d 85       	ldd	r24, Y+13	; 0x0d
    2234:	9e 85       	ldd	r25, Y+14	; 0x0e
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <HLCD_voidInit+0x49a>
    2258:	88 ec       	ldi	r24, 0xC8	; 200
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9c 83       	std	Y+4, r25	; 0x04
    225e:	8b 83       	std	Y+3, r24	; 0x03
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	9c 81       	ldd	r25, Y+4	; 0x04
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <HLCD_voidInit+0x488>
    2268:	9c 83       	std	Y+4, r25	; 0x04
    226a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	9e 81       	ldd	r25, Y+6	; 0x06
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	69 f7       	brne	.-38     	; 0x2258 <HLCD_voidInit+0x47c>
    227e:	14 c0       	rjmp	.+40     	; 0x22a8 <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2280:	6f 81       	ldd	r22, Y+7	; 0x07
    2282:	78 85       	ldd	r23, Y+8	; 0x08
    2284:	89 85       	ldd	r24, Y+9	; 0x09
    2286:	9a 85       	ldd	r25, Y+10	; 0x0a
    2288:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	9a 83       	std	Y+2, r25	; 0x02
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	9a 81       	ldd	r25, Y+2	; 0x02
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <HLCD_voidInit+0x4c4>
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    22a8:	ca 5b       	subi	r28, 0xBA	; 186
    22aa:	df 4f       	sbci	r29, 0xFF	; 255
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	08 95       	ret

000022c0 <HLCD_voidClearScreen>:

void HLCD_voidClearScreen() {
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	2e 97       	sbiw	r28, 0x0e	; 14
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61

  HLCD_voidSendCommand(0b00000001); // Send clear display command
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	0e 94 ce 0c 	call	0x199c	; 0x199c <HLCD_voidSendCommand>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 e0       	ldi	r26, 0x00	; 0
    22e0:	b0 e4       	ldi	r27, 0x40	; 64
    22e2:	8b 87       	std	Y+11, r24	; 0x0b
    22e4:	9c 87       	std	Y+12, r25	; 0x0c
    22e6:	ad 87       	std	Y+13, r26	; 0x0d
    22e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	4a ef       	ldi	r20, 0xFA	; 250
    22f8:	54 e4       	ldi	r21, 0x44	; 68
    22fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	8f 83       	std	Y+7, r24	; 0x07
    2304:	98 87       	std	Y+8, r25	; 0x08
    2306:	a9 87       	std	Y+9, r26	; 0x09
    2308:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    230a:	6f 81       	ldd	r22, Y+7	; 0x07
    230c:	78 85       	ldd	r23, Y+8	; 0x08
    230e:	89 85       	ldd	r24, Y+9	; 0x09
    2310:	9a 85       	ldd	r25, Y+10	; 0x0a
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e8       	ldi	r20, 0x80	; 128
    2318:	5f e3       	ldi	r21, 0x3F	; 63
    231a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    231e:	88 23       	and	r24, r24
    2320:	2c f4       	brge	.+10     	; 0x232c <HLCD_voidClearScreen+0x6c>
		__ticks = 1;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	9e 83       	std	Y+6, r25	; 0x06
    2328:	8d 83       	std	Y+5, r24	; 0x05
    232a:	3f c0       	rjmp	.+126    	; 0x23aa <HLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    232c:	6f 81       	ldd	r22, Y+7	; 0x07
    232e:	78 85       	ldd	r23, Y+8	; 0x08
    2330:	89 85       	ldd	r24, Y+9	; 0x09
    2332:	9a 85       	ldd	r25, Y+10	; 0x0a
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	3f ef       	ldi	r19, 0xFF	; 255
    2338:	4f e7       	ldi	r20, 0x7F	; 127
    233a:	57 e4       	ldi	r21, 0x47	; 71
    233c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2340:	18 16       	cp	r1, r24
    2342:	4c f5       	brge	.+82     	; 0x2396 <HLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2344:	6b 85       	ldd	r22, Y+11	; 0x0b
    2346:	7c 85       	ldd	r23, Y+12	; 0x0c
    2348:	8d 85       	ldd	r24, Y+13	; 0x0d
    234a:	9e 85       	ldd	r25, Y+14	; 0x0e
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e2       	ldi	r20, 0x20	; 32
    2352:	51 e4       	ldi	r21, 0x41	; 65
    2354:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	bc 01       	movw	r22, r24
    235e:	cd 01       	movw	r24, r26
    2360:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	9e 83       	std	Y+6, r25	; 0x06
    236a:	8d 83       	std	Y+5, r24	; 0x05
    236c:	0f c0       	rjmp	.+30     	; 0x238c <HLCD_voidClearScreen+0xcc>
    236e:	88 ec       	ldi	r24, 0xC8	; 200
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	9c 83       	std	Y+4, r25	; 0x04
    2374:	8b 83       	std	Y+3, r24	; 0x03
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	9c 81       	ldd	r25, Y+4	; 0x04
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	f1 f7       	brne	.-4      	; 0x237a <HLCD_voidClearScreen+0xba>
    237e:	9c 83       	std	Y+4, r25	; 0x04
    2380:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2382:	8d 81       	ldd	r24, Y+5	; 0x05
    2384:	9e 81       	ldd	r25, Y+6	; 0x06
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	9e 83       	std	Y+6, r25	; 0x06
    238a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	9e 81       	ldd	r25, Y+6	; 0x06
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	69 f7       	brne	.-38     	; 0x236e <HLCD_voidClearScreen+0xae>
    2394:	14 c0       	rjmp	.+40     	; 0x23be <HLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2396:	6f 81       	ldd	r22, Y+7	; 0x07
    2398:	78 85       	ldd	r23, Y+8	; 0x08
    239a:	89 85       	ldd	r24, Y+9	; 0x09
    239c:	9a 85       	ldd	r25, Y+10	; 0x0a
    239e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9e 83       	std	Y+6, r25	; 0x06
    23a8:	8d 83       	std	Y+5, r24	; 0x05
    23aa:	8d 81       	ldd	r24, Y+5	; 0x05
    23ac:	9e 81       	ldd	r25, Y+6	; 0x06
    23ae:	9a 83       	std	Y+2, r25	; 0x02
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	9a 81       	ldd	r25, Y+2	; 0x02
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <HLCD_voidClearScreen+0xf6>
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2); // Give the LCD some time to clear the display
}
    23be:	2e 96       	adiw	r28, 0x0e	; 14
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <HLCD_voidGoTo>:

void HLCD_voidGoTo(u8 A_u8Row, u8 A_u8Col) {
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <HLCD_voidGoTo+0x6>
    23d6:	0f 92       	push	r0
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	8a 83       	std	Y+2, r24	; 0x02
    23de:	6b 83       	std	Y+3, r22	; 0x03
  u8 L_u8DDRamAddress;
  if (A_u8Row < 2 && A_u8Col < 16) {
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	82 30       	cpi	r24, 0x02	; 2
    23e4:	30 f4       	brcc	.+12     	; 0x23f2 <HLCD_voidGoTo+0x22>
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	80 31       	cpi	r24, 0x10	; 16
    23ea:	18 f4       	brcc	.+6      	; 0x23f2 <HLCD_voidGoTo+0x22>

    L_u8DDRamAddress = 0x00 + A_u8Col;
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	03 c0       	rjmp	.+6      	; 0x23f8 <HLCD_voidGoTo+0x28>
  } else {

    L_u8DDRamAddress = 0x40 + A_u8Col;
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	80 5c       	subi	r24, 0xC0	; 192
    23f6:	89 83       	std	Y+1, r24	; 0x01
  }
  SET_BIT(L_u8DDRamAddress, 7);
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	80 68       	ori	r24, 0x80	; 128
    23fc:	89 83       	std	Y+1, r24	; 0x01
  HLCD_voidSendCommand(L_u8DDRamAddress);
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	0e 94 ce 0c 	call	0x199c	; 0x199c <HLCD_voidSendCommand>
}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <LM35_Init>:


#define LM35_CHANNEL 0 // ADC channel for LM35 sensor (e.g., ADC0)
#define LM35_VREF    5.0 // LM35 operating voltage (5V)

void LM35_Init(void) {
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    MADC_voidInit(1); // Set reference voltage to AVCC (5V)
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	0e 94 cd 0b 	call	0x179a	; 0x179a <MADC_voidInit>
}
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <LM35_ReadTemperature>:

float LM35_ReadTemperature(void) {
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	2a 97       	sbiw	r28, 0x0a	; 10
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61

    u16 adcValue = MADC_u8GetChannelReading(LM35_CHANNEL);
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <MADC_u8GetChannelReading>
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9a 87       	std	Y+10, r25	; 0x0a
    2444:	89 87       	std	Y+9, r24	; 0x09
    float voltage = ((float)adcValue / 1024.0) * LM35_VREF;
    2446:	89 85       	ldd	r24, Y+9	; 0x09
    2448:	9a 85       	ldd	r25, Y+10	; 0x0a
    244a:	cc 01       	movw	r24, r24
    244c:	a0 e0       	ldi	r26, 0x00	; 0
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e8       	ldi	r20, 0x80	; 128
    2466:	54 e4       	ldi	r21, 0x44	; 68
    2468:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 ea       	ldi	r20, 0xA0	; 160
    247a:	50 e4       	ldi	r21, 0x40	; 64
    247c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	9e 83       	std	Y+6, r25	; 0x06
    2488:	af 83       	std	Y+7, r26	; 0x07
    248a:	b8 87       	std	Y+8, r27	; 0x08
    float temperature = (voltage - 0.5) * 100.0; // LM35 temperature calculation
    248c:	6d 81       	ldd	r22, Y+5	; 0x05
    248e:	7e 81       	ldd	r23, Y+6	; 0x06
    2490:	8f 81       	ldd	r24, Y+7	; 0x07
    2492:	98 85       	ldd	r25, Y+8	; 0x08
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	5f e3       	ldi	r21, 0x3F	; 63
    249c:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	48 ec       	ldi	r20, 0xC8	; 200
    24ae:	52 e4       	ldi	r21, 0x42	; 66
    24b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	ab 83       	std	Y+3, r26	; 0x03
    24be:	bc 83       	std	Y+4, r27	; 0x04
    return temperature;
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	ab 81       	ldd	r26, Y+3	; 0x03
    24c6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    24c8:	bc 01       	movw	r22, r24
    24ca:	cd 01       	movw	r24, r26
    24cc:	2a 96       	adiw	r28, 0x0a	; 10
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <main>:

int main(void) {
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	e8 97       	sbiw	r28, 0x38	; 56
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    // Initialize LM35 sensor and ADC
    LM35_Init();
    24f2:	0e 94 08 12 	call	0x2410	; 0x2410 <LM35_Init>
    MDIO_voidSetPortDirection('C',0xFF);
    24f6:	83 e4       	ldi	r24, 0x43	; 67
    24f8:	6f ef       	ldi	r22, 0xFF	; 255
    24fa:	0e 94 c9 0a 	call	0x1592	; 0x1592 <MDIO_voidSetPortDirection>
    MDIO_voidSetPortDirection('D',0xFF);
    24fe:	84 e4       	ldi	r24, 0x44	; 68
    2500:	6f ef       	ldi	r22, 0xFF	; 255
    2502:	0e 94 c9 0a 	call	0x1592	; 0x1592 <MDIO_voidSetPortDirection>
    // Initialize LCD
    HLCD_voidInit();
    2506:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <HLCD_voidInit>

    // Main loop
    while (1) {
        // Read temperature from LM35 sensor
        float tempCelsius = LM35_ReadTemperature();
    250a:	0e 94 12 12 	call	0x2424	; 0x2424 <LM35_ReadTemperature>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	8b a7       	std	Y+43, r24	; 0x2b
    2514:	9c a7       	std	Y+44, r25	; 0x2c
    2516:	ad a7       	std	Y+45, r26	; 0x2d
    2518:	be a7       	std	Y+46, r27	; 0x2e

        // Convert temperature to a string
        char tempStr[10];
        snprintf(tempStr, sizeof(tempStr), "%.2f C", tempCelsius);
    251a:	8d b7       	in	r24, 0x3d	; 61
    251c:	9e b7       	in	r25, 0x3e	; 62
    251e:	0a 97       	sbiw	r24, 0x0a	; 10
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	9e bf       	out	0x3e, r25	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	8d bf       	out	0x3d, r24	; 61
    252a:	ed b7       	in	r30, 0x3d	; 61
    252c:	fe b7       	in	r31, 0x3e	; 62
    252e:	31 96       	adiw	r30, 0x01	; 1
    2530:	ce 01       	movw	r24, r28
    2532:	8f 96       	adiw	r24, 0x2f	; 47
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
    2538:	8a e0       	ldi	r24, 0x0A	; 10
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	93 83       	std	Z+3, r25	; 0x03
    253e:	82 83       	std	Z+2, r24	; 0x02
    2540:	80 e6       	ldi	r24, 0x60	; 96
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	95 83       	std	Z+5, r25	; 0x05
    2546:	84 83       	std	Z+4, r24	; 0x04
    2548:	8b a5       	ldd	r24, Y+43	; 0x2b
    254a:	9c a5       	ldd	r25, Y+44	; 0x2c
    254c:	ad a5       	ldd	r26, Y+45	; 0x2d
    254e:	be a5       	ldd	r27, Y+46	; 0x2e
    2550:	86 83       	std	Z+6, r24	; 0x06
    2552:	97 83       	std	Z+7, r25	; 0x07
    2554:	a0 87       	std	Z+8, r26	; 0x08
    2556:	b1 87       	std	Z+9, r27	; 0x09
    2558:	0e 94 56 14 	call	0x28ac	; 0x28ac <snprintf>
    255c:	8d b7       	in	r24, 0x3d	; 61
    255e:	9e b7       	in	r25, 0x3e	; 62
    2560:	0a 96       	adiw	r24, 0x0a	; 10
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	9e bf       	out	0x3e, r25	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	8d bf       	out	0x3d, r24	; 61

        // Display temperature on LCD
        HLCD_voidClearScreen();
    256c:	0e 94 60 11 	call	0x22c0	; 0x22c0 <HLCD_voidClearScreen>
        HLCD_voidGoTo(0, 0);
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	60 e0       	ldi	r22, 0x00	; 0
    2574:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <HLCD_voidGoTo>
        HLCD_voidSendString("Temperature:");
    2578:	87 e6       	ldi	r24, 0x67	; 103
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	0e 94 a5 0c 	call	0x194a	; 0x194a <HLCD_voidSendString>
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	aa e7       	ldi	r26, 0x7A	; 122
    2586:	b4 e4       	ldi	r27, 0x44	; 68
    2588:	8f a3       	std	Y+39, r24	; 0x27
    258a:	98 a7       	std	Y+40, r25	; 0x28
    258c:	a9 a7       	std	Y+41, r26	; 0x29
    258e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2590:	6f a1       	ldd	r22, Y+39	; 0x27
    2592:	78 a5       	ldd	r23, Y+40	; 0x28
    2594:	89 a5       	ldd	r24, Y+41	; 0x29
    2596:	9a a5       	ldd	r25, Y+42	; 0x2a
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a ef       	ldi	r20, 0xFA	; 250
    259e:	54 e4       	ldi	r21, 0x44	; 68
    25a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	8b a3       	std	Y+35, r24	; 0x23
    25aa:	9c a3       	std	Y+36, r25	; 0x24
    25ac:	ad a3       	std	Y+37, r26	; 0x25
    25ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25b0:	6b a1       	ldd	r22, Y+35	; 0x23
    25b2:	7c a1       	ldd	r23, Y+36	; 0x24
    25b4:	8d a1       	ldd	r24, Y+37	; 0x25
    25b6:	9e a1       	ldd	r25, Y+38	; 0x26
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e8       	ldi	r20, 0x80	; 128
    25be:	5f e3       	ldi	r21, 0x3F	; 63
    25c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25c4:	88 23       	and	r24, r24
    25c6:	2c f4       	brge	.+10     	; 0x25d2 <main+0xf4>
		__ticks = 1;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9a a3       	std	Y+34, r25	; 0x22
    25ce:	89 a3       	std	Y+33, r24	; 0x21
    25d0:	3f c0       	rjmp	.+126    	; 0x2650 <main+0x172>
	else if (__tmp > 65535)
    25d2:	6b a1       	ldd	r22, Y+35	; 0x23
    25d4:	7c a1       	ldd	r23, Y+36	; 0x24
    25d6:	8d a1       	ldd	r24, Y+37	; 0x25
    25d8:	9e a1       	ldd	r25, Y+38	; 0x26
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	3f ef       	ldi	r19, 0xFF	; 255
    25de:	4f e7       	ldi	r20, 0x7F	; 127
    25e0:	57 e4       	ldi	r21, 0x47	; 71
    25e2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25e6:	18 16       	cp	r1, r24
    25e8:	4c f5       	brge	.+82     	; 0x263c <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ea:	6f a1       	ldd	r22, Y+39	; 0x27
    25ec:	78 a5       	ldd	r23, Y+40	; 0x28
    25ee:	89 a5       	ldd	r24, Y+41	; 0x29
    25f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e2       	ldi	r20, 0x20	; 32
    25f8:	51 e4       	ldi	r21, 0x41	; 65
    25fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	bc 01       	movw	r22, r24
    2604:	cd 01       	movw	r24, r26
    2606:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	9a a3       	std	Y+34, r25	; 0x22
    2610:	89 a3       	std	Y+33, r24	; 0x21
    2612:	0f c0       	rjmp	.+30     	; 0x2632 <main+0x154>
    2614:	88 ec       	ldi	r24, 0xC8	; 200
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	98 a3       	std	Y+32, r25	; 0x20
    261a:	8f 8f       	std	Y+31, r24	; 0x1f
    261c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    261e:	98 a1       	ldd	r25, Y+32	; 0x20
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <main+0x142>
    2624:	98 a3       	std	Y+32, r25	; 0x20
    2626:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2628:	89 a1       	ldd	r24, Y+33	; 0x21
    262a:	9a a1       	ldd	r25, Y+34	; 0x22
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	9a a3       	std	Y+34, r25	; 0x22
    2630:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2632:	89 a1       	ldd	r24, Y+33	; 0x21
    2634:	9a a1       	ldd	r25, Y+34	; 0x22
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	69 f7       	brne	.-38     	; 0x2614 <main+0x136>
    263a:	14 c0       	rjmp	.+40     	; 0x2664 <main+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263c:	6b a1       	ldd	r22, Y+35	; 0x23
    263e:	7c a1       	ldd	r23, Y+36	; 0x24
    2640:	8d a1       	ldd	r24, Y+37	; 0x25
    2642:	9e a1       	ldd	r25, Y+38	; 0x26
    2644:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	9a a3       	std	Y+34, r25	; 0x22
    264e:	89 a3       	std	Y+33, r24	; 0x21
    2650:	89 a1       	ldd	r24, Y+33	; 0x21
    2652:	9a a1       	ldd	r25, Y+34	; 0x22
    2654:	9e 8f       	std	Y+30, r25	; 0x1e
    2656:	8d 8f       	std	Y+29, r24	; 0x1d
    2658:	8d 8d       	ldd	r24, Y+29	; 0x1d
    265a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <main+0x17e>
    2660:	9e 8f       	std	Y+30, r25	; 0x1e
    2662:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1000);
        HLCD_voidGoTo(1, 0);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <HLCD_voidGoTo>
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	aa e7       	ldi	r26, 0x7A	; 122
    2672:	b4 e4       	ldi	r27, 0x44	; 68
    2674:	89 8f       	std	Y+25, r24	; 0x19
    2676:	9a 8f       	std	Y+26, r25	; 0x1a
    2678:	ab 8f       	std	Y+27, r26	; 0x1b
    267a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267c:	69 8d       	ldd	r22, Y+25	; 0x19
    267e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2682:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	4a ef       	ldi	r20, 0xFA	; 250
    268a:	54 e4       	ldi	r21, 0x44	; 68
    268c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8d 8b       	std	Y+21, r24	; 0x15
    2696:	9e 8b       	std	Y+22, r25	; 0x16
    2698:	af 8b       	std	Y+23, r26	; 0x17
    269a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    269c:	6d 89       	ldd	r22, Y+21	; 0x15
    269e:	7e 89       	ldd	r23, Y+22	; 0x16
    26a0:	8f 89       	ldd	r24, Y+23	; 0x17
    26a2:	98 8d       	ldd	r25, Y+24	; 0x18
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e8       	ldi	r20, 0x80	; 128
    26aa:	5f e3       	ldi	r21, 0x3F	; 63
    26ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26b0:	88 23       	and	r24, r24
    26b2:	2c f4       	brge	.+10     	; 0x26be <main+0x1e0>
		__ticks = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9c 8b       	std	Y+20, r25	; 0x14
    26ba:	8b 8b       	std	Y+19, r24	; 0x13
    26bc:	3f c0       	rjmp	.+126    	; 0x273c <main+0x25e>
	else if (__tmp > 65535)
    26be:	6d 89       	ldd	r22, Y+21	; 0x15
    26c0:	7e 89       	ldd	r23, Y+22	; 0x16
    26c2:	8f 89       	ldd	r24, Y+23	; 0x17
    26c4:	98 8d       	ldd	r25, Y+24	; 0x18
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	3f ef       	ldi	r19, 0xFF	; 255
    26ca:	4f e7       	ldi	r20, 0x7F	; 127
    26cc:	57 e4       	ldi	r21, 0x47	; 71
    26ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26d2:	18 16       	cp	r1, r24
    26d4:	4c f5       	brge	.+82     	; 0x2728 <main+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d6:	69 8d       	ldd	r22, Y+25	; 0x19
    26d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e2       	ldi	r20, 0x20	; 32
    26e4:	51 e4       	ldi	r21, 0x41	; 65
    26e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9c 8b       	std	Y+20, r25	; 0x14
    26fc:	8b 8b       	std	Y+19, r24	; 0x13
    26fe:	0f c0       	rjmp	.+30     	; 0x271e <main+0x240>
    2700:	88 ec       	ldi	r24, 0xC8	; 200
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9a 8b       	std	Y+18, r25	; 0x12
    2706:	89 8b       	std	Y+17, r24	; 0x11
    2708:	89 89       	ldd	r24, Y+17	; 0x11
    270a:	9a 89       	ldd	r25, Y+18	; 0x12
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <main+0x22e>
    2710:	9a 8b       	std	Y+18, r25	; 0x12
    2712:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2714:	8b 89       	ldd	r24, Y+19	; 0x13
    2716:	9c 89       	ldd	r25, Y+20	; 0x14
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	9c 8b       	std	Y+20, r25	; 0x14
    271c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271e:	8b 89       	ldd	r24, Y+19	; 0x13
    2720:	9c 89       	ldd	r25, Y+20	; 0x14
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	69 f7       	brne	.-38     	; 0x2700 <main+0x222>
    2726:	14 c0       	rjmp	.+40     	; 0x2750 <main+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2728:	6d 89       	ldd	r22, Y+21	; 0x15
    272a:	7e 89       	ldd	r23, Y+22	; 0x16
    272c:	8f 89       	ldd	r24, Y+23	; 0x17
    272e:	98 8d       	ldd	r25, Y+24	; 0x18
    2730:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	9c 8b       	std	Y+20, r25	; 0x14
    273a:	8b 8b       	std	Y+19, r24	; 0x13
    273c:	8b 89       	ldd	r24, Y+19	; 0x13
    273e:	9c 89       	ldd	r25, Y+20	; 0x14
    2740:	98 8b       	std	Y+16, r25	; 0x10
    2742:	8f 87       	std	Y+15, r24	; 0x0f
    2744:	8f 85       	ldd	r24, Y+15	; 0x0f
    2746:	98 89       	ldd	r25, Y+16	; 0x10
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <main+0x26a>
    274c:	98 8b       	std	Y+16, r25	; 0x10
    274e:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1000);
        HLCD_voidSendString(tempStr);
    2750:	ce 01       	movw	r24, r28
    2752:	8f 96       	adiw	r24, 0x2f	; 47
    2754:	0e 94 a5 0c 	call	0x194a	; 0x194a <HLCD_voidSendString>
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	aa e7       	ldi	r26, 0x7A	; 122
    275e:	b4 e4       	ldi	r27, 0x44	; 68
    2760:	8b 87       	std	Y+11, r24	; 0x0b
    2762:	9c 87       	std	Y+12, r25	; 0x0c
    2764:	ad 87       	std	Y+13, r26	; 0x0d
    2766:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2768:	6b 85       	ldd	r22, Y+11	; 0x0b
    276a:	7c 85       	ldd	r23, Y+12	; 0x0c
    276c:	8d 85       	ldd	r24, Y+13	; 0x0d
    276e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	4a ef       	ldi	r20, 0xFA	; 250
    2776:	54 e4       	ldi	r21, 0x44	; 68
    2778:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	8f 83       	std	Y+7, r24	; 0x07
    2782:	98 87       	std	Y+8, r25	; 0x08
    2784:	a9 87       	std	Y+9, r26	; 0x09
    2786:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2788:	6f 81       	ldd	r22, Y+7	; 0x07
    278a:	78 85       	ldd	r23, Y+8	; 0x08
    278c:	89 85       	ldd	r24, Y+9	; 0x09
    278e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e8       	ldi	r20, 0x80	; 128
    2796:	5f e3       	ldi	r21, 0x3F	; 63
    2798:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    279c:	88 23       	and	r24, r24
    279e:	2c f4       	brge	.+10     	; 0x27aa <main+0x2cc>
		__ticks = 1;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
    27a8:	3f c0       	rjmp	.+126    	; 0x2828 <main+0x34a>
	else if (__tmp > 65535)
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	3f ef       	ldi	r19, 0xFF	; 255
    27b6:	4f e7       	ldi	r20, 0x7F	; 127
    27b8:	57 e4       	ldi	r21, 0x47	; 71
    27ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27be:	18 16       	cp	r1, r24
    27c0:	4c f5       	brge	.+82     	; 0x2814 <main+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e2       	ldi	r20, 0x20	; 32
    27d0:	51 e4       	ldi	r21, 0x41	; 65
    27d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9e 83       	std	Y+6, r25	; 0x06
    27e8:	8d 83       	std	Y+5, r24	; 0x05
    27ea:	0f c0       	rjmp	.+30     	; 0x280a <main+0x32c>
    27ec:	88 ec       	ldi	r24, 0xC8	; 200
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9c 83       	std	Y+4, r25	; 0x04
    27f2:	8b 83       	std	Y+3, r24	; 0x03
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <main+0x31a>
    27fc:	9c 83       	std	Y+4, r25	; 0x04
    27fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2800:	8d 81       	ldd	r24, Y+5	; 0x05
    2802:	9e 81       	ldd	r25, Y+6	; 0x06
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	9e 83       	std	Y+6, r25	; 0x06
    2808:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	69 f7       	brne	.-38     	; 0x27ec <main+0x30e>
    2812:	7b ce       	rjmp	.-778    	; 0x250a <main+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2814:	6f 81       	ldd	r22, Y+7	; 0x07
    2816:	78 85       	ldd	r23, Y+8	; 0x08
    2818:	89 85       	ldd	r24, Y+9	; 0x09
    281a:	9a 85       	ldd	r25, Y+10	; 0x0a
    281c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	9a 83       	std	Y+2, r25	; 0x02
    282e:	89 83       	std	Y+1, r24	; 0x01
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	9a 81       	ldd	r25, Y+2	; 0x02
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <main+0x356>
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	66 ce       	rjmp	.-820    	; 0x250a <main+0x2c>

0000283e <__prologue_saves__>:
    283e:	2f 92       	push	r2
    2840:	3f 92       	push	r3
    2842:	4f 92       	push	r4
    2844:	5f 92       	push	r5
    2846:	6f 92       	push	r6
    2848:	7f 92       	push	r7
    284a:	8f 92       	push	r8
    284c:	9f 92       	push	r9
    284e:	af 92       	push	r10
    2850:	bf 92       	push	r11
    2852:	cf 92       	push	r12
    2854:	df 92       	push	r13
    2856:	ef 92       	push	r14
    2858:	ff 92       	push	r15
    285a:	0f 93       	push	r16
    285c:	1f 93       	push	r17
    285e:	cf 93       	push	r28
    2860:	df 93       	push	r29
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	ca 1b       	sub	r28, r26
    2868:	db 0b       	sbc	r29, r27
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	09 94       	ijmp

00002876 <__epilogue_restores__>:
    2876:	2a 88       	ldd	r2, Y+18	; 0x12
    2878:	39 88       	ldd	r3, Y+17	; 0x11
    287a:	48 88       	ldd	r4, Y+16	; 0x10
    287c:	5f 84       	ldd	r5, Y+15	; 0x0f
    287e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2880:	7d 84       	ldd	r7, Y+13	; 0x0d
    2882:	8c 84       	ldd	r8, Y+12	; 0x0c
    2884:	9b 84       	ldd	r9, Y+11	; 0x0b
    2886:	aa 84       	ldd	r10, Y+10	; 0x0a
    2888:	b9 84       	ldd	r11, Y+9	; 0x09
    288a:	c8 84       	ldd	r12, Y+8	; 0x08
    288c:	df 80       	ldd	r13, Y+7	; 0x07
    288e:	ee 80       	ldd	r14, Y+6	; 0x06
    2890:	fd 80       	ldd	r15, Y+5	; 0x05
    2892:	0c 81       	ldd	r16, Y+4	; 0x04
    2894:	1b 81       	ldd	r17, Y+3	; 0x03
    2896:	aa 81       	ldd	r26, Y+2	; 0x02
    2898:	b9 81       	ldd	r27, Y+1	; 0x01
    289a:	ce 0f       	add	r28, r30
    289c:	d1 1d       	adc	r29, r1
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	ed 01       	movw	r28, r26
    28aa:	08 95       	ret

000028ac <snprintf>:
    28ac:	ae e0       	ldi	r26, 0x0E	; 14
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	ec e5       	ldi	r30, 0x5C	; 92
    28b2:	f4 e1       	ldi	r31, 0x14	; 20
    28b4:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__prologue_saves__+0x1c>
    28b8:	0d 89       	ldd	r16, Y+21	; 0x15
    28ba:	1e 89       	ldd	r17, Y+22	; 0x16
    28bc:	8f 89       	ldd	r24, Y+23	; 0x17
    28be:	98 8d       	ldd	r25, Y+24	; 0x18
    28c0:	97 ff       	sbrs	r25, 7
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <snprintf+0x1c>
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	90 e8       	ldi	r25, 0x80	; 128
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	8d 83       	std	Y+5, r24	; 0x05
    28ce:	1a 83       	std	Y+2, r17	; 0x02
    28d0:	09 83       	std	Y+1, r16	; 0x01
    28d2:	86 e0       	ldi	r24, 0x06	; 6
    28d4:	8c 83       	std	Y+4, r24	; 0x04
    28d6:	9e 01       	movw	r18, r28
    28d8:	25 5e       	subi	r18, 0xE5	; 229
    28da:	3f 4f       	sbci	r19, 0xFF	; 255
    28dc:	ce 01       	movw	r24, r28
    28de:	01 96       	adiw	r24, 0x01	; 1
    28e0:	69 8d       	ldd	r22, Y+25	; 0x19
    28e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28e4:	a9 01       	movw	r20, r18
    28e6:	0e 94 87 14 	call	0x290e	; 0x290e <vfprintf>
    28ea:	4d 81       	ldd	r20, Y+5	; 0x05
    28ec:	5e 81       	ldd	r21, Y+6	; 0x06
    28ee:	57 fd       	sbrc	r21, 7
    28f0:	0a c0       	rjmp	.+20     	; 0x2906 <snprintf+0x5a>
    28f2:	2f 81       	ldd	r18, Y+7	; 0x07
    28f4:	38 85       	ldd	r19, Y+8	; 0x08
    28f6:	42 17       	cp	r20, r18
    28f8:	53 07       	cpc	r21, r19
    28fa:	0c f4       	brge	.+2      	; 0x28fe <snprintf+0x52>
    28fc:	9a 01       	movw	r18, r20
    28fe:	02 0f       	add	r16, r18
    2900:	13 1f       	adc	r17, r19
    2902:	f8 01       	movw	r30, r16
    2904:	10 82       	st	Z, r1
    2906:	2e 96       	adiw	r28, 0x0e	; 14
    2908:	e4 e0       	ldi	r30, 0x04	; 4
    290a:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__epilogue_restores__+0x1c>

0000290e <vfprintf>:
    290e:	ab e0       	ldi	r26, 0x0B	; 11
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	ed e8       	ldi	r30, 0x8D	; 141
    2914:	f4 e1       	ldi	r31, 0x14	; 20
    2916:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__prologue_saves__>
    291a:	3c 01       	movw	r6, r24
    291c:	2b 01       	movw	r4, r22
    291e:	5a 01       	movw	r10, r20
    2920:	fc 01       	movw	r30, r24
    2922:	17 82       	std	Z+7, r1	; 0x07
    2924:	16 82       	std	Z+6, r1	; 0x06
    2926:	83 81       	ldd	r24, Z+3	; 0x03
    2928:	81 fd       	sbrc	r24, 1
    292a:	03 c0       	rjmp	.+6      	; 0x2932 <vfprintf+0x24>
    292c:	6f ef       	ldi	r22, 0xFF	; 255
    292e:	7f ef       	ldi	r23, 0xFF	; 255
    2930:	c6 c1       	rjmp	.+908    	; 0x2cbe <vfprintf+0x3b0>
    2932:	9a e0       	ldi	r25, 0x0A	; 10
    2934:	89 2e       	mov	r8, r25
    2936:	1e 01       	movw	r2, r28
    2938:	08 94       	sec
    293a:	21 1c       	adc	r2, r1
    293c:	31 1c       	adc	r3, r1
    293e:	f3 01       	movw	r30, r6
    2940:	23 81       	ldd	r18, Z+3	; 0x03
    2942:	f2 01       	movw	r30, r4
    2944:	23 fd       	sbrc	r18, 3
    2946:	85 91       	lpm	r24, Z+
    2948:	23 ff       	sbrs	r18, 3
    294a:	81 91       	ld	r24, Z+
    294c:	2f 01       	movw	r4, r30
    294e:	88 23       	and	r24, r24
    2950:	09 f4       	brne	.+2      	; 0x2954 <vfprintf+0x46>
    2952:	b2 c1       	rjmp	.+868    	; 0x2cb8 <vfprintf+0x3aa>
    2954:	85 32       	cpi	r24, 0x25	; 37
    2956:	39 f4       	brne	.+14     	; 0x2966 <vfprintf+0x58>
    2958:	23 fd       	sbrc	r18, 3
    295a:	85 91       	lpm	r24, Z+
    295c:	23 ff       	sbrs	r18, 3
    295e:	81 91       	ld	r24, Z+
    2960:	2f 01       	movw	r4, r30
    2962:	85 32       	cpi	r24, 0x25	; 37
    2964:	29 f4       	brne	.+10     	; 0x2970 <vfprintf+0x62>
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	b3 01       	movw	r22, r6
    296a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <fputc>
    296e:	e7 cf       	rjmp	.-50     	; 0x293e <vfprintf+0x30>
    2970:	98 2f       	mov	r25, r24
    2972:	ff 24       	eor	r15, r15
    2974:	ee 24       	eor	r14, r14
    2976:	99 24       	eor	r9, r9
    2978:	ff e1       	ldi	r31, 0x1F	; 31
    297a:	ff 15       	cp	r31, r15
    297c:	d0 f0       	brcs	.+52     	; 0x29b2 <vfprintf+0xa4>
    297e:	9b 32       	cpi	r25, 0x2B	; 43
    2980:	69 f0       	breq	.+26     	; 0x299c <vfprintf+0x8e>
    2982:	9c 32       	cpi	r25, 0x2C	; 44
    2984:	28 f4       	brcc	.+10     	; 0x2990 <vfprintf+0x82>
    2986:	90 32       	cpi	r25, 0x20	; 32
    2988:	59 f0       	breq	.+22     	; 0x29a0 <vfprintf+0x92>
    298a:	93 32       	cpi	r25, 0x23	; 35
    298c:	91 f4       	brne	.+36     	; 0x29b2 <vfprintf+0xa4>
    298e:	0e c0       	rjmp	.+28     	; 0x29ac <vfprintf+0x9e>
    2990:	9d 32       	cpi	r25, 0x2D	; 45
    2992:	49 f0       	breq	.+18     	; 0x29a6 <vfprintf+0x98>
    2994:	90 33       	cpi	r25, 0x30	; 48
    2996:	69 f4       	brne	.+26     	; 0x29b2 <vfprintf+0xa4>
    2998:	41 e0       	ldi	r20, 0x01	; 1
    299a:	24 c0       	rjmp	.+72     	; 0x29e4 <vfprintf+0xd6>
    299c:	52 e0       	ldi	r21, 0x02	; 2
    299e:	f5 2a       	or	r15, r21
    29a0:	84 e0       	ldi	r24, 0x04	; 4
    29a2:	f8 2a       	or	r15, r24
    29a4:	28 c0       	rjmp	.+80     	; 0x29f6 <vfprintf+0xe8>
    29a6:	98 e0       	ldi	r25, 0x08	; 8
    29a8:	f9 2a       	or	r15, r25
    29aa:	25 c0       	rjmp	.+74     	; 0x29f6 <vfprintf+0xe8>
    29ac:	e0 e1       	ldi	r30, 0x10	; 16
    29ae:	fe 2a       	or	r15, r30
    29b0:	22 c0       	rjmp	.+68     	; 0x29f6 <vfprintf+0xe8>
    29b2:	f7 fc       	sbrc	r15, 7
    29b4:	29 c0       	rjmp	.+82     	; 0x2a08 <vfprintf+0xfa>
    29b6:	89 2f       	mov	r24, r25
    29b8:	80 53       	subi	r24, 0x30	; 48
    29ba:	8a 30       	cpi	r24, 0x0A	; 10
    29bc:	70 f4       	brcc	.+28     	; 0x29da <vfprintf+0xcc>
    29be:	f6 fe       	sbrs	r15, 6
    29c0:	05 c0       	rjmp	.+10     	; 0x29cc <vfprintf+0xbe>
    29c2:	98 9c       	mul	r9, r8
    29c4:	90 2c       	mov	r9, r0
    29c6:	11 24       	eor	r1, r1
    29c8:	98 0e       	add	r9, r24
    29ca:	15 c0       	rjmp	.+42     	; 0x29f6 <vfprintf+0xe8>
    29cc:	e8 9c       	mul	r14, r8
    29ce:	e0 2c       	mov	r14, r0
    29d0:	11 24       	eor	r1, r1
    29d2:	e8 0e       	add	r14, r24
    29d4:	f0 e2       	ldi	r31, 0x20	; 32
    29d6:	ff 2a       	or	r15, r31
    29d8:	0e c0       	rjmp	.+28     	; 0x29f6 <vfprintf+0xe8>
    29da:	9e 32       	cpi	r25, 0x2E	; 46
    29dc:	29 f4       	brne	.+10     	; 0x29e8 <vfprintf+0xda>
    29de:	f6 fc       	sbrc	r15, 6
    29e0:	6b c1       	rjmp	.+726    	; 0x2cb8 <vfprintf+0x3aa>
    29e2:	40 e4       	ldi	r20, 0x40	; 64
    29e4:	f4 2a       	or	r15, r20
    29e6:	07 c0       	rjmp	.+14     	; 0x29f6 <vfprintf+0xe8>
    29e8:	9c 36       	cpi	r25, 0x6C	; 108
    29ea:	19 f4       	brne	.+6      	; 0x29f2 <vfprintf+0xe4>
    29ec:	50 e8       	ldi	r21, 0x80	; 128
    29ee:	f5 2a       	or	r15, r21
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <vfprintf+0xe8>
    29f2:	98 36       	cpi	r25, 0x68	; 104
    29f4:	49 f4       	brne	.+18     	; 0x2a08 <vfprintf+0xfa>
    29f6:	f2 01       	movw	r30, r4
    29f8:	23 fd       	sbrc	r18, 3
    29fa:	95 91       	lpm	r25, Z+
    29fc:	23 ff       	sbrs	r18, 3
    29fe:	91 91       	ld	r25, Z+
    2a00:	2f 01       	movw	r4, r30
    2a02:	99 23       	and	r25, r25
    2a04:	09 f0       	breq	.+2      	; 0x2a08 <vfprintf+0xfa>
    2a06:	b8 cf       	rjmp	.-144    	; 0x2978 <vfprintf+0x6a>
    2a08:	89 2f       	mov	r24, r25
    2a0a:	85 54       	subi	r24, 0x45	; 69
    2a0c:	83 30       	cpi	r24, 0x03	; 3
    2a0e:	18 f0       	brcs	.+6      	; 0x2a16 <vfprintf+0x108>
    2a10:	80 52       	subi	r24, 0x20	; 32
    2a12:	83 30       	cpi	r24, 0x03	; 3
    2a14:	38 f4       	brcc	.+14     	; 0x2a24 <vfprintf+0x116>
    2a16:	44 e0       	ldi	r20, 0x04	; 4
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	a4 0e       	add	r10, r20
    2a1c:	b5 1e       	adc	r11, r21
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	59 83       	std	Y+1, r21	; 0x01
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <vfprintf+0x134>
    2a24:	93 36       	cpi	r25, 0x63	; 99
    2a26:	31 f0       	breq	.+12     	; 0x2a34 <vfprintf+0x126>
    2a28:	93 37       	cpi	r25, 0x73	; 115
    2a2a:	79 f0       	breq	.+30     	; 0x2a4a <vfprintf+0x13c>
    2a2c:	93 35       	cpi	r25, 0x53	; 83
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <vfprintf+0x124>
    2a30:	56 c0       	rjmp	.+172    	; 0x2ade <vfprintf+0x1d0>
    2a32:	20 c0       	rjmp	.+64     	; 0x2a74 <vfprintf+0x166>
    2a34:	f5 01       	movw	r30, r10
    2a36:	80 81       	ld	r24, Z
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	42 e0       	ldi	r20, 0x02	; 2
    2a3c:	50 e0       	ldi	r21, 0x00	; 0
    2a3e:	a4 0e       	add	r10, r20
    2a40:	b5 1e       	adc	r11, r21
    2a42:	61 01       	movw	r12, r2
    2a44:	01 e0       	ldi	r16, 0x01	; 1
    2a46:	10 e0       	ldi	r17, 0x00	; 0
    2a48:	12 c0       	rjmp	.+36     	; 0x2a6e <vfprintf+0x160>
    2a4a:	f5 01       	movw	r30, r10
    2a4c:	c0 80       	ld	r12, Z
    2a4e:	d1 80       	ldd	r13, Z+1	; 0x01
    2a50:	f6 fc       	sbrc	r15, 6
    2a52:	03 c0       	rjmp	.+6      	; 0x2a5a <vfprintf+0x14c>
    2a54:	6f ef       	ldi	r22, 0xFF	; 255
    2a56:	7f ef       	ldi	r23, 0xFF	; 255
    2a58:	02 c0       	rjmp	.+4      	; 0x2a5e <vfprintf+0x150>
    2a5a:	69 2d       	mov	r22, r9
    2a5c:	70 e0       	ldi	r23, 0x00	; 0
    2a5e:	42 e0       	ldi	r20, 0x02	; 2
    2a60:	50 e0       	ldi	r21, 0x00	; 0
    2a62:	a4 0e       	add	r10, r20
    2a64:	b5 1e       	adc	r11, r21
    2a66:	c6 01       	movw	r24, r12
    2a68:	0e 94 6f 16 	call	0x2cde	; 0x2cde <strnlen>
    2a6c:	8c 01       	movw	r16, r24
    2a6e:	5f e7       	ldi	r21, 0x7F	; 127
    2a70:	f5 22       	and	r15, r21
    2a72:	14 c0       	rjmp	.+40     	; 0x2a9c <vfprintf+0x18e>
    2a74:	f5 01       	movw	r30, r10
    2a76:	c0 80       	ld	r12, Z
    2a78:	d1 80       	ldd	r13, Z+1	; 0x01
    2a7a:	f6 fc       	sbrc	r15, 6
    2a7c:	03 c0       	rjmp	.+6      	; 0x2a84 <vfprintf+0x176>
    2a7e:	6f ef       	ldi	r22, 0xFF	; 255
    2a80:	7f ef       	ldi	r23, 0xFF	; 255
    2a82:	02 c0       	rjmp	.+4      	; 0x2a88 <vfprintf+0x17a>
    2a84:	69 2d       	mov	r22, r9
    2a86:	70 e0       	ldi	r23, 0x00	; 0
    2a88:	42 e0       	ldi	r20, 0x02	; 2
    2a8a:	50 e0       	ldi	r21, 0x00	; 0
    2a8c:	a4 0e       	add	r10, r20
    2a8e:	b5 1e       	adc	r11, r21
    2a90:	c6 01       	movw	r24, r12
    2a92:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <strnlen_P>
    2a96:	8c 01       	movw	r16, r24
    2a98:	50 e8       	ldi	r21, 0x80	; 128
    2a9a:	f5 2a       	or	r15, r21
    2a9c:	f3 fe       	sbrs	r15, 3
    2a9e:	07 c0       	rjmp	.+14     	; 0x2aae <vfprintf+0x1a0>
    2aa0:	1a c0       	rjmp	.+52     	; 0x2ad6 <vfprintf+0x1c8>
    2aa2:	80 e2       	ldi	r24, 0x20	; 32
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	b3 01       	movw	r22, r6
    2aa8:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <fputc>
    2aac:	ea 94       	dec	r14
    2aae:	8e 2d       	mov	r24, r14
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	08 17       	cp	r16, r24
    2ab4:	19 07       	cpc	r17, r25
    2ab6:	a8 f3       	brcs	.-22     	; 0x2aa2 <vfprintf+0x194>
    2ab8:	0e c0       	rjmp	.+28     	; 0x2ad6 <vfprintf+0x1c8>
    2aba:	f6 01       	movw	r30, r12
    2abc:	f7 fc       	sbrc	r15, 7
    2abe:	85 91       	lpm	r24, Z+
    2ac0:	f7 fe       	sbrs	r15, 7
    2ac2:	81 91       	ld	r24, Z+
    2ac4:	6f 01       	movw	r12, r30
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	b3 01       	movw	r22, r6
    2aca:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <fputc>
    2ace:	e1 10       	cpse	r14, r1
    2ad0:	ea 94       	dec	r14
    2ad2:	01 50       	subi	r16, 0x01	; 1
    2ad4:	10 40       	sbci	r17, 0x00	; 0
    2ad6:	01 15       	cp	r16, r1
    2ad8:	11 05       	cpc	r17, r1
    2ada:	79 f7       	brne	.-34     	; 0x2aba <vfprintf+0x1ac>
    2adc:	ea c0       	rjmp	.+468    	; 0x2cb2 <vfprintf+0x3a4>
    2ade:	94 36       	cpi	r25, 0x64	; 100
    2ae0:	11 f0       	breq	.+4      	; 0x2ae6 <vfprintf+0x1d8>
    2ae2:	99 36       	cpi	r25, 0x69	; 105
    2ae4:	69 f5       	brne	.+90     	; 0x2b40 <vfprintf+0x232>
    2ae6:	f7 fe       	sbrs	r15, 7
    2ae8:	08 c0       	rjmp	.+16     	; 0x2afa <vfprintf+0x1ec>
    2aea:	f5 01       	movw	r30, r10
    2aec:	20 81       	ld	r18, Z
    2aee:	31 81       	ldd	r19, Z+1	; 0x01
    2af0:	42 81       	ldd	r20, Z+2	; 0x02
    2af2:	53 81       	ldd	r21, Z+3	; 0x03
    2af4:	84 e0       	ldi	r24, 0x04	; 4
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0a c0       	rjmp	.+20     	; 0x2b0e <vfprintf+0x200>
    2afa:	f5 01       	movw	r30, r10
    2afc:	80 81       	ld	r24, Z
    2afe:	91 81       	ldd	r25, Z+1	; 0x01
    2b00:	9c 01       	movw	r18, r24
    2b02:	44 27       	eor	r20, r20
    2b04:	37 fd       	sbrc	r19, 7
    2b06:	40 95       	com	r20
    2b08:	54 2f       	mov	r21, r20
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	a8 0e       	add	r10, r24
    2b10:	b9 1e       	adc	r11, r25
    2b12:	9f e6       	ldi	r25, 0x6F	; 111
    2b14:	f9 22       	and	r15, r25
    2b16:	57 ff       	sbrs	r21, 7
    2b18:	09 c0       	rjmp	.+18     	; 0x2b2c <vfprintf+0x21e>
    2b1a:	50 95       	com	r21
    2b1c:	40 95       	com	r20
    2b1e:	30 95       	com	r19
    2b20:	21 95       	neg	r18
    2b22:	3f 4f       	sbci	r19, 0xFF	; 255
    2b24:	4f 4f       	sbci	r20, 0xFF	; 255
    2b26:	5f 4f       	sbci	r21, 0xFF	; 255
    2b28:	e0 e8       	ldi	r30, 0x80	; 128
    2b2a:	fe 2a       	or	r15, r30
    2b2c:	ca 01       	movw	r24, r20
    2b2e:	b9 01       	movw	r22, r18
    2b30:	a1 01       	movw	r20, r2
    2b32:	2a e0       	ldi	r18, 0x0A	; 10
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__ultoa_invert>
    2b3a:	d8 2e       	mov	r13, r24
    2b3c:	d2 18       	sub	r13, r2
    2b3e:	40 c0       	rjmp	.+128    	; 0x2bc0 <vfprintf+0x2b2>
    2b40:	95 37       	cpi	r25, 0x75	; 117
    2b42:	29 f4       	brne	.+10     	; 0x2b4e <vfprintf+0x240>
    2b44:	1f 2d       	mov	r17, r15
    2b46:	1f 7e       	andi	r17, 0xEF	; 239
    2b48:	2a e0       	ldi	r18, 0x0A	; 10
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	1d c0       	rjmp	.+58     	; 0x2b88 <vfprintf+0x27a>
    2b4e:	1f 2d       	mov	r17, r15
    2b50:	19 7f       	andi	r17, 0xF9	; 249
    2b52:	9f 36       	cpi	r25, 0x6F	; 111
    2b54:	61 f0       	breq	.+24     	; 0x2b6e <vfprintf+0x260>
    2b56:	90 37       	cpi	r25, 0x70	; 112
    2b58:	20 f4       	brcc	.+8      	; 0x2b62 <vfprintf+0x254>
    2b5a:	98 35       	cpi	r25, 0x58	; 88
    2b5c:	09 f0       	breq	.+2      	; 0x2b60 <vfprintf+0x252>
    2b5e:	ac c0       	rjmp	.+344    	; 0x2cb8 <vfprintf+0x3aa>
    2b60:	0f c0       	rjmp	.+30     	; 0x2b80 <vfprintf+0x272>
    2b62:	90 37       	cpi	r25, 0x70	; 112
    2b64:	39 f0       	breq	.+14     	; 0x2b74 <vfprintf+0x266>
    2b66:	98 37       	cpi	r25, 0x78	; 120
    2b68:	09 f0       	breq	.+2      	; 0x2b6c <vfprintf+0x25e>
    2b6a:	a6 c0       	rjmp	.+332    	; 0x2cb8 <vfprintf+0x3aa>
    2b6c:	04 c0       	rjmp	.+8      	; 0x2b76 <vfprintf+0x268>
    2b6e:	28 e0       	ldi	r18, 0x08	; 8
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	0a c0       	rjmp	.+20     	; 0x2b88 <vfprintf+0x27a>
    2b74:	10 61       	ori	r17, 0x10	; 16
    2b76:	14 fd       	sbrc	r17, 4
    2b78:	14 60       	ori	r17, 0x04	; 4
    2b7a:	20 e1       	ldi	r18, 0x10	; 16
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	04 c0       	rjmp	.+8      	; 0x2b88 <vfprintf+0x27a>
    2b80:	14 fd       	sbrc	r17, 4
    2b82:	16 60       	ori	r17, 0x06	; 6
    2b84:	20 e1       	ldi	r18, 0x10	; 16
    2b86:	32 e0       	ldi	r19, 0x02	; 2
    2b88:	17 ff       	sbrs	r17, 7
    2b8a:	08 c0       	rjmp	.+16     	; 0x2b9c <vfprintf+0x28e>
    2b8c:	f5 01       	movw	r30, r10
    2b8e:	60 81       	ld	r22, Z
    2b90:	71 81       	ldd	r23, Z+1	; 0x01
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	93 81       	ldd	r25, Z+3	; 0x03
    2b96:	44 e0       	ldi	r20, 0x04	; 4
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	08 c0       	rjmp	.+16     	; 0x2bac <vfprintf+0x29e>
    2b9c:	f5 01       	movw	r30, r10
    2b9e:	80 81       	ld	r24, Z
    2ba0:	91 81       	ldd	r25, Z+1	; 0x01
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	42 e0       	ldi	r20, 0x02	; 2
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	a4 0e       	add	r10, r20
    2bae:	b5 1e       	adc	r11, r21
    2bb0:	a1 01       	movw	r20, r2
    2bb2:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__ultoa_invert>
    2bb6:	d8 2e       	mov	r13, r24
    2bb8:	d2 18       	sub	r13, r2
    2bba:	8f e7       	ldi	r24, 0x7F	; 127
    2bbc:	f8 2e       	mov	r15, r24
    2bbe:	f1 22       	and	r15, r17
    2bc0:	f6 fe       	sbrs	r15, 6
    2bc2:	0b c0       	rjmp	.+22     	; 0x2bda <vfprintf+0x2cc>
    2bc4:	5e ef       	ldi	r21, 0xFE	; 254
    2bc6:	f5 22       	and	r15, r21
    2bc8:	d9 14       	cp	r13, r9
    2bca:	38 f4       	brcc	.+14     	; 0x2bda <vfprintf+0x2cc>
    2bcc:	f4 fe       	sbrs	r15, 4
    2bce:	07 c0       	rjmp	.+14     	; 0x2bde <vfprintf+0x2d0>
    2bd0:	f2 fc       	sbrc	r15, 2
    2bd2:	05 c0       	rjmp	.+10     	; 0x2bde <vfprintf+0x2d0>
    2bd4:	8f ee       	ldi	r24, 0xEF	; 239
    2bd6:	f8 22       	and	r15, r24
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <vfprintf+0x2d0>
    2bda:	1d 2d       	mov	r17, r13
    2bdc:	01 c0       	rjmp	.+2      	; 0x2be0 <vfprintf+0x2d2>
    2bde:	19 2d       	mov	r17, r9
    2be0:	f4 fe       	sbrs	r15, 4
    2be2:	0d c0       	rjmp	.+26     	; 0x2bfe <vfprintf+0x2f0>
    2be4:	fe 01       	movw	r30, r28
    2be6:	ed 0d       	add	r30, r13
    2be8:	f1 1d       	adc	r31, r1
    2bea:	80 81       	ld	r24, Z
    2bec:	80 33       	cpi	r24, 0x30	; 48
    2bee:	19 f4       	brne	.+6      	; 0x2bf6 <vfprintf+0x2e8>
    2bf0:	99 ee       	ldi	r25, 0xE9	; 233
    2bf2:	f9 22       	and	r15, r25
    2bf4:	08 c0       	rjmp	.+16     	; 0x2c06 <vfprintf+0x2f8>
    2bf6:	1f 5f       	subi	r17, 0xFF	; 255
    2bf8:	f2 fe       	sbrs	r15, 2
    2bfa:	05 c0       	rjmp	.+10     	; 0x2c06 <vfprintf+0x2f8>
    2bfc:	03 c0       	rjmp	.+6      	; 0x2c04 <vfprintf+0x2f6>
    2bfe:	8f 2d       	mov	r24, r15
    2c00:	86 78       	andi	r24, 0x86	; 134
    2c02:	09 f0       	breq	.+2      	; 0x2c06 <vfprintf+0x2f8>
    2c04:	1f 5f       	subi	r17, 0xFF	; 255
    2c06:	0f 2d       	mov	r16, r15
    2c08:	f3 fc       	sbrc	r15, 3
    2c0a:	14 c0       	rjmp	.+40     	; 0x2c34 <vfprintf+0x326>
    2c0c:	f0 fe       	sbrs	r15, 0
    2c0e:	0f c0       	rjmp	.+30     	; 0x2c2e <vfprintf+0x320>
    2c10:	1e 15       	cp	r17, r14
    2c12:	10 f0       	brcs	.+4      	; 0x2c18 <vfprintf+0x30a>
    2c14:	9d 2c       	mov	r9, r13
    2c16:	0b c0       	rjmp	.+22     	; 0x2c2e <vfprintf+0x320>
    2c18:	9d 2c       	mov	r9, r13
    2c1a:	9e 0c       	add	r9, r14
    2c1c:	91 1a       	sub	r9, r17
    2c1e:	1e 2d       	mov	r17, r14
    2c20:	06 c0       	rjmp	.+12     	; 0x2c2e <vfprintf+0x320>
    2c22:	80 e2       	ldi	r24, 0x20	; 32
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	b3 01       	movw	r22, r6
    2c28:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <fputc>
    2c2c:	1f 5f       	subi	r17, 0xFF	; 255
    2c2e:	1e 15       	cp	r17, r14
    2c30:	c0 f3       	brcs	.-16     	; 0x2c22 <vfprintf+0x314>
    2c32:	04 c0       	rjmp	.+8      	; 0x2c3c <vfprintf+0x32e>
    2c34:	1e 15       	cp	r17, r14
    2c36:	10 f4       	brcc	.+4      	; 0x2c3c <vfprintf+0x32e>
    2c38:	e1 1a       	sub	r14, r17
    2c3a:	01 c0       	rjmp	.+2      	; 0x2c3e <vfprintf+0x330>
    2c3c:	ee 24       	eor	r14, r14
    2c3e:	04 ff       	sbrs	r16, 4
    2c40:	0f c0       	rjmp	.+30     	; 0x2c60 <vfprintf+0x352>
    2c42:	80 e3       	ldi	r24, 0x30	; 48
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	b3 01       	movw	r22, r6
    2c48:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <fputc>
    2c4c:	02 ff       	sbrs	r16, 2
    2c4e:	1d c0       	rjmp	.+58     	; 0x2c8a <vfprintf+0x37c>
    2c50:	01 fd       	sbrc	r16, 1
    2c52:	03 c0       	rjmp	.+6      	; 0x2c5a <vfprintf+0x34c>
    2c54:	88 e7       	ldi	r24, 0x78	; 120
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	0e c0       	rjmp	.+28     	; 0x2c76 <vfprintf+0x368>
    2c5a:	88 e5       	ldi	r24, 0x58	; 88
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	0b c0       	rjmp	.+22     	; 0x2c76 <vfprintf+0x368>
    2c60:	80 2f       	mov	r24, r16
    2c62:	86 78       	andi	r24, 0x86	; 134
    2c64:	91 f0       	breq	.+36     	; 0x2c8a <vfprintf+0x37c>
    2c66:	01 ff       	sbrs	r16, 1
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <vfprintf+0x360>
    2c6a:	8b e2       	ldi	r24, 0x2B	; 43
    2c6c:	01 c0       	rjmp	.+2      	; 0x2c70 <vfprintf+0x362>
    2c6e:	80 e2       	ldi	r24, 0x20	; 32
    2c70:	f7 fc       	sbrc	r15, 7
    2c72:	8d e2       	ldi	r24, 0x2D	; 45
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	b3 01       	movw	r22, r6
    2c78:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <fputc>
    2c7c:	06 c0       	rjmp	.+12     	; 0x2c8a <vfprintf+0x37c>
    2c7e:	80 e3       	ldi	r24, 0x30	; 48
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	b3 01       	movw	r22, r6
    2c84:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <fputc>
    2c88:	9a 94       	dec	r9
    2c8a:	d9 14       	cp	r13, r9
    2c8c:	c0 f3       	brcs	.-16     	; 0x2c7e <vfprintf+0x370>
    2c8e:	da 94       	dec	r13
    2c90:	f1 01       	movw	r30, r2
    2c92:	ed 0d       	add	r30, r13
    2c94:	f1 1d       	adc	r31, r1
    2c96:	80 81       	ld	r24, Z
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	b3 01       	movw	r22, r6
    2c9c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <fputc>
    2ca0:	dd 20       	and	r13, r13
    2ca2:	a9 f7       	brne	.-22     	; 0x2c8e <vfprintf+0x380>
    2ca4:	06 c0       	rjmp	.+12     	; 0x2cb2 <vfprintf+0x3a4>
    2ca6:	80 e2       	ldi	r24, 0x20	; 32
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	b3 01       	movw	r22, r6
    2cac:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <fputc>
    2cb0:	ea 94       	dec	r14
    2cb2:	ee 20       	and	r14, r14
    2cb4:	c1 f7       	brne	.-16     	; 0x2ca6 <vfprintf+0x398>
    2cb6:	43 ce       	rjmp	.-890    	; 0x293e <vfprintf+0x30>
    2cb8:	f3 01       	movw	r30, r6
    2cba:	66 81       	ldd	r22, Z+6	; 0x06
    2cbc:	77 81       	ldd	r23, Z+7	; 0x07
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	2b 96       	adiw	r28, 0x0b	; 11
    2cc2:	e2 e1       	ldi	r30, 0x12	; 18
    2cc4:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__epilogue_restores__>

00002cc8 <strnlen_P>:
    2cc8:	fc 01       	movw	r30, r24
    2cca:	05 90       	lpm	r0, Z+
    2ccc:	61 50       	subi	r22, 0x01	; 1
    2cce:	70 40       	sbci	r23, 0x00	; 0
    2cd0:	01 10       	cpse	r0, r1
    2cd2:	d8 f7       	brcc	.-10     	; 0x2cca <strnlen_P+0x2>
    2cd4:	80 95       	com	r24
    2cd6:	90 95       	com	r25
    2cd8:	8e 0f       	add	r24, r30
    2cda:	9f 1f       	adc	r25, r31
    2cdc:	08 95       	ret

00002cde <strnlen>:
    2cde:	fc 01       	movw	r30, r24
    2ce0:	61 50       	subi	r22, 0x01	; 1
    2ce2:	70 40       	sbci	r23, 0x00	; 0
    2ce4:	01 90       	ld	r0, Z+
    2ce6:	01 10       	cpse	r0, r1
    2ce8:	d8 f7       	brcc	.-10     	; 0x2ce0 <strnlen+0x2>
    2cea:	80 95       	com	r24
    2cec:	90 95       	com	r25
    2cee:	8e 0f       	add	r24, r30
    2cf0:	9f 1f       	adc	r25, r31
    2cf2:	08 95       	ret

00002cf4 <fputc>:
    2cf4:	0f 93       	push	r16
    2cf6:	1f 93       	push	r17
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	8c 01       	movw	r16, r24
    2cfe:	eb 01       	movw	r28, r22
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	81 ff       	sbrs	r24, 1
    2d04:	1b c0       	rjmp	.+54     	; 0x2d3c <fputc+0x48>
    2d06:	82 ff       	sbrs	r24, 2
    2d08:	0d c0       	rjmp	.+26     	; 0x2d24 <fputc+0x30>
    2d0a:	2e 81       	ldd	r18, Y+6	; 0x06
    2d0c:	3f 81       	ldd	r19, Y+7	; 0x07
    2d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d10:	9d 81       	ldd	r25, Y+5	; 0x05
    2d12:	28 17       	cp	r18, r24
    2d14:	39 07       	cpc	r19, r25
    2d16:	64 f4       	brge	.+24     	; 0x2d30 <fputc+0x3c>
    2d18:	e8 81       	ld	r30, Y
    2d1a:	f9 81       	ldd	r31, Y+1	; 0x01
    2d1c:	01 93       	st	Z+, r16
    2d1e:	f9 83       	std	Y+1, r31	; 0x01
    2d20:	e8 83       	st	Y, r30
    2d22:	06 c0       	rjmp	.+12     	; 0x2d30 <fputc+0x3c>
    2d24:	e8 85       	ldd	r30, Y+8	; 0x08
    2d26:	f9 85       	ldd	r31, Y+9	; 0x09
    2d28:	80 2f       	mov	r24, r16
    2d2a:	09 95       	icall
    2d2c:	89 2b       	or	r24, r25
    2d2e:	31 f4       	brne	.+12     	; 0x2d3c <fputc+0x48>
    2d30:	8e 81       	ldd	r24, Y+6	; 0x06
    2d32:	9f 81       	ldd	r25, Y+7	; 0x07
    2d34:	01 96       	adiw	r24, 0x01	; 1
    2d36:	9f 83       	std	Y+7, r25	; 0x07
    2d38:	8e 83       	std	Y+6, r24	; 0x06
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <fputc+0x4c>
    2d3c:	0f ef       	ldi	r16, 0xFF	; 255
    2d3e:	1f ef       	ldi	r17, 0xFF	; 255
    2d40:	c8 01       	movw	r24, r16
    2d42:	df 91       	pop	r29
    2d44:	cf 91       	pop	r28
    2d46:	1f 91       	pop	r17
    2d48:	0f 91       	pop	r16
    2d4a:	08 95       	ret

00002d4c <__ultoa_invert>:
    2d4c:	fa 01       	movw	r30, r20
    2d4e:	aa 27       	eor	r26, r26
    2d50:	28 30       	cpi	r18, 0x08	; 8
    2d52:	51 f1       	breq	.+84     	; 0x2da8 <__ultoa_invert+0x5c>
    2d54:	20 31       	cpi	r18, 0x10	; 16
    2d56:	81 f1       	breq	.+96     	; 0x2db8 <__ultoa_invert+0x6c>
    2d58:	e8 94       	clt
    2d5a:	6f 93       	push	r22
    2d5c:	6e 7f       	andi	r22, 0xFE	; 254
    2d5e:	6e 5f       	subi	r22, 0xFE	; 254
    2d60:	7f 4f       	sbci	r23, 0xFF	; 255
    2d62:	8f 4f       	sbci	r24, 0xFF	; 255
    2d64:	9f 4f       	sbci	r25, 0xFF	; 255
    2d66:	af 4f       	sbci	r26, 0xFF	; 255
    2d68:	b1 e0       	ldi	r27, 0x01	; 1
    2d6a:	3e d0       	rcall	.+124    	; 0x2de8 <__ultoa_invert+0x9c>
    2d6c:	b4 e0       	ldi	r27, 0x04	; 4
    2d6e:	3c d0       	rcall	.+120    	; 0x2de8 <__ultoa_invert+0x9c>
    2d70:	67 0f       	add	r22, r23
    2d72:	78 1f       	adc	r23, r24
    2d74:	89 1f       	adc	r24, r25
    2d76:	9a 1f       	adc	r25, r26
    2d78:	a1 1d       	adc	r26, r1
    2d7a:	68 0f       	add	r22, r24
    2d7c:	79 1f       	adc	r23, r25
    2d7e:	8a 1f       	adc	r24, r26
    2d80:	91 1d       	adc	r25, r1
    2d82:	a1 1d       	adc	r26, r1
    2d84:	6a 0f       	add	r22, r26
    2d86:	71 1d       	adc	r23, r1
    2d88:	81 1d       	adc	r24, r1
    2d8a:	91 1d       	adc	r25, r1
    2d8c:	a1 1d       	adc	r26, r1
    2d8e:	20 d0       	rcall	.+64     	; 0x2dd0 <__ultoa_invert+0x84>
    2d90:	09 f4       	brne	.+2      	; 0x2d94 <__ultoa_invert+0x48>
    2d92:	68 94       	set
    2d94:	3f 91       	pop	r19
    2d96:	2a e0       	ldi	r18, 0x0A	; 10
    2d98:	26 9f       	mul	r18, r22
    2d9a:	11 24       	eor	r1, r1
    2d9c:	30 19       	sub	r19, r0
    2d9e:	30 5d       	subi	r19, 0xD0	; 208
    2da0:	31 93       	st	Z+, r19
    2da2:	de f6       	brtc	.-74     	; 0x2d5a <__ultoa_invert+0xe>
    2da4:	cf 01       	movw	r24, r30
    2da6:	08 95       	ret
    2da8:	46 2f       	mov	r20, r22
    2daa:	47 70       	andi	r20, 0x07	; 7
    2dac:	40 5d       	subi	r20, 0xD0	; 208
    2dae:	41 93       	st	Z+, r20
    2db0:	b3 e0       	ldi	r27, 0x03	; 3
    2db2:	0f d0       	rcall	.+30     	; 0x2dd2 <__ultoa_invert+0x86>
    2db4:	c9 f7       	brne	.-14     	; 0x2da8 <__ultoa_invert+0x5c>
    2db6:	f6 cf       	rjmp	.-20     	; 0x2da4 <__ultoa_invert+0x58>
    2db8:	46 2f       	mov	r20, r22
    2dba:	4f 70       	andi	r20, 0x0F	; 15
    2dbc:	40 5d       	subi	r20, 0xD0	; 208
    2dbe:	4a 33       	cpi	r20, 0x3A	; 58
    2dc0:	18 f0       	brcs	.+6      	; 0x2dc8 <__ultoa_invert+0x7c>
    2dc2:	49 5d       	subi	r20, 0xD9	; 217
    2dc4:	31 fd       	sbrc	r19, 1
    2dc6:	40 52       	subi	r20, 0x20	; 32
    2dc8:	41 93       	st	Z+, r20
    2dca:	02 d0       	rcall	.+4      	; 0x2dd0 <__ultoa_invert+0x84>
    2dcc:	a9 f7       	brne	.-22     	; 0x2db8 <__ultoa_invert+0x6c>
    2dce:	ea cf       	rjmp	.-44     	; 0x2da4 <__ultoa_invert+0x58>
    2dd0:	b4 e0       	ldi	r27, 0x04	; 4
    2dd2:	a6 95       	lsr	r26
    2dd4:	97 95       	ror	r25
    2dd6:	87 95       	ror	r24
    2dd8:	77 95       	ror	r23
    2dda:	67 95       	ror	r22
    2ddc:	ba 95       	dec	r27
    2dde:	c9 f7       	brne	.-14     	; 0x2dd2 <__ultoa_invert+0x86>
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	61 05       	cpc	r22, r1
    2de4:	71 05       	cpc	r23, r1
    2de6:	08 95       	ret
    2de8:	9b 01       	movw	r18, r22
    2dea:	ac 01       	movw	r20, r24
    2dec:	0a 2e       	mov	r0, r26
    2dee:	06 94       	lsr	r0
    2df0:	57 95       	ror	r21
    2df2:	47 95       	ror	r20
    2df4:	37 95       	ror	r19
    2df6:	27 95       	ror	r18
    2df8:	ba 95       	dec	r27
    2dfa:	c9 f7       	brne	.-14     	; 0x2dee <__ultoa_invert+0xa2>
    2dfc:	62 0f       	add	r22, r18
    2dfe:	73 1f       	adc	r23, r19
    2e00:	84 1f       	adc	r24, r20
    2e02:	95 1f       	adc	r25, r21
    2e04:	a0 1d       	adc	r26, r0
    2e06:	08 95       	ret

00002e08 <_exit>:
    2e08:	f8 94       	cli

00002e0a <__stop_program>:
    2e0a:	ff cf       	rjmp	.-2      	; 0x2e0a <__stop_program>
