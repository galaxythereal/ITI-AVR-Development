
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  000034f2  00003566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002298  00000000  00000000  000035e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000952  00000000  00000000  00005880  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000061d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006332  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000064c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008506  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009607  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a58c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a9ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b25c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 69 19 	call	0x32d2	; 0x32d2 <main>
      7a:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 ed       	ldi	r26, 0xD8	; 216
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 ed       	ldi	r24, 0xD8	; 216
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	68 ed       	ldi	r22, 0xD8	; 216
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <EEOpen>:
#include <util/delay.h>

#include "24c64.h"

void EEOpen()
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	//Set up TWI Module
	TWBR = 5;
     c96:	e0 e2       	ldi	r30, 0x20	; 32
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	85 e0       	ldi	r24, 0x05	; 5
     c9c:	80 83       	st	Z, r24
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     c9e:	a1 e2       	ldi	r26, 0x21	; 33
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e1 e2       	ldi	r30, 0x21	; 33
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8c 7f       	andi	r24, 0xFC	; 252
     caa:	8c 93       	st	X, r24

}
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <EEWriteByte>:

uint8_t EEWriteByte(uint16_t address,uint8_t data)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	62 97       	sbiw	r28, 0x12	; 18
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	98 8b       	std	Y+16, r25	; 0x10
     cc8:	8f 87       	std	Y+15, r24	; 0x0f
     cca:	69 8b       	std	Y+17, r22	; 0x11
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     ccc:	e6 e5       	ldi	r30, 0x56	; 86
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	84 ea       	ldi	r24, 0xA4	; 164
     cd2:	80 83       	st	Z, r24

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     cd4:	e6 e5       	ldi	r30, 0x56	; 86
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	88 23       	and	r24, r24
     cdc:	dc f7       	brge	.-10     	; 0xcd4 <EEWriteByte+0x22>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     cde:	e1 e2       	ldi	r30, 0x21	; 33
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	88 7f       	andi	r24, 0xF8	; 248
     cea:	90 70       	andi	r25, 0x00	; 0
     cec:	88 30       	cpi	r24, 0x08	; 8
     cee:	91 05       	cpc	r25, r1
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <EEWriteByte+0x44>
			return FALSE;
     cf2:	1a 8a       	std	Y+18, r1	; 0x12
     cf4:	e6 c0       	rjmp	.+460    	; 0xec2 <EEWriteByte+0x210>

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     cf6:	e3 e2       	ldi	r30, 0x23	; 35
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 ea       	ldi	r24, 0xA0	; 160
     cfc:	80 83       	st	Z, r24

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     cfe:	e6 e5       	ldi	r30, 0x56	; 86
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	84 e8       	ldi	r24, 0x84	; 132
     d04:	80 83       	st	Z, r24

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     d06:	e6 e5       	ldi	r30, 0x56	; 86
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	88 23       	and	r24, r24
     d0e:	dc f7       	brge	.-10     	; 0xd06 <EEWriteByte+0x54>
	
	}while((TWSR & 0xF8) != 0x18);
     d10:	e1 e2       	ldi	r30, 0x21	; 33
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	88 7f       	andi	r24, 0xF8	; 248
     d1c:	90 70       	andi	r25, 0x00	; 0
     d1e:	88 31       	cpi	r24, 0x18	; 24
     d20:	91 05       	cpc	r25, r1
     d22:	a1 f6       	brne	.-88     	; 0xccc <EEWriteByte+0x1a>
		

	//Now write ADDRH
	TWDR=(address>>8);
     d24:	e3 e2       	ldi	r30, 0x23	; 35
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	8f 85       	ldd	r24, Y+15	; 0x0f
     d2a:	98 89       	ldd	r25, Y+16	; 0x10
     d2c:	89 2f       	mov	r24, r25
     d2e:	99 27       	eor	r25, r25
     d30:	80 83       	st	Z, r24

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     d32:	e6 e5       	ldi	r30, 0x56	; 86
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	84 e8       	ldi	r24, 0x84	; 132
     d38:	80 83       	st	Z, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     d3a:	e6 e5       	ldi	r30, 0x56	; 86
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	88 23       	and	r24, r24
     d42:	dc f7       	brge	.-10     	; 0xd3a <EEWriteByte+0x88>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     d44:	e1 e2       	ldi	r30, 0x21	; 33
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	88 7f       	andi	r24, 0xF8	; 248
     d50:	90 70       	andi	r25, 0x00	; 0
     d52:	88 32       	cpi	r24, 0x28	; 40
     d54:	91 05       	cpc	r25, r1
     d56:	11 f0       	breq	.+4      	; 0xd5c <EEWriteByte+0xaa>
		return FALSE;
     d58:	1a 8a       	std	Y+18, r1	; 0x12
     d5a:	b3 c0       	rjmp	.+358    	; 0xec2 <EEWriteByte+0x210>

	//Now write ADDRL
	TWDR=(address);
     d5c:	e3 e2       	ldi	r30, 0x23	; 35
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	8f 85       	ldd	r24, Y+15	; 0x0f
     d62:	80 83       	st	Z, r24

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     d64:	e6 e5       	ldi	r30, 0x56	; 86
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	84 e8       	ldi	r24, 0x84	; 132
     d6a:	80 83       	st	Z, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     d6c:	e6 e5       	ldi	r30, 0x56	; 86
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	88 23       	and	r24, r24
     d74:	dc f7       	brge	.-10     	; 0xd6c <EEWriteByte+0xba>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     d76:	e1 e2       	ldi	r30, 0x21	; 33
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	88 7f       	andi	r24, 0xF8	; 248
     d82:	90 70       	andi	r25, 0x00	; 0
     d84:	88 32       	cpi	r24, 0x28	; 40
     d86:	91 05       	cpc	r25, r1
     d88:	11 f0       	breq	.+4      	; 0xd8e <EEWriteByte+0xdc>
		return FALSE;
     d8a:	1a 8a       	std	Y+18, r1	; 0x12
     d8c:	9a c0       	rjmp	.+308    	; 0xec2 <EEWriteByte+0x210>

	//Now write DATA
	TWDR=(data);
     d8e:	e3 e2       	ldi	r30, 0x23	; 35
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	89 89       	ldd	r24, Y+17	; 0x11
     d94:	80 83       	st	Z, r24

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     d96:	e6 e5       	ldi	r30, 0x56	; 86
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	84 e8       	ldi	r24, 0x84	; 132
     d9c:	80 83       	st	Z, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     d9e:	e6 e5       	ldi	r30, 0x56	; 86
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	88 23       	and	r24, r24
     da6:	dc f7       	brge	.-10     	; 0xd9e <EEWriteByte+0xec>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     da8:	e1 e2       	ldi	r30, 0x21	; 33
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	88 7f       	andi	r24, 0xF8	; 248
     db4:	90 70       	andi	r25, 0x00	; 0
     db6:	88 32       	cpi	r24, 0x28	; 40
     db8:	91 05       	cpc	r25, r1
     dba:	11 f0       	breq	.+4      	; 0xdc0 <EEWriteByte+0x10e>
		return FALSE;
     dbc:	1a 8a       	std	Y+18, r1	; 0x12
     dbe:	81 c0       	rjmp	.+258    	; 0xec2 <EEWriteByte+0x210>

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     dc0:	e6 e5       	ldi	r30, 0x56	; 86
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	84 e9       	ldi	r24, 0x94	; 148
     dc6:	80 83       	st	Z, r24
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     dc8:	e6 e5       	ldi	r30, 0x56	; 86
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	80 71       	andi	r24, 0x10	; 16
     dd4:	90 70       	andi	r25, 0x00	; 0
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	b9 f7       	brne	.-18     	; 0xdc8 <EEWriteByte+0x116>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a0 e4       	ldi	r26, 0x40	; 64
     de0:	b1 e4       	ldi	r27, 0x41	; 65
     de2:	8b 87       	std	Y+11, r24	; 0x0b
     de4:	9c 87       	std	Y+12, r25	; 0x0c
     de6:	ad 87       	std	Y+13, r26	; 0x0d
     de8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dea:	6b 85       	ldd	r22, Y+11	; 0x0b
     dec:	7c 85       	ldd	r23, Y+12	; 0x0c
     dee:	8d 85       	ldd	r24, Y+13	; 0x0d
     df0:	9e 85       	ldd	r25, Y+14	; 0x0e
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	4a ef       	ldi	r20, 0xFA	; 250
     df8:	54 e4       	ldi	r21, 0x44	; 68
     dfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	8f 83       	std	Y+7, r24	; 0x07
     e04:	98 87       	std	Y+8, r25	; 0x08
     e06:	a9 87       	std	Y+9, r26	; 0x09
     e08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e1e:	88 23       	and	r24, r24
     e20:	2c f4       	brge	.+10     	; 0xe2c <EEWriteByte+0x17a>
		__ticks = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9e 83       	std	Y+6, r25	; 0x06
     e28:	8d 83       	std	Y+5, r24	; 0x05
     e2a:	3f c0       	rjmp	.+126    	; 0xeaa <EEWriteByte+0x1f8>
	else if (__tmp > 65535)
     e2c:	6f 81       	ldd	r22, Y+7	; 0x07
     e2e:	78 85       	ldd	r23, Y+8	; 0x08
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	3f ef       	ldi	r19, 0xFF	; 255
     e38:	4f e7       	ldi	r20, 0x7F	; 127
     e3a:	57 e4       	ldi	r21, 0x47	; 71
     e3c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e40:	18 16       	cp	r1, r24
     e42:	4c f5       	brge	.+82     	; 0xe96 <EEWriteByte+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e44:	6b 85       	ldd	r22, Y+11	; 0x0b
     e46:	7c 85       	ldd	r23, Y+12	; 0x0c
     e48:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e2       	ldi	r20, 0x20	; 32
     e52:	51 e4       	ldi	r21, 0x41	; 65
     e54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	bc 01       	movw	r22, r24
     e5e:	cd 01       	movw	r24, r26
     e60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9e 83       	std	Y+6, r25	; 0x06
     e6a:	8d 83       	std	Y+5, r24	; 0x05
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <EEWriteByte+0x1da>
     e6e:	88 ec       	ldi	r24, 0xC8	; 200
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <EEWriteByte+0x1c8>
     e7e:	9c 83       	std	Y+4, r25	; 0x04
     e80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	69 f7       	brne	.-38     	; 0xe6e <EEWriteByte+0x1bc>
     e94:	14 c0       	rjmp	.+40     	; 0xebe <EEWriteByte+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e96:	6f 81       	ldd	r22, Y+7	; 0x07
     e98:	78 85       	ldd	r23, Y+8	; 0x08
     e9a:	89 85       	ldd	r24, Y+9	; 0x09
     e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9e 83       	std	Y+6, r25	; 0x06
     ea8:	8d 83       	std	Y+5, r24	; 0x05
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <EEWriteByte+0x204>
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01

	//Wait untill Writing is complete
	_delay_ms(12);

	//Return TRUE
	return TRUE;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	8a 8b       	std	Y+18, r24	; 0x12
     ec2:	8a 89       	ldd	r24, Y+18	; 0x12

}
     ec4:	62 96       	adiw	r28, 0x12	; 18
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <EEReadByte>:

uint8_t EEReadByte(uint16_t address)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <EEReadByte+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <EEReadByte+0x8>
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	9b 83       	std	Y+3, r25	; 0x03
     ee4:	8a 83       	std	Y+2, r24	; 0x02

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     ee6:	e6 e5       	ldi	r30, 0x56	; 86
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	84 ea       	ldi	r24, 0xA4	; 164
     eec:	80 83       	st	Z, r24

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     eee:	e6 e5       	ldi	r30, 0x56	; 86
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 23       	and	r24, r24
     ef6:	dc f7       	brge	.-10     	; 0xeee <EEReadByte+0x18>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     ef8:	e1 e2       	ldi	r30, 0x21	; 33
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	88 7f       	andi	r24, 0xF8	; 248
     f04:	90 70       	andi	r25, 0x00	; 0
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	91 05       	cpc	r25, r1
     f0a:	11 f0       	breq	.+4      	; 0xf10 <EEReadByte+0x3a>
			return FALSE;
     f0c:	1c 82       	std	Y+4, r1	; 0x04
     f0e:	a2 c0       	rjmp	.+324    	; 0x1054 <EEReadByte+0x17e>

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     f10:	e3 e2       	ldi	r30, 0x23	; 35
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 ea       	ldi	r24, 0xA0	; 160
     f16:	80 83       	st	Z, r24

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     f18:	e6 e5       	ldi	r30, 0x56	; 86
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	84 e8       	ldi	r24, 0x84	; 132
     f1e:	80 83       	st	Z, r24

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     f20:	e6 e5       	ldi	r30, 0x56	; 86
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	88 23       	and	r24, r24
     f28:	dc f7       	brge	.-10     	; 0xf20 <EEReadByte+0x4a>
	
	}while((TWSR & 0xF8) != 0x18);
     f2a:	e1 e2       	ldi	r30, 0x21	; 33
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	88 7f       	andi	r24, 0xF8	; 248
     f36:	90 70       	andi	r25, 0x00	; 0
     f38:	88 31       	cpi	r24, 0x18	; 24
     f3a:	91 05       	cpc	r25, r1
     f3c:	a1 f6       	brne	.-88     	; 0xee6 <EEReadByte+0x10>
		

	//Now write ADDRH
	TWDR=(address>>8);
     f3e:	e3 e2       	ldi	r30, 0x23	; 35
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	89 2f       	mov	r24, r25
     f48:	99 27       	eor	r25, r25
     f4a:	80 83       	st	Z, r24

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     f4c:	e6 e5       	ldi	r30, 0x56	; 86
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	84 e8       	ldi	r24, 0x84	; 132
     f52:	80 83       	st	Z, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     f54:	e6 e5       	ldi	r30, 0x56	; 86
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	88 23       	and	r24, r24
     f5c:	dc f7       	brge	.-10     	; 0xf54 <EEReadByte+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     f5e:	e1 e2       	ldi	r30, 0x21	; 33
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	88 7f       	andi	r24, 0xF8	; 248
     f6a:	90 70       	andi	r25, 0x00	; 0
     f6c:	88 32       	cpi	r24, 0x28	; 40
     f6e:	91 05       	cpc	r25, r1
     f70:	11 f0       	breq	.+4      	; 0xf76 <EEReadByte+0xa0>
		return FALSE;
     f72:	1c 82       	std	Y+4, r1	; 0x04
     f74:	6f c0       	rjmp	.+222    	; 0x1054 <EEReadByte+0x17e>

	//Now write ADDRL
	TWDR=(address);
     f76:	e3 e2       	ldi	r30, 0x23	; 35
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	80 83       	st	Z, r24

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     f7e:	e6 e5       	ldi	r30, 0x56	; 86
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	84 e8       	ldi	r24, 0x84	; 132
     f84:	80 83       	st	Z, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     f86:	e6 e5       	ldi	r30, 0x56	; 86
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	88 23       	and	r24, r24
     f8e:	dc f7       	brge	.-10     	; 0xf86 <EEReadByte+0xb0>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     f90:	e1 e2       	ldi	r30, 0x21	; 33
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	88 7f       	andi	r24, 0xF8	; 248
     f9c:	90 70       	andi	r25, 0x00	; 0
     f9e:	88 32       	cpi	r24, 0x28	; 40
     fa0:	91 05       	cpc	r25, r1
     fa2:	11 f0       	breq	.+4      	; 0xfa8 <EEReadByte+0xd2>
		return FALSE;
     fa4:	1c 82       	std	Y+4, r1	; 0x04
     fa6:	56 c0       	rjmp	.+172    	; 0x1054 <EEReadByte+0x17e>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     fa8:	e6 e5       	ldi	r30, 0x56	; 86
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	84 ea       	ldi	r24, 0xA4	; 164
     fae:	80 83       	st	Z, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     fb0:	e6 e5       	ldi	r30, 0x56	; 86
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	88 23       	and	r24, r24
     fb8:	dc f7       	brge	.-10     	; 0xfb0 <EEReadByte+0xda>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     fba:	e1 e2       	ldi	r30, 0x21	; 33
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	88 7f       	andi	r24, 0xF8	; 248
     fc6:	90 70       	andi	r25, 0x00	; 0
     fc8:	80 31       	cpi	r24, 0x10	; 16
     fca:	91 05       	cpc	r25, r1
     fcc:	11 f0       	breq	.+4      	; 0xfd2 <EEReadByte+0xfc>
		return FALSE;
     fce:	1c 82       	std	Y+4, r1	; 0x04
     fd0:	41 c0       	rjmp	.+130    	; 0x1054 <EEReadByte+0x17e>

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     fd2:	e3 e2       	ldi	r30, 0x23	; 35
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	81 ea       	ldi	r24, 0xA1	; 161
     fd8:	80 83       	st	Z, r24

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     fda:	e6 e5       	ldi	r30, 0x56	; 86
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	84 e8       	ldi	r24, 0x84	; 132
     fe0:	80 83       	st	Z, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     fe2:	e6 e5       	ldi	r30, 0x56	; 86
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	88 23       	and	r24, r24
     fea:	dc f7       	brge	.-10     	; 0xfe2 <EEReadByte+0x10c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     fec:	e1 e2       	ldi	r30, 0x21	; 33
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	88 7f       	andi	r24, 0xF8	; 248
     ff8:	90 70       	andi	r25, 0x00	; 0
     ffa:	80 34       	cpi	r24, 0x40	; 64
     ffc:	91 05       	cpc	r25, r1
     ffe:	11 f0       	breq	.+4      	; 0x1004 <EEReadByte+0x12e>
		return FALSE;
    1000:	1c 82       	std	Y+4, r1	; 0x04
    1002:	28 c0       	rjmp	.+80     	; 0x1054 <EEReadByte+0x17e>

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
    1004:	e6 e5       	ldi	r30, 0x56	; 86
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	84 e8       	ldi	r24, 0x84	; 132
    100a:	80 83       	st	Z, r24

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
    100c:	e6 e5       	ldi	r30, 0x56	; 86
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 23       	and	r24, r24
    1014:	dc f7       	brge	.-10     	; 0x100c <EEReadByte+0x136>

	//Check status
	if((TWSR & 0xF8) != 0x58)
    1016:	e1 e2       	ldi	r30, 0x21	; 33
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	88 7f       	andi	r24, 0xF8	; 248
    1022:	90 70       	andi	r25, 0x00	; 0
    1024:	88 35       	cpi	r24, 0x58	; 88
    1026:	91 05       	cpc	r25, r1
    1028:	11 f0       	breq	.+4      	; 0x102e <EEReadByte+0x158>
		return FALSE;
    102a:	1c 82       	std	Y+4, r1	; 0x04
    102c:	13 c0       	rjmp	.+38     	; 0x1054 <EEReadByte+0x17e>

	//Read the data
	data=TWDR;
    102e:	e3 e2       	ldi	r30, 0x23	; 35
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	89 83       	std	Y+1, r24	; 0x01

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1036:	e6 e5       	ldi	r30, 0x56	; 86
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	84 e9       	ldi	r24, 0x94	; 148
    103c:	80 83       	st	Z, r24
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
    103e:	e6 e5       	ldi	r30, 0x56	; 86
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	80 71       	andi	r24, 0x10	; 16
    104a:	90 70       	andi	r25, 0x00	; 0
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	b9 f7       	brne	.-18     	; 0x103e <EEReadByte+0x168>

	//Return TRUE
	return data;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	8c 83       	std	Y+4, r24	; 0x04
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	cd 57       	subi	r28, 0x7D	; 125
    1072:	d0 40       	sbci	r29, 0x00	; 0
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	fe 01       	movw	r30, r28
    1080:	e4 58       	subi	r30, 0x84	; 132
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	80 83       	st	Z, r24
    1086:	fe 01       	movw	r30, r28
    1088:	e3 58       	subi	r30, 0x83	; 131
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	60 83       	st	Z, r22
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
    108e:	de 01       	movw	r26, r28
    1090:	a5 58       	subi	r26, 0x85	; 133
    1092:	bf 4f       	sbci	r27, 0xFF	; 255
    1094:	fe 01       	movw	r30, r28
    1096:	e4 58       	subi	r30, 0x84	; 132
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	80 81       	ld	r24, Z
    109c:	82 95       	swap	r24
    109e:	8f 70       	andi	r24, 0x0F	; 15
    10a0:	8c 93       	st	X, r24
ln=(c & 0x0F);
    10a2:	de 01       	movw	r26, r28
    10a4:	a6 58       	subi	r26, 0x86	; 134
    10a6:	bf 4f       	sbci	r27, 0xFF	; 255
    10a8:	fe 01       	movw	r30, r28
    10aa:	e4 58       	subi	r30, 0x84	; 132
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 70       	andi	r24, 0x0F	; 15
    10b2:	8c 93       	st	X, r24

if(isdata==0)
    10b4:	fe 01       	movw	r30, r28
    10b6:	e3 58       	subi	r30, 0x83	; 131
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	80 81       	ld	r24, Z
    10bc:	88 23       	and	r24, r24
    10be:	41 f4       	brne	.+16     	; 0x10d0 <LCDByte+0x6c>
	CLEAR_RS();
    10c0:	a5 e3       	ldi	r26, 0x35	; 53
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e5 e3       	ldi	r30, 0x35	; 53
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8f 77       	andi	r24, 0x7F	; 127
    10cc:	8c 93       	st	X, r24
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <LCDByte+0x7a>
else
	SET_RS();
    10d0:	a5 e3       	ldi	r26, 0x35	; 53
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e5 e3       	ldi	r30, 0x35	; 53
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	80 68       	ori	r24, 0x80	; 128
    10dc:	8c 93       	st	X, r24
    10de:	fe 01       	movw	r30, r28
    10e0:	eb 58       	subi	r30, 0x8B	; 139
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a0 e0       	ldi	r26, 0x00	; 0
    10ea:	bf e3       	ldi	r27, 0x3F	; 63
    10ec:	80 83       	st	Z, r24
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	a2 83       	std	Z+2, r26	; 0x02
    10f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10f4:	8e 01       	movw	r16, r28
    10f6:	0f 58       	subi	r16, 0x8F	; 143
    10f8:	1f 4f       	sbci	r17, 0xFF	; 255
    10fa:	fe 01       	movw	r30, r28
    10fc:	eb 58       	subi	r30, 0x8B	; 139
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	60 81       	ld	r22, Z
    1102:	71 81       	ldd	r23, Z+1	; 0x01
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	93 81       	ldd	r25, Z+3	; 0x03
    1108:	2b ea       	ldi	r18, 0xAB	; 171
    110a:	3a ea       	ldi	r19, 0xAA	; 170
    110c:	4a e2       	ldi	r20, 0x2A	; 42
    110e:	50 e4       	ldi	r21, 0x40	; 64
    1110:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	f8 01       	movw	r30, r16
    111a:	80 83       	st	Z, r24
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	a2 83       	std	Z+2, r26	; 0x02
    1120:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1122:	fe 01       	movw	r30, r28
    1124:	ef 58       	subi	r30, 0x8F	; 143
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    113c:	88 23       	and	r24, r24
    113e:	34 f4       	brge	.+12     	; 0x114c <LCDByte+0xe8>
		__ticks = 1;
    1140:	fe 01       	movw	r30, r28
    1142:	e0 59       	subi	r30, 0x90	; 144
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	80 83       	st	Z, r24
    114a:	e0 c0       	rjmp	.+448    	; 0x130c <LCDByte+0x2a8>
	else if (__tmp > 255)
    114c:	fe 01       	movw	r30, r28
    114e:	ef 58       	subi	r30, 0x8F	; 143
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	60 81       	ld	r22, Z
    1154:	71 81       	ldd	r23, Z+1	; 0x01
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	93 81       	ldd	r25, Z+3	; 0x03
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	53 e4       	ldi	r21, 0x43	; 67
    1162:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	0c f0       	brlt	.+2      	; 0x116c <LCDByte+0x108>
    116a:	c0 c0       	rjmp	.+384    	; 0x12ec <LCDByte+0x288>
	{
		_delay_ms(__us / 1000.0);
    116c:	fe 01       	movw	r30, r28
    116e:	eb 58       	subi	r30, 0x8B	; 139
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	93 81       	ldd	r25, Z+3	; 0x03
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	4a e7       	ldi	r20, 0x7A	; 122
    1180:	54 e4       	ldi	r21, 0x44	; 68
    1182:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	fe 01       	movw	r30, r28
    118c:	e4 59       	subi	r30, 0x94	; 148
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 83       	st	Z, r24
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	a2 83       	std	Z+2, r26	; 0x02
    1196:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1198:	8e 01       	movw	r16, r28
    119a:	08 59       	subi	r16, 0x98	; 152
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	fe 01       	movw	r30, r28
    11a0:	e4 59       	subi	r30, 0x94	; 148
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	4a ef       	ldi	r20, 0xFA	; 250
    11b2:	54 e4       	ldi	r21, 0x44	; 68
    11b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	f8 01       	movw	r30, r16
    11be:	80 83       	st	Z, r24
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	a2 83       	std	Z+2, r26	; 0x02
    11c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11c6:	fe 01       	movw	r30, r28
    11c8:	e8 59       	subi	r30, 0x98	; 152
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	60 81       	ld	r22, Z
    11ce:	71 81       	ldd	r23, Z+1	; 0x01
    11d0:	82 81       	ldd	r24, Z+2	; 0x02
    11d2:	93 81       	ldd	r25, Z+3	; 0x03
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e8       	ldi	r20, 0x80	; 128
    11da:	5f e3       	ldi	r21, 0x3F	; 63
    11dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11e0:	88 23       	and	r24, r24
    11e2:	44 f4       	brge	.+16     	; 0x11f4 <LCDByte+0x190>
		__ticks = 1;
    11e4:	fe 01       	movw	r30, r28
    11e6:	ea 59       	subi	r30, 0x9A	; 154
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	80 83       	st	Z, r24
    11f2:	64 c0       	rjmp	.+200    	; 0x12bc <LCDByte+0x258>
	else if (__tmp > 65535)
    11f4:	fe 01       	movw	r30, r28
    11f6:	e8 59       	subi	r30, 0x98	; 152
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	60 81       	ld	r22, Z
    11fc:	71 81       	ldd	r23, Z+1	; 0x01
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	93 81       	ldd	r25, Z+3	; 0x03
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	3f ef       	ldi	r19, 0xFF	; 255
    1206:	4f e7       	ldi	r20, 0x7F	; 127
    1208:	57 e4       	ldi	r21, 0x47	; 71
    120a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    120e:	18 16       	cp	r1, r24
    1210:	0c f0       	brlt	.+2      	; 0x1214 <LCDByte+0x1b0>
    1212:	43 c0       	rjmp	.+134    	; 0x129a <LCDByte+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1214:	fe 01       	movw	r30, r28
    1216:	e4 59       	subi	r30, 0x94	; 148
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	60 81       	ld	r22, Z
    121c:	71 81       	ldd	r23, Z+1	; 0x01
    121e:	82 81       	ldd	r24, Z+2	; 0x02
    1220:	93 81       	ldd	r25, Z+3	; 0x03
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e2       	ldi	r20, 0x20	; 32
    1228:	51 e4       	ldi	r21, 0x41	; 65
    122a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8e 01       	movw	r16, r28
    1234:	0a 59       	subi	r16, 0x9A	; 154
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	f8 01       	movw	r30, r16
    1246:	91 83       	std	Z+1, r25	; 0x01
    1248:	80 83       	st	Z, r24
    124a:	1f c0       	rjmp	.+62     	; 0x128a <LCDByte+0x226>
    124c:	fe 01       	movw	r30, r28
    124e:	ec 59       	subi	r30, 0x9C	; 156
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	88 ec       	ldi	r24, 0xC8	; 200
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
    125a:	fe 01       	movw	r30, r28
    125c:	ec 59       	subi	r30, 0x9C	; 156
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	80 81       	ld	r24, Z
    1262:	91 81       	ldd	r25, Z+1	; 0x01
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <LCDByte+0x200>
    1268:	fe 01       	movw	r30, r28
    126a:	ec 59       	subi	r30, 0x9C	; 156
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	91 83       	std	Z+1, r25	; 0x01
    1270:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1272:	de 01       	movw	r26, r28
    1274:	aa 59       	subi	r26, 0x9A	; 154
    1276:	bf 4f       	sbci	r27, 0xFF	; 255
    1278:	fe 01       	movw	r30, r28
    127a:	ea 59       	subi	r30, 0x9A	; 154
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	80 81       	ld	r24, Z
    1280:	91 81       	ldd	r25, Z+1	; 0x01
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	11 96       	adiw	r26, 0x01	; 1
    1286:	9c 93       	st	X, r25
    1288:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128a:	fe 01       	movw	r30, r28
    128c:	ea 59       	subi	r30, 0x9A	; 154
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	d1 f6       	brne	.-76     	; 0x124c <LCDByte+0x1e8>
    1298:	4b c0       	rjmp	.+150    	; 0x1330 <LCDByte+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129a:	8e 01       	movw	r16, r28
    129c:	0a 59       	subi	r16, 0x9A	; 154
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	fe 01       	movw	r30, r28
    12a2:	e8 59       	subi	r30, 0x98	; 152
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	60 81       	ld	r22, Z
    12a8:	71 81       	ldd	r23, Z+1	; 0x01
    12aa:	82 81       	ldd	r24, Z+2	; 0x02
    12ac:	93 81       	ldd	r25, Z+3	; 0x03
    12ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	f8 01       	movw	r30, r16
    12b8:	91 83       	std	Z+1, r25	; 0x01
    12ba:	80 83       	st	Z, r24
    12bc:	de 01       	movw	r26, r28
    12be:	ae 59       	subi	r26, 0x9E	; 158
    12c0:	bf 4f       	sbci	r27, 0xFF	; 255
    12c2:	fe 01       	movw	r30, r28
    12c4:	ea 59       	subi	r30, 0x9A	; 154
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	11 96       	adiw	r26, 0x01	; 1
    12ce:	9c 93       	st	X, r25
    12d0:	8e 93       	st	-X, r24
    12d2:	fe 01       	movw	r30, r28
    12d4:	ee 59       	subi	r30, 0x9E	; 158
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <LCDByte+0x278>
    12e0:	fe 01       	movw	r30, r28
    12e2:	ee 59       	subi	r30, 0x9E	; 158
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	91 83       	std	Z+1, r25	; 0x01
    12e8:	80 83       	st	Z, r24
    12ea:	22 c0       	rjmp	.+68     	; 0x1330 <LCDByte+0x2cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12ec:	8e 01       	movw	r16, r28
    12ee:	00 59       	subi	r16, 0x90	; 144
    12f0:	1f 4f       	sbci	r17, 0xFF	; 255
    12f2:	fe 01       	movw	r30, r28
    12f4:	ef 58       	subi	r30, 0x8F	; 143
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	60 81       	ld	r22, Z
    12fa:	71 81       	ldd	r23, Z+1	; 0x01
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	f8 01       	movw	r30, r16
    130a:	80 83       	st	Z, r24
    130c:	de 01       	movw	r26, r28
    130e:	af 59       	subi	r26, 0x9F	; 159
    1310:	bf 4f       	sbci	r27, 0xFF	; 255
    1312:	fe 01       	movw	r30, r28
    1314:	e0 59       	subi	r30, 0x90	; 144
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	80 81       	ld	r24, Z
    131a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    131c:	fe 01       	movw	r30, r28
    131e:	ef 59       	subi	r30, 0x9F	; 159
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	80 81       	ld	r24, Z
    1324:	8a 95       	dec	r24
    1326:	f1 f7       	brne	.-4      	; 0x1324 <LCDByte+0x2c0>
    1328:	fe 01       	movw	r30, r28
    132a:	ef 59       	subi	r30, 0x9F	; 159
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	80 83       	st	Z, r24

_delay_us(0.500);		//tAS

SET_E();
    1330:	a8 e3       	ldi	r26, 0x38	; 56
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e8 e3       	ldi	r30, 0x38	; 56
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	80 61       	ori	r24, 0x10	; 16
    133c:	8c 93       	st	X, r24

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
    133e:	e8 e3       	ldi	r30, 0x38	; 56
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	98 2f       	mov	r25, r24
    1346:	90 7f       	andi	r25, 0xF0	; 240
    1348:	fe 01       	movw	r30, r28
    134a:	e5 58       	subi	r30, 0x85	; 133
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	80 81       	ld	r24, Z
    1350:	89 2b       	or	r24, r25
    1352:	fe 01       	movw	r30, r28
    1354:	e7 58       	subi	r30, 0x87	; 135
    1356:	ff 4f       	sbci	r31, 0xFF	; 255
    1358:	80 83       	st	Z, r24
LCD_DATA_PORT=temp;
    135a:	a8 e3       	ldi	r26, 0x38	; 56
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	fe 01       	movw	r30, r28
    1360:	e7 58       	subi	r30, 0x87	; 135
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	80 81       	ld	r24, Z
    1366:	8c 93       	st	X, r24
    1368:	fe 01       	movw	r30, r28
    136a:	e3 5a       	subi	r30, 0xA3	; 163
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a0 e8       	ldi	r26, 0x80	; 128
    1374:	bf e3       	ldi	r27, 0x3F	; 63
    1376:	80 83       	st	Z, r24
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	a2 83       	std	Z+2, r26	; 0x02
    137c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    137e:	8e 01       	movw	r16, r28
    1380:	07 5a       	subi	r16, 0xA7	; 167
    1382:	1f 4f       	sbci	r17, 0xFF	; 255
    1384:	fe 01       	movw	r30, r28
    1386:	e3 5a       	subi	r30, 0xA3	; 163
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	60 81       	ld	r22, Z
    138c:	71 81       	ldd	r23, Z+1	; 0x01
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	2b ea       	ldi	r18, 0xAB	; 171
    1394:	3a ea       	ldi	r19, 0xAA	; 170
    1396:	4a e2       	ldi	r20, 0x2A	; 42
    1398:	50 e4       	ldi	r21, 0x40	; 64
    139a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	f8 01       	movw	r30, r16
    13a4:	80 83       	st	Z, r24
    13a6:	91 83       	std	Z+1, r25	; 0x01
    13a8:	a2 83       	std	Z+2, r26	; 0x02
    13aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13ac:	fe 01       	movw	r30, r28
    13ae:	e7 5a       	subi	r30, 0xA7	; 167
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	60 81       	ld	r22, Z
    13b4:	71 81       	ldd	r23, Z+1	; 0x01
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	93 81       	ldd	r25, Z+3	; 0x03
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e8       	ldi	r20, 0x80	; 128
    13c0:	5f e3       	ldi	r21, 0x3F	; 63
    13c2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13c6:	88 23       	and	r24, r24
    13c8:	34 f4       	brge	.+12     	; 0x13d6 <LCDByte+0x372>
		__ticks = 1;
    13ca:	fe 01       	movw	r30, r28
    13cc:	e8 5a       	subi	r30, 0xA8	; 168
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	80 83       	st	Z, r24
    13d4:	e0 c0       	rjmp	.+448    	; 0x1596 <LCDByte+0x532>
	else if (__tmp > 255)
    13d6:	fe 01       	movw	r30, r28
    13d8:	e7 5a       	subi	r30, 0xA7	; 167
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	60 81       	ld	r22, Z
    13de:	71 81       	ldd	r23, Z+1	; 0x01
    13e0:	82 81       	ldd	r24, Z+2	; 0x02
    13e2:	93 81       	ldd	r25, Z+3	; 0x03
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	4f e7       	ldi	r20, 0x7F	; 127
    13ea:	53 e4       	ldi	r21, 0x43	; 67
    13ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	0c f0       	brlt	.+2      	; 0x13f6 <LCDByte+0x392>
    13f4:	c0 c0       	rjmp	.+384    	; 0x1576 <LCDByte+0x512>
	{
		_delay_ms(__us / 1000.0);
    13f6:	fe 01       	movw	r30, r28
    13f8:	e3 5a       	subi	r30, 0xA3	; 163
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	82 81       	ldd	r24, Z+2	; 0x02
    1402:	93 81       	ldd	r25, Z+3	; 0x03
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	4a e7       	ldi	r20, 0x7A	; 122
    140a:	54 e4       	ldi	r21, 0x44	; 68
    140c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	fe 01       	movw	r30, r28
    1416:	ec 5a       	subi	r30, 0xAC	; 172
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	80 83       	st	Z, r24
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	a2 83       	std	Z+2, r26	; 0x02
    1420:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1422:	8e 01       	movw	r16, r28
    1424:	00 5b       	subi	r16, 0xB0	; 176
    1426:	1f 4f       	sbci	r17, 0xFF	; 255
    1428:	fe 01       	movw	r30, r28
    142a:	ec 5a       	subi	r30, 0xAC	; 172
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	60 81       	ld	r22, Z
    1430:	71 81       	ldd	r23, Z+1	; 0x01
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	4a ef       	ldi	r20, 0xFA	; 250
    143c:	54 e4       	ldi	r21, 0x44	; 68
    143e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	f8 01       	movw	r30, r16
    1448:	80 83       	st	Z, r24
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	a2 83       	std	Z+2, r26	; 0x02
    144e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1450:	fe 01       	movw	r30, r28
    1452:	e0 5b       	subi	r30, 0xB0	; 176
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e8       	ldi	r20, 0x80	; 128
    1464:	5f e3       	ldi	r21, 0x3F	; 63
    1466:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    146a:	88 23       	and	r24, r24
    146c:	44 f4       	brge	.+16     	; 0x147e <LCDByte+0x41a>
		__ticks = 1;
    146e:	fe 01       	movw	r30, r28
    1470:	e2 5b       	subi	r30, 0xB2	; 178
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
    147c:	64 c0       	rjmp	.+200    	; 0x1546 <LCDByte+0x4e2>
	else if (__tmp > 65535)
    147e:	fe 01       	movw	r30, r28
    1480:	e0 5b       	subi	r30, 0xB0	; 176
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	60 81       	ld	r22, Z
    1486:	71 81       	ldd	r23, Z+1	; 0x01
    1488:	82 81       	ldd	r24, Z+2	; 0x02
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	3f ef       	ldi	r19, 0xFF	; 255
    1490:	4f e7       	ldi	r20, 0x7F	; 127
    1492:	57 e4       	ldi	r21, 0x47	; 71
    1494:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1498:	18 16       	cp	r1, r24
    149a:	0c f0       	brlt	.+2      	; 0x149e <LCDByte+0x43a>
    149c:	43 c0       	rjmp	.+134    	; 0x1524 <LCDByte+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149e:	fe 01       	movw	r30, r28
    14a0:	ec 5a       	subi	r30, 0xAC	; 172
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e2       	ldi	r20, 0x20	; 32
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	8e 01       	movw	r16, r28
    14be:	02 5b       	subi	r16, 0xB2	; 178
    14c0:	1f 4f       	sbci	r17, 0xFF	; 255
    14c2:	bc 01       	movw	r22, r24
    14c4:	cd 01       	movw	r24, r26
    14c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	f8 01       	movw	r30, r16
    14d0:	91 83       	std	Z+1, r25	; 0x01
    14d2:	80 83       	st	Z, r24
    14d4:	1f c0       	rjmp	.+62     	; 0x1514 <LCDByte+0x4b0>
    14d6:	fe 01       	movw	r30, r28
    14d8:	e4 5b       	subi	r30, 0xB4	; 180
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	88 ec       	ldi	r24, 0xC8	; 200
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14e4:	fe 01       	movw	r30, r28
    14e6:	e4 5b       	subi	r30, 0xB4	; 180
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <LCDByte+0x48a>
    14f2:	fe 01       	movw	r30, r28
    14f4:	e4 5b       	subi	r30, 0xB4	; 180
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fc:	de 01       	movw	r26, r28
    14fe:	a2 5b       	subi	r26, 0xB2	; 178
    1500:	bf 4f       	sbci	r27, 0xFF	; 255
    1502:	fe 01       	movw	r30, r28
    1504:	e2 5b       	subi	r30, 0xB2	; 178
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	9c 93       	st	X, r25
    1512:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1514:	fe 01       	movw	r30, r28
    1516:	e2 5b       	subi	r30, 0xB2	; 178
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	d1 f6       	brne	.-76     	; 0x14d6 <LCDByte+0x472>
    1522:	4b c0       	rjmp	.+150    	; 0x15ba <LCDByte+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1524:	8e 01       	movw	r16, r28
    1526:	02 5b       	subi	r16, 0xB2	; 178
    1528:	1f 4f       	sbci	r17, 0xFF	; 255
    152a:	fe 01       	movw	r30, r28
    152c:	e0 5b       	subi	r30, 0xB0	; 176
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	60 81       	ld	r22, Z
    1532:	71 81       	ldd	r23, Z+1	; 0x01
    1534:	82 81       	ldd	r24, Z+2	; 0x02
    1536:	93 81       	ldd	r25, Z+3	; 0x03
    1538:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	f8 01       	movw	r30, r16
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
    1546:	de 01       	movw	r26, r28
    1548:	a6 5b       	subi	r26, 0xB6	; 182
    154a:	bf 4f       	sbci	r27, 0xFF	; 255
    154c:	fe 01       	movw	r30, r28
    154e:	e2 5b       	subi	r30, 0xB2	; 178
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	80 81       	ld	r24, Z
    1554:	91 81       	ldd	r25, Z+1	; 0x01
    1556:	11 96       	adiw	r26, 0x01	; 1
    1558:	9c 93       	st	X, r25
    155a:	8e 93       	st	-X, r24
    155c:	fe 01       	movw	r30, r28
    155e:	e6 5b       	subi	r30, 0xB6	; 182
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	80 81       	ld	r24, Z
    1564:	91 81       	ldd	r25, Z+1	; 0x01
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <LCDByte+0x502>
    156a:	fe 01       	movw	r30, r28
    156c:	e6 5b       	subi	r30, 0xB6	; 182
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	91 83       	std	Z+1, r25	; 0x01
    1572:	80 83       	st	Z, r24
    1574:	22 c0       	rjmp	.+68     	; 0x15ba <LCDByte+0x556>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1576:	8e 01       	movw	r16, r28
    1578:	08 5a       	subi	r16, 0xA8	; 168
    157a:	1f 4f       	sbci	r17, 0xFF	; 255
    157c:	fe 01       	movw	r30, r28
    157e:	e7 5a       	subi	r30, 0xA7	; 167
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	f8 01       	movw	r30, r16
    1594:	80 83       	st	Z, r24
    1596:	de 01       	movw	r26, r28
    1598:	a7 5b       	subi	r26, 0xB7	; 183
    159a:	bf 4f       	sbci	r27, 0xFF	; 255
    159c:	fe 01       	movw	r30, r28
    159e:	e8 5a       	subi	r30, 0xA8	; 168
    15a0:	ff 4f       	sbci	r31, 0xFF	; 255
    15a2:	80 81       	ld	r24, Z
    15a4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15a6:	fe 01       	movw	r30, r28
    15a8:	e7 5b       	subi	r30, 0xB7	; 183
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	80 81       	ld	r24, Z
    15ae:	8a 95       	dec	r24
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <LCDByte+0x54a>
    15b2:	fe 01       	movw	r30, r28
    15b4:	e7 5b       	subi	r30, 0xB7	; 183
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	80 83       	st	Z, r24

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
    15ba:	a8 e3       	ldi	r26, 0x38	; 56
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e8 e3       	ldi	r30, 0x38	; 56
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8f 7e       	andi	r24, 0xEF	; 239
    15c6:	8c 93       	st	X, r24
    15c8:	fe 01       	movw	r30, r28
    15ca:	eb 5b       	subi	r30, 0xBB	; 187
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a0 e8       	ldi	r26, 0x80	; 128
    15d4:	bf e3       	ldi	r27, 0x3F	; 63
    15d6:	80 83       	st	Z, r24
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	a2 83       	std	Z+2, r26	; 0x02
    15dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15de:	8e 01       	movw	r16, r28
    15e0:	0f 5b       	subi	r16, 0xBF	; 191
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	fe 01       	movw	r30, r28
    15e6:	eb 5b       	subi	r30, 0xBB	; 187
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	60 81       	ld	r22, Z
    15ec:	71 81       	ldd	r23, Z+1	; 0x01
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	2b ea       	ldi	r18, 0xAB	; 171
    15f4:	3a ea       	ldi	r19, 0xAA	; 170
    15f6:	4a e2       	ldi	r20, 0x2A	; 42
    15f8:	50 e4       	ldi	r21, 0x40	; 64
    15fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	f8 01       	movw	r30, r16
    1604:	80 83       	st	Z, r24
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	a2 83       	std	Z+2, r26	; 0x02
    160a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    160c:	fe 01       	movw	r30, r28
    160e:	ef 5b       	subi	r30, 0xBF	; 191
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	5f e3       	ldi	r21, 0x3F	; 63
    1622:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1626:	88 23       	and	r24, r24
    1628:	34 f4       	brge	.+12     	; 0x1636 <LCDByte+0x5d2>
		__ticks = 1;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	fe 01       	movw	r30, r28
    162e:	e0 5c       	subi	r30, 0xC0	; 192
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	80 83       	st	Z, r24
    1634:	9d c0       	rjmp	.+314    	; 0x1770 <LCDByte+0x70c>
	else if (__tmp > 255)
    1636:	fe 01       	movw	r30, r28
    1638:	ef 5b       	subi	r30, 0xBF	; 191
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	4f e7       	ldi	r20, 0x7F	; 127
    164a:	53 e4       	ldi	r21, 0x43	; 67
    164c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1650:	18 16       	cp	r1, r24
    1652:	0c f0       	brlt	.+2      	; 0x1656 <LCDByte+0x5f2>
    1654:	7e c0       	rjmp	.+252    	; 0x1752 <LCDByte+0x6ee>
	{
		_delay_ms(__us / 1000.0);
    1656:	fe 01       	movw	r30, r28
    1658:	eb 5b       	subi	r30, 0xBB	; 187
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	4a e7       	ldi	r20, 0x7A	; 122
    166a:	54 e4       	ldi	r21, 0x44	; 68
    166c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	8c af       	std	Y+60, r24	; 0x3c
    1676:	9d af       	std	Y+61, r25	; 0x3d
    1678:	ae af       	std	Y+62, r26	; 0x3e
    167a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167c:	6c ad       	ldd	r22, Y+60	; 0x3c
    167e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1680:	8e ad       	ldd	r24, Y+62	; 0x3e
    1682:	9f ad       	ldd	r25, Y+63	; 0x3f
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	4a ef       	ldi	r20, 0xFA	; 250
    168a:	54 e4       	ldi	r21, 0x44	; 68
    168c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	88 af       	std	Y+56, r24	; 0x38
    1696:	99 af       	std	Y+57, r25	; 0x39
    1698:	aa af       	std	Y+58, r26	; 0x3a
    169a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    169c:	68 ad       	ldd	r22, Y+56	; 0x38
    169e:	79 ad       	ldd	r23, Y+57	; 0x39
    16a0:	8a ad       	ldd	r24, Y+58	; 0x3a
    16a2:	9b ad       	ldd	r25, Y+59	; 0x3b
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	5f e3       	ldi	r21, 0x3F	; 63
    16ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16b0:	88 23       	and	r24, r24
    16b2:	2c f4       	brge	.+10     	; 0x16be <LCDByte+0x65a>
		__ticks = 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9f ab       	std	Y+55, r25	; 0x37
    16ba:	8e ab       	std	Y+54, r24	; 0x36
    16bc:	3f c0       	rjmp	.+126    	; 0x173c <LCDByte+0x6d8>
	else if (__tmp > 65535)
    16be:	68 ad       	ldd	r22, Y+56	; 0x38
    16c0:	79 ad       	ldd	r23, Y+57	; 0x39
    16c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    16c4:	9b ad       	ldd	r25, Y+59	; 0x3b
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	57 e4       	ldi	r21, 0x47	; 71
    16ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	4c f5       	brge	.+82     	; 0x1728 <LCDByte+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	6c ad       	ldd	r22, Y+60	; 0x3c
    16d8:	7d ad       	ldd	r23, Y+61	; 0x3d
    16da:	8e ad       	ldd	r24, Y+62	; 0x3e
    16dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e2       	ldi	r20, 0x20	; 32
    16e4:	51 e4       	ldi	r21, 0x41	; 65
    16e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9f ab       	std	Y+55, r25	; 0x37
    16fc:	8e ab       	std	Y+54, r24	; 0x36
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <LCDByte+0x6ba>
    1700:	88 ec       	ldi	r24, 0xC8	; 200
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9d ab       	std	Y+53, r25	; 0x35
    1706:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1708:	8c a9       	ldd	r24, Y+52	; 0x34
    170a:	9d a9       	ldd	r25, Y+53	; 0x35
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <LCDByte+0x6a8>
    1710:	9d ab       	std	Y+53, r25	; 0x35
    1712:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1714:	8e a9       	ldd	r24, Y+54	; 0x36
    1716:	9f a9       	ldd	r25, Y+55	; 0x37
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	9f ab       	std	Y+55, r25	; 0x37
    171c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171e:	8e a9       	ldd	r24, Y+54	; 0x36
    1720:	9f a9       	ldd	r25, Y+55	; 0x37
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	69 f7       	brne	.-38     	; 0x1700 <LCDByte+0x69c>
    1726:	2d c0       	rjmp	.+90     	; 0x1782 <LCDByte+0x71e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1728:	68 ad       	ldd	r22, Y+56	; 0x38
    172a:	79 ad       	ldd	r23, Y+57	; 0x39
    172c:	8a ad       	ldd	r24, Y+58	; 0x3a
    172e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1730:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9f ab       	std	Y+55, r25	; 0x37
    173a:	8e ab       	std	Y+54, r24	; 0x36
    173c:	8e a9       	ldd	r24, Y+54	; 0x36
    173e:	9f a9       	ldd	r25, Y+55	; 0x37
    1740:	9b ab       	std	Y+51, r25	; 0x33
    1742:	8a ab       	std	Y+50, r24	; 0x32
    1744:	8a a9       	ldd	r24, Y+50	; 0x32
    1746:	9b a9       	ldd	r25, Y+51	; 0x33
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <LCDByte+0x6e4>
    174c:	9b ab       	std	Y+51, r25	; 0x33
    174e:	8a ab       	std	Y+50, r24	; 0x32
    1750:	18 c0       	rjmp	.+48     	; 0x1782 <LCDByte+0x71e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1752:	fe 01       	movw	r30, r28
    1754:	ef 5b       	subi	r30, 0xBF	; 191
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	fe 01       	movw	r30, r28
    176a:	e0 5c       	subi	r30, 0xC0	; 192
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	80 83       	st	Z, r24
    1770:	fe 01       	movw	r30, r28
    1772:	e0 5c       	subi	r30, 0xC0	; 192
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	80 81       	ld	r24, Z
    1778:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    177a:	89 a9       	ldd	r24, Y+49	; 0x31
    177c:	8a 95       	dec	r24
    177e:	f1 f7       	brne	.-4      	; 0x177c <LCDByte+0x718>
    1780:	89 ab       	std	Y+49, r24	; 0x31

_delay_us(1);

//Send the lower nibble
SET_E();
    1782:	a8 e3       	ldi	r26, 0x38	; 56
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e8 e3       	ldi	r30, 0x38	; 56
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	80 61       	ori	r24, 0x10	; 16
    178e:	8c 93       	st	X, r24

temp=(LCD_DATA_PORT & 0XF0)|(ln);
    1790:	e8 e3       	ldi	r30, 0x38	; 56
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	98 2f       	mov	r25, r24
    1798:	90 7f       	andi	r25, 0xF0	; 240
    179a:	fe 01       	movw	r30, r28
    179c:	e6 58       	subi	r30, 0x86	; 134
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	80 81       	ld	r24, Z
    17a2:	89 2b       	or	r24, r25
    17a4:	fe 01       	movw	r30, r28
    17a6:	e7 58       	subi	r30, 0x87	; 135
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	80 83       	st	Z, r24

LCD_DATA_PORT=temp;
    17ac:	a8 e3       	ldi	r26, 0x38	; 56
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	fe 01       	movw	r30, r28
    17b2:	e7 58       	subi	r30, 0x87	; 135
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 81       	ld	r24, Z
    17b8:	8c 93       	st	X, r24
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a0 e8       	ldi	r26, 0x80	; 128
    17c0:	bf e3       	ldi	r27, 0x3F	; 63
    17c2:	8d a7       	std	Y+45, r24	; 0x2d
    17c4:	9e a7       	std	Y+46, r25	; 0x2e
    17c6:	af a7       	std	Y+47, r26	; 0x2f
    17c8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17ca:	6d a5       	ldd	r22, Y+45	; 0x2d
    17cc:	7e a5       	ldd	r23, Y+46	; 0x2e
    17ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d0:	98 a9       	ldd	r25, Y+48	; 0x30
    17d2:	2b ea       	ldi	r18, 0xAB	; 171
    17d4:	3a ea       	ldi	r19, 0xAA	; 170
    17d6:	4a e2       	ldi	r20, 0x2A	; 42
    17d8:	50 e4       	ldi	r21, 0x40	; 64
    17da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	89 a7       	std	Y+41, r24	; 0x29
    17e4:	9a a7       	std	Y+42, r25	; 0x2a
    17e6:	ab a7       	std	Y+43, r26	; 0x2b
    17e8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    17ea:	69 a5       	ldd	r22, Y+41	; 0x29
    17ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    17ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    17f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e8       	ldi	r20, 0x80	; 128
    17f8:	5f e3       	ldi	r21, 0x3F	; 63
    17fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17fe:	88 23       	and	r24, r24
    1800:	1c f4       	brge	.+6      	; 0x1808 <LCDByte+0x7a4>
		__ticks = 1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	88 a7       	std	Y+40, r24	; 0x28
    1806:	91 c0       	rjmp	.+290    	; 0x192a <LCDByte+0x8c6>
	else if (__tmp > 255)
    1808:	69 a5       	ldd	r22, Y+41	; 0x29
    180a:	7a a5       	ldd	r23, Y+42	; 0x2a
    180c:	8b a5       	ldd	r24, Y+43	; 0x2b
    180e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4f e7       	ldi	r20, 0x7F	; 127
    1816:	53 e4       	ldi	r21, 0x43	; 67
    1818:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    181c:	18 16       	cp	r1, r24
    181e:	0c f0       	brlt	.+2      	; 0x1822 <LCDByte+0x7be>
    1820:	7b c0       	rjmp	.+246    	; 0x1918 <LCDByte+0x8b4>
	{
		_delay_ms(__us / 1000.0);
    1822:	6d a5       	ldd	r22, Y+45	; 0x2d
    1824:	7e a5       	ldd	r23, Y+46	; 0x2e
    1826:	8f a5       	ldd	r24, Y+47	; 0x2f
    1828:	98 a9       	ldd	r25, Y+48	; 0x30
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	4a e7       	ldi	r20, 0x7A	; 122
    1830:	54 e4       	ldi	r21, 0x44	; 68
    1832:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	8c a3       	std	Y+36, r24	; 0x24
    183c:	9d a3       	std	Y+37, r25	; 0x25
    183e:	ae a3       	std	Y+38, r26	; 0x26
    1840:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	6c a1       	ldd	r22, Y+36	; 0x24
    1844:	7d a1       	ldd	r23, Y+37	; 0x25
    1846:	8e a1       	ldd	r24, Y+38	; 0x26
    1848:	9f a1       	ldd	r25, Y+39	; 0x27
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a ef       	ldi	r20, 0xFA	; 250
    1850:	54 e4       	ldi	r21, 0x44	; 68
    1852:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	88 a3       	std	Y+32, r24	; 0x20
    185c:	99 a3       	std	Y+33, r25	; 0x21
    185e:	aa a3       	std	Y+34, r26	; 0x22
    1860:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1862:	68 a1       	ldd	r22, Y+32	; 0x20
    1864:	79 a1       	ldd	r23, Y+33	; 0x21
    1866:	8a a1       	ldd	r24, Y+34	; 0x22
    1868:	9b a1       	ldd	r25, Y+35	; 0x23
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <LCDByte+0x820>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9f 8f       	std	Y+31, r25	; 0x1f
    1880:	8e 8f       	std	Y+30, r24	; 0x1e
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <LCDByte+0x89e>
	else if (__tmp > 65535)
    1884:	68 a1       	ldd	r22, Y+32	; 0x20
    1886:	79 a1       	ldd	r23, Y+33	; 0x21
    1888:	8a a1       	ldd	r24, Y+34	; 0x22
    188a:	9b a1       	ldd	r25, Y+35	; 0x23
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <LCDByte+0x88a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	6c a1       	ldd	r22, Y+36	; 0x24
    189e:	7d a1       	ldd	r23, Y+37	; 0x25
    18a0:	8e a1       	ldd	r24, Y+38	; 0x26
    18a2:	9f a1       	ldd	r25, Y+39	; 0x27
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9f 8f       	std	Y+31, r25	; 0x1f
    18c2:	8e 8f       	std	Y+30, r24	; 0x1e
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <LCDByte+0x880>
    18c6:	88 ec       	ldi	r24, 0xC8	; 200
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9d 8f       	std	Y+29, r25	; 0x1d
    18cc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCDByte+0x86e>
    18d6:	9d 8f       	std	Y+29, r25	; 0x1d
    18d8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18dc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	9f 8f       	std	Y+31, r25	; 0x1f
    18e2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <LCDByte+0x862>
    18ec:	24 c0       	rjmp	.+72     	; 0x1936 <LCDByte+0x8d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	68 a1       	ldd	r22, Y+32	; 0x20
    18f0:	79 a1       	ldd	r23, Y+33	; 0x21
    18f2:	8a a1       	ldd	r24, Y+34	; 0x22
    18f4:	9b a1       	ldd	r25, Y+35	; 0x23
    18f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9f 8f       	std	Y+31, r25	; 0x1f
    1900:	8e 8f       	std	Y+30, r24	; 0x1e
    1902:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1904:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1906:	9b 8f       	std	Y+27, r25	; 0x1b
    1908:	8a 8f       	std	Y+26, r24	; 0x1a
    190a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    190c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <LCDByte+0x8aa>
    1912:	9b 8f       	std	Y+27, r25	; 0x1b
    1914:	8a 8f       	std	Y+26, r24	; 0x1a
    1916:	0f c0       	rjmp	.+30     	; 0x1936 <LCDByte+0x8d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1918:	69 a5       	ldd	r22, Y+41	; 0x29
    191a:	7a a5       	ldd	r23, Y+42	; 0x2a
    191c:	8b a5       	ldd	r24, Y+43	; 0x2b
    191e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1920:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	88 a7       	std	Y+40, r24	; 0x28
    192a:	88 a5       	ldd	r24, Y+40	; 0x28
    192c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    192e:	89 8d       	ldd	r24, Y+25	; 0x19
    1930:	8a 95       	dec	r24
    1932:	f1 f7       	brne	.-4      	; 0x1930 <LCDByte+0x8cc>
    1934:	89 8f       	std	Y+25, r24	; 0x19

_delay_us(1);			//tEH

//SEND

CLEAR_E();
    1936:	a8 e3       	ldi	r26, 0x38	; 56
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e8 e3       	ldi	r30, 0x38	; 56
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	8f 7e       	andi	r24, 0xEF	; 239
    1942:	8c 93       	st	X, r24
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	a0 e8       	ldi	r26, 0x80	; 128
    194a:	bf e3       	ldi	r27, 0x3F	; 63
    194c:	8d 8b       	std	Y+21, r24	; 0x15
    194e:	9e 8b       	std	Y+22, r25	; 0x16
    1950:	af 8b       	std	Y+23, r26	; 0x17
    1952:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1954:	6d 89       	ldd	r22, Y+21	; 0x15
    1956:	7e 89       	ldd	r23, Y+22	; 0x16
    1958:	8f 89       	ldd	r24, Y+23	; 0x17
    195a:	98 8d       	ldd	r25, Y+24	; 0x18
    195c:	2b ea       	ldi	r18, 0xAB	; 171
    195e:	3a ea       	ldi	r19, 0xAA	; 170
    1960:	4a e2       	ldi	r20, 0x2A	; 42
    1962:	50 e4       	ldi	r21, 0x40	; 64
    1964:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	89 8b       	std	Y+17, r24	; 0x11
    196e:	9a 8b       	std	Y+18, r25	; 0x12
    1970:	ab 8b       	std	Y+19, r26	; 0x13
    1972:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1974:	69 89       	ldd	r22, Y+17	; 0x11
    1976:	7a 89       	ldd	r23, Y+18	; 0x12
    1978:	8b 89       	ldd	r24, Y+19	; 0x13
    197a:	9c 89       	ldd	r25, Y+20	; 0x14
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e8       	ldi	r20, 0x80	; 128
    1982:	5f e3       	ldi	r21, 0x3F	; 63
    1984:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1988:	88 23       	and	r24, r24
    198a:	1c f4       	brge	.+6      	; 0x1992 <LCDByte+0x92e>
		__ticks = 1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	88 8b       	std	Y+16, r24	; 0x10
    1990:	91 c0       	rjmp	.+290    	; 0x1ab4 <LCDByte+0xa50>
	else if (__tmp > 255)
    1992:	69 89       	ldd	r22, Y+17	; 0x11
    1994:	7a 89       	ldd	r23, Y+18	; 0x12
    1996:	8b 89       	ldd	r24, Y+19	; 0x13
    1998:	9c 89       	ldd	r25, Y+20	; 0x14
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	53 e4       	ldi	r21, 0x43	; 67
    19a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	0c f0       	brlt	.+2      	; 0x19ac <LCDByte+0x948>
    19aa:	7b c0       	rjmp	.+246    	; 0x1aa2 <LCDByte+0xa3e>
	{
		_delay_ms(__us / 1000.0);
    19ac:	6d 89       	ldd	r22, Y+21	; 0x15
    19ae:	7e 89       	ldd	r23, Y+22	; 0x16
    19b0:	8f 89       	ldd	r24, Y+23	; 0x17
    19b2:	98 8d       	ldd	r25, Y+24	; 0x18
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a e7       	ldi	r20, 0x7A	; 122
    19ba:	54 e4       	ldi	r21, 0x44	; 68
    19bc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	8c 87       	std	Y+12, r24	; 0x0c
    19c6:	9d 87       	std	Y+13, r25	; 0x0d
    19c8:	ae 87       	std	Y+14, r26	; 0x0e
    19ca:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    19ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    19d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    19d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a ef       	ldi	r20, 0xFA	; 250
    19da:	54 e4       	ldi	r21, 0x44	; 68
    19dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	88 87       	std	Y+8, r24	; 0x08
    19e6:	99 87       	std	Y+9, r25	; 0x09
    19e8:	aa 87       	std	Y+10, r26	; 0x0a
    19ea:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    19ec:	68 85       	ldd	r22, Y+8	; 0x08
    19ee:	79 85       	ldd	r23, Y+9	; 0x09
    19f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	5f e3       	ldi	r21, 0x3F	; 63
    19fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a00:	88 23       	and	r24, r24
    1a02:	2c f4       	brge	.+10     	; 0x1a0e <LCDByte+0x9aa>
		__ticks = 1;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9f 83       	std	Y+7, r25	; 0x07
    1a0a:	8e 83       	std	Y+6, r24	; 0x06
    1a0c:	3f c0       	rjmp	.+126    	; 0x1a8c <LCDByte+0xa28>
	else if (__tmp > 65535)
    1a0e:	68 85       	ldd	r22, Y+8	; 0x08
    1a10:	79 85       	ldd	r23, Y+9	; 0x09
    1a12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a14:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	3f ef       	ldi	r19, 0xFF	; 255
    1a1a:	4f e7       	ldi	r20, 0x7F	; 127
    1a1c:	57 e4       	ldi	r21, 0x47	; 71
    1a1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	4c f5       	brge	.+82     	; 0x1a78 <LCDByte+0xa14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a26:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a28:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e2       	ldi	r20, 0x20	; 32
    1a34:	51 e4       	ldi	r21, 0x41	; 65
    1a36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9f 83       	std	Y+7, r25	; 0x07
    1a4c:	8e 83       	std	Y+6, r24	; 0x06
    1a4e:	0f c0       	rjmp	.+30     	; 0x1a6e <LCDByte+0xa0a>
    1a50:	88 ec       	ldi	r24, 0xC8	; 200
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9d 83       	std	Y+5, r25	; 0x05
    1a56:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCDByte+0x9f8>
    1a60:	9d 83       	std	Y+5, r25	; 0x05
    1a62:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a64:	8e 81       	ldd	r24, Y+6	; 0x06
    1a66:	9f 81       	ldd	r25, Y+7	; 0x07
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	9f 83       	std	Y+7, r25	; 0x07
    1a6c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a70:	9f 81       	ldd	r25, Y+7	; 0x07
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	69 f7       	brne	.-38     	; 0x1a50 <LCDByte+0x9ec>
    1a76:	24 c0       	rjmp	.+72     	; 0x1ac0 <LCDByte+0xa5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a78:	68 85       	ldd	r22, Y+8	; 0x08
    1a7a:	79 85       	ldd	r23, Y+9	; 0x09
    1a7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9f 83       	std	Y+7, r25	; 0x07
    1a8a:	8e 83       	std	Y+6, r24	; 0x06
    1a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a90:	9b 83       	std	Y+3, r25	; 0x03
    1a92:	8a 83       	std	Y+2, r24	; 0x02
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	9b 81       	ldd	r25, Y+3	; 0x03
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <LCDByte+0xa34>
    1a9c:	9b 83       	std	Y+3, r25	; 0x03
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCDByte+0xa5c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aa2:	69 89       	ldd	r22, Y+17	; 0x11
    1aa4:	7a 89       	ldd	r23, Y+18	; 0x12
    1aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	88 8b       	std	Y+16, r24	; 0x10
    1ab4:	88 89       	ldd	r24, Y+16	; 0x10
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	8a 95       	dec	r24
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <LCDByte+0xa56>
    1abe:	89 83       	std	Y+1, r24	; 0x01

_delay_us(1);			//tEL

LCDBusyLoop();
    1ac0:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <LCDBusyLoop>
}
    1ac4:	c3 58       	subi	r28, 0x83	; 131
    1ac6:	df 4f       	sbci	r29, 0xFF	; 255
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	08 95       	ret

00001adc <LCDBusyLoop>:

void LCDBusyLoop()
{
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	cb 5a       	subi	r28, 0xAB	; 171
    1aea:	d0 40       	sbci	r29, 0x00	; 0
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;
    1af6:	fe 01       	movw	r30, r28
    1af8:	e6 55       	subi	r30, 0x56	; 86
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	10 82       	st	Z, r1

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
    1afe:	a7 e3       	ldi	r26, 0x37	; 55
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e7 e3       	ldi	r30, 0x37	; 55
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	80 7f       	andi	r24, 0xF0	; 240
    1b0a:	8c 93       	st	X, r24

	//change LCD mode
	SET_RW();		//Read mode
    1b0c:	a5 e3       	ldi	r26, 0x35	; 53
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e5 e3       	ldi	r30, 0x35	; 53
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	80 64       	ori	r24, 0x40	; 64
    1b18:	8c 93       	st	X, r24
	CLEAR_RS();		//Read status
    1b1a:	a5 e3       	ldi	r26, 0x35	; 53
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e5 e3       	ldi	r30, 0x35	; 53
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	8f 77       	andi	r24, 0x7F	; 127
    1b26:	8c 93       	st	X, r24
    1b28:	fe 01       	movw	r30, r28
    1b2a:	eb 55       	subi	r30, 0x5B	; 91
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a0 e0       	ldi	r26, 0x00	; 0
    1b34:	bf e3       	ldi	r27, 0x3F	; 63
    1b36:	80 83       	st	Z, r24
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	a2 83       	std	Z+2, r26	; 0x02
    1b3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b3e:	8e 01       	movw	r16, r28
    1b40:	0f 55       	subi	r16, 0x5F	; 95
    1b42:	1f 4f       	sbci	r17, 0xFF	; 255
    1b44:	fe 01       	movw	r30, r28
    1b46:	eb 55       	subi	r30, 0x5B	; 91
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	60 81       	ld	r22, Z
    1b4c:	71 81       	ldd	r23, Z+1	; 0x01
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	93 81       	ldd	r25, Z+3	; 0x03
    1b52:	2b ea       	ldi	r18, 0xAB	; 171
    1b54:	3a ea       	ldi	r19, 0xAA	; 170
    1b56:	4a e2       	ldi	r20, 0x2A	; 42
    1b58:	50 e4       	ldi	r21, 0x40	; 64
    1b5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	f8 01       	movw	r30, r16
    1b64:	80 83       	st	Z, r24
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	a2 83       	std	Z+2, r26	; 0x02
    1b6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ef 55       	subi	r30, 0x5F	; 95
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e8       	ldi	r20, 0x80	; 128
    1b80:	5f e3       	ldi	r21, 0x3F	; 63
    1b82:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b86:	88 23       	and	r24, r24
    1b88:	34 f4       	brge	.+12     	; 0x1b96 <LCDBusyLoop+0xba>
		__ticks = 1;
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	e0 56       	subi	r30, 0x60	; 96
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	80 83       	st	Z, r24
    1b94:	e0 c0       	rjmp	.+448    	; 0x1d56 <LCDBusyLoop+0x27a>
	else if (__tmp > 255)
    1b96:	fe 01       	movw	r30, r28
    1b98:	ef 55       	subi	r30, 0x5F	; 95
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	60 81       	ld	r22, Z
    1b9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ba0:	82 81       	ldd	r24, Z+2	; 0x02
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	4f e7       	ldi	r20, 0x7F	; 127
    1baa:	53 e4       	ldi	r21, 0x43	; 67
    1bac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bb0:	18 16       	cp	r1, r24
    1bb2:	0c f0       	brlt	.+2      	; 0x1bb6 <LCDBusyLoop+0xda>
    1bb4:	c0 c0       	rjmp	.+384    	; 0x1d36 <LCDBusyLoop+0x25a>
	{
		_delay_ms(__us / 1000.0);
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	eb 55       	subi	r30, 0x5B	; 91
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	93 81       	ldd	r25, Z+3	; 0x03
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4a e7       	ldi	r20, 0x7A	; 122
    1bca:	54 e4       	ldi	r21, 0x44	; 68
    1bcc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e4 56       	subi	r30, 0x64	; 100
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	80 83       	st	Z, r24
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	a2 83       	std	Z+2, r26	; 0x02
    1be0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	8e 01       	movw	r16, r28
    1be4:	08 56       	subi	r16, 0x68	; 104
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	fe 01       	movw	r30, r28
    1bea:	e4 56       	subi	r30, 0x64	; 100
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a ef       	ldi	r20, 0xFA	; 250
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	f8 01       	movw	r30, r16
    1c08:	80 83       	st	Z, r24
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	a2 83       	std	Z+2, r26	; 0x02
    1c0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c10:	fe 01       	movw	r30, r28
    1c12:	e8 56       	subi	r30, 0x68	; 104
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	44 f4       	brge	.+16     	; 0x1c3e <LCDBusyLoop+0x162>
		__ticks = 1;
    1c2e:	fe 01       	movw	r30, r28
    1c30:	ea 56       	subi	r30, 0x6A	; 106
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	64 c0       	rjmp	.+200    	; 0x1d06 <LCDBusyLoop+0x22a>
	else if (__tmp > 65535)
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e8 56       	subi	r30, 0x68	; 104
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	60 81       	ld	r22, Z
    1c46:	71 81       	ldd	r23, Z+1	; 0x01
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	0c f0       	brlt	.+2      	; 0x1c5e <LCDBusyLoop+0x182>
    1c5c:	43 c0       	rjmp	.+134    	; 0x1ce4 <LCDBusyLoop+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e4 56       	subi	r30, 0x64	; 100
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	8e 01       	movw	r16, r28
    1c7e:	0a 56       	subi	r16, 0x6A	; 106
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	f8 01       	movw	r30, r16
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    1c94:	1f c0       	rjmp	.+62     	; 0x1cd4 <LCDBusyLoop+0x1f8>
    1c96:	fe 01       	movw	r30, r28
    1c98:	ec 56       	subi	r30, 0x6C	; 108
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	88 ec       	ldi	r24, 0xC8	; 200
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	ec 56       	subi	r30, 0x6C	; 108
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCDBusyLoop+0x1d2>
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	ec 56       	subi	r30, 0x6C	; 108
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	de 01       	movw	r26, r28
    1cbe:	aa 56       	subi	r26, 0x6A	; 106
    1cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	ea 56       	subi	r30, 0x6A	; 106
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	11 96       	adiw	r26, 0x01	; 1
    1cd0:	9c 93       	st	X, r25
    1cd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	ea 56       	subi	r30, 0x6A	; 106
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	91 81       	ldd	r25, Z+1	; 0x01
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	d1 f6       	brne	.-76     	; 0x1c96 <LCDBusyLoop+0x1ba>
    1ce2:	4b c0       	rjmp	.+150    	; 0x1d7a <LCDBusyLoop+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	8e 01       	movw	r16, r28
    1ce6:	0a 56       	subi	r16, 0x6A	; 106
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	fe 01       	movw	r30, r28
    1cec:	e8 56       	subi	r30, 0x68	; 104
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	f8 01       	movw	r30, r16
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    1d06:	de 01       	movw	r26, r28
    1d08:	ae 56       	subi	r26, 0x6E	; 110
    1d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ea 56       	subi	r30, 0x6A	; 106
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	11 96       	adiw	r26, 0x01	; 1
    1d18:	9c 93       	st	X, r25
    1d1a:	8e 93       	st	-X, r24
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	ee 56       	subi	r30, 0x6E	; 110
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 81       	ld	r24, Z
    1d24:	91 81       	ldd	r25, Z+1	; 0x01
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <LCDBusyLoop+0x24a>
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	ee 56       	subi	r30, 0x6E	; 110
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	80 83       	st	Z, r24
    1d34:	22 c0       	rjmp	.+68     	; 0x1d7a <LCDBusyLoop+0x29e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d36:	8e 01       	movw	r16, r28
    1d38:	00 56       	subi	r16, 0x60	; 96
    1d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	ef 55       	subi	r30, 0x5F	; 95
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	f8 01       	movw	r30, r16
    1d54:	80 83       	st	Z, r24
    1d56:	de 01       	movw	r26, r28
    1d58:	af 56       	subi	r26, 0x6F	; 111
    1d5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e0 56       	subi	r30, 0x60	; 96
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 81       	ld	r24, Z
    1d64:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d66:	fe 01       	movw	r30, r28
    1d68:	ef 56       	subi	r30, 0x6F	; 111
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 81       	ld	r24, Z
    1d6e:	8a 95       	dec	r24
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCDBusyLoop+0x292>
    1d72:	fe 01       	movw	r30, r28
    1d74:	ef 56       	subi	r30, 0x6F	; 111
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 83       	st	Z, r24

	
	do
	{

		SET_E();
    1d7a:	a8 e3       	ldi	r26, 0x38	; 56
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e8 e3       	ldi	r30, 0x38	; 56
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	80 61       	ori	r24, 0x10	; 16
    1d86:	8c 93       	st	X, r24
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e3 57       	subi	r30, 0x73	; 115
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e0       	ldi	r26, 0x00	; 0
    1d94:	bf e3       	ldi	r27, 0x3F	; 63
    1d96:	80 83       	st	Z, r24
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	a2 83       	std	Z+2, r26	; 0x02
    1d9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d9e:	8e 01       	movw	r16, r28
    1da0:	07 57       	subi	r16, 0x77	; 119
    1da2:	1f 4f       	sbci	r17, 0xFF	; 255
    1da4:	fe 01       	movw	r30, r28
    1da6:	e3 57       	subi	r30, 0x73	; 115
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	60 81       	ld	r22, Z
    1dac:	71 81       	ldd	r23, Z+1	; 0x01
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	2b ea       	ldi	r18, 0xAB	; 171
    1db4:	3a ea       	ldi	r19, 0xAA	; 170
    1db6:	4a e2       	ldi	r20, 0x2A	; 42
    1db8:	50 e4       	ldi	r21, 0x40	; 64
    1dba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	80 83       	st	Z, r24
    1dc6:	91 83       	std	Z+1, r25	; 0x01
    1dc8:	a2 83       	std	Z+2, r26	; 0x02
    1dca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e7 57       	subi	r30, 0x77	; 119
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	60 81       	ld	r22, Z
    1dd4:	71 81       	ldd	r23, Z+1	; 0x01
    1dd6:	82 81       	ldd	r24, Z+2	; 0x02
    1dd8:	93 81       	ldd	r25, Z+3	; 0x03
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	34 f4       	brge	.+12     	; 0x1df6 <LCDBusyLoop+0x31a>
		__ticks = 1;
    1dea:	fe 01       	movw	r30, r28
    1dec:	e8 57       	subi	r30, 0x78	; 120
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	80 83       	st	Z, r24
    1df4:	e0 c0       	rjmp	.+448    	; 0x1fb6 <LCDBusyLoop+0x4da>
	else if (__tmp > 255)
    1df6:	fe 01       	movw	r30, r28
    1df8:	e7 57       	subi	r30, 0x77	; 119
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	53 e4       	ldi	r21, 0x43	; 67
    1e0c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e10:	18 16       	cp	r1, r24
    1e12:	0c f0       	brlt	.+2      	; 0x1e16 <LCDBusyLoop+0x33a>
    1e14:	c0 c0       	rjmp	.+384    	; 0x1f96 <LCDBusyLoop+0x4ba>
	{
		_delay_ms(__us / 1000.0);
    1e16:	fe 01       	movw	r30, r28
    1e18:	e3 57       	subi	r30, 0x73	; 115
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	60 81       	ld	r22, Z
    1e1e:	71 81       	ldd	r23, Z+1	; 0x01
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	4a e7       	ldi	r20, 0x7A	; 122
    1e2a:	54 e4       	ldi	r21, 0x44	; 68
    1e2c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	fe 01       	movw	r30, r28
    1e36:	ec 57       	subi	r30, 0x7C	; 124
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 83       	st	Z, r24
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	a2 83       	std	Z+2, r26	; 0x02
    1e40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e42:	8e 01       	movw	r16, r28
    1e44:	00 58       	subi	r16, 0x80	; 128
    1e46:	1f 4f       	sbci	r17, 0xFF	; 255
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ec 57       	subi	r30, 0x7C	; 124
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	93 81       	ldd	r25, Z+3	; 0x03
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	4a ef       	ldi	r20, 0xFA	; 250
    1e5c:	54 e4       	ldi	r21, 0x44	; 68
    1e5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	f8 01       	movw	r30, r16
    1e68:	80 83       	st	Z, r24
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	a2 83       	std	Z+2, r26	; 0x02
    1e6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e70:	fe 01       	movw	r30, r28
    1e72:	e0 58       	subi	r30, 0x80	; 128
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	60 81       	ld	r22, Z
    1e78:	71 81       	ldd	r23, Z+1	; 0x01
    1e7a:	82 81       	ldd	r24, Z+2	; 0x02
    1e7c:	93 81       	ldd	r25, Z+3	; 0x03
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e8       	ldi	r20, 0x80	; 128
    1e84:	5f e3       	ldi	r21, 0x3F	; 63
    1e86:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e8a:	88 23       	and	r24, r24
    1e8c:	44 f4       	brge	.+16     	; 0x1e9e <LCDBusyLoop+0x3c2>
		__ticks = 1;
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e2 58       	subi	r30, 0x82	; 130
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	80 83       	st	Z, r24
    1e9c:	64 c0       	rjmp	.+200    	; 0x1f66 <LCDBusyLoop+0x48a>
	else if (__tmp > 65535)
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e0 58       	subi	r30, 0x80	; 128
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	60 81       	ld	r22, Z
    1ea6:	71 81       	ldd	r23, Z+1	; 0x01
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	3f ef       	ldi	r19, 0xFF	; 255
    1eb0:	4f e7       	ldi	r20, 0x7F	; 127
    1eb2:	57 e4       	ldi	r21, 0x47	; 71
    1eb4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1eb8:	18 16       	cp	r1, r24
    1eba:	0c f0       	brlt	.+2      	; 0x1ebe <LCDBusyLoop+0x3e2>
    1ebc:	43 c0       	rjmp	.+134    	; 0x1f44 <LCDBusyLoop+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ec 57       	subi	r30, 0x7C	; 124
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e2       	ldi	r20, 0x20	; 32
    1ed2:	51 e4       	ldi	r21, 0x41	; 65
    1ed4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	8e 01       	movw	r16, r28
    1ede:	02 58       	subi	r16, 0x82	; 130
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	f8 01       	movw	r30, r16
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	80 83       	st	Z, r24
    1ef4:	1f c0       	rjmp	.+62     	; 0x1f34 <LCDBusyLoop+0x458>
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	e4 58       	subi	r30, 0x84	; 132
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	88 ec       	ldi	r24, 0xC8	; 200
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	91 83       	std	Z+1, r25	; 0x01
    1f02:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f04:	fe 01       	movw	r30, r28
    1f06:	e4 58       	subi	r30, 0x84	; 132
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	80 81       	ld	r24, Z
    1f0c:	91 81       	ldd	r25, Z+1	; 0x01
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <LCDBusyLoop+0x432>
    1f12:	fe 01       	movw	r30, r28
    1f14:	e4 58       	subi	r30, 0x84	; 132
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1c:	de 01       	movw	r26, r28
    1f1e:	a2 58       	subi	r26, 0x82	; 130
    1f20:	bf 4f       	sbci	r27, 0xFF	; 255
    1f22:	fe 01       	movw	r30, r28
    1f24:	e2 58       	subi	r30, 0x82	; 130
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	11 96       	adiw	r26, 0x01	; 1
    1f30:	9c 93       	st	X, r25
    1f32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f34:	fe 01       	movw	r30, r28
    1f36:	e2 58       	subi	r30, 0x82	; 130
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	80 81       	ld	r24, Z
    1f3c:	91 81       	ldd	r25, Z+1	; 0x01
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	d1 f6       	brne	.-76     	; 0x1ef6 <LCDBusyLoop+0x41a>
    1f42:	4b c0       	rjmp	.+150    	; 0x1fda <LCDBusyLoop+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f44:	8e 01       	movw	r16, r28
    1f46:	02 58       	subi	r16, 0x82	; 130
    1f48:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e0 58       	subi	r30, 0x80	; 128
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	f8 01       	movw	r30, r16
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
    1f66:	de 01       	movw	r26, r28
    1f68:	a6 58       	subi	r26, 0x86	; 134
    1f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e2 58       	subi	r30, 0x82	; 130
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	11 96       	adiw	r26, 0x01	; 1
    1f78:	9c 93       	st	X, r25
    1f7a:	8e 93       	st	-X, r24
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e6 58       	subi	r30, 0x86	; 134
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 81       	ld	r24, Z
    1f84:	91 81       	ldd	r25, Z+1	; 0x01
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCDBusyLoop+0x4aa>
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e6 58       	subi	r30, 0x86	; 134
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	80 83       	st	Z, r24
    1f94:	22 c0       	rjmp	.+68     	; 0x1fda <LCDBusyLoop+0x4fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f96:	8e 01       	movw	r16, r28
    1f98:	08 57       	subi	r16, 0x78	; 120
    1f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e7 57       	subi	r30, 0x77	; 119
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	60 81       	ld	r22, Z
    1fa4:	71 81       	ldd	r23, Z+1	; 0x01
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	93 81       	ldd	r25, Z+3	; 0x03
    1faa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	80 83       	st	Z, r24
    1fb6:	de 01       	movw	r26, r28
    1fb8:	a7 58       	subi	r26, 0x87	; 135
    1fba:	bf 4f       	sbci	r27, 0xFF	; 255
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e8 57       	subi	r30, 0x78	; 120
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	80 81       	ld	r24, Z
    1fc4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e7 58       	subi	r30, 0x87	; 135
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 81       	ld	r24, Z
    1fce:	8a 95       	dec	r24
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCDBusyLoop+0x4f2>
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e7 58       	subi	r30, 0x87	; 135
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 83       	st	Z, r24

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
    1fda:	e6 e3       	ldi	r30, 0x36	; 54
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	de 01       	movw	r26, r28
    1fe0:	a6 55       	subi	r26, 0x56	; 86
    1fe2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe4:	80 81       	ld	r24, Z
    1fe6:	8c 93       	st	X, r24
		status=status<<4;
    1fe8:	de 01       	movw	r26, r28
    1fea:	a6 55       	subi	r26, 0x56	; 86
    1fec:	bf 4f       	sbci	r27, 0xFF	; 255
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e6 55       	subi	r30, 0x56	; 86
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	82 95       	swap	r24
    1ff8:	80 7f       	andi	r24, 0xF0	; 240
    1ffa:	8c 93       	st	X, r24
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	eb 58       	subi	r30, 0x8B	; 139
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a0 e0       	ldi	r26, 0x00	; 0
    2008:	bf e3       	ldi	r27, 0x3F	; 63
    200a:	80 83       	st	Z, r24
    200c:	91 83       	std	Z+1, r25	; 0x01
    200e:	a2 83       	std	Z+2, r26	; 0x02
    2010:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2012:	8e 01       	movw	r16, r28
    2014:	0f 58       	subi	r16, 0x8F	; 143
    2016:	1f 4f       	sbci	r17, 0xFF	; 255
    2018:	fe 01       	movw	r30, r28
    201a:	eb 58       	subi	r30, 0x8B	; 139
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	2b ea       	ldi	r18, 0xAB	; 171
    2028:	3a ea       	ldi	r19, 0xAA	; 170
    202a:	4a e2       	ldi	r20, 0x2A	; 42
    202c:	50 e4       	ldi	r21, 0x40	; 64
    202e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	f8 01       	movw	r30, r16
    2038:	80 83       	st	Z, r24
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	a2 83       	std	Z+2, r26	; 0x02
    203e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2040:	fe 01       	movw	r30, r28
    2042:	ef 58       	subi	r30, 0x8F	; 143
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e8       	ldi	r20, 0x80	; 128
    2054:	5f e3       	ldi	r21, 0x3F	; 63
    2056:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    205a:	88 23       	and	r24, r24
    205c:	34 f4       	brge	.+12     	; 0x206a <LCDBusyLoop+0x58e>
		__ticks = 1;
    205e:	fe 01       	movw	r30, r28
    2060:	e0 59       	subi	r30, 0x90	; 144
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	80 83       	st	Z, r24
    2068:	e0 c0       	rjmp	.+448    	; 0x222a <LCDBusyLoop+0x74e>
	else if (__tmp > 255)
    206a:	fe 01       	movw	r30, r28
    206c:	ef 58       	subi	r30, 0x8F	; 143
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	4f e7       	ldi	r20, 0x7F	; 127
    207e:	53 e4       	ldi	r21, 0x43	; 67
    2080:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2084:	18 16       	cp	r1, r24
    2086:	0c f0       	brlt	.+2      	; 0x208a <LCDBusyLoop+0x5ae>
    2088:	c0 c0       	rjmp	.+384    	; 0x220a <LCDBusyLoop+0x72e>
	{
		_delay_ms(__us / 1000.0);
    208a:	fe 01       	movw	r30, r28
    208c:	eb 58       	subi	r30, 0x8B	; 139
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	60 81       	ld	r22, Z
    2092:	71 81       	ldd	r23, Z+1	; 0x01
    2094:	82 81       	ldd	r24, Z+2	; 0x02
    2096:	93 81       	ldd	r25, Z+3	; 0x03
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a e7       	ldi	r20, 0x7A	; 122
    209e:	54 e4       	ldi	r21, 0x44	; 68
    20a0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	fe 01       	movw	r30, r28
    20aa:	e4 59       	subi	r30, 0x94	; 148
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	80 83       	st	Z, r24
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	a2 83       	std	Z+2, r26	; 0x02
    20b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b6:	8e 01       	movw	r16, r28
    20b8:	08 59       	subi	r16, 0x98	; 152
    20ba:	1f 4f       	sbci	r17, 0xFF	; 255
    20bc:	fe 01       	movw	r30, r28
    20be:	e4 59       	subi	r30, 0x94	; 148
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	4a ef       	ldi	r20, 0xFA	; 250
    20d0:	54 e4       	ldi	r21, 0x44	; 68
    20d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	f8 01       	movw	r30, r16
    20dc:	80 83       	st	Z, r24
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	a2 83       	std	Z+2, r26	; 0x02
    20e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20e4:	fe 01       	movw	r30, r28
    20e6:	e8 59       	subi	r30, 0x98	; 152
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	60 81       	ld	r22, Z
    20ec:	71 81       	ldd	r23, Z+1	; 0x01
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	93 81       	ldd	r25, Z+3	; 0x03
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	5f e3       	ldi	r21, 0x3F	; 63
    20fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20fe:	88 23       	and	r24, r24
    2100:	44 f4       	brge	.+16     	; 0x2112 <LCDBusyLoop+0x636>
		__ticks = 1;
    2102:	fe 01       	movw	r30, r28
    2104:	ea 59       	subi	r30, 0x9A	; 154
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
    2110:	64 c0       	rjmp	.+200    	; 0x21da <LCDBusyLoop+0x6fe>
	else if (__tmp > 65535)
    2112:	fe 01       	movw	r30, r28
    2114:	e8 59       	subi	r30, 0x98	; 152
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	60 81       	ld	r22, Z
    211a:	71 81       	ldd	r23, Z+1	; 0x01
    211c:	82 81       	ldd	r24, Z+2	; 0x02
    211e:	93 81       	ldd	r25, Z+3	; 0x03
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	3f ef       	ldi	r19, 0xFF	; 255
    2124:	4f e7       	ldi	r20, 0x7F	; 127
    2126:	57 e4       	ldi	r21, 0x47	; 71
    2128:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    212c:	18 16       	cp	r1, r24
    212e:	0c f0       	brlt	.+2      	; 0x2132 <LCDBusyLoop+0x656>
    2130:	43 c0       	rjmp	.+134    	; 0x21b8 <LCDBusyLoop+0x6dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2132:	fe 01       	movw	r30, r28
    2134:	e4 59       	subi	r30, 0x94	; 148
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e2       	ldi	r20, 0x20	; 32
    2146:	51 e4       	ldi	r21, 0x41	; 65
    2148:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8e 01       	movw	r16, r28
    2152:	0a 59       	subi	r16, 0x9A	; 154
    2154:	1f 4f       	sbci	r17, 0xFF	; 255
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	f8 01       	movw	r30, r16
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	80 83       	st	Z, r24
    2168:	1f c0       	rjmp	.+62     	; 0x21a8 <LCDBusyLoop+0x6cc>
    216a:	fe 01       	movw	r30, r28
    216c:	ec 59       	subi	r30, 0x9C	; 156
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	88 ec       	ldi	r24, 0xC8	; 200
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2178:	fe 01       	movw	r30, r28
    217a:	ec 59       	subi	r30, 0x9C	; 156
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCDBusyLoop+0x6a6>
    2186:	fe 01       	movw	r30, r28
    2188:	ec 59       	subi	r30, 0x9C	; 156
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2190:	de 01       	movw	r26, r28
    2192:	aa 59       	subi	r26, 0x9A	; 154
    2194:	bf 4f       	sbci	r27, 0xFF	; 255
    2196:	fe 01       	movw	r30, r28
    2198:	ea 59       	subi	r30, 0x9A	; 154
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	11 96       	adiw	r26, 0x01	; 1
    21a4:	9c 93       	st	X, r25
    21a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a8:	fe 01       	movw	r30, r28
    21aa:	ea 59       	subi	r30, 0x9A	; 154
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 81       	ld	r24, Z
    21b0:	91 81       	ldd	r25, Z+1	; 0x01
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	d1 f6       	brne	.-76     	; 0x216a <LCDBusyLoop+0x68e>
    21b6:	4b c0       	rjmp	.+150    	; 0x224e <LCDBusyLoop+0x772>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b8:	8e 01       	movw	r16, r28
    21ba:	0a 59       	subi	r16, 0x9A	; 154
    21bc:	1f 4f       	sbci	r17, 0xFF	; 255
    21be:	fe 01       	movw	r30, r28
    21c0:	e8 59       	subi	r30, 0x98	; 152
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	60 81       	ld	r22, Z
    21c6:	71 81       	ldd	r23, Z+1	; 0x01
    21c8:	82 81       	ldd	r24, Z+2	; 0x02
    21ca:	93 81       	ldd	r25, Z+3	; 0x03
    21cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	f8 01       	movw	r30, r16
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	80 83       	st	Z, r24
    21da:	de 01       	movw	r26, r28
    21dc:	ae 59       	subi	r26, 0x9E	; 158
    21de:	bf 4f       	sbci	r27, 0xFF	; 255
    21e0:	fe 01       	movw	r30, r28
    21e2:	ea 59       	subi	r30, 0x9A	; 154
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	11 96       	adiw	r26, 0x01	; 1
    21ec:	9c 93       	st	X, r25
    21ee:	8e 93       	st	-X, r24
    21f0:	fe 01       	movw	r30, r28
    21f2:	ee 59       	subi	r30, 0x9E	; 158
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	80 81       	ld	r24, Z
    21f8:	91 81       	ldd	r25, Z+1	; 0x01
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <LCDBusyLoop+0x71e>
    21fe:	fe 01       	movw	r30, r28
    2200:	ee 59       	subi	r30, 0x9E	; 158
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	91 83       	std	Z+1, r25	; 0x01
    2206:	80 83       	st	Z, r24
    2208:	22 c0       	rjmp	.+68     	; 0x224e <LCDBusyLoop+0x772>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    220a:	8e 01       	movw	r16, r28
    220c:	00 59       	subi	r16, 0x90	; 144
    220e:	1f 4f       	sbci	r17, 0xFF	; 255
    2210:	fe 01       	movw	r30, r28
    2212:	ef 58       	subi	r30, 0x8F	; 143
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	60 81       	ld	r22, Z
    2218:	71 81       	ldd	r23, Z+1	; 0x01
    221a:	82 81       	ldd	r24, Z+2	; 0x02
    221c:	93 81       	ldd	r25, Z+3	; 0x03
    221e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	f8 01       	movw	r30, r16
    2228:	80 83       	st	Z, r24
    222a:	de 01       	movw	r26, r28
    222c:	af 59       	subi	r26, 0x9F	; 159
    222e:	bf 4f       	sbci	r27, 0xFF	; 255
    2230:	fe 01       	movw	r30, r28
    2232:	e0 59       	subi	r30, 0x90	; 144
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    223a:	fe 01       	movw	r30, r28
    223c:	ef 59       	subi	r30, 0x9F	; 159
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	80 81       	ld	r24, Z
    2242:	8a 95       	dec	r24
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCDBusyLoop+0x766>
    2246:	fe 01       	movw	r30, r28
    2248:	ef 59       	subi	r30, 0x9F	; 159
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 83       	st	Z, r24

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
    224e:	a8 e3       	ldi	r26, 0x38	; 56
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e8 e3       	ldi	r30, 0x38	; 56
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8f 7e       	andi	r24, 0xEF	; 239
    225a:	8c 93       	st	X, r24
    225c:	fe 01       	movw	r30, r28
    225e:	e3 5a       	subi	r30, 0xA3	; 163
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	a0 e8       	ldi	r26, 0x80	; 128
    2268:	bf e3       	ldi	r27, 0x3F	; 63
    226a:	80 83       	st	Z, r24
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	a2 83       	std	Z+2, r26	; 0x02
    2270:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2272:	8e 01       	movw	r16, r28
    2274:	07 5a       	subi	r16, 0xA7	; 167
    2276:	1f 4f       	sbci	r17, 0xFF	; 255
    2278:	fe 01       	movw	r30, r28
    227a:	e3 5a       	subi	r30, 0xA3	; 163
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	2b ea       	ldi	r18, 0xAB	; 171
    2288:	3a ea       	ldi	r19, 0xAA	; 170
    228a:	4a e2       	ldi	r20, 0x2A	; 42
    228c:	50 e4       	ldi	r21, 0x40	; 64
    228e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	f8 01       	movw	r30, r16
    2298:	80 83       	st	Z, r24
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	a2 83       	std	Z+2, r26	; 0x02
    229e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22a0:	fe 01       	movw	r30, r28
    22a2:	e7 5a       	subi	r30, 0xA7	; 167
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	60 81       	ld	r22, Z
    22a8:	71 81       	ldd	r23, Z+1	; 0x01
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	93 81       	ldd	r25, Z+3	; 0x03
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e8       	ldi	r20, 0x80	; 128
    22b4:	5f e3       	ldi	r21, 0x3F	; 63
    22b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22ba:	88 23       	and	r24, r24
    22bc:	34 f4       	brge	.+12     	; 0x22ca <LCDBusyLoop+0x7ee>
		__ticks = 1;
    22be:	fe 01       	movw	r30, r28
    22c0:	e8 5a       	subi	r30, 0xA8	; 168
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	80 83       	st	Z, r24
    22c8:	e0 c0       	rjmp	.+448    	; 0x248a <LCDBusyLoop+0x9ae>
	else if (__tmp > 255)
    22ca:	fe 01       	movw	r30, r28
    22cc:	e7 5a       	subi	r30, 0xA7	; 167
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	60 81       	ld	r22, Z
    22d2:	71 81       	ldd	r23, Z+1	; 0x01
    22d4:	82 81       	ldd	r24, Z+2	; 0x02
    22d6:	93 81       	ldd	r25, Z+3	; 0x03
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4f e7       	ldi	r20, 0x7F	; 127
    22de:	53 e4       	ldi	r21, 0x43	; 67
    22e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22e4:	18 16       	cp	r1, r24
    22e6:	0c f0       	brlt	.+2      	; 0x22ea <LCDBusyLoop+0x80e>
    22e8:	c0 c0       	rjmp	.+384    	; 0x246a <LCDBusyLoop+0x98e>
	{
		_delay_ms(__us / 1000.0);
    22ea:	fe 01       	movw	r30, r28
    22ec:	e3 5a       	subi	r30, 0xA3	; 163
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	60 81       	ld	r22, Z
    22f2:	71 81       	ldd	r23, Z+1	; 0x01
    22f4:	82 81       	ldd	r24, Z+2	; 0x02
    22f6:	93 81       	ldd	r25, Z+3	; 0x03
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	4a e7       	ldi	r20, 0x7A	; 122
    22fe:	54 e4       	ldi	r21, 0x44	; 68
    2300:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	fe 01       	movw	r30, r28
    230a:	ec 5a       	subi	r30, 0xAC	; 172
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 83       	st	Z, r24
    2310:	91 83       	std	Z+1, r25	; 0x01
    2312:	a2 83       	std	Z+2, r26	; 0x02
    2314:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	8e 01       	movw	r16, r28
    2318:	00 5b       	subi	r16, 0xB0	; 176
    231a:	1f 4f       	sbci	r17, 0xFF	; 255
    231c:	fe 01       	movw	r30, r28
    231e:	ec 5a       	subi	r30, 0xAC	; 172
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	60 81       	ld	r22, Z
    2324:	71 81       	ldd	r23, Z+1	; 0x01
    2326:	82 81       	ldd	r24, Z+2	; 0x02
    2328:	93 81       	ldd	r25, Z+3	; 0x03
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a ef       	ldi	r20, 0xFA	; 250
    2330:	54 e4       	ldi	r21, 0x44	; 68
    2332:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	f8 01       	movw	r30, r16
    233c:	80 83       	st	Z, r24
    233e:	91 83       	std	Z+1, r25	; 0x01
    2340:	a2 83       	std	Z+2, r26	; 0x02
    2342:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2344:	fe 01       	movw	r30, r28
    2346:	e0 5b       	subi	r30, 0xB0	; 176
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	60 81       	ld	r22, Z
    234c:	71 81       	ldd	r23, Z+1	; 0x01
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e8       	ldi	r20, 0x80	; 128
    2358:	5f e3       	ldi	r21, 0x3F	; 63
    235a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    235e:	88 23       	and	r24, r24
    2360:	44 f4       	brge	.+16     	; 0x2372 <LCDBusyLoop+0x896>
		__ticks = 1;
    2362:	fe 01       	movw	r30, r28
    2364:	e2 5b       	subi	r30, 0xB2	; 178
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	80 83       	st	Z, r24
    2370:	64 c0       	rjmp	.+200    	; 0x243a <LCDBusyLoop+0x95e>
	else if (__tmp > 65535)
    2372:	fe 01       	movw	r30, r28
    2374:	e0 5b       	subi	r30, 0xB0	; 176
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	60 81       	ld	r22, Z
    237a:	71 81       	ldd	r23, Z+1	; 0x01
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	3f ef       	ldi	r19, 0xFF	; 255
    2384:	4f e7       	ldi	r20, 0x7F	; 127
    2386:	57 e4       	ldi	r21, 0x47	; 71
    2388:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    238c:	18 16       	cp	r1, r24
    238e:	0c f0       	brlt	.+2      	; 0x2392 <LCDBusyLoop+0x8b6>
    2390:	43 c0       	rjmp	.+134    	; 0x2418 <LCDBusyLoop+0x93c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2392:	fe 01       	movw	r30, r28
    2394:	ec 5a       	subi	r30, 0xAC	; 172
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	60 81       	ld	r22, Z
    239a:	71 81       	ldd	r23, Z+1	; 0x01
    239c:	82 81       	ldd	r24, Z+2	; 0x02
    239e:	93 81       	ldd	r25, Z+3	; 0x03
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e2       	ldi	r20, 0x20	; 32
    23a6:	51 e4       	ldi	r21, 0x41	; 65
    23a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	8e 01       	movw	r16, r28
    23b2:	02 5b       	subi	r16, 0xB2	; 178
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	bc 01       	movw	r22, r24
    23b8:	cd 01       	movw	r24, r26
    23ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	f8 01       	movw	r30, r16
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	80 83       	st	Z, r24
    23c8:	1f c0       	rjmp	.+62     	; 0x2408 <LCDBusyLoop+0x92c>
    23ca:	fe 01       	movw	r30, r28
    23cc:	e4 5b       	subi	r30, 0xB4	; 180
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	88 ec       	ldi	r24, 0xC8	; 200
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	91 83       	std	Z+1, r25	; 0x01
    23d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23d8:	fe 01       	movw	r30, r28
    23da:	e4 5b       	subi	r30, 0xB4	; 180
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	80 81       	ld	r24, Z
    23e0:	91 81       	ldd	r25, Z+1	; 0x01
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCDBusyLoop+0x906>
    23e6:	fe 01       	movw	r30, r28
    23e8:	e4 5b       	subi	r30, 0xB4	; 180
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f0:	de 01       	movw	r26, r28
    23f2:	a2 5b       	subi	r26, 0xB2	; 178
    23f4:	bf 4f       	sbci	r27, 0xFF	; 255
    23f6:	fe 01       	movw	r30, r28
    23f8:	e2 5b       	subi	r30, 0xB2	; 178
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 81       	ld	r24, Z
    23fe:	91 81       	ldd	r25, Z+1	; 0x01
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	11 96       	adiw	r26, 0x01	; 1
    2404:	9c 93       	st	X, r25
    2406:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2408:	fe 01       	movw	r30, r28
    240a:	e2 5b       	subi	r30, 0xB2	; 178
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 81       	ld	r24, Z
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	d1 f6       	brne	.-76     	; 0x23ca <LCDBusyLoop+0x8ee>
    2416:	4b c0       	rjmp	.+150    	; 0x24ae <LCDBusyLoop+0x9d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2418:	8e 01       	movw	r16, r28
    241a:	02 5b       	subi	r16, 0xB2	; 178
    241c:	1f 4f       	sbci	r17, 0xFF	; 255
    241e:	fe 01       	movw	r30, r28
    2420:	e0 5b       	subi	r30, 0xB0	; 176
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	f8 01       	movw	r30, r16
    2436:	91 83       	std	Z+1, r25	; 0x01
    2438:	80 83       	st	Z, r24
    243a:	de 01       	movw	r26, r28
    243c:	a6 5b       	subi	r26, 0xB6	; 182
    243e:	bf 4f       	sbci	r27, 0xFF	; 255
    2440:	fe 01       	movw	r30, r28
    2442:	e2 5b       	subi	r30, 0xB2	; 178
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 81       	ld	r24, Z
    2448:	91 81       	ldd	r25, Z+1	; 0x01
    244a:	11 96       	adiw	r26, 0x01	; 1
    244c:	9c 93       	st	X, r25
    244e:	8e 93       	st	-X, r24
    2450:	fe 01       	movw	r30, r28
    2452:	e6 5b       	subi	r30, 0xB6	; 182
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	80 81       	ld	r24, Z
    2458:	91 81       	ldd	r25, Z+1	; 0x01
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <LCDBusyLoop+0x97e>
    245e:	fe 01       	movw	r30, r28
    2460:	e6 5b       	subi	r30, 0xB6	; 182
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	91 83       	std	Z+1, r25	; 0x01
    2466:	80 83       	st	Z, r24
    2468:	22 c0       	rjmp	.+68     	; 0x24ae <LCDBusyLoop+0x9d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    246a:	8e 01       	movw	r16, r28
    246c:	08 5a       	subi	r16, 0xA8	; 168
    246e:	1f 4f       	sbci	r17, 0xFF	; 255
    2470:	fe 01       	movw	r30, r28
    2472:	e7 5a       	subi	r30, 0xA7	; 167
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	60 81       	ld	r22, Z
    2478:	71 81       	ldd	r23, Z+1	; 0x01
    247a:	82 81       	ldd	r24, Z+2	; 0x02
    247c:	93 81       	ldd	r25, Z+3	; 0x03
    247e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	f8 01       	movw	r30, r16
    2488:	80 83       	st	Z, r24
    248a:	de 01       	movw	r26, r28
    248c:	a7 5b       	subi	r26, 0xB7	; 183
    248e:	bf 4f       	sbci	r27, 0xFF	; 255
    2490:	fe 01       	movw	r30, r28
    2492:	e8 5a       	subi	r30, 0xA8	; 168
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 81       	ld	r24, Z
    2498:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    249a:	fe 01       	movw	r30, r28
    249c:	e7 5b       	subi	r30, 0xB7	; 183
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	8a 95       	dec	r24
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <LCDBusyLoop+0x9c6>
    24a6:	fe 01       	movw	r30, r28
    24a8:	e7 5b       	subi	r30, 0xB7	; 183
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	80 83       	st	Z, r24
		_delay_us(1);	//tEL

		SET_E();
    24ae:	a8 e3       	ldi	r26, 0x38	; 56
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e8 e3       	ldi	r30, 0x38	; 56
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	80 61       	ori	r24, 0x10	; 16
    24ba:	8c 93       	st	X, r24
    24bc:	fe 01       	movw	r30, r28
    24be:	eb 5b       	subi	r30, 0xBB	; 187
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	a0 e0       	ldi	r26, 0x00	; 0
    24c8:	bf e3       	ldi	r27, 0x3F	; 63
    24ca:	80 83       	st	Z, r24
    24cc:	91 83       	std	Z+1, r25	; 0x01
    24ce:	a2 83       	std	Z+2, r26	; 0x02
    24d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24d2:	8e 01       	movw	r16, r28
    24d4:	0f 5b       	subi	r16, 0xBF	; 191
    24d6:	1f 4f       	sbci	r17, 0xFF	; 255
    24d8:	fe 01       	movw	r30, r28
    24da:	eb 5b       	subi	r30, 0xBB	; 187
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	60 81       	ld	r22, Z
    24e0:	71 81       	ldd	r23, Z+1	; 0x01
    24e2:	82 81       	ldd	r24, Z+2	; 0x02
    24e4:	93 81       	ldd	r25, Z+3	; 0x03
    24e6:	2b ea       	ldi	r18, 0xAB	; 171
    24e8:	3a ea       	ldi	r19, 0xAA	; 170
    24ea:	4a e2       	ldi	r20, 0x2A	; 42
    24ec:	50 e4       	ldi	r21, 0x40	; 64
    24ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	f8 01       	movw	r30, r16
    24f8:	80 83       	st	Z, r24
    24fa:	91 83       	std	Z+1, r25	; 0x01
    24fc:	a2 83       	std	Z+2, r26	; 0x02
    24fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2500:	fe 01       	movw	r30, r28
    2502:	ef 5b       	subi	r30, 0xBF	; 191
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	60 81       	ld	r22, Z
    2508:	71 81       	ldd	r23, Z+1	; 0x01
    250a:	82 81       	ldd	r24, Z+2	; 0x02
    250c:	93 81       	ldd	r25, Z+3	; 0x03
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e8       	ldi	r20, 0x80	; 128
    2514:	5f e3       	ldi	r21, 0x3F	; 63
    2516:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    251a:	88 23       	and	r24, r24
    251c:	34 f4       	brge	.+12     	; 0x252a <LCDBusyLoop+0xa4e>
		__ticks = 1;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	fe 01       	movw	r30, r28
    2522:	e0 5c       	subi	r30, 0xC0	; 192
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	80 83       	st	Z, r24
    2528:	9d c0       	rjmp	.+314    	; 0x2664 <LCDBusyLoop+0xb88>
	else if (__tmp > 255)
    252a:	fe 01       	movw	r30, r28
    252c:	ef 5b       	subi	r30, 0xBF	; 191
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	82 81       	ldd	r24, Z+2	; 0x02
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	4f e7       	ldi	r20, 0x7F	; 127
    253e:	53 e4       	ldi	r21, 0x43	; 67
    2540:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2544:	18 16       	cp	r1, r24
    2546:	0c f0       	brlt	.+2      	; 0x254a <LCDBusyLoop+0xa6e>
    2548:	7e c0       	rjmp	.+252    	; 0x2646 <LCDBusyLoop+0xb6a>
	{
		_delay_ms(__us / 1000.0);
    254a:	fe 01       	movw	r30, r28
    254c:	eb 5b       	subi	r30, 0xBB	; 187
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	60 81       	ld	r22, Z
    2552:	71 81       	ldd	r23, Z+1	; 0x01
    2554:	82 81       	ldd	r24, Z+2	; 0x02
    2556:	93 81       	ldd	r25, Z+3	; 0x03
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	4a e7       	ldi	r20, 0x7A	; 122
    255e:	54 e4       	ldi	r21, 0x44	; 68
    2560:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	8c af       	std	Y+60, r24	; 0x3c
    256a:	9d af       	std	Y+61, r25	; 0x3d
    256c:	ae af       	std	Y+62, r26	; 0x3e
    256e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2570:	6c ad       	ldd	r22, Y+60	; 0x3c
    2572:	7d ad       	ldd	r23, Y+61	; 0x3d
    2574:	8e ad       	ldd	r24, Y+62	; 0x3e
    2576:	9f ad       	ldd	r25, Y+63	; 0x3f
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a ef       	ldi	r20, 0xFA	; 250
    257e:	54 e4       	ldi	r21, 0x44	; 68
    2580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	88 af       	std	Y+56, r24	; 0x38
    258a:	99 af       	std	Y+57, r25	; 0x39
    258c:	aa af       	std	Y+58, r26	; 0x3a
    258e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2590:	68 ad       	ldd	r22, Y+56	; 0x38
    2592:	79 ad       	ldd	r23, Y+57	; 0x39
    2594:	8a ad       	ldd	r24, Y+58	; 0x3a
    2596:	9b ad       	ldd	r25, Y+59	; 0x3b
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	2c f4       	brge	.+10     	; 0x25b2 <LCDBusyLoop+0xad6>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9f ab       	std	Y+55, r25	; 0x37
    25ae:	8e ab       	std	Y+54, r24	; 0x36
    25b0:	3f c0       	rjmp	.+126    	; 0x2630 <LCDBusyLoop+0xb54>
	else if (__tmp > 65535)
    25b2:	68 ad       	ldd	r22, Y+56	; 0x38
    25b4:	79 ad       	ldd	r23, Y+57	; 0x39
    25b6:	8a ad       	ldd	r24, Y+58	; 0x3a
    25b8:	9b ad       	ldd	r25, Y+59	; 0x3b
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	3f ef       	ldi	r19, 0xFF	; 255
    25be:	4f e7       	ldi	r20, 0x7F	; 127
    25c0:	57 e4       	ldi	r21, 0x47	; 71
    25c2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25c6:	18 16       	cp	r1, r24
    25c8:	4c f5       	brge	.+82     	; 0x261c <LCDBusyLoop+0xb40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ca:	6c ad       	ldd	r22, Y+60	; 0x3c
    25cc:	7d ad       	ldd	r23, Y+61	; 0x3d
    25ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    25d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e2       	ldi	r20, 0x20	; 32
    25d8:	51 e4       	ldi	r21, 0x41	; 65
    25da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9f ab       	std	Y+55, r25	; 0x37
    25f0:	8e ab       	std	Y+54, r24	; 0x36
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <LCDBusyLoop+0xb36>
    25f4:	88 ec       	ldi	r24, 0xC8	; 200
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9d ab       	std	Y+53, r25	; 0x35
    25fa:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25fc:	8c a9       	ldd	r24, Y+52	; 0x34
    25fe:	9d a9       	ldd	r25, Y+53	; 0x35
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCDBusyLoop+0xb24>
    2604:	9d ab       	std	Y+53, r25	; 0x35
    2606:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2608:	8e a9       	ldd	r24, Y+54	; 0x36
    260a:	9f a9       	ldd	r25, Y+55	; 0x37
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	9f ab       	std	Y+55, r25	; 0x37
    2610:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2612:	8e a9       	ldd	r24, Y+54	; 0x36
    2614:	9f a9       	ldd	r25, Y+55	; 0x37
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	69 f7       	brne	.-38     	; 0x25f4 <LCDBusyLoop+0xb18>
    261a:	2d c0       	rjmp	.+90     	; 0x2676 <LCDBusyLoop+0xb9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261c:	68 ad       	ldd	r22, Y+56	; 0x38
    261e:	79 ad       	ldd	r23, Y+57	; 0x39
    2620:	8a ad       	ldd	r24, Y+58	; 0x3a
    2622:	9b ad       	ldd	r25, Y+59	; 0x3b
    2624:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9f ab       	std	Y+55, r25	; 0x37
    262e:	8e ab       	std	Y+54, r24	; 0x36
    2630:	8e a9       	ldd	r24, Y+54	; 0x36
    2632:	9f a9       	ldd	r25, Y+55	; 0x37
    2634:	9b ab       	std	Y+51, r25	; 0x33
    2636:	8a ab       	std	Y+50, r24	; 0x32
    2638:	8a a9       	ldd	r24, Y+50	; 0x32
    263a:	9b a9       	ldd	r25, Y+51	; 0x33
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCDBusyLoop+0xb60>
    2640:	9b ab       	std	Y+51, r25	; 0x33
    2642:	8a ab       	std	Y+50, r24	; 0x32
    2644:	18 c0       	rjmp	.+48     	; 0x2676 <LCDBusyLoop+0xb9a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2646:	fe 01       	movw	r30, r28
    2648:	ef 5b       	subi	r30, 0xBF	; 191
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	fe 01       	movw	r30, r28
    265e:	e0 5c       	subi	r30, 0xC0	; 192
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 83       	st	Z, r24
    2664:	fe 01       	movw	r30, r28
    2666:	e0 5c       	subi	r30, 0xC0	; 192
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    266e:	89 a9       	ldd	r24, Y+49	; 0x31
    2670:	8a 95       	dec	r24
    2672:	f1 f7       	brne	.-4      	; 0x2670 <LCDBusyLoop+0xb94>
    2674:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
    2676:	e6 e3       	ldi	r30, 0x36	; 54
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	de 01       	movw	r26, r28
    267c:	a7 55       	subi	r26, 0x57	; 87
    267e:	bf 4f       	sbci	r27, 0xFF	; 255
    2680:	80 81       	ld	r24, Z
    2682:	8c 93       	st	X, r24
		temp&=0x0F;
    2684:	de 01       	movw	r26, r28
    2686:	a7 55       	subi	r26, 0x57	; 87
    2688:	bf 4f       	sbci	r27, 0xFF	; 255
    268a:	fe 01       	movw	r30, r28
    268c:	e7 55       	subi	r30, 0x57	; 87
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	80 81       	ld	r24, Z
    2692:	8f 70       	andi	r24, 0x0F	; 15
    2694:	8c 93       	st	X, r24

		status=status|temp;
    2696:	9e 01       	movw	r18, r28
    2698:	26 55       	subi	r18, 0x56	; 86
    269a:	3f 4f       	sbci	r19, 0xFF	; 255
    269c:	fe 01       	movw	r30, r28
    269e:	e6 55       	subi	r30, 0x56	; 86
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	de 01       	movw	r26, r28
    26a4:	a7 55       	subi	r26, 0x57	; 87
    26a6:	bf 4f       	sbci	r27, 0xFF	; 255
    26a8:	90 81       	ld	r25, Z
    26aa:	8c 91       	ld	r24, X
    26ac:	89 2b       	or	r24, r25
    26ae:	f9 01       	movw	r30, r18
    26b0:	80 83       	st	Z, r24

		busy=status & 0b10000000;
    26b2:	de 01       	movw	r26, r28
    26b4:	a5 55       	subi	r26, 0x55	; 85
    26b6:	bf 4f       	sbci	r27, 0xFF	; 255
    26b8:	fe 01       	movw	r30, r28
    26ba:	e6 55       	subi	r30, 0x56	; 86
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	80 78       	andi	r24, 0x80	; 128
    26c2:	8c 93       	st	X, r24
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a0 e0       	ldi	r26, 0x00	; 0
    26ca:	bf e3       	ldi	r27, 0x3F	; 63
    26cc:	8d a7       	std	Y+45, r24	; 0x2d
    26ce:	9e a7       	std	Y+46, r25	; 0x2e
    26d0:	af a7       	std	Y+47, r26	; 0x2f
    26d2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26d4:	6d a5       	ldd	r22, Y+45	; 0x2d
    26d6:	7e a5       	ldd	r23, Y+46	; 0x2e
    26d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26da:	98 a9       	ldd	r25, Y+48	; 0x30
    26dc:	2b ea       	ldi	r18, 0xAB	; 171
    26de:	3a ea       	ldi	r19, 0xAA	; 170
    26e0:	4a e2       	ldi	r20, 0x2A	; 42
    26e2:	50 e4       	ldi	r21, 0x40	; 64
    26e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	89 a7       	std	Y+41, r24	; 0x29
    26ee:	9a a7       	std	Y+42, r25	; 0x2a
    26f0:	ab a7       	std	Y+43, r26	; 0x2b
    26f2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    26f4:	69 a5       	ldd	r22, Y+41	; 0x29
    26f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    26f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    26fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	1c f4       	brge	.+6      	; 0x2712 <LCDBusyLoop+0xc36>
		__ticks = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	88 a7       	std	Y+40, r24	; 0x28
    2710:	91 c0       	rjmp	.+290    	; 0x2834 <LCDBusyLoop+0xd58>
	else if (__tmp > 255)
    2712:	69 a5       	ldd	r22, Y+41	; 0x29
    2714:	7a a5       	ldd	r23, Y+42	; 0x2a
    2716:	8b a5       	ldd	r24, Y+43	; 0x2b
    2718:	9c a5       	ldd	r25, Y+44	; 0x2c
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	4f e7       	ldi	r20, 0x7F	; 127
    2720:	53 e4       	ldi	r21, 0x43	; 67
    2722:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2726:	18 16       	cp	r1, r24
    2728:	0c f0       	brlt	.+2      	; 0x272c <LCDBusyLoop+0xc50>
    272a:	7b c0       	rjmp	.+246    	; 0x2822 <LCDBusyLoop+0xd46>
	{
		_delay_ms(__us / 1000.0);
    272c:	6d a5       	ldd	r22, Y+45	; 0x2d
    272e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2730:	8f a5       	ldd	r24, Y+47	; 0x2f
    2732:	98 a9       	ldd	r25, Y+48	; 0x30
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	4a e7       	ldi	r20, 0x7A	; 122
    273a:	54 e4       	ldi	r21, 0x44	; 68
    273c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	8c a3       	std	Y+36, r24	; 0x24
    2746:	9d a3       	std	Y+37, r25	; 0x25
    2748:	ae a3       	std	Y+38, r26	; 0x26
    274a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274c:	6c a1       	ldd	r22, Y+36	; 0x24
    274e:	7d a1       	ldd	r23, Y+37	; 0x25
    2750:	8e a1       	ldd	r24, Y+38	; 0x26
    2752:	9f a1       	ldd	r25, Y+39	; 0x27
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	4a ef       	ldi	r20, 0xFA	; 250
    275a:	54 e4       	ldi	r21, 0x44	; 68
    275c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	88 a3       	std	Y+32, r24	; 0x20
    2766:	99 a3       	std	Y+33, r25	; 0x21
    2768:	aa a3       	std	Y+34, r26	; 0x22
    276a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    276c:	68 a1       	ldd	r22, Y+32	; 0x20
    276e:	79 a1       	ldd	r23, Y+33	; 0x21
    2770:	8a a1       	ldd	r24, Y+34	; 0x22
    2772:	9b a1       	ldd	r25, Y+35	; 0x23
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e8       	ldi	r20, 0x80	; 128
    277a:	5f e3       	ldi	r21, 0x3F	; 63
    277c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2780:	88 23       	and	r24, r24
    2782:	2c f4       	brge	.+10     	; 0x278e <LCDBusyLoop+0xcb2>
		__ticks = 1;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	9f 8f       	std	Y+31, r25	; 0x1f
    278a:	8e 8f       	std	Y+30, r24	; 0x1e
    278c:	3f c0       	rjmp	.+126    	; 0x280c <LCDBusyLoop+0xd30>
	else if (__tmp > 65535)
    278e:	68 a1       	ldd	r22, Y+32	; 0x20
    2790:	79 a1       	ldd	r23, Y+33	; 0x21
    2792:	8a a1       	ldd	r24, Y+34	; 0x22
    2794:	9b a1       	ldd	r25, Y+35	; 0x23
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	3f ef       	ldi	r19, 0xFF	; 255
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	57 e4       	ldi	r21, 0x47	; 71
    279e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	4c f5       	brge	.+82     	; 0x27f8 <LCDBusyLoop+0xd1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a6:	6c a1       	ldd	r22, Y+36	; 0x24
    27a8:	7d a1       	ldd	r23, Y+37	; 0x25
    27aa:	8e a1       	ldd	r24, Y+38	; 0x26
    27ac:	9f a1       	ldd	r25, Y+39	; 0x27
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e2       	ldi	r20, 0x20	; 32
    27b4:	51 e4       	ldi	r21, 0x41	; 65
    27b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	9f 8f       	std	Y+31, r25	; 0x1f
    27cc:	8e 8f       	std	Y+30, r24	; 0x1e
    27ce:	0f c0       	rjmp	.+30     	; 0x27ee <LCDBusyLoop+0xd12>
    27d0:	88 ec       	ldi	r24, 0xC8	; 200
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9d 8f       	std	Y+29, r25	; 0x1d
    27d6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27da:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <LCDBusyLoop+0xd00>
    27e0:	9d 8f       	std	Y+29, r25	; 0x1d
    27e2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	9f 8f       	std	Y+31, r25	; 0x1f
    27ec:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	69 f7       	brne	.-38     	; 0x27d0 <LCDBusyLoop+0xcf4>
    27f6:	24 c0       	rjmp	.+72     	; 0x2840 <LCDBusyLoop+0xd64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f8:	68 a1       	ldd	r22, Y+32	; 0x20
    27fa:	79 a1       	ldd	r23, Y+33	; 0x21
    27fc:	8a a1       	ldd	r24, Y+34	; 0x22
    27fe:	9b a1       	ldd	r25, Y+35	; 0x23
    2800:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	9f 8f       	std	Y+31, r25	; 0x1f
    280a:	8e 8f       	std	Y+30, r24	; 0x1e
    280c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    280e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2810:	9b 8f       	std	Y+27, r25	; 0x1b
    2812:	8a 8f       	std	Y+26, r24	; 0x1a
    2814:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2816:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <LCDBusyLoop+0xd3c>
    281c:	9b 8f       	std	Y+27, r25	; 0x1b
    281e:	8a 8f       	std	Y+26, r24	; 0x1a
    2820:	0f c0       	rjmp	.+30     	; 0x2840 <LCDBusyLoop+0xd64>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2822:	69 a5       	ldd	r22, Y+41	; 0x29
    2824:	7a a5       	ldd	r23, Y+42	; 0x2a
    2826:	8b a5       	ldd	r24, Y+43	; 0x2b
    2828:	9c a5       	ldd	r25, Y+44	; 0x2c
    282a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	88 a7       	std	Y+40, r24	; 0x28
    2834:	88 a5       	ldd	r24, Y+40	; 0x28
    2836:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2838:	89 8d       	ldd	r24, Y+25	; 0x19
    283a:	8a 95       	dec	r24
    283c:	f1 f7       	brne	.-4      	; 0x283a <LCDBusyLoop+0xd5e>
    283e:	89 8f       	std	Y+25, r24	; 0x19

		_delay_us(0.5);
		CLEAR_E();
    2840:	a8 e3       	ldi	r26, 0x38	; 56
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e8 e3       	ldi	r30, 0x38	; 56
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	8f 7e       	andi	r24, 0xEF	; 239
    284c:	8c 93       	st	X, r24
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	a0 e8       	ldi	r26, 0x80	; 128
    2854:	bf e3       	ldi	r27, 0x3F	; 63
    2856:	8d 8b       	std	Y+21, r24	; 0x15
    2858:	9e 8b       	std	Y+22, r25	; 0x16
    285a:	af 8b       	std	Y+23, r26	; 0x17
    285c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    285e:	6d 89       	ldd	r22, Y+21	; 0x15
    2860:	7e 89       	ldd	r23, Y+22	; 0x16
    2862:	8f 89       	ldd	r24, Y+23	; 0x17
    2864:	98 8d       	ldd	r25, Y+24	; 0x18
    2866:	2b ea       	ldi	r18, 0xAB	; 171
    2868:	3a ea       	ldi	r19, 0xAA	; 170
    286a:	4a e2       	ldi	r20, 0x2A	; 42
    286c:	50 e4       	ldi	r21, 0x40	; 64
    286e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	89 8b       	std	Y+17, r24	; 0x11
    2878:	9a 8b       	std	Y+18, r25	; 0x12
    287a:	ab 8b       	std	Y+19, r26	; 0x13
    287c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    287e:	69 89       	ldd	r22, Y+17	; 0x11
    2880:	7a 89       	ldd	r23, Y+18	; 0x12
    2882:	8b 89       	ldd	r24, Y+19	; 0x13
    2884:	9c 89       	ldd	r25, Y+20	; 0x14
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e8       	ldi	r20, 0x80	; 128
    288c:	5f e3       	ldi	r21, 0x3F	; 63
    288e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2892:	88 23       	and	r24, r24
    2894:	1c f4       	brge	.+6      	; 0x289c <LCDBusyLoop+0xdc0>
		__ticks = 1;
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	88 8b       	std	Y+16, r24	; 0x10
    289a:	91 c0       	rjmp	.+290    	; 0x29be <LCDBusyLoop+0xee2>
	else if (__tmp > 255)
    289c:	69 89       	ldd	r22, Y+17	; 0x11
    289e:	7a 89       	ldd	r23, Y+18	; 0x12
    28a0:	8b 89       	ldd	r24, Y+19	; 0x13
    28a2:	9c 89       	ldd	r25, Y+20	; 0x14
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	4f e7       	ldi	r20, 0x7F	; 127
    28aa:	53 e4       	ldi	r21, 0x43	; 67
    28ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28b0:	18 16       	cp	r1, r24
    28b2:	0c f0       	brlt	.+2      	; 0x28b6 <LCDBusyLoop+0xdda>
    28b4:	7b c0       	rjmp	.+246    	; 0x29ac <LCDBusyLoop+0xed0>
	{
		_delay_ms(__us / 1000.0);
    28b6:	6d 89       	ldd	r22, Y+21	; 0x15
    28b8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ba:	8f 89       	ldd	r24, Y+23	; 0x17
    28bc:	98 8d       	ldd	r25, Y+24	; 0x18
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	4a e7       	ldi	r20, 0x7A	; 122
    28c4:	54 e4       	ldi	r21, 0x44	; 68
    28c6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	8c 87       	std	Y+12, r24	; 0x0c
    28d0:	9d 87       	std	Y+13, r25	; 0x0d
    28d2:	ae 87       	std	Y+14, r26	; 0x0e
    28d4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    28d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    28da:	8e 85       	ldd	r24, Y+14	; 0x0e
    28dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	4a ef       	ldi	r20, 0xFA	; 250
    28e4:	54 e4       	ldi	r21, 0x44	; 68
    28e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	88 87       	std	Y+8, r24	; 0x08
    28f0:	99 87       	std	Y+9, r25	; 0x09
    28f2:	aa 87       	std	Y+10, r26	; 0x0a
    28f4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28f6:	68 85       	ldd	r22, Y+8	; 0x08
    28f8:	79 85       	ldd	r23, Y+9	; 0x09
    28fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    28fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e8       	ldi	r20, 0x80	; 128
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    290a:	88 23       	and	r24, r24
    290c:	2c f4       	brge	.+10     	; 0x2918 <LCDBusyLoop+0xe3c>
		__ticks = 1;
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9f 83       	std	Y+7, r25	; 0x07
    2914:	8e 83       	std	Y+6, r24	; 0x06
    2916:	3f c0       	rjmp	.+126    	; 0x2996 <LCDBusyLoop+0xeba>
	else if (__tmp > 65535)
    2918:	68 85       	ldd	r22, Y+8	; 0x08
    291a:	79 85       	ldd	r23, Y+9	; 0x09
    291c:	8a 85       	ldd	r24, Y+10	; 0x0a
    291e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	3f ef       	ldi	r19, 0xFF	; 255
    2924:	4f e7       	ldi	r20, 0x7F	; 127
    2926:	57 e4       	ldi	r21, 0x47	; 71
    2928:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    292c:	18 16       	cp	r1, r24
    292e:	4c f5       	brge	.+82     	; 0x2982 <LCDBusyLoop+0xea6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2930:	6c 85       	ldd	r22, Y+12	; 0x0c
    2932:	7d 85       	ldd	r23, Y+13	; 0x0d
    2934:	8e 85       	ldd	r24, Y+14	; 0x0e
    2936:	9f 85       	ldd	r25, Y+15	; 0x0f
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e2       	ldi	r20, 0x20	; 32
    293e:	51 e4       	ldi	r21, 0x41	; 65
    2940:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9f 83       	std	Y+7, r25	; 0x07
    2956:	8e 83       	std	Y+6, r24	; 0x06
    2958:	0f c0       	rjmp	.+30     	; 0x2978 <LCDBusyLoop+0xe9c>
    295a:	88 ec       	ldi	r24, 0xC8	; 200
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	9d 83       	std	Y+5, r25	; 0x05
    2960:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2962:	8c 81       	ldd	r24, Y+4	; 0x04
    2964:	9d 81       	ldd	r25, Y+5	; 0x05
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <LCDBusyLoop+0xe8a>
    296a:	9d 83       	std	Y+5, r25	; 0x05
    296c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296e:	8e 81       	ldd	r24, Y+6	; 0x06
    2970:	9f 81       	ldd	r25, Y+7	; 0x07
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	9f 83       	std	Y+7, r25	; 0x07
    2976:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2978:	8e 81       	ldd	r24, Y+6	; 0x06
    297a:	9f 81       	ldd	r25, Y+7	; 0x07
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	69 f7       	brne	.-38     	; 0x295a <LCDBusyLoop+0xe7e>
    2980:	24 c0       	rjmp	.+72     	; 0x29ca <LCDBusyLoop+0xeee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2982:	68 85       	ldd	r22, Y+8	; 0x08
    2984:	79 85       	ldd	r23, Y+9	; 0x09
    2986:	8a 85       	ldd	r24, Y+10	; 0x0a
    2988:	9b 85       	ldd	r25, Y+11	; 0x0b
    298a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9f 83       	std	Y+7, r25	; 0x07
    2994:	8e 83       	std	Y+6, r24	; 0x06
    2996:	8e 81       	ldd	r24, Y+6	; 0x06
    2998:	9f 81       	ldd	r25, Y+7	; 0x07
    299a:	9b 83       	std	Y+3, r25	; 0x03
    299c:	8a 83       	std	Y+2, r24	; 0x02
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	9b 81       	ldd	r25, Y+3	; 0x03
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <LCDBusyLoop+0xec6>
    29a6:	9b 83       	std	Y+3, r25	; 0x03
    29a8:	8a 83       	std	Y+2, r24	; 0x02
    29aa:	0f c0       	rjmp	.+30     	; 0x29ca <LCDBusyLoop+0xeee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29ac:	69 89       	ldd	r22, Y+17	; 0x11
    29ae:	7a 89       	ldd	r23, Y+18	; 0x12
    29b0:	8b 89       	ldd	r24, Y+19	; 0x13
    29b2:	9c 89       	ldd	r25, Y+20	; 0x14
    29b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	88 8b       	std	Y+16, r24	; 0x10
    29be:	88 89       	ldd	r24, Y+16	; 0x10
    29c0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	8a 95       	dec	r24
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <LCDBusyLoop+0xee8>
    29c8:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);	//tEL
	}while(busy);
    29ca:	fe 01       	movw	r30, r28
    29cc:	e5 55       	subi	r30, 0x55	; 85
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	80 81       	ld	r24, Z
    29d2:	88 23       	and	r24, r24
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <LCDBusyLoop+0xefc>
    29d6:	d1 c9       	rjmp	.-3166   	; 0x1d7a <LCDBusyLoop+0x29e>

	CLEAR_RW();		//write mode
    29d8:	a5 e3       	ldi	r26, 0x35	; 53
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e5 e3       	ldi	r30, 0x35	; 53
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	8f 7b       	andi	r24, 0xBF	; 191
    29e4:	8c 93       	st	X, r24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
    29e6:	a7 e3       	ldi	r26, 0x37	; 55
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	e7 e3       	ldi	r30, 0x37	; 55
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	8f 60       	ori	r24, 0x0F	; 15
    29f2:	8c 93       	st	X, r24

}
    29f4:	c5 55       	subi	r28, 0x55	; 85
    29f6:	df 4f       	sbci	r29, 0xFF	; 255
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	1f 91       	pop	r17
    2a08:	0f 91       	pop	r16
    2a0a:	08 95       	ret

00002a0c <LCDInit>:

void LCDInit(uint8_t style)
{
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	c7 55       	subi	r28, 0x57	; 87
    2a1a:	d0 40       	sbci	r29, 0x00	; 0
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	fe 01       	movw	r30, r28
    2a28:	e9 5a       	subi	r30, 0xA9	; 169
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 83       	st	Z, r24
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ed 5a       	subi	r30, 0xAD	; 173
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	a0 ef       	ldi	r26, 0xF0	; 240
    2a3a:	b1 e4       	ldi	r27, 0x41	; 65
    2a3c:	80 83       	st	Z, r24
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	a2 83       	std	Z+2, r26	; 0x02
    2a42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a44:	8e 01       	movw	r16, r28
    2a46:	01 5b       	subi	r16, 0xB1	; 177
    2a48:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ed 5a       	subi	r30, 0xAD	; 173
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	60 81       	ld	r22, Z
    2a52:	71 81       	ldd	r23, Z+1	; 0x01
    2a54:	82 81       	ldd	r24, Z+2	; 0x02
    2a56:	93 81       	ldd	r25, Z+3	; 0x03
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	4a ef       	ldi	r20, 0xFA	; 250
    2a5e:	54 e4       	ldi	r21, 0x44	; 68
    2a60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	f8 01       	movw	r30, r16
    2a6a:	80 83       	st	Z, r24
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	a2 83       	std	Z+2, r26	; 0x02
    2a70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a72:	fe 01       	movw	r30, r28
    2a74:	e1 5b       	subi	r30, 0xB1	; 177
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	60 81       	ld	r22, Z
    2a7a:	71 81       	ldd	r23, Z+1	; 0x01
    2a7c:	82 81       	ldd	r24, Z+2	; 0x02
    2a7e:	93 81       	ldd	r25, Z+3	; 0x03
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e8       	ldi	r20, 0x80	; 128
    2a86:	5f e3       	ldi	r21, 0x3F	; 63
    2a88:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a8c:	88 23       	and	r24, r24
    2a8e:	44 f4       	brge	.+16     	; 0x2aa0 <LCDInit+0x94>
		__ticks = 1;
    2a90:	fe 01       	movw	r30, r28
    2a92:	e3 5b       	subi	r30, 0xB3	; 179
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	80 83       	st	Z, r24
    2a9e:	64 c0       	rjmp	.+200    	; 0x2b68 <LCDInit+0x15c>
	else if (__tmp > 65535)
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e1 5b       	subi	r30, 0xB1	; 177
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	3f ef       	ldi	r19, 0xFF	; 255
    2ab2:	4f e7       	ldi	r20, 0x7F	; 127
    2ab4:	57 e4       	ldi	r21, 0x47	; 71
    2ab6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2aba:	18 16       	cp	r1, r24
    2abc:	0c f0       	brlt	.+2      	; 0x2ac0 <LCDInit+0xb4>
    2abe:	43 c0       	rjmp	.+134    	; 0x2b46 <LCDInit+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	ed 5a       	subi	r30, 0xAD	; 173
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	60 81       	ld	r22, Z
    2ac8:	71 81       	ldd	r23, Z+1	; 0x01
    2aca:	82 81       	ldd	r24, Z+2	; 0x02
    2acc:	93 81       	ldd	r25, Z+3	; 0x03
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e2       	ldi	r20, 0x20	; 32
    2ad4:	51 e4       	ldi	r21, 0x41	; 65
    2ad6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	8e 01       	movw	r16, r28
    2ae0:	03 5b       	subi	r16, 0xB3	; 179
    2ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae4:	bc 01       	movw	r22, r24
    2ae6:	cd 01       	movw	r24, r26
    2ae8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	f8 01       	movw	r30, r16
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	80 83       	st	Z, r24
    2af6:	1f c0       	rjmp	.+62     	; 0x2b36 <LCDInit+0x12a>
    2af8:	fe 01       	movw	r30, r28
    2afa:	e5 5b       	subi	r30, 0xB5	; 181
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	88 ec       	ldi	r24, 0xC8	; 200
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	91 83       	std	Z+1, r25	; 0x01
    2b04:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b06:	fe 01       	movw	r30, r28
    2b08:	e5 5b       	subi	r30, 0xB5	; 181
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	80 81       	ld	r24, Z
    2b0e:	91 81       	ldd	r25, Z+1	; 0x01
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <LCDInit+0x104>
    2b14:	fe 01       	movw	r30, r28
    2b16:	e5 5b       	subi	r30, 0xB5	; 181
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1e:	de 01       	movw	r26, r28
    2b20:	a3 5b       	subi	r26, 0xB3	; 179
    2b22:	bf 4f       	sbci	r27, 0xFF	; 255
    2b24:	fe 01       	movw	r30, r28
    2b26:	e3 5b       	subi	r30, 0xB3	; 179
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	11 96       	adiw	r26, 0x01	; 1
    2b32:	9c 93       	st	X, r25
    2b34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b36:	fe 01       	movw	r30, r28
    2b38:	e3 5b       	subi	r30, 0xB3	; 179
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	80 81       	ld	r24, Z
    2b3e:	91 81       	ldd	r25, Z+1	; 0x01
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	d1 f6       	brne	.-76     	; 0x2af8 <LCDInit+0xec>
    2b44:	27 c0       	rjmp	.+78     	; 0x2b94 <LCDInit+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b46:	8e 01       	movw	r16, r28
    2b48:	03 5b       	subi	r16, 0xB3	; 179
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e1 5b       	subi	r30, 0xB1	; 177
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	f8 01       	movw	r30, r16
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	80 83       	st	Z, r24
    2b68:	de 01       	movw	r26, r28
    2b6a:	a7 5b       	subi	r26, 0xB7	; 183
    2b6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e3 5b       	subi	r30, 0xB3	; 179
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
    2b78:	8d 93       	st	X+, r24
    2b7a:	9c 93       	st	X, r25
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e7 5b       	subi	r30, 0xB7	; 183
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <LCDInit+0x17a>
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e7 5b       	subi	r30, 0xB7	; 183
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
    2b94:	a7 e3       	ldi	r26, 0x37	; 55
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e7 e3       	ldi	r30, 0x37	; 55
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8f 60       	ori	r24, 0x0F	; 15
    2ba0:	8c 93       	st	X, r24
	LCD_E_DDR|=(1<<LCD_E_POS);
    2ba2:	a7 e3       	ldi	r26, 0x37	; 55
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e7 e3       	ldi	r30, 0x37	; 55
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	80 61       	ori	r24, 0x10	; 16
    2bae:	8c 93       	st	X, r24
	LCD_RS_DDR|=(1<<LCD_RS_POS);
    2bb0:	a4 e3       	ldi	r26, 0x34	; 52
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	e4 e3       	ldi	r30, 0x34	; 52
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	80 68       	ori	r24, 0x80	; 128
    2bbc:	8c 93       	st	X, r24
	LCD_RW_DDR|=(1<<LCD_RW_POS);
    2bbe:	a4 e3       	ldi	r26, 0x34	; 52
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e4 e3       	ldi	r30, 0x34	; 52
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	80 64       	ori	r24, 0x40	; 64
    2bca:	8c 93       	st	X, r24

	LCD_DATA_PORT&=0XF0;
    2bcc:	a8 e3       	ldi	r26, 0x38	; 56
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	e8 e3       	ldi	r30, 0x38	; 56
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	80 7f       	andi	r24, 0xF0	; 240
    2bd8:	8c 93       	st	X, r24
	CLEAR_E();
    2bda:	a8 e3       	ldi	r26, 0x38	; 56
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e8 e3       	ldi	r30, 0x38	; 56
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	8f 7e       	andi	r24, 0xEF	; 239
    2be6:	8c 93       	st	X, r24
	CLEAR_RW();
    2be8:	a5 e3       	ldi	r26, 0x35	; 53
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	e5 e3       	ldi	r30, 0x35	; 53
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	8f 7b       	andi	r24, 0xBF	; 191
    2bf4:	8c 93       	st	X, r24
	CLEAR_RS();
    2bf6:	a5 e3       	ldi	r26, 0x35	; 53
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e5 e3       	ldi	r30, 0x35	; 53
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	8f 77       	andi	r24, 0x7F	; 127
    2c02:	8c 93       	st	X, r24
    2c04:	fe 01       	movw	r30, r28
    2c06:	eb 5b       	subi	r30, 0xBB	; 187
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	8a e9       	ldi	r24, 0x9A	; 154
    2c0c:	99 e9       	ldi	r25, 0x99	; 153
    2c0e:	a9 e9       	ldi	r26, 0x99	; 153
    2c10:	be e3       	ldi	r27, 0x3E	; 62
    2c12:	80 83       	st	Z, r24
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	a2 83       	std	Z+2, r26	; 0x02
    2c18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c1a:	8e 01       	movw	r16, r28
    2c1c:	0f 5b       	subi	r16, 0xBF	; 191
    2c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c20:	fe 01       	movw	r30, r28
    2c22:	eb 5b       	subi	r30, 0xBB	; 187
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	60 81       	ld	r22, Z
    2c28:	71 81       	ldd	r23, Z+1	; 0x01
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	93 81       	ldd	r25, Z+3	; 0x03
    2c2e:	2b ea       	ldi	r18, 0xAB	; 171
    2c30:	3a ea       	ldi	r19, 0xAA	; 170
    2c32:	4a e2       	ldi	r20, 0x2A	; 42
    2c34:	50 e4       	ldi	r21, 0x40	; 64
    2c36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	f8 01       	movw	r30, r16
    2c40:	80 83       	st	Z, r24
    2c42:	91 83       	std	Z+1, r25	; 0x01
    2c44:	a2 83       	std	Z+2, r26	; 0x02
    2c46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c48:	fe 01       	movw	r30, r28
    2c4a:	ef 5b       	subi	r30, 0xBF	; 191
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	60 81       	ld	r22, Z
    2c50:	71 81       	ldd	r23, Z+1	; 0x01
    2c52:	82 81       	ldd	r24, Z+2	; 0x02
    2c54:	93 81       	ldd	r25, Z+3	; 0x03
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e8       	ldi	r20, 0x80	; 128
    2c5c:	5f e3       	ldi	r21, 0x3F	; 63
    2c5e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c62:	88 23       	and	r24, r24
    2c64:	34 f4       	brge	.+12     	; 0x2c72 <LCDInit+0x266>
		__ticks = 1;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e0 5c       	subi	r30, 0xC0	; 192
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	80 83       	st	Z, r24
    2c70:	9d c0       	rjmp	.+314    	; 0x2dac <LCDInit+0x3a0>
	else if (__tmp > 255)
    2c72:	fe 01       	movw	r30, r28
    2c74:	ef 5b       	subi	r30, 0xBF	; 191
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	60 81       	ld	r22, Z
    2c7a:	71 81       	ldd	r23, Z+1	; 0x01
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	4f e7       	ldi	r20, 0x7F	; 127
    2c86:	53 e4       	ldi	r21, 0x43	; 67
    2c88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c8c:	18 16       	cp	r1, r24
    2c8e:	0c f0       	brlt	.+2      	; 0x2c92 <LCDInit+0x286>
    2c90:	7e c0       	rjmp	.+252    	; 0x2d8e <LCDInit+0x382>
	{
		_delay_ms(__us / 1000.0);
    2c92:	fe 01       	movw	r30, r28
    2c94:	eb 5b       	subi	r30, 0xBB	; 187
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	60 81       	ld	r22, Z
    2c9a:	71 81       	ldd	r23, Z+1	; 0x01
    2c9c:	82 81       	ldd	r24, Z+2	; 0x02
    2c9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	4a e7       	ldi	r20, 0x7A	; 122
    2ca6:	54 e4       	ldi	r21, 0x44	; 68
    2ca8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	8c af       	std	Y+60, r24	; 0x3c
    2cb2:	9d af       	std	Y+61, r25	; 0x3d
    2cb4:	ae af       	std	Y+62, r26	; 0x3e
    2cb6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb8:	6c ad       	ldd	r22, Y+60	; 0x3c
    2cba:	7d ad       	ldd	r23, Y+61	; 0x3d
    2cbc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4a ef       	ldi	r20, 0xFA	; 250
    2cc6:	54 e4       	ldi	r21, 0x44	; 68
    2cc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	88 af       	std	Y+56, r24	; 0x38
    2cd2:	99 af       	std	Y+57, r25	; 0x39
    2cd4:	aa af       	std	Y+58, r26	; 0x3a
    2cd6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2cd8:	68 ad       	ldd	r22, Y+56	; 0x38
    2cda:	79 ad       	ldd	r23, Y+57	; 0x39
    2cdc:	8a ad       	ldd	r24, Y+58	; 0x3a
    2cde:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	2c f4       	brge	.+10     	; 0x2cfa <LCDInit+0x2ee>
		__ticks = 1;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	9f ab       	std	Y+55, r25	; 0x37
    2cf6:	8e ab       	std	Y+54, r24	; 0x36
    2cf8:	3f c0       	rjmp	.+126    	; 0x2d78 <LCDInit+0x36c>
	else if (__tmp > 65535)
    2cfa:	68 ad       	ldd	r22, Y+56	; 0x38
    2cfc:	79 ad       	ldd	r23, Y+57	; 0x39
    2cfe:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d00:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	3f ef       	ldi	r19, 0xFF	; 255
    2d06:	4f e7       	ldi	r20, 0x7F	; 127
    2d08:	57 e4       	ldi	r21, 0x47	; 71
    2d0a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d0e:	18 16       	cp	r1, r24
    2d10:	4c f5       	brge	.+82     	; 0x2d64 <LCDInit+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d12:	6c ad       	ldd	r22, Y+60	; 0x3c
    2d14:	7d ad       	ldd	r23, Y+61	; 0x3d
    2d16:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d18:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e2       	ldi	r20, 0x20	; 32
    2d20:	51 e4       	ldi	r21, 0x41	; 65
    2d22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9f ab       	std	Y+55, r25	; 0x37
    2d38:	8e ab       	std	Y+54, r24	; 0x36
    2d3a:	0f c0       	rjmp	.+30     	; 0x2d5a <LCDInit+0x34e>
    2d3c:	88 ec       	ldi	r24, 0xC8	; 200
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9d ab       	std	Y+53, r25	; 0x35
    2d42:	8c ab       	std	Y+52, r24	; 0x34
    2d44:	8c a9       	ldd	r24, Y+52	; 0x34
    2d46:	9d a9       	ldd	r25, Y+53	; 0x35
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	f1 f7       	brne	.-4      	; 0x2d48 <LCDInit+0x33c>
    2d4c:	9d ab       	std	Y+53, r25	; 0x35
    2d4e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d50:	8e a9       	ldd	r24, Y+54	; 0x36
    2d52:	9f a9       	ldd	r25, Y+55	; 0x37
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	9f ab       	std	Y+55, r25	; 0x37
    2d58:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5a:	8e a9       	ldd	r24, Y+54	; 0x36
    2d5c:	9f a9       	ldd	r25, Y+55	; 0x37
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	69 f7       	brne	.-38     	; 0x2d3c <LCDInit+0x330>
    2d62:	2d c0       	rjmp	.+90     	; 0x2dbe <LCDInit+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d64:	68 ad       	ldd	r22, Y+56	; 0x38
    2d66:	79 ad       	ldd	r23, Y+57	; 0x39
    2d68:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d6a:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	9f ab       	std	Y+55, r25	; 0x37
    2d76:	8e ab       	std	Y+54, r24	; 0x36
    2d78:	8e a9       	ldd	r24, Y+54	; 0x36
    2d7a:	9f a9       	ldd	r25, Y+55	; 0x37
    2d7c:	9b ab       	std	Y+51, r25	; 0x33
    2d7e:	8a ab       	std	Y+50, r24	; 0x32
    2d80:	8a a9       	ldd	r24, Y+50	; 0x32
    2d82:	9b a9       	ldd	r25, Y+51	; 0x33
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <LCDInit+0x378>
    2d88:	9b ab       	std	Y+51, r25	; 0x33
    2d8a:	8a ab       	std	Y+50, r24	; 0x32
    2d8c:	18 c0       	rjmp	.+48     	; 0x2dbe <LCDInit+0x3b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d8e:	fe 01       	movw	r30, r28
    2d90:	ef 5b       	subi	r30, 0xBF	; 191
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	60 81       	ld	r22, Z
    2d96:	71 81       	ldd	r23, Z+1	; 0x01
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	93 81       	ldd	r25, Z+3	; 0x03
    2d9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	fe 01       	movw	r30, r28
    2da6:	e0 5c       	subi	r30, 0xC0	; 192
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	80 83       	st	Z, r24
    2dac:	fe 01       	movw	r30, r28
    2dae:	e0 5c       	subi	r30, 0xC0	; 192
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 81       	ld	r24, Z
    2db4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2db6:	89 a9       	ldd	r24, Y+49	; 0x31
    2db8:	8a 95       	dec	r24
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <LCDInit+0x3ac>
    2dbc:	89 ab       	std	Y+49, r24	; 0x31

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
    2dbe:	a8 e3       	ldi	r26, 0x38	; 56
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e8 e3       	ldi	r30, 0x38	; 56
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	80 61       	ori	r24, 0x10	; 16
    2dca:	8c 93       	st	X, r24
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
    2dcc:	a8 e3       	ldi	r26, 0x38	; 56
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e8 e3       	ldi	r30, 0x38	; 56
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	82 60       	ori	r24, 0x02	; 2
    2dd8:	8c 93       	st	X, r24
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	a0 e8       	ldi	r26, 0x80	; 128
    2de0:	bf e3       	ldi	r27, 0x3F	; 63
    2de2:	8d a7       	std	Y+45, r24	; 0x2d
    2de4:	9e a7       	std	Y+46, r25	; 0x2e
    2de6:	af a7       	std	Y+47, r26	; 0x2f
    2de8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2dea:	6d a5       	ldd	r22, Y+45	; 0x2d
    2dec:	7e a5       	ldd	r23, Y+46	; 0x2e
    2dee:	8f a5       	ldd	r24, Y+47	; 0x2f
    2df0:	98 a9       	ldd	r25, Y+48	; 0x30
    2df2:	2b ea       	ldi	r18, 0xAB	; 171
    2df4:	3a ea       	ldi	r19, 0xAA	; 170
    2df6:	4a e2       	ldi	r20, 0x2A	; 42
    2df8:	50 e4       	ldi	r21, 0x40	; 64
    2dfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	89 a7       	std	Y+41, r24	; 0x29
    2e04:	9a a7       	std	Y+42, r25	; 0x2a
    2e06:	ab a7       	std	Y+43, r26	; 0x2b
    2e08:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2e0a:	69 a5       	ldd	r22, Y+41	; 0x29
    2e0c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e10:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e8       	ldi	r20, 0x80	; 128
    2e18:	5f e3       	ldi	r21, 0x3F	; 63
    2e1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e1e:	88 23       	and	r24, r24
    2e20:	1c f4       	brge	.+6      	; 0x2e28 <LCDInit+0x41c>
		__ticks = 1;
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	88 a7       	std	Y+40, r24	; 0x28
    2e26:	91 c0       	rjmp	.+290    	; 0x2f4a <LCDInit+0x53e>
	else if (__tmp > 255)
    2e28:	69 a5       	ldd	r22, Y+41	; 0x29
    2e2a:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	4f e7       	ldi	r20, 0x7F	; 127
    2e36:	53 e4       	ldi	r21, 0x43	; 67
    2e38:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e3c:	18 16       	cp	r1, r24
    2e3e:	0c f0       	brlt	.+2      	; 0x2e42 <LCDInit+0x436>
    2e40:	7b c0       	rjmp	.+246    	; 0x2f38 <LCDInit+0x52c>
	{
		_delay_ms(__us / 1000.0);
    2e42:	6d a5       	ldd	r22, Y+45	; 0x2d
    2e44:	7e a5       	ldd	r23, Y+46	; 0x2e
    2e46:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e48:	98 a9       	ldd	r25, Y+48	; 0x30
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	4a e7       	ldi	r20, 0x7A	; 122
    2e50:	54 e4       	ldi	r21, 0x44	; 68
    2e52:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	8c a3       	std	Y+36, r24	; 0x24
    2e5c:	9d a3       	std	Y+37, r25	; 0x25
    2e5e:	ae a3       	std	Y+38, r26	; 0x26
    2e60:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e62:	6c a1       	ldd	r22, Y+36	; 0x24
    2e64:	7d a1       	ldd	r23, Y+37	; 0x25
    2e66:	8e a1       	ldd	r24, Y+38	; 0x26
    2e68:	9f a1       	ldd	r25, Y+39	; 0x27
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	4a ef       	ldi	r20, 0xFA	; 250
    2e70:	54 e4       	ldi	r21, 0x44	; 68
    2e72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	88 a3       	std	Y+32, r24	; 0x20
    2e7c:	99 a3       	std	Y+33, r25	; 0x21
    2e7e:	aa a3       	std	Y+34, r26	; 0x22
    2e80:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2e82:	68 a1       	ldd	r22, Y+32	; 0x20
    2e84:	79 a1       	ldd	r23, Y+33	; 0x21
    2e86:	8a a1       	ldd	r24, Y+34	; 0x22
    2e88:	9b a1       	ldd	r25, Y+35	; 0x23
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e8       	ldi	r20, 0x80	; 128
    2e90:	5f e3       	ldi	r21, 0x3F	; 63
    2e92:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e96:	88 23       	and	r24, r24
    2e98:	2c f4       	brge	.+10     	; 0x2ea4 <LCDInit+0x498>
		__ticks = 1;
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	9f 8f       	std	Y+31, r25	; 0x1f
    2ea0:	8e 8f       	std	Y+30, r24	; 0x1e
    2ea2:	3f c0       	rjmp	.+126    	; 0x2f22 <LCDInit+0x516>
	else if (__tmp > 65535)
    2ea4:	68 a1       	ldd	r22, Y+32	; 0x20
    2ea6:	79 a1       	ldd	r23, Y+33	; 0x21
    2ea8:	8a a1       	ldd	r24, Y+34	; 0x22
    2eaa:	9b a1       	ldd	r25, Y+35	; 0x23
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	3f ef       	ldi	r19, 0xFF	; 255
    2eb0:	4f e7       	ldi	r20, 0x7F	; 127
    2eb2:	57 e4       	ldi	r21, 0x47	; 71
    2eb4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2eb8:	18 16       	cp	r1, r24
    2eba:	4c f5       	brge	.+82     	; 0x2f0e <LCDInit+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ebc:	6c a1       	ldd	r22, Y+36	; 0x24
    2ebe:	7d a1       	ldd	r23, Y+37	; 0x25
    2ec0:	8e a1       	ldd	r24, Y+38	; 0x26
    2ec2:	9f a1       	ldd	r25, Y+39	; 0x27
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	40 e2       	ldi	r20, 0x20	; 32
    2eca:	51 e4       	ldi	r21, 0x41	; 65
    2ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	cd 01       	movw	r24, r26
    2ed8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	9f 8f       	std	Y+31, r25	; 0x1f
    2ee2:	8e 8f       	std	Y+30, r24	; 0x1e
    2ee4:	0f c0       	rjmp	.+30     	; 0x2f04 <LCDInit+0x4f8>
    2ee6:	88 ec       	ldi	r24, 0xC8	; 200
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	9d 8f       	std	Y+29, r25	; 0x1d
    2eec:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2eee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ef0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	f1 f7       	brne	.-4      	; 0x2ef2 <LCDInit+0x4e6>
    2ef6:	9d 8f       	std	Y+29, r25	; 0x1d
    2ef8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2efc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	9f 8f       	std	Y+31, r25	; 0x1f
    2f02:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f06:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	69 f7       	brne	.-38     	; 0x2ee6 <LCDInit+0x4da>
    2f0c:	24 c0       	rjmp	.+72     	; 0x2f56 <LCDInit+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0e:	68 a1       	ldd	r22, Y+32	; 0x20
    2f10:	79 a1       	ldd	r23, Y+33	; 0x21
    2f12:	8a a1       	ldd	r24, Y+34	; 0x22
    2f14:	9b a1       	ldd	r25, Y+35	; 0x23
    2f16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	9f 8f       	std	Y+31, r25	; 0x1f
    2f20:	8e 8f       	std	Y+30, r24	; 0x1e
    2f22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f24:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f26:	9b 8f       	std	Y+27, r25	; 0x1b
    2f28:	8a 8f       	std	Y+26, r24	; 0x1a
    2f2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	f1 f7       	brne	.-4      	; 0x2f2e <LCDInit+0x522>
    2f32:	9b 8f       	std	Y+27, r25	; 0x1b
    2f34:	8a 8f       	std	Y+26, r24	; 0x1a
    2f36:	0f c0       	rjmp	.+30     	; 0x2f56 <LCDInit+0x54a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f38:	69 a5       	ldd	r22, Y+41	; 0x29
    2f3a:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	88 a7       	std	Y+40, r24	; 0x28
    2f4a:	88 a5       	ldd	r24, Y+40	; 0x28
    2f4c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f4e:	89 8d       	ldd	r24, Y+25	; 0x19
    2f50:	8a 95       	dec	r24
    2f52:	f1 f7       	brne	.-4      	; 0x2f50 <LCDInit+0x544>
    2f54:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	CLEAR_E();
    2f56:	a8 e3       	ldi	r26, 0x38	; 56
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	e8 e3       	ldi	r30, 0x38	; 56
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	8f 7e       	andi	r24, 0xEF	; 239
    2f62:	8c 93       	st	X, r24
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	a0 e8       	ldi	r26, 0x80	; 128
    2f6a:	bf e3       	ldi	r27, 0x3F	; 63
    2f6c:	8d 8b       	std	Y+21, r24	; 0x15
    2f6e:	9e 8b       	std	Y+22, r25	; 0x16
    2f70:	af 8b       	std	Y+23, r26	; 0x17
    2f72:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f74:	6d 89       	ldd	r22, Y+21	; 0x15
    2f76:	7e 89       	ldd	r23, Y+22	; 0x16
    2f78:	8f 89       	ldd	r24, Y+23	; 0x17
    2f7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f7c:	2b ea       	ldi	r18, 0xAB	; 171
    2f7e:	3a ea       	ldi	r19, 0xAA	; 170
    2f80:	4a e2       	ldi	r20, 0x2A	; 42
    2f82:	50 e4       	ldi	r21, 0x40	; 64
    2f84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	89 8b       	std	Y+17, r24	; 0x11
    2f8e:	9a 8b       	std	Y+18, r25	; 0x12
    2f90:	ab 8b       	std	Y+19, r26	; 0x13
    2f92:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f94:	69 89       	ldd	r22, Y+17	; 0x11
    2f96:	7a 89       	ldd	r23, Y+18	; 0x12
    2f98:	8b 89       	ldd	r24, Y+19	; 0x13
    2f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	40 e8       	ldi	r20, 0x80	; 128
    2fa2:	5f e3       	ldi	r21, 0x3F	; 63
    2fa4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2fa8:	88 23       	and	r24, r24
    2faa:	1c f4       	brge	.+6      	; 0x2fb2 <LCDInit+0x5a6>
		__ticks = 1;
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	88 8b       	std	Y+16, r24	; 0x10
    2fb0:	91 c0       	rjmp	.+290    	; 0x30d4 <LCDInit+0x6c8>
	else if (__tmp > 255)
    2fb2:	69 89       	ldd	r22, Y+17	; 0x11
    2fb4:	7a 89       	ldd	r23, Y+18	; 0x12
    2fb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	4f e7       	ldi	r20, 0x7F	; 127
    2fc0:	53 e4       	ldi	r21, 0x43	; 67
    2fc2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	0c f0       	brlt	.+2      	; 0x2fcc <LCDInit+0x5c0>
    2fca:	7b c0       	rjmp	.+246    	; 0x30c2 <LCDInit+0x6b6>
	{
		_delay_ms(__us / 1000.0);
    2fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2fce:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	4a e7       	ldi	r20, 0x7A	; 122
    2fda:	54 e4       	ldi	r21, 0x44	; 68
    2fdc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	8c 87       	std	Y+12, r24	; 0x0c
    2fe6:	9d 87       	std	Y+13, r25	; 0x0d
    2fe8:	ae 87       	std	Y+14, r26	; 0x0e
    2fea:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fec:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fee:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ff0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ff2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	4a ef       	ldi	r20, 0xFA	; 250
    2ffa:	54 e4       	ldi	r21, 0x44	; 68
    2ffc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	88 87       	std	Y+8, r24	; 0x08
    3006:	99 87       	std	Y+9, r25	; 0x09
    3008:	aa 87       	std	Y+10, r26	; 0x0a
    300a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    300c:	68 85       	ldd	r22, Y+8	; 0x08
    300e:	79 85       	ldd	r23, Y+9	; 0x09
    3010:	8a 85       	ldd	r24, Y+10	; 0x0a
    3012:	9b 85       	ldd	r25, Y+11	; 0x0b
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e8       	ldi	r20, 0x80	; 128
    301a:	5f e3       	ldi	r21, 0x3F	; 63
    301c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3020:	88 23       	and	r24, r24
    3022:	2c f4       	brge	.+10     	; 0x302e <LCDInit+0x622>
		__ticks = 1;
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	9f 83       	std	Y+7, r25	; 0x07
    302a:	8e 83       	std	Y+6, r24	; 0x06
    302c:	3f c0       	rjmp	.+126    	; 0x30ac <LCDInit+0x6a0>
	else if (__tmp > 65535)
    302e:	68 85       	ldd	r22, Y+8	; 0x08
    3030:	79 85       	ldd	r23, Y+9	; 0x09
    3032:	8a 85       	ldd	r24, Y+10	; 0x0a
    3034:	9b 85       	ldd	r25, Y+11	; 0x0b
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	3f ef       	ldi	r19, 0xFF	; 255
    303a:	4f e7       	ldi	r20, 0x7F	; 127
    303c:	57 e4       	ldi	r21, 0x47	; 71
    303e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3042:	18 16       	cp	r1, r24
    3044:	4c f5       	brge	.+82     	; 0x3098 <LCDInit+0x68c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3046:	6c 85       	ldd	r22, Y+12	; 0x0c
    3048:	7d 85       	ldd	r23, Y+13	; 0x0d
    304a:	8e 85       	ldd	r24, Y+14	; 0x0e
    304c:	9f 85       	ldd	r25, Y+15	; 0x0f
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	40 e2       	ldi	r20, 0x20	; 32
    3054:	51 e4       	ldi	r21, 0x41	; 65
    3056:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	bc 01       	movw	r22, r24
    3060:	cd 01       	movw	r24, r26
    3062:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	9f 83       	std	Y+7, r25	; 0x07
    306c:	8e 83       	std	Y+6, r24	; 0x06
    306e:	0f c0       	rjmp	.+30     	; 0x308e <LCDInit+0x682>
    3070:	88 ec       	ldi	r24, 0xC8	; 200
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	9d 83       	std	Y+5, r25	; 0x05
    3076:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3078:	8c 81       	ldd	r24, Y+4	; 0x04
    307a:	9d 81       	ldd	r25, Y+5	; 0x05
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	f1 f7       	brne	.-4      	; 0x307c <LCDInit+0x670>
    3080:	9d 83       	std	Y+5, r25	; 0x05
    3082:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3084:	8e 81       	ldd	r24, Y+6	; 0x06
    3086:	9f 81       	ldd	r25, Y+7	; 0x07
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	9f 83       	std	Y+7, r25	; 0x07
    308c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    308e:	8e 81       	ldd	r24, Y+6	; 0x06
    3090:	9f 81       	ldd	r25, Y+7	; 0x07
    3092:	00 97       	sbiw	r24, 0x00	; 0
    3094:	69 f7       	brne	.-38     	; 0x3070 <LCDInit+0x664>
    3096:	24 c0       	rjmp	.+72     	; 0x30e0 <LCDInit+0x6d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3098:	68 85       	ldd	r22, Y+8	; 0x08
    309a:	79 85       	ldd	r23, Y+9	; 0x09
    309c:	8a 85       	ldd	r24, Y+10	; 0x0a
    309e:	9b 85       	ldd	r25, Y+11	; 0x0b
    30a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	9f 83       	std	Y+7, r25	; 0x07
    30aa:	8e 83       	std	Y+6, r24	; 0x06
    30ac:	8e 81       	ldd	r24, Y+6	; 0x06
    30ae:	9f 81       	ldd	r25, Y+7	; 0x07
    30b0:	9b 83       	std	Y+3, r25	; 0x03
    30b2:	8a 83       	std	Y+2, r24	; 0x02
    30b4:	8a 81       	ldd	r24, Y+2	; 0x02
    30b6:	9b 81       	ldd	r25, Y+3	; 0x03
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <LCDInit+0x6ac>
    30bc:	9b 83       	std	Y+3, r25	; 0x03
    30be:	8a 83       	std	Y+2, r24	; 0x02
    30c0:	0f c0       	rjmp	.+30     	; 0x30e0 <LCDInit+0x6d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30c2:	69 89       	ldd	r22, Y+17	; 0x11
    30c4:	7a 89       	ldd	r23, Y+18	; 0x12
    30c6:	8b 89       	ldd	r24, Y+19	; 0x13
    30c8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	88 8b       	std	Y+16, r24	; 0x10
    30d4:	88 89       	ldd	r24, Y+16	; 0x10
    30d6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	8a 95       	dec	r24
    30dc:	f1 f7       	brne	.-4      	; 0x30da <LCDInit+0x6ce>
    30de:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
    30e0:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
    30e4:	fe 01       	movw	r30, r28
    30e6:	e9 5a       	subi	r30, 0xA9	; 169
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 81       	ld	r24, Z
    30ec:	8c 60       	ori	r24, 0x0C	; 12
    30ee:	60 e0       	ldi	r22, 0x00	; 0
    30f0:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
    30f4:	88 e2       	ldi	r24, 0x28	; 40
    30f6:	60 e0       	ldi	r22, 0x00	; 0
    30f8:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>
}
    30fc:	c9 5a       	subi	r28, 0xA9	; 169
    30fe:	df 4f       	sbci	r29, 0xFF	; 255
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	1f 91       	pop	r17
    3110:	0f 91       	pop	r16
    3112:	08 95       	ret

00003114 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
    3114:	df 93       	push	r29
    3116:	cf 93       	push	r28
    3118:	00 d0       	rcall	.+0      	; 0x311a <LCDWriteString+0x6>
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
    311e:	9a 83       	std	Y+2, r25	; 0x02
    3120:	89 83       	std	Y+1, r24	; 0x01
    3122:	0b c0       	rjmp	.+22     	; 0x313a <LCDWriteString+0x26>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
    3124:	e9 81       	ldd	r30, Y+1	; 0x01
    3126:	fa 81       	ldd	r31, Y+2	; 0x02
    3128:	80 81       	ld	r24, Z
    312a:	61 e0       	ldi	r22, 0x01	; 1
    312c:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>
	msg++;
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	9a 81       	ldd	r25, Y+2	; 0x02
    3134:	01 96       	adiw	r24, 0x01	; 1
    3136:	9a 83       	std	Y+2, r25	; 0x02
    3138:	89 83       	std	Y+1, r24	; 0x01
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
    313a:	e9 81       	ldd	r30, Y+1	; 0x01
    313c:	fa 81       	ldd	r31, Y+2	; 0x02
    313e:	80 81       	ld	r24, Z
    3140:	88 23       	and	r24, r24
    3142:	81 f7       	brne	.-32     	; 0x3124 <LCDWriteString+0x10>
 {
	LCDData(*msg);
	msg++;
 }
}
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
    3156:	2d 97       	sbiw	r28, 0x0d	; 13
    3158:	0f b6       	in	r0, 0x3f	; 63
    315a:	f8 94       	cli
    315c:	de bf       	out	0x3e, r29	; 62
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	cd bf       	out	0x3d, r28	; 61
    3162:	9b 87       	std	Y+11, r25	; 0x0b
    3164:	8a 87       	std	Y+10, r24	; 0x0a
    3166:	7d 87       	std	Y+13, r23	; 0x0d
    3168:	6c 87       	std	Y+12, r22	; 0x0c
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
    316a:	85 e0       	ldi	r24, 0x05	; 5
    316c:	fe 01       	movw	r30, r28
    316e:	35 96       	adiw	r30, 0x05	; 5
    3170:	df 01       	movw	r26, r30
    3172:	28 2f       	mov	r18, r24
    3174:	1d 92       	st	X+, r1
    3176:	2a 95       	dec	r18
    3178:	e9 f7       	brne	.-6      	; 0x3174 <LCDWriteInt+0x26>
	int i=4,j=0;
    317a:	84 e0       	ldi	r24, 0x04	; 4
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	9c 83       	std	Y+4, r25	; 0x04
    3180:	8b 83       	std	Y+3, r24	; 0x03
    3182:	1a 82       	std	Y+2, r1	; 0x02
    3184:	19 82       	std	Y+1, r1	; 0x01
    3186:	1e c0       	rjmp	.+60     	; 0x31c4 <LCDWriteInt+0x76>
	while(val)
	{
	str[i]=val%10;
    3188:	eb 81       	ldd	r30, Y+3	; 0x03
    318a:	fc 81       	ldd	r31, Y+4	; 0x04
    318c:	8a 85       	ldd	r24, Y+10	; 0x0a
    318e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3190:	2a e0       	ldi	r18, 0x0A	; 10
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	b9 01       	movw	r22, r18
    3196:	0e 94 19 1a 	call	0x3432	; 0x3432 <__divmodhi4>
    319a:	28 2f       	mov	r18, r24
    319c:	ce 01       	movw	r24, r28
    319e:	05 96       	adiw	r24, 0x05	; 5
    31a0:	e8 0f       	add	r30, r24
    31a2:	f9 1f       	adc	r31, r25
    31a4:	20 83       	st	Z, r18
	val=val/10;
    31a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31aa:	2a e0       	ldi	r18, 0x0A	; 10
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	b9 01       	movw	r22, r18
    31b0:	0e 94 19 1a 	call	0x3432	; 0x3432 <__divmodhi4>
    31b4:	cb 01       	movw	r24, r22
    31b6:	9b 87       	std	Y+11, r25	; 0x0b
    31b8:	8a 87       	std	Y+10, r24	; 0x0a
	i--;
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	9c 81       	ldd	r25, Y+4	; 0x04
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	9c 83       	std	Y+4, r25	; 0x04
    31c2:	8b 83       	std	Y+3, r24	; 0x03

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
    31c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    31c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	f1 f6       	brne	.-68     	; 0x3188 <LCDWriteInt+0x3a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
    31cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    31ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    31d0:	af ef       	ldi	r26, 0xFF	; 255
    31d2:	8f 3f       	cpi	r24, 0xFF	; 255
    31d4:	9a 07       	cpc	r25, r26
    31d6:	89 f4       	brne	.+34     	; 0x31fa <LCDWriteInt+0xac>
    31d8:	05 c0       	rjmp	.+10     	; 0x31e4 <LCDWriteInt+0x96>
		while(str[j]==0) j++;
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	9a 81       	ldd	r25, Y+2	; 0x02
    31de:	01 96       	adiw	r24, 0x01	; 1
    31e0:	9a 83       	std	Y+2, r25	; 0x02
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	29 81       	ldd	r18, Y+1	; 0x01
    31e6:	3a 81       	ldd	r19, Y+2	; 0x02
    31e8:	ce 01       	movw	r24, r28
    31ea:	05 96       	adiw	r24, 0x05	; 5
    31ec:	fc 01       	movw	r30, r24
    31ee:	e2 0f       	add	r30, r18
    31f0:	f3 1f       	adc	r31, r19
    31f2:	80 81       	ld	r24, Z
    31f4:	88 23       	and	r24, r24
    31f6:	89 f3       	breq	.-30     	; 0x31da <LCDWriteInt+0x8c>
    31f8:	08 c0       	rjmp	.+16     	; 0x320a <LCDWriteInt+0xbc>
	else
		j=5-field_length;
    31fa:	85 e0       	ldi	r24, 0x05	; 5
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    3200:	3d 85       	ldd	r19, Y+13	; 0x0d
    3202:	82 1b       	sub	r24, r18
    3204:	93 0b       	sbc	r25, r19
    3206:	9a 83       	std	Y+2, r25	; 0x02
    3208:	89 83       	std	Y+1, r24	; 0x01

	if(val<0) LCDData('-');
    320a:	8a 85       	ldd	r24, Y+10	; 0x0a
    320c:	9b 85       	ldd	r25, Y+11	; 0x0b
    320e:	99 23       	and	r25, r25
    3210:	24 f4       	brge	.+8      	; 0x321a <LCDWriteInt+0xcc>
    3212:	8d e2       	ldi	r24, 0x2D	; 45
    3214:	61 e0       	ldi	r22, 0x01	; 1
    3216:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>
	for(i=j;i<5;i++)
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	9a 81       	ldd	r25, Y+2	; 0x02
    321e:	9c 83       	std	Y+4, r25	; 0x04
    3220:	8b 83       	std	Y+3, r24	; 0x03
    3222:	11 c0       	rjmp	.+34     	; 0x3246 <LCDWriteInt+0xf8>
	{
	LCDData(48+str[i]);
    3224:	2b 81       	ldd	r18, Y+3	; 0x03
    3226:	3c 81       	ldd	r19, Y+4	; 0x04
    3228:	ce 01       	movw	r24, r28
    322a:	05 96       	adiw	r24, 0x05	; 5
    322c:	fc 01       	movw	r30, r24
    322e:	e2 0f       	add	r30, r18
    3230:	f3 1f       	adc	r31, r19
    3232:	80 81       	ld	r24, Z
    3234:	80 5d       	subi	r24, 0xD0	; 208
    3236:	61 e0       	ldi	r22, 0x01	; 1
    3238:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
    323c:	8b 81       	ldd	r24, Y+3	; 0x03
    323e:	9c 81       	ldd	r25, Y+4	; 0x04
    3240:	01 96       	adiw	r24, 0x01	; 1
    3242:	9c 83       	std	Y+4, r25	; 0x04
    3244:	8b 83       	std	Y+3, r24	; 0x03
    3246:	8b 81       	ldd	r24, Y+3	; 0x03
    3248:	9c 81       	ldd	r25, Y+4	; 0x04
    324a:	85 30       	cpi	r24, 0x05	; 5
    324c:	91 05       	cpc	r25, r1
    324e:	54 f3       	brlt	.-44     	; 0x3224 <LCDWriteInt+0xd6>
	{
	LCDData(48+str[i]);
	}
}
    3250:	2d 96       	adiw	r28, 0x0d	; 13
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	f8 94       	cli
    3256:	de bf       	out	0x3e, r29	; 62
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	cd bf       	out	0x3d, r28	; 61
    325c:	cf 91       	pop	r28
    325e:	df 91       	pop	r29
    3260:	08 95       	ret

00003262 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
    3262:	df 93       	push	r29
    3264:	cf 93       	push	r28
    3266:	00 d0       	rcall	.+0      	; 0x3268 <LCDGotoXY+0x6>
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	89 83       	std	Y+1, r24	; 0x01
    326e:	6a 83       	std	Y+2, r22	; 0x02
 if(x<40)
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	88 32       	cpi	r24, 0x28	; 40
    3274:	68 f4       	brcc	.+26     	; 0x3290 <LCDGotoXY+0x2e>
 {
  if(y) x|=0b01000000;
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	88 23       	and	r24, r24
    327a:	19 f0       	breq	.+6      	; 0x3282 <LCDGotoXY+0x20>
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	80 64       	ori	r24, 0x40	; 64
    3280:	89 83       	std	Y+1, r24	; 0x01
  x|=0b10000000;
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	80 68       	ori	r24, 0x80	; 128
    3286:	89 83       	std	Y+1, r24	; 0x01
  LCDCmd(x);
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	60 e0       	ldi	r22, 0x00	; 0
    328c:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>
  }
}
    3290:	0f 90       	pop	r0
    3292:	0f 90       	pop	r0
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	08 95       	ret

0000329a <Wait>:
between messages given to user
so that he/she gets time to read them

***********************************/
void Wait()
{
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	00 d0       	rcall	.+0      	; 0x32a0 <Wait+0x6>
    32a0:	0f 92       	push	r0
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;

	for(i=0;i<100;i++)
    32a6:	1b 82       	std	Y+3, r1	; 0x03
    32a8:	0b c0       	rjmp	.+22     	; 0x32c0 <Wait+0x26>
    32aa:	1a 82       	std	Y+2, r1	; 0x02
    32ac:	19 82       	std	Y+1, r1	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	9a 81       	ldd	r25, Y+2	; 0x02
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	f1 f7       	brne	.-4      	; 0x32b2 <Wait+0x18>
    32b6:	9a 83       	std	Y+2, r25	; 0x02
    32b8:	89 83       	std	Y+1, r24	; 0x01
    32ba:	8b 81       	ldd	r24, Y+3	; 0x03
    32bc:	8f 5f       	subi	r24, 0xFF	; 255
    32be:	8b 83       	std	Y+3, r24	; 0x03
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	84 36       	cpi	r24, 0x64	; 100
    32c4:	90 f3       	brcs	.-28     	; 0x32aa <Wait+0x10>
		_delay_loop_2(0);
}
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	cf 91       	pop	r28
    32ce:	df 91       	pop	r29
    32d0:	08 95       	ret

000032d2 <main>:

int main()
{
    32d2:	df 93       	push	r29
    32d4:	cf 93       	push	r28
    32d6:	00 d0       	rcall	.+0      	; 0x32d8 <main+0x6>
    32d8:	00 d0       	rcall	.+0      	; 0x32da <main+0x8>
    32da:	0f 92       	push	r0
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
	//Varriables
	uint8_t failed;
	unsigned int address;

	//Initialize LCD
	LCDInit(LS_BLINK);
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <LCDInit>

	//Init EEPROM
	EEOpen();
    32e6:	0e 94 47 06 	call	0xc8e	; 0xc8e <EEOpen>
    32ea:	1a 82       	std	Y+2, r1	; 0x02
    32ec:	19 82       	std	Y+1, r1	; 0x01
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	9a 81       	ldd	r25, Y+2	; 0x02
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <main+0x20>
    32f6:	9a 83       	std	Y+2, r25	; 0x02
    32f8:	89 83       	std	Y+1, r24	; 0x01

	_delay_loop_2(0);
	
	LCDClear();
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	60 e0       	ldi	r22, 0x00	; 0
    32fe:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>
	LCDWriteString("External EEPROM");
    3302:	80 e6       	ldi	r24, 0x60	; 96
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCDWriteString>
	LCDWriteStringXY(0,1,"Test");
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	61 e0       	ldi	r22, 0x01	; 1
    330e:	0e 94 31 19 	call	0x3262	; 0x3262 <LCDGotoXY>
    3312:	80 e7       	ldi	r24, 0x70	; 112
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCDWriteString>

	Wait();
    331a:	0e 94 4d 19 	call	0x329a	; 0x329a <Wait>

	LCDClear();
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>
	LCDWriteString("Writting...");
    3326:	85 e7       	ldi	r24, 0x75	; 117
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCDWriteString>

	//Fill whole eeprom 8KB (8192 bytes)
	//with number 7
	failed=0;
    332e:	1d 82       	std	Y+5, r1	; 0x05
	for(address=0;address<8192;address++)
    3330:	1c 82       	std	Y+4, r1	; 0x04
    3332:	1b 82       	std	Y+3, r1	; 0x03
    3334:	27 c0       	rjmp	.+78     	; 0x3384 <main+0xb2>
	{
		if(EEWriteByte(address,7)==0)
    3336:	8b 81       	ldd	r24, Y+3	; 0x03
    3338:	9c 81       	ldd	r25, Y+4	; 0x04
    333a:	67 e0       	ldi	r22, 0x07	; 7
    333c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <EEWriteByte>
    3340:	88 23       	and	r24, r24
    3342:	d9 f4       	brne	.+54     	; 0x337a <main+0xa8>
		{
			//Write Failed
			LCDClear();
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	60 e0       	ldi	r22, 0x00	; 0
    3348:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>
			LCDWriteString("Write Failed !");
    334c:	81 e8       	ldi	r24, 0x81	; 129
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCDWriteString>
			LCDWriteStringXY(0,1,"Addess = ");
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	61 e0       	ldi	r22, 0x01	; 1
    3358:	0e 94 31 19 	call	0x3262	; 0x3262 <LCDGotoXY>
    335c:	80 e9       	ldi	r24, 0x90	; 144
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCDWriteString>
			LCDWriteInt(address,4);
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	9c 81       	ldd	r25, Y+4	; 0x04
    3368:	64 e0       	ldi	r22, 0x04	; 4
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	0e 94 a7 18 	call	0x314e	; 0x314e <LCDWriteInt>
			failed=1;
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	8d 83       	std	Y+5, r24	; 0x05
			Wait();
    3374:	0e 94 4d 19 	call	0x329a	; 0x329a <Wait>
    3378:	0b c0       	rjmp	.+22     	; 0x3390 <main+0xbe>
	LCDWriteString("Writting...");

	//Fill whole eeprom 8KB (8192 bytes)
	//with number 7
	failed=0;
	for(address=0;address<8192;address++)
    337a:	8b 81       	ldd	r24, Y+3	; 0x03
    337c:	9c 81       	ldd	r25, Y+4	; 0x04
    337e:	01 96       	adiw	r24, 0x01	; 1
    3380:	9c 83       	std	Y+4, r25	; 0x04
    3382:	8b 83       	std	Y+3, r24	; 0x03
    3384:	8b 81       	ldd	r24, Y+3	; 0x03
    3386:	9c 81       	ldd	r25, Y+4	; 0x04
    3388:	20 e2       	ldi	r18, 0x20	; 32
    338a:	80 30       	cpi	r24, 0x00	; 0
    338c:	92 07       	cpc	r25, r18
    338e:	98 f2       	brcs	.-90     	; 0x3336 <main+0x64>
			Wait();
			break;
		}
	}

	LCDClear();
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	60 e0       	ldi	r22, 0x00	; 0
    3394:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>

	if(!failed)
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	88 23       	and	r24, r24
    339c:	21 f4       	brne	.+8      	; 0x33a6 <main+0xd4>
		LCDWriteString("Written 8192bytes");
    339e:	8a e9       	ldi	r24, 0x9A	; 154
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCDWriteString>

	Wait();
    33a6:	0e 94 4d 19 	call	0x329a	; 0x329a <Wait>

	LCDClear();
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	60 e0       	ldi	r22, 0x00	; 0
    33ae:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>
	LCDWriteString("Verifying ...");
    33b2:	8c ea       	ldi	r24, 0xAC	; 172
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCDWriteString>

	//Check if every location in EEPROM has 
	//number 7 stored
	failed=0;
    33ba:	1d 82       	std	Y+5, r1	; 0x05
	for(address=0;address<8192;address++)
    33bc:	1c 82       	std	Y+4, r1	; 0x04
    33be:	1b 82       	std	Y+3, r1	; 0x03
    33c0:	26 c0       	rjmp	.+76     	; 0x340e <main+0x13c>
	{
		if(EEReadByte(address)!=7)
    33c2:	8b 81       	ldd	r24, Y+3	; 0x03
    33c4:	9c 81       	ldd	r25, Y+4	; 0x04
    33c6:	0e 94 6b 07 	call	0xed6	; 0xed6 <EEReadByte>
    33ca:	87 30       	cpi	r24, 0x07	; 7
    33cc:	d9 f0       	breq	.+54     	; 0x3404 <main+0x132>
		{
			//Failed !
			LCDClear();
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	60 e0       	ldi	r22, 0x00	; 0
    33d2:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>
			LCDWriteString("Verify Failed");
    33d6:	8a eb       	ldi	r24, 0xBA	; 186
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCDWriteString>
			LCDWriteStringXY(0,1,"Addess = ");
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	61 e0       	ldi	r22, 0x01	; 1
    33e2:	0e 94 31 19 	call	0x3262	; 0x3262 <LCDGotoXY>
    33e6:	80 e9       	ldi	r24, 0x90	; 144
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCDWriteString>
			LCDWriteInt(address,4);
    33ee:	8b 81       	ldd	r24, Y+3	; 0x03
    33f0:	9c 81       	ldd	r25, Y+4	; 0x04
    33f2:	64 e0       	ldi	r22, 0x04	; 4
    33f4:	70 e0       	ldi	r23, 0x00	; 0
    33f6:	0e 94 a7 18 	call	0x314e	; 0x314e <LCDWriteInt>
			failed=1;
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	8d 83       	std	Y+5, r24	; 0x05
			Wait();
    33fe:	0e 94 4d 19 	call	0x329a	; 0x329a <Wait>
    3402:	0b c0       	rjmp	.+22     	; 0x341a <main+0x148>
	LCDWriteString("Verifying ...");

	//Check if every location in EEPROM has 
	//number 7 stored
	failed=0;
	for(address=0;address<8192;address++)
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	9c 81       	ldd	r25, Y+4	; 0x04
    3408:	01 96       	adiw	r24, 0x01	; 1
    340a:	9c 83       	std	Y+4, r25	; 0x04
    340c:	8b 83       	std	Y+3, r24	; 0x03
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	9c 81       	ldd	r25, Y+4	; 0x04
    3412:	20 e2       	ldi	r18, 0x20	; 32
    3414:	80 30       	cpi	r24, 0x00	; 0
    3416:	92 07       	cpc	r25, r18
    3418:	a0 f2       	brcs	.-88     	; 0x33c2 <main+0xf0>
			Wait();
			break;
		}
	}

	if(!failed)
    341a:	8d 81       	ldd	r24, Y+5	; 0x05
    341c:	88 23       	and	r24, r24
    341e:	41 f4       	brne	.+16     	; 0x3430 <main+0x15e>
	{
		//We have Done it !!!
		LCDClear();
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	60 e0       	ldi	r22, 0x00	; 0
    3424:	0e 94 32 08 	call	0x1064	; 0x1064 <LCDByte>
		LCDWriteString("Write Success !");
    3428:	88 ec       	ldi	r24, 0xC8	; 200
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCDWriteString>
    3430:	ff cf       	rjmp	.-2      	; 0x3430 <main+0x15e>

00003432 <__divmodhi4>:
    3432:	97 fb       	bst	r25, 7
    3434:	09 2e       	mov	r0, r25
    3436:	07 26       	eor	r0, r23
    3438:	0a d0       	rcall	.+20     	; 0x344e <__divmodhi4_neg1>
    343a:	77 fd       	sbrc	r23, 7
    343c:	04 d0       	rcall	.+8      	; 0x3446 <__divmodhi4_neg2>
    343e:	0c d0       	rcall	.+24     	; 0x3458 <__udivmodhi4>
    3440:	06 d0       	rcall	.+12     	; 0x344e <__divmodhi4_neg1>
    3442:	00 20       	and	r0, r0
    3444:	1a f4       	brpl	.+6      	; 0x344c <__divmodhi4_exit>

00003446 <__divmodhi4_neg2>:
    3446:	70 95       	com	r23
    3448:	61 95       	neg	r22
    344a:	7f 4f       	sbci	r23, 0xFF	; 255

0000344c <__divmodhi4_exit>:
    344c:	08 95       	ret

0000344e <__divmodhi4_neg1>:
    344e:	f6 f7       	brtc	.-4      	; 0x344c <__divmodhi4_exit>
    3450:	90 95       	com	r25
    3452:	81 95       	neg	r24
    3454:	9f 4f       	sbci	r25, 0xFF	; 255
    3456:	08 95       	ret

00003458 <__udivmodhi4>:
    3458:	aa 1b       	sub	r26, r26
    345a:	bb 1b       	sub	r27, r27
    345c:	51 e1       	ldi	r21, 0x11	; 17
    345e:	07 c0       	rjmp	.+14     	; 0x346e <__udivmodhi4_ep>

00003460 <__udivmodhi4_loop>:
    3460:	aa 1f       	adc	r26, r26
    3462:	bb 1f       	adc	r27, r27
    3464:	a6 17       	cp	r26, r22
    3466:	b7 07       	cpc	r27, r23
    3468:	10 f0       	brcs	.+4      	; 0x346e <__udivmodhi4_ep>
    346a:	a6 1b       	sub	r26, r22
    346c:	b7 0b       	sbc	r27, r23

0000346e <__udivmodhi4_ep>:
    346e:	88 1f       	adc	r24, r24
    3470:	99 1f       	adc	r25, r25
    3472:	5a 95       	dec	r21
    3474:	a9 f7       	brne	.-22     	; 0x3460 <__udivmodhi4_loop>
    3476:	80 95       	com	r24
    3478:	90 95       	com	r25
    347a:	bc 01       	movw	r22, r24
    347c:	cd 01       	movw	r24, r26
    347e:	08 95       	ret

00003480 <__prologue_saves__>:
    3480:	2f 92       	push	r2
    3482:	3f 92       	push	r3
    3484:	4f 92       	push	r4
    3486:	5f 92       	push	r5
    3488:	6f 92       	push	r6
    348a:	7f 92       	push	r7
    348c:	8f 92       	push	r8
    348e:	9f 92       	push	r9
    3490:	af 92       	push	r10
    3492:	bf 92       	push	r11
    3494:	cf 92       	push	r12
    3496:	df 92       	push	r13
    3498:	ef 92       	push	r14
    349a:	ff 92       	push	r15
    349c:	0f 93       	push	r16
    349e:	1f 93       	push	r17
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
    34a8:	ca 1b       	sub	r28, r26
    34aa:	db 0b       	sbc	r29, r27
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	cd bf       	out	0x3d, r28	; 61
    34b6:	09 94       	ijmp

000034b8 <__epilogue_restores__>:
    34b8:	2a 88       	ldd	r2, Y+18	; 0x12
    34ba:	39 88       	ldd	r3, Y+17	; 0x11
    34bc:	48 88       	ldd	r4, Y+16	; 0x10
    34be:	5f 84       	ldd	r5, Y+15	; 0x0f
    34c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    34c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    34c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    34c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    34c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    34ca:	b9 84       	ldd	r11, Y+9	; 0x09
    34cc:	c8 84       	ldd	r12, Y+8	; 0x08
    34ce:	df 80       	ldd	r13, Y+7	; 0x07
    34d0:	ee 80       	ldd	r14, Y+6	; 0x06
    34d2:	fd 80       	ldd	r15, Y+5	; 0x05
    34d4:	0c 81       	ldd	r16, Y+4	; 0x04
    34d6:	1b 81       	ldd	r17, Y+3	; 0x03
    34d8:	aa 81       	ldd	r26, Y+2	; 0x02
    34da:	b9 81       	ldd	r27, Y+1	; 0x01
    34dc:	ce 0f       	add	r28, r30
    34de:	d1 1d       	adc	r29, r1
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	ed 01       	movw	r28, r26
    34ec:	08 95       	ret

000034ee <_exit>:
    34ee:	f8 94       	cli

000034f0 <__stop_program>:
    34f0:	ff cf       	rjmp	.-2      	; 0x34f0 <__stop_program>
